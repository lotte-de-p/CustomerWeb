import { cleanStylesFromDom } from '@telenet/ng-lib-shared';
import { CafeRawCustomerproductholdingMapper } from './cafe-raw-customerproductholding.mapper';
import { TestBed } from '@angular/core/testing';
import { CafeRawCustomerproductholdingsInterface } from '../interfaces/cafe-raw-customerproductholding.interface';
import { Product } from '../../product-holding/models/product.model';
import { CafeRawCustomerproductholdingModel } from '../models/cafe-raw-customerproductholding.model';

const mockRawCustomerproductHoldingsJson: CafeRawCustomerproductholdingsInterface = require('../../../../../../../../../fixtures/http/cafe/product-holding/raw-customerproductholding-with-rawomapi.json');
const telenetDigitalTv = 'Telenet Digital TV';
const digitaalZenderPacketLabel = 'tv.feature.digital.interactive.package.digitaalzenderpakket';
const defaultSpecUrl = 'https://api.dvp.telenet.be/omapi/public/product/285';
describe('RawCustomerproductholdingMapper', () => {
  let rawCustomerproductholdingMapper: CafeRawCustomerproductholdingMapper;
  let rawCustomerproductholding: CafeRawCustomerproductholdingModel[];

  beforeEach(() => {
    rawCustomerproductholdingMapper = TestBed.inject(CafeRawCustomerproductholdingMapper);
    rawCustomerproductholding = rawCustomerproductholdingMapper.toModel(mockRawCustomerproductHoldingsJson);
  });

  describe('toModel', () => {
    it('should correctly map response of customerproductholding', function () {
      expect(rawCustomerproductholding[0].identifier).toBe('DTV2710555');
      expect(rawCustomerproductholding[1].identifier).toBe('WIGOHOME_44375989');
      expect(rawCustomerproductholding[2].identifier).toBe('IMTTK_43537707');
      expect(rawCustomerproductholding[0].customerproductid).toBe('158495352');
      expect(rawCustomerproductholding[0].accountnumber).toBe('72093824');
      expect(rawCustomerproductholding[1].accountnumber).toBe('72093824');
      expect(rawCustomerproductholding[2].accountnumber).toBe('72093824');
      expect(rawCustomerproductholding[0].label).toBe(digitaalZenderPacketLabel);
      expect(rawCustomerproductholding[1].label).toBe('WIGOHOME');
      expect(rawCustomerproductholding[2].label).toBe('IMTTK');
      expect(rawCustomerproductholding[0].rateclassid).toBe('44');
      expect(rawCustomerproductholding[0].rateclassdescription).toBe(telenetDigitalTv);
      expect(rawCustomerproductholding[0].specurl).toBe(defaultSpecUrl);
      expect(rawCustomerproductholding[1].specurl).toBe('https://api.dvp.telenet.be/omapi/public/product/20046');
      expect(rawCustomerproductholding[2].specurl).toBe('https://api.dvp.telenet.be/omapi/public/product/71');
      expect(rawCustomerproductholding[1].products[0].identifier).toBe('am15380');
      expect(rawCustomerproductholding[1].products[1].identifier).toBe('050658323');
      expect(rawCustomerproductholding[1].products[2].identifier).toBe('DTV4048252');
      expect(rawCustomerproductholding[2].products[0].identifier).toBe('DTV332063');
      expect(rawCustomerproductholding[2].products[1].identifier).toBe('093296194');
      expect(rawCustomerproductholding[2].products[2].identifier).toBe('u935524');
      expect(rawCustomerproductholding[1].products[0].customerproductid).toBe('339322002');
      expect(rawCustomerproductholding[1].products[1].customerproductid).toBe('339322016');
      expect(rawCustomerproductholding[1].products[2].customerproductid).toBe('339321992');
      expect(rawCustomerproductholding[2].products[0].customerproductid).toBe('50968122');
      expect(rawCustomerproductholding[2].products[1].customerproductid).toBe('92264561');
      expect(rawCustomerproductholding[2].products[2].customerproductid).toBe('289678661');
      expect(rawCustomerproductholding[1].products[0].accountnumber).toBe('72093824');
      expect(rawCustomerproductholding[1].products[1].accountnumber).toBe('72093824');
      expect(rawCustomerproductholding[1].products[2].accountnumber).toBe('72093824');
      expect(rawCustomerproductholding[2].products[0].accountnumber).toBe('72093824');
      expect(rawCustomerproductholding[2].products[1].accountnumber).toBe('72093824');
      expect(rawCustomerproductholding[2].products[2].accountnumber).toBe('72093824');
      expect(rawCustomerproductholding[1].products[0].label).toBe('internet.line.fmc.wigohome');
      expect(rawCustomerproductholding[1].products[1].label).toBe('telephony.line.basic');
      expect(rawCustomerproductholding[1].products[2].label).toBe(digitaalZenderPacketLabel);
      expect(rawCustomerproductholding[2].products[0].label).toBe(digitaalZenderPacketLabel);
      expect(rawCustomerproductholding[2].products[1].label).toBe('telephony.line.basic');
      expect(rawCustomerproductholding[2].products[2].label).toBe('internet.line.sun.smallpipe');
      expect(rawCustomerproductholding[1].products[0].rateclassid).toBe('22');
      expect(rawCustomerproductholding[1].products[1].rateclassid).toBe('51');
      expect(rawCustomerproductholding[1].products[2].rateclassid).toBe('44');
      expect(rawCustomerproductholding[2].products[0].rateclassid).toBe('44');
      expect(rawCustomerproductholding[2].products[1].rateclassid).toBe('51');
      expect(rawCustomerproductholding[2].products[2].rateclassid).toBe('22');
      expect(rawCustomerproductholding[1].products[0].rateclassdescription).toBe('Telenet Internet');
      expect(rawCustomerproductholding[1].products[1].rateclassdescription).toBe('Telenet FreePhone Europe');
      expect(rawCustomerproductholding[1].products[2].rateclassdescription).toBe(telenetDigitalTv);
      expect(rawCustomerproductholding[2].products[0].rateclassdescription).toBe(telenetDigitalTv);
      expect(rawCustomerproductholding[2].products[1].rateclassdescription).toBe('Telenet FreePhone Europe');
      expect(rawCustomerproductholding[2].products[2].rateclassdescription).toBe('Telenet Internet');
      expect(rawCustomerproductholding[1].products[0].specurl).toBe(
        'https://api.dvp.telenet.be/omapi/public/product/20799'
      );
      expect(rawCustomerproductholding[1].products[1].specurl).toBe(
        'https://api.dvp.telenet.be/omapi/public/product/672'
      );
      expect(rawCustomerproductholding[1].products[2].specurl).toBe(defaultSpecUrl);
      expect(rawCustomerproductholding[2].products[0].specurl).toBe(defaultSpecUrl);
      expect(rawCustomerproductholding[2].products[1].specurl).toBe(
        'https://api.dvp.telenet.be/omapi/public/product/672'
      );
      expect(rawCustomerproductholding[2].products[2].specurl).toBe(
        'https://api.dvp.telenet.be/omapi/public/product/588'
      );
      expect(rawCustomerproductholding[1].products[1].options[0].specurl).toBe(
        'https://api.dvp.telenet.be/omapi/public/product/151'
      );
      expect(rawCustomerproductholding[1].products[2].options[0].specurl).toBe(
        'https://api.dvp.telenet.be/omapi/public/product/585'
      );
      expect(rawCustomerproductholding[2].products[0].options[0].specurl).toBe(
        'https://api.dvp.telenet.be/omapi/public/product/277'
      );
      expect(rawCustomerproductholding[2].products[1].options[0].specurl).toBe(
        'https://api.dvp.telenet.be/omapi/public/product/150'
      );
      expect(rawCustomerproductholding[2].products[2].options[0].specurl).toBe(
        'https://api.dvp.telenet.be/omapi/public/product/114'
      );
      expect(rawCustomerproductholding[2].products[2].options[1].specurl).toBe(
        'https://api.dvp.telenet.be/omapi/public/product/301'
      );
      expect(rawCustomerproductholding[1].products[1].options[0].label).toBe('telephony.linetype.bijkomendelijn');
      expect(rawCustomerproductholding[1].products[2].options[0].label).toBe(
        'tv.digitaltv.package.popcornpacks.popcorn'
      );
      expect(rawCustomerproductholding[2].products[0].options[0].label).toBe(
        'tv.digitaltv.package.primepacks.primesportsfilmpack'
      );
      expect(rawCustomerproductholding[2].products[1].options[0].label).toBe('telephony.linetype.eerstelijn');
      expect(rawCustomerproductholding[2].products[2].options[0].label).toBe('internet.feature.domein.be');
      expect(rawCustomerproductholding[2].products[2].options[1].label).toBe('internet.feature.tsp');
      expect(rawCustomerproductholding[0].address.street).toBe('Hazel');
      expect(rawCustomerproductholding[1].address.street).toBe('Zeedijk');
      expect(rawCustomerproductholding[2].address.street).toBe('Hazel');
      expect(rawCustomerproductholding[0].address.postalcode).toBe('9340');
      expect(rawCustomerproductholding[1].address.postalcode).toBe('8370');
      expect(rawCustomerproductholding[2].address.postalcode).toBe('9340');
      expect(rawCustomerproductholding[0].address.municipality).toBe('Lede');
      expect(rawCustomerproductholding[1].address.municipality).toBe('Blankenberge');
      expect(rawCustomerproductholding[2].address.municipality).toBe('Lede');
      expect(rawCustomerproductholding[0].address.country).toBe('België');
      expect(rawCustomerproductholding[1].address.country).toBe('België');
      expect(rawCustomerproductholding[2].address.country).toBe('België');
      expect(rawCustomerproductholding[0].address.housenr).toBe('63');
      expect(rawCustomerproductholding[1].address.housenr).toBe('190');
      expect(rawCustomerproductholding[2].address.housenr).toBe('63');
      expect(rawCustomerproductholding[1].address.floor).toBe('3');
      expect(rawCustomerproductholding[1].products[0].address.postalcode).toBe('2800');
      expect(rawCustomerproductholding[1].products[0].address.boxnr).toBe('404');
      expect(rawCustomerproductholding[1].products[0].address.subhousenr).toBe('44');
      expect(rawCustomerproductholding[1].address.addressid).toBe('6cc7yy007q-9w6brv0n6l');
      expect(rawCustomerproductholding[2].address.addressid).toBe('6cc7yy007q-9x3xae07dk');
    });

    it('should correctly map response for rawOmapi', function () {
      expect(rawCustomerproductholding[0].rawOmapi.product.productid).toBe(285);
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.productid).toBe(20799);
      expect(rawCustomerproductholding[2].products[2].rawOmapi.product.productid).toBe(588);
      expect(rawCustomerproductholding[0].rawOmapi.product.labelkey).toBe(
        'tv.feature.digital.interactive.package.digitaalzenderpakket'
      );
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.labelkey).toBe('internet.line.fmc.wigohome');
      expect(rawCustomerproductholding[2].products[2].rawOmapi.product.labelkey).toBe('internet.line.sun.smallpipe');
      expect(rawCustomerproductholding[0].rawOmapi.product.visible).toBe(true);
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.visible).toBe(true);
      expect(rawCustomerproductholding[2].products[2].rawOmapi.product.visible).toBe(false);
      expect(rawCustomerproductholding[0].rawOmapi.product.family).toBe('NOT_APPLICABLE');
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.family).toBe('FMC_RMD');
      expect(rawCustomerproductholding[2].products[2].rawOmapi.product.family).toBe('NOT_APPLICABLE');
      expect(rawCustomerproductholding[0].rawOmapi.product.producttype).toBe('PRODUCT');
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.producttype).toBe('PRODUCT');
      expect(rawCustomerproductholding[2].products[2].rawOmapi.product.producttype).toBe('PRODUCT');
      expect(rawCustomerproductholding[0].rawOmapi.product.weight).toBe(2);
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.weight).toBe(2);
      expect(rawCustomerproductholding[2].products[2].rawOmapi.product.weight).toBe(1);
      expect(rawCustomerproductholding[2].products[2].rawOmapi.product.externalProductCode).toBe(123);
      expect(rawCustomerproductholding[2].products[2].rawOmapi.product.salesofferingid).toBe(111);
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.category[0]).toBe('category_one');
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.customercategories[1]).toBe(
        'customercategories_two'
      );
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.subcategory?.name).toBe('SubCategoryOne');
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.subcategory?.weight).toBe(2);
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.subcategory?.mutualexclusion).toBe(true);
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.subcategory?.localizedcontent[1].locale).toBe(
        'fr'
      );
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.visibilityrules?.conditionalvisibility).toBe(
        true
      );
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.unlimited).toBe(true);
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.priceType).toBe('Abc');
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.rates[0].type).toBe('Abc');
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.rates[0].unit).toBe('3');
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.rates[1].cost).toBe('30');
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.rates[1].currency).toBe('Euro');
      expect(rawCustomerproductholding[0].rawOmapi.product.apps[0].labelkey).toBe('support');
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.apps[0].labelkey).toBe('support');
      expect(rawCustomerproductholding[2].products[2].rawOmapi.product.apps[0].labelkey).toBe('oneapp');
      expect(rawCustomerproductholding[2].products[2].rawOmapi.product.apps[1].labelkey).toBe('twoapp');
      expect(rawCustomerproductholding[0].rawOmapi.product.services[0].labelkey).toBe('watch.dtv.dtv');
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.services[0].labelkey).toBe(
        'surf.fixedinternet.wigo'
      );
      expect(rawCustomerproductholding[2].products[2].rawOmapi.product.services[0].labelkey).toBe('surf.fixedinternet');
      expect(rawCustomerproductholding[0].rawOmapi.product.services[0].servicetype).toBe(Product.DTV);
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.services[0].servicetype).toBe(
        Product.FIXED_INTERNET
      );
      expect(rawCustomerproductholding[2].products[2].rawOmapi.product.services[0].servicetype).toBe(
        Product.FIXED_INTERNET
      );
      expect(rawCustomerproductholding[0].rawOmapi.product.services[0].experience.experiencetype).toBe('WATCH');
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.services[0].experience.experiencetype).toBe(
        'SURF'
      );
      expect(rawCustomerproductholding[2].products[2].rawOmapi.product.services[0].experience.experiencetype).toBe(
        'SURF'
      );
      expect(rawCustomerproductholding[0].rawOmapi.product.services[0].experience.weight).toBe(30);
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.services[0].experience.weight).toBe(10);
      expect(rawCustomerproductholding[2].products[2].rawOmapi.product.services[0].experience.weight).toBe(10);
      expect(rawCustomerproductholding[0].rawOmapi.product.services[0].weight).toBe(0);
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.services[0].weight).toBe(0);
      expect(rawCustomerproductholding[2].products[2].rawOmapi.product.services[0].weight).toBe(0);
      expect(rawCustomerproductholding[0].rawOmapi.product.services[0].specifications[1].labelkey).toBe(
        'spec.dtv.optionalpackages'
      );
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.services[0].specifications[2].labelkey).toBe(
        'spec.fixedinternet.volume.download.fup'
      );
      expect(rawCustomerproductholding[2].products[2].rawOmapi.product.services[0].specifications[3].labelkey).toBe(
        'spec.fixedinternet.speed.download'
      );
      expect(rawCustomerproductholding[0].rawOmapi.product.services[0].specifications[2].value).toBe('INCLUDED');
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.services[0].specifications[5].value).toBe('300');
      expect(rawCustomerproductholding[2].products[2].rawOmapi.product.services[0].specifications[0].value).toBe('200');
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.services[0].specifications[0].unit).toBe('MB');
      expect(rawCustomerproductholding[2].products[2].rawOmapi.product.services[0].specifications[1].unit).toBe('GB');
      expect(rawCustomerproductholding[0].rawOmapi.product.services[0].specifications[0].visible).toBe(true);
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.services[0].specifications[1].visible).toBe(
        true
      );
      expect(rawCustomerproductholding[2].products[2].rawOmapi.product.services[0].specifications[2].visible).toBe(
        true
      );
      expect(rawCustomerproductholding[0].rawOmapi.product.services[0].specifications[0].weight).toBe(2);
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.services[0].specifications[0].weight).toBe(6);
      expect(rawCustomerproductholding[2].products[2].rawOmapi.product.services[0].specifications[0].weight).toBe(3);
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.services[0].specifications[1].maxvalue).toBe(10);
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.services[0].specifications[1].minvalue).toBe(1);
      expect(
        rawCustomerproductholding[1].products[0].rawOmapi.product.services[0].specifications[1].localizedcontent[0]
          .locale
      ).toBe('nl');
      expect(rawCustomerproductholding[0].rawOmapi.product.characteristics?.productsegment).toBe('ALL');
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.characteristics?.productsegment).toBe('RMD');
      expect(rawCustomerproductholding[2].products[2].rawOmapi.product.characteristics?.productsegment).toBe('ALL');
      expect(rawCustomerproductholding[0].rawOmapi.product.characteristics?.productgroup).toBe('OTHER');
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.characteristics?.productgroup).toBe('FMC');
      expect(rawCustomerproductholding[2].products[2].rawOmapi.product.characteristics?.productgroup).toBe('OTHER');
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.characteristics?.service_category).toBe('FUP');
      expect(
        rawCustomerproductholding[1].products[0].rawOmapi.product.characteristics?.alert_threshold_marker.unit
      ).toBe('GB');
      expect(
        rawCustomerproductholding[1].products[0].rawOmapi.product.characteristics?.alert_threshold_marker.value
      ).toBe('750');
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.characteristics?.detailed_scale.unit).toBe('GB');
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.characteristics?.detailed_scale.value).toBe(
        '25'
      );
      expect(rawCustomerproductholding[2].products[2].rawOmapi.product.characteristics?.detailed_scale.unit).toBe('GB');
      expect(rawCustomerproductholding[2].products[2].rawOmapi.product.characteristics?.detailed_scale.value).toBe(
        '10'
      );
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.characteristics?.initial_threshold_1.unit).toBe(
        'GB'
      );
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.characteristics?.initial_threshold_1.value).toBe(
        '225'
      );
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.characteristics?.initial_threshold_2.unit).toBe(
        'GB'
      );
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.characteristics?.initial_threshold_2.value).toBe(
        '1050'
      );
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.characteristics?.alert_threshold.unit).toBe(
        'GB'
      );
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.characteristics?.alert_threshold.value).toBe(
        '525'
      );
      expect(
        rawCustomerproductholding[1].products[0].rawOmapi.product.characteristics?.service_category_limit.unit
      ).toBe('GB');
      expect(
        rawCustomerproductholding[1].products[0].rawOmapi.product.characteristics?.service_category_limit.value
      ).toBe('750');
      expect(
        rawCustomerproductholding[2].products[2].rawOmapi.product.characteristics?.service_category_limit.unit
      ).toBe('GB');
      expect(
        rawCustomerproductholding[2].products[2].rawOmapi.product.characteristics?.service_category_limit.value
      ).toBe('200');
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.characteristics?.producttier).toBe('High');
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.characteristics?.max_mobile_lines).toBe('5');
      expect(
        rawCustomerproductholding[1].products[0].rawOmapi.product.characteristics?.max_mobile_includeddata_reminders
      ).toBe('1');
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.characteristics?.activationsalesofferingid).toBe(
        '115'
      );
      expect(
        rawCustomerproductholding[1].products[0].rawOmapi.product.characteristics?.max_mobile_outofbundle_reminders
      ).toBe('4');
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.characteristics?.productsubgroup).toBe('NDH');
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.characteristics?.huwrecipientsmandatory).toBe(
        'yes'
      );
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.characteristics?.devicetype).toBe('TypeA');
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.characteristics?.is_sellable).toBe('yes');
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.characteristics?.productlevel).toBe('4P');
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.characteristics?.salespricevatexcl.unit).toBe(
        'EURO'
      );
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.characteristics?.salespricevatexcl.value).toBe(
        '122.07'
      );
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.characteristics?.rentalpricevatexcl.unit).toBe(
        'EURO'
      );
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.characteristics?.rentalpricevatexcl.value).toBe(
        '120'
      );
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.characteristics?.rentalpricevatincl.unit).toBe(
        'EURO'
      );
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.characteristics?.rentalpricevatincl.value).toBe(
        '127'
      );
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.characteristics?.salespricevatincl.unit).toBe(
        'EURO'
      );
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.characteristics?.salespricevatincl.value).toBe(
        '147.71'
      );
      expect(
        rawCustomerproductholding[1].products[0].rawOmapi.product.characteristics?.sharedmobiledata_unlimited.unit
      ).toBe('EURO');
      expect(
        rawCustomerproductholding[1].products[0].rawOmapi.product.characteristics?.sharedmobiledata_unlimited.value
      ).toBe('150');
      expect(rawCustomerproductholding[0].rawOmapi.product.localizedcontent[0].locale).toBe('nl');
      expect(rawCustomerproductholding[1].products[0].rawOmapi.product.localizedcontent[1].name).toBe(
        'All-Internet 300'
      );
      expect(rawCustomerproductholding[2].products[2].rawOmapi.product.localizedcontent[2].logo).toBe(
        'https://www2.telenet.be/content/dam/www-telenet-be/img/self-service/products/internet-line-sun-smallpipe.png'
      );
      expect(rawCustomerproductholding[1].products[1].options[1].rawOmapi.product.characteristics?.weightnl).toBe('40');
      expect(rawCustomerproductholding[1].products[1].options[1].rawOmapi.product.characteristics?.weightfr).toBe('10');
    });
  });

  afterEach(() => {
    cleanStylesFromDom();
  });
});
