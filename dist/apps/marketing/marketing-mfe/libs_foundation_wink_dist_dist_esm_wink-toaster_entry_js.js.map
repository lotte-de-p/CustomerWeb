{"version":3,"file":"libs_foundation_wink_dist_dist_esm_wink-toaster_entry_js.js","mappings":";;;;;;;;;;;;MAAaA,WAAW,GAAG;EACzBC,QAAQ,EAAE,UAAU;EACpBC,QAAQ,EAAE,UAAU;EACpBC,UAAU,EAAE,YAAY;EACxBC,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;;;;ACJZ,MAAMC,cAAc,GAAG,4uBAA4uB;AACnwB,MAAAC,qBAAA,GAAeD,cAAc;ACD7B,MAAME,iBAAiB,GAAG,4uBAA4uB;AACtwB,MAAAC,wBAAA,GAAeD,iBAAiB;MCWnBE,OAAO;;;kBACgB,EAAE;;EAG9BC,eAAeA,CAACC,KAAmB;IAAA,IAAAC,KAAA;IAAA,OAAAC,2JAAA;MACvCD,KAAI,CAACE,MAAM,GAAG,CAAC,GAAGF,KAAI,CAACE,MAAM,EAAEH,KAAK,CAAC;IAAC;;EAGxCI,MAAMA,CAAA;IACJ,OACEC,qDAAA,CAACC,iDAAI;MAAAC,GAAA;MAAA,aAAW,QAAQ;MAAA,eAAa;IAAM,GACxC,IAAI,CAACJ,MAAM,CAACK,GAAG,CAAER,KAAK,IACrBK,qDAAA;MACEI,UAAU,EAAET,KAAK,CAACS,UAAU,IAAIpB,uDAAW,CAACG,UAAU;MACtDkB,IAAI,EAAEV,KAAK,CAACU,IAAI,IAAI,EAAE;MACtBC,QAAQ,EAAEX,KAAK,CAACW,QAAQ,IAAI,IAAI;MAChCC,IAAI,EAAEZ,KAAK,CAACY,IAAI,IAAI,GAAG;MACvBC,MAAM,EAAEb,KAAK,CAACa,MAAM,IAAI,OAAO;MAC/BC,QAAQ,EAAEd,KAAK,CAACc,QAAQ,IAAI,MAAM;MAAA;IAAA,EAErC,CAAC,EACFT,qDAAA;MAAAE,GAAA;IAAA,EAAa,CACR","sources":["./libs/foundation/wink/dist/dist/core/src/components/toaster/_sub-comps/toast/models/toast.types.tsx","./libs/foundation/wink/dist/dist/core/src/components/toaster/styles/brands/toaster.base.scss","./libs/foundation/wink/dist/dist/core/src/components/toaster/styles/brands/toaster.telenet.scss","./libs/foundation/wink/dist/dist/core/src/components/toaster/toaster.tsx"],"sourcesContent":["export const TOAST_TYPES = {\n  negative: 'negative',\n  positive: 'positive',\n  actionable: 'actionable',\n  feedback: 'feedback',\n} as const;\nexport type ToastType = (typeof TOAST_TYPES)[keyof typeof TOAST_TYPES];\n","@import '../vars/vars.base';\n@import '../toaster.default';\n","@import '../vars/vars.telenet';\n@import '../toaster.default';\n","import { Component, h, Host, Method, State } from '@stencil/core';\nimport { ToastElement } from './models/toaster.types';\nimport { TOAST_TYPES } from './_sub-comps/toast/models/toast.types';\n\n@Component({\n  tag: 'wink-toaster',\n  styleUrls: {\n    telenet: 'styles/brands/toaster.telenet.scss',\n    base: 'styles/brands/toaster.base.scss',\n  },\n  shadow: false,\n})\nexport class Toaster {\n  @State() toasts: ToastElement[] = [];\n\n  @Method()\n  async winkCreateToast(toast: ToastElement) {\n    this.toasts = [...this.toasts, toast];\n  }\n\n  render() {\n    return (\n      <Host aria-live=\"polite\" aria-atomic=\"true\">\n        {this.toasts.map((toast) => (\n          <wink-toast\n            appearance={toast.appearance || TOAST_TYPES.actionable}\n            text={toast.text || ''}\n            duration={toast.duration || 6000}\n            href={toast.href || '#'}\n            target={toast.target || '_self'}\n            linkText={toast.linkText || 'link'}\n            is-open></wink-toast>\n        ))}\n        <slot></slot>\n      </Host>\n    );\n  }\n}\n"],"names":["TOAST_TYPES","negative","positive","actionable","feedback","toasterBaseCss","WinkToasterBaseStyle0","toasterTelenetCss","WinkToasterTelenetStyle0","Toaster","winkCreateToast","toast","_this","_asyncToGenerator","toasts","render","h","Host","key","map","appearance","text","duration","href","target","linkText"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}