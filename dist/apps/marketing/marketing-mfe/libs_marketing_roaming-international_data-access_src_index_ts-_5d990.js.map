{"version":3,"file":"libs_marketing_roaming-international_data-access_src_index_ts-_5d990.js","mappings":"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","sources":["./libs/marketing/roaming-international/data-access/src/index.ts","./libs/marketing/roaming-international/data-access/src/lib/+state/roaming-international-ngrx.module.ts","./libs/marketing/roaming-international/data-access/src/lib/+state/roaming-international.actions.ts","./libs/marketing/roaming-international/data-access/src/lib/+state/roaming-international.effects.ts","./libs/marketing/roaming-international/data-access/src/lib/+state/roaming-international.reducers.ts","./libs/marketing/roaming-international/data-access/src/lib/+state/roaming-international.selectors.ts","./libs/marketing/roaming-international/data-access/src/lib/entities/country-list.interface.ts","./libs/marketing/roaming-international/data-access/src/lib/entities/rate.interface.ts","./libs/marketing/roaming-international/data-access/src/lib/index.ts","./libs/marketing/roaming-international/data-access/src/lib/infrastructure/country-list.service.ts","./libs/marketing/roaming-international/data-access/src/lib/infrastructure/rates.service.ts","./libs/marketing/roaming-international/data-access/src/lib/providers.ts","./libs/marketing/roaming-international/data-access/src/lib/roaming-international-facade.ts"],"sourcesContent":["export * from './lib';\n","import { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { RoamingInternationalEffects } from './roaming-international.effects';\nimport { StoreModule } from '@ngrx/store';\nimport { ratesFeature } from './roaming-international.reducers';\n\n@NgModule({\n  imports: [EffectsModule.forFeature([RoamingInternationalEffects]), StoreModule.forFeature(ratesFeature)],\n})\nexport class RoamingInternationalNgrxModule {}\n","import { createAction, props } from '@ngrx/store';\nimport { Country } from '../entities/country-list.interface';\nimport { RatesOverview } from '../entities/rate.interface';\n\nexport const loadCountryList = createAction(\n  '[RoamingInternational] loadCountryList',\n  props<{ searchKey: string; customerType: string }>()\n);\n\nexport const loadCountryListSuccess = createAction(\n  '[RoamingInternational] loadCountryListSuccess',\n  props<{ countries: Country[] }>()\n);\n\nexport const selectedFromCountry = createAction(\n  '[RoamingInternational] selectedFromCountry',\n  props<{ country: Country }>()\n);\n\nexport const selectedAnotherDestinationCountry = createAction(\n  '[RoamingInternational] selectedAnotherDestinationCountry',\n  props<{ country: Country }>()\n);\n\nexport const loadRoamingRatesToBelgium = createAction(\n  '[RoamingInternational] loadRoamingRatesToBelgium',\n  props<{ country: Country; toBelgium: boolean; customerType: string }>()\n);\n\nexport const loadRoamingRatesToBelgiumSuccess = createAction(\n  '[RoamingInternational] loadRoamingRatesToBelgiumSuccess',\n  props<{ rates: RatesOverview }>()\n);\n\nexport const loadRoamingRatesInsideSelectedCountry = createAction(\n  '[RoamingInternational] loadRoamingRatesInsideSelectedCountry',\n  props<{ country: Country; toBelgium: boolean; customerType: string }>()\n);\n\nexport const loadRoamingRatesInsideSelectedCountrySuccess = createAction(\n  '[RoamingInternational] loadRoamingRatesInsideSelectedCountrySuccess',\n  props<{ rates: RatesOverview }>()\n);\n\nexport const loadRoamingRatesToAnotherDestinationCountry = createAction(\n  '[RoamingInternational] loadRoamingRatesToAnotherDestinationCountry',\n  props<{ fromCountry: Country; toCountry: Country; customerType: string }>()\n);\n\nexport const loadRoamingRatesToAnotherDestinationCountrySuccess = createAction(\n  '[RoamingInternational] loadRoamingRatesToAnotherDestinationCountrySuccess',\n  props<{ rates: RatesOverview }>()\n);\n\nexport const getCountryErrorAction = createAction(\n  '[RoamingInternational] get countries Error',\n  props<{ error: Error }>()\n);\n\nexport const getRatesErrorAction = createAction('[RoamingInternational] get rates Error', props<{ error: Error }>());\n","import { inject, Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { CountryListService } from '../infrastructure/country-list.service';\nimport { RatesService } from '../infrastructure/rates.service';\nimport {\n  loadCountryList,\n  loadCountryListSuccess,\n  loadRoamingRatesInsideSelectedCountry,\n  loadRoamingRatesToAnotherDestinationCountry,\n  loadRoamingRatesInsideSelectedCountrySuccess,\n  loadRoamingRatesToAnotherDestinationCountrySuccess,\n  loadRoamingRatesToBelgium,\n  loadRoamingRatesToBelgiumSuccess,\n  getRatesErrorAction,\n  getCountryErrorAction,\n} from './roaming-international.actions';\nimport { of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RoamingInternationalEffects {\n  readonly actions$ = inject(Actions);\n  readonly countryListService = inject(CountryListService);\n  readonly ratesService = inject(RatesService);\n\n  loadCountries$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(loadCountryList),\n      switchMap((a) =>\n        this.countryListService.load(a.searchKey, a.customerType).pipe(\n          map((countries) => loadCountryListSuccess({ countries })),\n          catchError((error) => of(getCountryErrorAction({ error: error })))\n        )\n      )\n    )\n  );\n\n  loadRoamingRatesToBelgium = createEffect(() =>\n    this.actions$.pipe(\n      ofType(loadRoamingRatesToBelgium),\n      switchMap((args) =>\n        this.ratesService.getRoamingRates(args.country, args.customerType).pipe(\n          map((ratesData) => {\n            return this.ratesService.convertToOverview(args.country, args.toBelgium, ratesData[0]);\n          })\n        )\n      ),\n      map((rates) => loadRoamingRatesToBelgiumSuccess({ rates })),\n      catchError((error) => of(getRatesErrorAction({ error: error })))\n    )\n  );\n\n  loadRoamingRatesInsideSelectedCountry = createEffect(() =>\n    this.actions$.pipe(\n      ofType(loadRoamingRatesInsideSelectedCountry),\n      switchMap((args) =>\n        this.ratesService.getRoamingRatesForSameCountry(args.country, args.customerType).pipe(\n          map((rates) => {\n            return this.ratesService.convertToOverview(args.country, args.toBelgium, rates[0]);\n          })\n        )\n      ),\n      map((rates) => loadRoamingRatesInsideSelectedCountrySuccess({ rates })),\n      catchError((error) => of(getRatesErrorAction({ error: error })))\n    )\n  );\n\n  loadRoamingRatesToAnotherDestinationCountry = createEffect(() =>\n    this.actions$.pipe(\n      ofType(loadRoamingRatesToAnotherDestinationCountry),\n      switchMap((args) =>\n        this.ratesService.getRoamingRates(args.fromCountry, args.customerType, args.toCountry).pipe(\n          map((rates) => {\n            return this.ratesService.convertToOverview(args.fromCountry, false, rates[0], !!args.toCountry);\n          })\n        )\n      ),\n      map((rates) => loadRoamingRatesToAnotherDestinationCountrySuccess({ rates })),\n      catchError((error) => of(getRatesErrorAction({ error: error })))\n    )\n  );\n}\n","import { createFeature, createReducer, on } from '@ngrx/store';\nimport { Country } from '../entities/country-list.interface';\nimport {\n  loadCountryListSuccess,\n  loadRoamingRatesInsideSelectedCountrySuccess,\n  loadRoamingRatesToAnotherDestinationCountrySuccess,\n  loadRoamingRatesToBelgiumSuccess,\n  selectedFromCountry,\n  selectedAnotherDestinationCountry,\n  getCountryErrorAction,\n  getRatesErrorAction,\n} from './roaming-international.actions';\nimport { RatesOverview } from '../entities/rate.interface';\n\nexport const RATES_FEATURE_KEY = 'rates';\n\nexport interface RatesSlice {\n  [RATES_FEATURE_KEY]: RatesState;\n}\n\nexport interface RatesState {\n  countryList: {\n    countries: Country[];\n    fromCountry?: Country;\n    anotherDestinationCountry?: Country;\n  };\n  roamingRates: {\n    toBelgium?: RatesOverview;\n    insideCountry?: RatesOverview;\n    toAnotherDestinationCountry?: RatesOverview;\n    upsellOptions?: string;\n  };\n}\n\nexport const country = {\n  iso: '',\n  region: '',\n  name: '',\n  roamingZone: '',\n  internationalZone: '',\n};\n\nexport const initialState: RatesState = {\n  countryList: {\n    countries: [],\n  },\n  roamingRates: {},\n};\n\nexport const reducer = createReducer(\n  initialState,\n  on(loadCountryListSuccess, (state, action) => ({\n    ...state,\n    countryList: { ...state.countryList, countries: action.countries },\n  })),\n  on(selectedFromCountry, (state, action) => ({\n    ...initialState,\n    countryList: { ...state.countryList, fromCountry: action.country },\n  })),\n  on(selectedAnotherDestinationCountry, (state, action) => ({\n    ...state,\n    countryList: { ...state.countryList, anotherDestinationCountry: action.country },\n  })),\n  on(loadRoamingRatesToBelgiumSuccess, (state, action) => ({\n    ...state,\n    roamingRates: { ...state.roamingRates, toBelgium: action.rates },\n  })),\n  on(loadRoamingRatesInsideSelectedCountrySuccess, (state, action) => ({\n    ...state,\n    roamingRates: { ...state.roamingRates, insideCountry: action.rates, upsellOptions: action.rates.options },\n  })),\n  on(loadRoamingRatesToAnotherDestinationCountrySuccess, (state, action) => ({\n    ...state,\n    roamingRates: {\n      ...state.roamingRates,\n      toAnotherDestinationCountry: action.rates,\n      upsellOptions: action.rates.options,\n    },\n  })),\n  on(getCountryErrorAction, (state, action) => ({\n    ...state,\n    error: action.error,\n  })),\n  on(getRatesErrorAction, (state, action) => ({\n    ...state,\n    error: action.error,\n  }))\n);\nexport const ratesFeature = createFeature({\n  name: RATES_FEATURE_KEY,\n  reducer: reducer,\n});\n","import { createFeatureSelector, createSelector } from '@ngrx/store';\nimport { RATES_FEATURE_KEY, RatesState } from './roaming-international.reducers';\n\nexport const selectRates = createFeatureSelector<RatesState>(RATES_FEATURE_KEY);\n\nexport const selectCountriesList = createSelector(selectRates, (ratesState) => ratesState.countryList.countries);\nexport const selectFromCountry = createSelector(selectRates, (ratesState) => ratesState.countryList.fromCountry);\nexport const selectAnotherDestinationCountry = createSelector(\n  selectRates,\n  (ratesState) => ratesState.countryList.anotherDestinationCountry\n);\n\nexport const selectRoamingRatesToBelgium = createSelector(\n  selectRates,\n  (ratesState) => ratesState.roamingRates.toBelgium\n);\nexport const selectRoamingRatesInsideSelectedCountry = createSelector(\n  selectRates,\n  (ratesState) => ratesState.roamingRates.insideCountry\n);\nexport const selectRoamingRatesToAnotherDestinationCountry = createSelector(\n  selectRates,\n  (ratesState) => ratesState.roamingRates.toAnotherDestinationCountry\n);\nexport const selectUpSellOptionsForCountry = createSelector(\n  selectRates,\n  (ratesState) => ratesState.roamingRates.upsellOptions\n);\n","export interface Country {\n  iso: string;\n  region: string;\n  country: string;\n  roamingZone: string;\n  internationalZone: string;\n}\n\nexport const initCountry: Country = {\n  iso: '',\n  region: '',\n  country: '',\n  internationalZone: '',\n  roamingZone: '',\n};\n\nexport interface CountryResponse {\n  countries: Country[];\n}\n","import { Country, initCountry } from './country-list.interface';\n\nexport interface Rate {\n  type: RateType;\n  details: RateDetail[];\n}\n\nexport interface RateDetail {\n  type: RateDetailType;\n  amount: number;\n}\n\nexport enum RateType {\n  SMS = 'SMS',\n  MMS = 'MMS',\n  CALL = 'CALL',\n  DATA = 'DATA',\n}\n\nexport enum RateDetailType {\n  INCOMING = 'INCOMING',\n  OUTGOING = 'OUTGOING',\n  VOLUME = 'VOLUME',\n}\n\nexport interface RatesOverview {\n  rates: Rate[];\n  country: Country;\n  toBelgium: boolean;\n  options: string;\n}\n\nexport const initRate: Rate = {\n  type: RateType.SMS,\n  details: [],\n};\n\nexport const initRatesOverview: RatesOverview = {\n  rates: [],\n  country: initCountry,\n  toBelgium: true,\n  options: '',\n};\n","export * from './+state/roaming-international.actions';\nexport * from './+state/roaming-international.effects';\nexport * from './+state/roaming-international.reducers';\nexport * from './+state/roaming-international.selectors';\nexport * from './+state/roaming-international-ngrx.module';\nexport * from './entities/country-list.interface';\nexport * from './entities/rate.interface';\nexport * from './infrastructure/country-list.service';\nexport * from './infrastructure/rates.service';\nexport * from './roaming-international-facade';\nexport * from './providers';\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Country, CountryResponse } from '../entities/country-list.interface';\nimport { LanguageService, PathCategorisationService } from '@telenet/ng-lib-page';\nimport { ConfigConstants, ConfigService } from '@telenet/ng-lib-config';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CountryListService {\n  countries: Country[] = [];\n\n  constructor(\n    private readonly http: HttpClient,\n    private readonly languageService: LanguageService,\n    private readonly pathCategorisationService: PathCategorisationService,\n    private readonly configService: ConfigService\n  ) {}\n\n  load(searchKey: string, customerType: string): Observable<Country[]> {\n    const baseUrl = this.configService.getConfig(ConfigConstants.OMAPI_QUERY_URL) + `/rir/v1`;\n    const url = [baseUrl, 'country'].join('/');\n\n    const language = this.languageService.getLanguage();\n    const params = new HttpParams()\n      .set('key', searchKey)\n      .set('language', language)\n      .set('brand', this.pathCategorisationService.getCustomerBrand())\n      .set('category', customerType);\n\n    const headers = new HttpHeaders().set('Accept', 'application/json');\n    return this.http.get<CountryResponse>(url, { params, headers }).pipe(\n      map((response: CountryResponse) => {\n        const result = response.countries;\n        return result?.sort((a, b) => a.country?.localeCompare(b.country));\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { RatesDataRaw, RateResponse } from '../entities/rates.data.mock';\nimport { Rate, RateDetailType, RatesOverview, RateType } from '../entities/rate.interface';\nimport { Observable } from 'rxjs';\nimport { Country } from '../entities/country-list.interface';\nimport { map } from 'rxjs/operators';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { PathCategorisationService } from '@telenet/ng-lib-page';\nimport { ConfigConstants, ConfigService } from '@telenet/ng-lib-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RatesService {\n  constructor(\n    private readonly http: HttpClient,\n    private readonly pathCategorisationService: PathCategorisationService,\n    private readonly configService: ConfigService\n  ) {}\n\n  getRoamingRates(from: Country, customerType: string, toCountry?: Country): Observable<RatesDataRaw[]> {\n    const destinationCountry = toCountry ? toCountry.roamingZone : 'Belgium';\n    const baseUrl = this.configService.getConfig(ConfigConstants.OMAPI_QUERY_URL) + `/rir/v1`;\n\n    const endpoint = from.iso === 'BE' ? 'international' : 'roaming';\n    const url = [baseUrl, 'rates/' + endpoint].join('/');\n\n    let params = new HttpParams()\n      .set('brand', this.pathCategorisationService.getCustomerBrand())\n      .set('category', customerType)\n      .set('toZone', destinationCountry);\n\n    if (from.iso !== 'BE') {\n      params = new HttpParams()\n        .set('brand', this.pathCategorisationService.getCustomerBrand())\n        .set('category', customerType)\n        .set('toZone', destinationCountry)\n        .set('fromZone', from.roamingZone);\n    }\n\n    const headers = new HttpHeaders().set('Accept', 'application/json');\n\n    return this.http.get<RateResponse>(url, { params, headers }).pipe(map((response: RateResponse) => response.rates));\n  }\n\n  getRoamingRatesForSameCountry(from: Country, customerType: string): Observable<RatesDataRaw[]> {\n    const baseUrl = this.configService.getConfig(ConfigConstants.OMAPI_QUERY_URL) + `/rir/v1`;\n\n    const endpoint = 'roaming';\n    const url = [baseUrl, 'rates/' + endpoint].join('/');\n\n    const params = new HttpParams()\n      .set('brand', this.pathCategorisationService.getCustomerBrand())\n      .set('category', customerType)\n      .set('toZone', from.roamingZone)\n      .set('fromZone', from.roamingZone);\n\n    const headers = new HttpHeaders().set('Accept', 'application/json');\n\n    return this.http.get<RateResponse>(url, { params, headers }).pipe(map((response: RateResponse) => response.rates));\n  }\n\n  convertToOverview(\n    country: Country,\n    toBelgium: boolean,\n    raw: RatesDataRaw,\n    isAnotherCountry?: boolean\n  ): RatesOverview {\n    return {\n      country: country,\n      toBelgium: toBelgium,\n      rates: this.convertToRates(raw, toBelgium, isAnotherCountry),\n      options: raw.options,\n    };\n  }\n\n  private convertToRates(raw: RatesDataRaw, toBelgium: boolean, isAnotherCountry?: boolean): Rate[] {\n    const voice = this.convertToVoiceRates(raw, toBelgium, isAnotherCountry);\n    const sms = this.convertToSmsRates(raw);\n    const mms = this.convertToMmsRates(raw);\n    const rates = [voice, sms, mms];\n    const data = this.convertToDataRates(raw, toBelgium, isAnotherCountry);\n    if (data) {\n      rates.push(data);\n    }\n    return rates;\n  }\n\n  private convertToDataRates(raw: RatesDataRaw, toBelgium: boolean, isAnotherCountry?: boolean) {\n    if (!toBelgium && !isAnotherCountry && raw.data !== undefined) {\n      const data: Rate = {\n        type: RateType.DATA,\n        details: [\n          {\n            type: RateDetailType.VOLUME,\n            amount: raw.data,\n          },\n        ],\n      };\n      return data;\n    }\n    return undefined;\n  }\n\n  private convertToMmsRates(raw: RatesDataRaw) {\n    const mms: Rate = {\n      type: RateType.MMS,\n      details: [\n        {\n          type: RateDetailType.OUTGOING,\n          amount: raw.mms.outgoing,\n        },\n        {\n          type: RateDetailType.INCOMING,\n          amount: raw.mms.received,\n        },\n      ],\n    };\n    return mms;\n  }\n\n  private convertToSmsRates(raw: RatesDataRaw) {\n    const sms: Rate = {\n      type: RateType.SMS,\n      details: [\n        {\n          type: RateDetailType.OUTGOING,\n          amount: raw.sms.outgoing,\n        },\n        {\n          type: RateDetailType.INCOMING,\n          amount: raw.sms.received,\n        },\n      ],\n    };\n    return sms;\n  }\n\n  private convertToVoiceRates(raw: RatesDataRaw, toBelgium: boolean, isAnotherCountry?: boolean) {\n    const voice: Rate = {\n      type: RateType.CALL,\n      details: [\n        {\n          type: RateDetailType.OUTGOING,\n          amount:\n            raw.voice.same_country && !toBelgium && !isAnotherCountry ? raw.voice.same_country : raw.voice.outgoing,\n        },\n        {\n          type: RateDetailType.INCOMING,\n          amount: raw.voice.received,\n        },\n      ],\n    };\n    return voice;\n  }\n}\n","import { importProvidersFrom } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { RoamingInternationalEffects } from './+state/roaming-international.effects';\nimport { ratesFeature } from './+state/roaming-international.reducers';\n\nexport function provideRoamingInternationalDomain() {\n  return [\n    importProvidersFrom(StoreModule.forFeature(ratesFeature)),\n    importProvidersFrom(EffectsModule.forFeature([RoamingInternationalEffects])),\n  ];\n}\n","import { inject, Injectable } from '@angular/core';\nimport {\n  Country,\n  loadRoamingRatesInsideSelectedCountry,\n  loadRoamingRatesToAnotherDestinationCountry,\n  loadRoamingRatesToBelgium,\n  RatesSlice,\n  selectedFromCountry,\n  selectedAnotherDestinationCountry,\n  selectRoamingRatesInsideSelectedCountry,\n  selectRoamingRatesToAnotherDestinationCountry,\n  selectRoamingRatesToBelgium,\n  selectUpSellOptionsForCountry,\n} from '.';\nimport { Store } from '@ngrx/store';\nimport {\n  selectCountriesList,\n  selectFromCountry,\n  selectAnotherDestinationCountry,\n} from './+state/roaming-international.selectors';\nimport { loadCountryList } from './+state/roaming-international.actions';\n\n@Injectable({ providedIn: 'root' })\nexport class RoamingInternationalFacade {\n  readonly store: Store<RatesSlice> = inject(Store<RatesSlice>);\n  countriesList$ = this.store.select(selectCountriesList);\n  selectedFromCountry$ = this.store.select(selectFromCountry);\n  selectedAnotherCountry$ = this.store.select(selectAnotherDestinationCountry);\n  roamingRatesFromSelectedCountryToBelgium$ = this.store.select(selectRoamingRatesToBelgium);\n  roamingRatesInsideSelectedCountry$ = this.store.select(selectRoamingRatesInsideSelectedCountry);\n  roamingRatesToAnotherDestinationCountry$ = this.store.select(selectRoamingRatesToAnotherDestinationCountry);\n  upsellOptionsForCountry$ = this.store.select(selectUpSellOptionsForCountry);\n\n  loadCountryList(searchKey: string, customerType: string): void {\n    this.store.dispatch(\n      loadCountryList({\n        searchKey,\n        customerType,\n      })\n    );\n  }\n\n  selectedFromCountry(country: Country, customerType: string): void {\n    this.store.dispatch(\n      selectedFromCountry({\n        country,\n      })\n    );\n    this.loadRoamingRatesForSelectedCountry(country, customerType);\n  }\n\n  selectedAnotherDestinationCountry(fromCountry: Country, country: Country, customerType: string): void {\n    this.store.dispatch(\n      selectedAnotherDestinationCountry({\n        country,\n      })\n    );\n    this.loadRoamingRatesToAnotherCountry(fromCountry, country, customerType);\n  }\n\n  loadRoamingRatesForSelectedCountry(country: Country, customerType: string): void {\n    this.store.dispatch(\n      loadRoamingRatesToBelgium({\n        country: country,\n        toBelgium: true,\n        customerType: customerType,\n      })\n    );\n    this.store.dispatch(\n      loadRoamingRatesInsideSelectedCountry({\n        country: country,\n        toBelgium: false,\n        customerType: customerType,\n      })\n    );\n  }\n\n  loadRoamingRatesToAnotherCountry(fromCountry: Country, toCountry: Country, customerType: string): void {\n    this.store.dispatch(\n      loadRoamingRatesToAnotherDestinationCountry({\n        fromCountry: fromCountry,\n        toCountry: toCountry,\n        customerType: customerType,\n      })\n    );\n  }\n}\n"],"names":["EffectsModule","RoamingInternationalEffects","StoreModule","ratesFeature","RoamingInternationalNgrxModule","forFeature","imports","i1","EffectsFeatureModule","i2","StoreFeatureModule","createAction","props","loadCountryList","loadCountryListSuccess","selectedFromCountry","selectedAnotherDestinationCountry","loadRoamingRatesToBelgium","loadRoamingRatesToBelgiumSuccess","loadRoamingRatesInsideSelectedCountry","loadRoamingRatesInsideSelectedCountrySuccess","loadRoamingRatesToAnotherDestinationCountry","loadRoamingRatesToAnotherDestinationCountrySuccess","getCountryErrorAction","getRatesErrorAction","inject","Actions","createEffect","ofType","catchError","map","switchMap","CountryListService","RatesService","of","actions$","countryListService","ratesService","loadCountries$","pipe","a","load","searchKey","customerType","countries","error","args","getRoamingRates","country","ratesData","convertToOverview","toBelgium","rates","getRoamingRatesForSameCountry","fromCountry","toCountry","factory","ɵfac","providedIn","createFeature","createReducer","on","RATES_FEATURE_KEY","iso","region","name","roamingZone","internationalZone","initialState","countryList","roamingRates","reducer","state","action","anotherDestinationCountry","insideCountry","upsellOptions","options","toAnotherDestinationCountry","createFeatureSelector","createSelector","selectRates","selectCountriesList","ratesState","selectFromCountry","selectAnotherDestinationCountry","selectRoamingRatesToBelgium","selectRoamingRatesInsideSelectedCountry","selectRoamingRatesToAnotherDestinationCountry","selectUpSellOptionsForCountry","initCountry","RateType","RateDetailType","initRate","type","SMS","details","initRatesOverview","HttpClient","HttpHeaders","HttpParams","LanguageService","PathCategorisationService","ConfigConstants","ConfigService","http","languageService","pathCategorisationService","configService","constructor","baseUrl","getConfig","OMAPI_QUERY_URL","url","join","language","getLanguage","params","set","getCustomerBrand","headers","get","response","result","sort","b","localeCompare","i0","ɵɵinject","i3","from","destinationCountry","endpoint","raw","isAnotherCountry","convertToRates","voice","convertToVoiceRates","sms","convertToSmsRates","mms","convertToMmsRates","data","convertToDataRates","push","undefined","DATA","VOLUME","amount","MMS","OUTGOING","outgoing","INCOMING","received","CALL","same_country","importProvidersFrom","provideRoamingInternationalDomain","Store","RoamingInternationalFacade","store","countriesList$","select","selectedFromCountry$","selectedAnotherCountry$","roamingRatesFromSelectedCountryToBelgium$","roamingRatesInsideSelectedCountry$","roamingRatesToAnotherDestinationCountry$","upsellOptionsForCountry$","dispatch","loadRoamingRatesForSelectedCountry","loadRoamingRatesToAnotherCountry"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}