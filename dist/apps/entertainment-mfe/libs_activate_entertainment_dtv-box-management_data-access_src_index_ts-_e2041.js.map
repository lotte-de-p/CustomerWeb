{"version":3,"file":"libs_activate_entertainment_dtv-box-management_data-access_src_index_ts-_e2041.js","mappings":"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","sources":["./libs/activate/entertainment/dtv-box-management/data-access/src/index.ts","./libs/activate/entertainment/dtv-box-management/data-access/src/lib/+state/dtv-box-management-ngrx.module.ts","./libs/activate/entertainment/dtv-box-management/data-access/src/lib/+state/dtv-box-management.actions.ts","./libs/activate/entertainment/dtv-box-management/data-access/src/lib/+state/dtv-box-management.effects.ts","./libs/activate/entertainment/dtv-box-management/data-access/src/lib/+state/dtv-box-management.facade.ts","./libs/activate/entertainment/dtv-box-management/data-access/src/lib/+state/dtv-box-management.reducer.ts","./libs/activate/entertainment/dtv-box-management/data-access/src/lib/+state/dtv-box-management.selectors.ts","./libs/activate/entertainment/dtv-box-management/data-access/src/lib/+state/dtv-box-management.state.ts","./libs/activate/entertainment/dtv-box-management/data-access/src/lib/entities/success.model.ts","./libs/activate/entertainment/dtv-box-management/data-access/src/lib/enums/dtv-box-type.enum.ts","./libs/activate/entertainment/dtv-box-management/data-access/src/lib/enums/sale-type.enum.ts","./libs/activate/entertainment/dtv-box-management/data-access/src/lib/mapper/address.mapper.ts","./libs/activate/entertainment/dtv-box-management/data-access/src/lib/mapper/subscription.mapper.ts","./libs/activate/entertainment/dtv-box-management/data-access/src/lib/services/dtv-box-management.service.ts","./libs/activate/entertainment/dtv-box-management/data-access/src/lib/util/image-src-interceptor/image-src-interceptor.directive.ts"],"sourcesContent":["export * from './lib/mapper/address.mapper';\nexport * from './lib/+state/dtv-box-management.facade';\nexport * from './lib/+state/dtv-box-management-ngrx.module';\nexport * from './lib/entities/subscription.model';\nexport * from './lib/entities/address.model';\nexport * from './lib/entities/dtv-box.model';\nexport * from './lib/util/image-src-interceptor/image-src-interceptor.directive';\nexport * from './lib/enums/dtv-box-type.enum';\nexport * from './lib/enums/sale-type.enum';\nexport * from './lib/entities/success.model';\n","import { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { DtvBoxManagementEffects } from './dtv-box-management.effects';\nimport { dtvBoxManagementFeature } from './dtv-box-management.reducer';\n\n@NgModule({\n  imports: [EffectsModule.forFeature([DtvBoxManagementEffects]), StoreModule.forFeature(dtvBoxManagementFeature)],\n})\nexport class DtvBoxManagementNgrxModule {}\n","import { createAction, emptyProps, props } from '@ngrx/store';\nimport { Address } from '../entities/address.model';\nimport { DtvBoxSubscription } from '../entities/subscription.model';\n\n// Subscriptions\nexport const loadSubscriptions = createAction('[dtv-box-management] loadSubscriptions', emptyProps);\n\nexport const loadSubscriptionsSuccess = createAction(\n  '[dtv-box-management] loadSubscriptionsSuccess',\n  props<{ subscriptions: DtvBoxSubscription[] }>()\n);\n\nexport const loadSubscriptionsFailure = createAction(\n  '[dtv-box-management] loadSubscriptionsFailure',\n  props<{\n    error: Error;\n  }>()\n);\n\n// Addresses\nexport const loadAddresses = createAction('[dtv-box-management] loadAddresses', emptyProps);\n\nexport const loadAddressesSuccess = createAction(\n  '[dtv-box-management] loadAddressesSuccess',\n  props<{ addresses: Address[] }>()\n);\n\nexport const loadAddressesFailure = createAction(\n  '[dtv-box-management] loadAddressesFailure',\n  props<{ error: Error }>()\n);\n\nexport const setSelectedAddress = createAction(\n  '[dtv-box-management] setSelectedAddress',\n  props<{ address: Address }>()\n);\n\n// Reset pin code\nexport const resetPinCode = createAction(\n  '[dtv-box-management] resetPinCode',\n  props<{\n    identifier: string;\n  }>()\n);\n\nexport const resetPinCodeSuccess = createAction('[dtv-box-management] resetPinCodeSuccess', emptyProps);\n\nexport const resetPinCodeFailure = createAction(\n  '[dtv-box-management] resetPinCodeFailure',\n  props<{\n    error: Error;\n  }>()\n);\n\n// Show security code\nexport const showSecurityCode = createAction('[dtv-box-management] showSecurityCode', emptyProps);\n","import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { DtvBoxManagementService } from '../services/dtv-box-management.service';\nimport {\n  loadAddresses,\n  loadAddressesFailure,\n  loadAddressesSuccess,\n  loadSubscriptions,\n  loadSubscriptionsFailure,\n  loadSubscriptionsSuccess,\n  resetPinCode,\n  resetPinCodeFailure,\n  resetPinCodeSuccess,\n} from './dtv-box-management.actions';\nimport { DtvBoxSubscription } from '../entities/subscription.model';\nimport { of } from 'rxjs';\nimport { Address } from '../entities/address.model';\nimport { HttpResponse } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DtvBoxManagementEffects {\n  loadSubscriptions$;\n  loadAddresses$;\n  resetPinCode$;\n\n  constructor(\n    private readonly actions$: Actions,\n    private readonly dtvBoxManagementService: DtvBoxManagementService\n  ) {\n    this.loadSubscriptions$ = createEffect(() =>\n      this.actions$.pipe(\n        ofType(loadSubscriptions),\n        switchMap(() => this.dtvBoxManagementService.getSubscriptions()),\n        map((subscriptions: DtvBoxSubscription[]) => {\n          return loadSubscriptionsSuccess({ subscriptions });\n        }),\n        catchError((error) => of(loadSubscriptionsFailure({ error: error })))\n      )\n    );\n\n    this.loadAddresses$ = createEffect(() =>\n      actions$.pipe(\n        ofType(loadAddresses),\n        switchMap(() => this.dtvBoxManagementService.getAddresses()),\n        map((addresses: Address[]) => loadAddressesSuccess({ addresses })),\n        catchError((error) => of(loadAddressesFailure({ error: error })))\n      )\n    );\n\n    this.resetPinCode$ = createEffect(() =>\n      actions$.pipe(\n        ofType(resetPinCode),\n        switchMap((request) => this.dtvBoxManagementService.resetPincode(request.identifier)),\n        map((response: HttpResponse<null>) => {\n          if (response.status === 200) {\n            return resetPinCodeSuccess();\n          } else {\n            return resetPinCodeFailure({ error: { message: response.statusText } as Error });\n          }\n        }),\n        catchError((error) => of(resetPinCodeFailure({ error: error })))\n      )\n    );\n  }\n}\n","import { inject, Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { DtvBoxManagementSlice } from './dtv-box-management.state';\nimport {\n  loadSubscriptions,\n  loadAddresses,\n  resetPinCode,\n  setSelectedAddress as setSelectedAddress,\n  showSecurityCode,\n} from './dtv-box-management.actions';\nimport {\n  selectAddressesWithDtvBoxes,\n  selectIsPinCodeReset,\n  selectSelectedAddress,\n  selectShowSecurityCode,\n  selectSubscriptionsWithDtvBoxes,\n  selectSubscriptionsBySelectedAddress,\n} from './dtv-box-management.selectors';\nimport { Observable } from 'rxjs';\nimport { Address } from '../entities/address.model';\nimport { DtvBoxSubscription } from '../entities/subscription.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DtvBoxManagementFacade {\n  private readonly store = inject(Store<DtvBoxManagementSlice>);\n\n  readonly subscriptions$: Observable<DtvBoxSubscription[]> = this.store.select(selectSubscriptionsWithDtvBoxes);\n  readonly addressesWithDtvBoxes$: Observable<Address[]> = this.store.select(selectAddressesWithDtvBoxes);\n  readonly selectedAddress$: Observable<Address | undefined> = this.store.select(selectSelectedAddress);\n  readonly isPinCodeReset$: Observable<boolean> = this.store.select(selectIsPinCodeReset);\n  readonly showSecurityCode$: Observable<boolean> = this.store.select(selectShowSecurityCode);\n  readonly selectedDtvSubscription$: Observable<DtvBoxSubscription | undefined> = this.store.select(\n    selectSubscriptionsBySelectedAddress\n  );\n\n  loadSubscriptions(): void {\n    this.store.dispatch(loadSubscriptions());\n  }\n\n  loadAddresses(): void {\n    this.store.dispatch(loadAddresses());\n  }\n\n  resetPinCode(identifier: string): void {\n    this.store.dispatch(resetPinCode({ identifier }));\n  }\n\n  showSecurityCode(): void {\n    this.store.dispatch(showSecurityCode());\n  }\n\n  setSelectedAddress(address: Address): void {\n    this.store.dispatch(setSelectedAddress({ address }));\n  }\n}\n","import { createFeature, createReducer, on } from '@ngrx/store';\nimport { DtvBoxManagementState, initialState } from './dtv-box-management.state';\nimport {\n  loadAddresses,\n  loadAddressesFailure,\n  loadAddressesSuccess,\n  loadSubscriptions,\n  loadSubscriptionsFailure,\n  loadSubscriptionsSuccess,\n  resetPinCode,\n  resetPinCodeFailure,\n  resetPinCodeSuccess,\n  setSelectedAddress,\n  showSecurityCode,\n} from './dtv-box-management.actions';\nimport { DtvBoxSubscription } from '../entities/subscription.model';\nimport { Address } from '../entities/address.model';\n\nexport const DTV_BOX_MANAGEMENT_FEATURE_KEY = 'dtv-box-management';\n\nexport const dtvBoxManagementReducer = createReducer(\n  initialState,\n\n  // Subscriptions\n  on(loadSubscriptions, (state: DtvBoxManagementState) => ({\n    ...state,\n    isLoading: true,\n  })),\n  on(loadSubscriptionsSuccess, (state: DtvBoxManagementState, action: { subscriptions: DtvBoxSubscription[] }) => ({\n    ...state,\n    subscriptions: action.subscriptions,\n    isLoading: false,\n  })),\n  on(loadSubscriptionsFailure, (state: DtvBoxManagementState, action: { error: Error }) => ({\n    ...state,\n    error: action.error,\n    isLoading: false,\n  })),\n\n  // Addresses\n  on(loadAddresses, (state: DtvBoxManagementState) => ({\n    ...state,\n    isLoading: true,\n  })),\n  on(loadAddressesSuccess, (state: DtvBoxManagementState, action: { addresses: Address[] }) => ({\n    ...state,\n    addresses: action.addresses,\n    selectedAddress: action.addresses[0],\n    isLoading: false,\n  })),\n  on(loadAddressesFailure, (state: DtvBoxManagementState, action: { error: Error }) => ({\n    ...state,\n    error: action.error,\n    isLoading: false,\n  })),\n\n  // Selected address\n  on(setSelectedAddress, (state: DtvBoxManagementState, action: { address: Address }) => ({\n    ...state,\n    selectedAddress: action.address,\n    isPinCodeReset: false,\n    showSecurityCode: false,\n  })),\n\n  // PinCode\n  on(resetPinCode, (state: DtvBoxManagementState) => ({\n    ...state,\n    isLoading: true,\n    isPinCodeReset: false,\n  })),\n  on(resetPinCodeSuccess, (state: DtvBoxManagementState) => ({\n    ...state,\n    isLoading: false,\n    isPinCodeReset: true,\n  })),\n  on(resetPinCodeFailure, (state: DtvBoxManagementState, action: { error: Error }) => ({\n    ...state,\n    error: action.error,\n    isPinCodeReset: false,\n    isLoading: false,\n  })),\n\n  // Show security code\n  on(showSecurityCode, (state: DtvBoxManagementState) => ({\n    ...state,\n    showSecurityCode: true,\n  }))\n);\n\nexport const dtvBoxManagementFeature = createFeature({\n  name: DTV_BOX_MANAGEMENT_FEATURE_KEY,\n  reducer: dtvBoxManagementReducer,\n});\n","import { createFeatureSelector, createSelector } from '@ngrx/store';\nimport { DtvBoxManagementState } from './dtv-box-management.state';\nimport { DTV_BOX_MANAGEMENT_FEATURE_KEY } from './dtv-box-management.reducer';\nimport { DtvBoxSubscription } from '../entities/subscription.model';\nimport { Address } from '../entities/address.model';\n\nexport const dtvBoxManagementFeature = createFeatureSelector<DtvBoxManagementState>(DTV_BOX_MANAGEMENT_FEATURE_KEY);\n\nexport const selectSubscriptionsWithDtvBoxes = createSelector(dtvBoxManagementFeature, (state: DtvBoxManagementState) =>\n  state.subscriptions.filter((subscription: DtvBoxSubscription) => subscription.dtvBoxes.length > 0)\n);\n\nexport const selectAddresses = createSelector(\n  dtvBoxManagementFeature,\n  (state: DtvBoxManagementState) => state.addresses\n);\n\nexport const selectAddressesWithDtvBoxes = createSelector(\n  selectAddresses,\n  selectSubscriptionsWithDtvBoxes,\n  (addresses: Address[], subscriptions: DtvBoxSubscription[]) =>\n    addresses.filter((address: Address) => subscriptions.some((subscription) => subscription.addressId === address.id))\n);\n\nexport const selectSelectedAddress = createSelector(dtvBoxManagementFeature, (state) => state.selectedAddress);\n\nexport const selectSubscriptionsBySelectedAddress = createSelector(\n  selectSelectedAddress,\n  selectSubscriptionsWithDtvBoxes,\n  (selectedAddress: Address | undefined, subscriptions: DtvBoxSubscription[]) =>\n    subscriptions.find((subscription: DtvBoxSubscription) => subscription.addressId === selectedAddress?.id)\n);\n\nexport const selectIsPinCodeReset = createSelector(\n  dtvBoxManagementFeature,\n  (state: DtvBoxManagementState) => state.isPinCodeReset\n);\n\nexport const selectShowSecurityCode = createSelector(\n  dtvBoxManagementFeature,\n  (state: DtvBoxManagementState) => state.showSecurityCode\n);\n\nexport const selectError = createSelector(dtvBoxManagementFeature, (state: DtvBoxManagementState) => state.error);\n","import { Address } from '../entities/address.model';\nimport { DtvBox } from '../entities/dtv-box.model';\nimport { DtvBoxSubscription } from '../entities/subscription.model';\n\nexport interface DtvBoxManagementState {\n  subscriptions: DtvBoxSubscription[];\n  addresses: Address[];\n  selectedAddress: Address | undefined;\n  selectedAddressDevices: DtvBox[] | undefined;\n  error: Error | undefined;\n  isLoading: boolean;\n  isPinCodeReset: boolean;\n  showSecurityCode: boolean;\n}\n\nexport const initialState: DtvBoxManagementState = {\n  subscriptions: [],\n  addresses: [],\n  selectedAddressDevices: [],\n  selectedAddress: undefined,\n  error: undefined,\n  isLoading: false,\n  isPinCodeReset: false,\n  showSecurityCode: false,\n};\n\nexport interface DtvBoxManagementSlice {\n  ['dtvBoxManagementFeature']: DtvBoxManagementState;\n}\n","export class SuccessModel {\n  status: number | undefined;\n}\n","export enum DtvBoxType {\n  EOS = 'EOS',\n  SIPADAN = 'SIPADAN',\n}\n","export enum SaleType {\n  BUY = 'BUY',\n  RENT = 'RENT',\n}\n","import { Address } from '../entities/address.model';\nimport { RawAddressModel as RawAddressModel } from '../entities/raw/raw-address.model';\n\nexport class AddressMapper {\n  toModel(rawAddress: RawAddressModel[]): Address[] {\n    return rawAddress.map((rawAddress: RawAddressModel) => ({\n      id: rawAddress.id,\n      country: rawAddress.country,\n      countryCode: rawAddress.countryCode,\n      city: rawAddress.city,\n      postalCode: rawAddress.postalCode,\n      street: rawAddress.street,\n      houseNumber: rawAddress.houseNumber,\n    }));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { DtvBox } from '../entities/dtv-box.model';\nimport { RawDtvBoxSubscription } from '../entities/raw/raw-dtv-box-subscription.model';\nimport { RawDtvBox } from '../entities/raw/raw-dtv-box.model';\nimport { DtvBoxSubscription } from '../entities/subscription.model';\nimport { NormalizationService } from '@telenet/ng-lib-page';\n\n@Injectable({ providedIn: 'root' })\nexport class DtvBoxSubscriptionMapper {\n  constructor(private readonly normalizationService: NormalizationService) {}\n\n  toModel(rawSubscriptions: RawDtvBoxSubscription[]): DtvBoxSubscription[] {\n    return rawSubscriptions.map((raw: RawDtvBoxSubscription) => ({\n      id: raw.id,\n      identifier: raw.identifier,\n      addressId: raw.addressId,\n      dtvBoxes: this.mapDtvBoxes(raw.devices),\n    }));\n  }\n\n  mapDtvBoxes(dtvBoxes: RawDtvBox[]): DtvBox[] {\n    return dtvBoxes.map((raw: RawDtvBox) => ({\n      id: raw.id,\n      name: raw.name,\n      type: raw.type,\n      saleType: raw.saleType,\n      macAddress: raw.macAddress,\n      serialNumber: raw.serialNumber,\n      modelNumber: raw.modelNumber,\n      modelImageName: this.getModelImageName(raw.modelNumber),\n    }));\n  }\n\n  getModelImageName(modelNumber: string | undefined): string {\n    return modelNumber ? this.normalizationService.normalizeKey(modelNumber) + '.png' : 'dtv-default.png';\n  }\n}\n","import { inject, Injectable } from '@angular/core';\nimport { OcapiCallConfig, OcapiService } from '@telenet/ng-lib-ocapi';\nimport { Observable } from 'rxjs';\nimport { RawDtvBoxSubscription } from '../entities/raw/raw-dtv-box-subscription.model';\nimport { DtvBoxSubscription } from '../entities/subscription.model';\nimport { DtvBoxSubscriptionMapper } from '../mapper/subscription.mapper';\nimport { AddressMapper } from '../mapper/address.mapper';\nimport { RawAddressModel } from '../entities/raw/raw-address.model';\nimport { Address } from '../entities/address.model';\nimport { HttpResponse } from '@angular/common/http';\n\n@Injectable({ providedIn: 'root' })\nexport class DtvBoxManagementService {\n  private readonly messageGroup = 'dtv-box-management';\n  private readonly endpoint = '/public/api/dtv-box-management-service/v1/subscriptions';\n  private readonly ocapiService = inject(OcapiService);\n  private readonly DtvBoxSubscriptionMapper = inject(DtvBoxSubscriptionMapper);\n\n  getSubscriptions(): Observable<DtvBoxSubscription[]> {\n    return this.ocapiService.doGet(\n      new OcapiCallConfig<RawDtvBoxSubscription[], DtvBoxSubscription[]>(\n        this.messageGroup,\n        this.endpoint,\n        this.DtvBoxSubscriptionMapper\n      )\n    );\n  }\n\n  getAddresses(): Observable<Address[]> {\n    // For now we use the return devices Client Service for fetching addresses.\n    // This will be moved to a seperated Client Service in the future.\n    return this.ocapiService.doGet(\n      new OcapiCallConfig<RawAddressModel[], Address[]>(\n        this.messageGroup,\n        '/public/api/return-devices-service/v1/addresses',\n        new AddressMapper()\n      )\n    );\n  }\n\n  resetPincode(identifier: string): Observable<HttpResponse<null>> {\n    const path = `${this.endpoint}/${identifier}/resetPin`;\n    return this.ocapiService.doPost(new OcapiCallConfig(this.messageGroup, path, undefined, {}, undefined, true));\n  }\n}\n","import { Directive, ElementRef, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { ConfigService } from '@telenet/ng-lib-config';\n\n@Directive({\n  standalone: true,\n  selector: '[tgEntertainmentDtvBoxImageSrcInterceptor]',\n})\nexport class ImageSrcInterceptorDirective implements OnChanges {\n  // imagesRootPath is configured in AEM (eg: /content/dam/www-telenet-touch/nl/common/components/dtv-details)\n  // On localhost and storybook, this will be an empty string.\n  @Input('tgEntertainmentDtvBoxImageSrcInterceptor') imagesRootPath = '';\n  @Input() src = '';\n\n  private readonly moduleId = 'tg-entertainment-dtv-box-overview';\n\n  constructor(\n    private readonly el: ElementRef,\n    private readonly configService: ConfigService\n  ) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const source: string = changes['src'].currentValue.replace('/assets/', '');\n\n    if (this.isRemoteHost()) {\n      this.el.nativeElement.src = `${this.imagesRootPath}/${source}`;\n    } else {\n      this.el.nativeElement.src = '/assets/' + source;\n    }\n  }\n\n  isRemoteHost(): boolean {\n    return !!this.configService.getRemoteHostConfig(this.moduleId)?.remoteHost;\n  }\n}\n"],"names":["EffectsModule","StoreModule","DtvBoxManagementEffects","dtvBoxManagementFeature","DtvBoxManagementNgrxModule","forFeature","imports","i1","EffectsFeatureModule","i2","StoreFeatureModule","createAction","emptyProps","props","loadSubscriptions","loadSubscriptionsSuccess","loadSubscriptionsFailure","loadAddresses","loadAddressesSuccess","loadAddressesFailure","setSelectedAddress","resetPinCode","resetPinCodeSuccess","resetPinCodeFailure","showSecurityCode","Actions","createEffect","ofType","catchError","map","switchMap","DtvBoxManagementService","of","actions$","dtvBoxManagementService","loadSubscriptions$","loadAddresses$","resetPinCode$","constructor","pipe","getSubscriptions","subscriptions","error","getAddresses","addresses","request","resetPincode","identifier","response","status","message","statusText","i0","ɵɵinject","factory","ɵfac","providedIn","inject","Store","selectAddressesWithDtvBoxes","selectIsPinCodeReset","selectSelectedAddress","selectShowSecurityCode","selectSubscriptionsWithDtvBoxes","selectSubscriptionsBySelectedAddress","DtvBoxManagementFacade","store","subscriptions$","select","addressesWithDtvBoxes$","selectedAddress$","isPinCodeReset$","showSecurityCode$","selectedDtvSubscription$","dispatch","address","createFeature","createReducer","on","initialState","DTV_BOX_MANAGEMENT_FEATURE_KEY","dtvBoxManagementReducer","state","isLoading","action","selectedAddress","isPinCodeReset","name","reducer","createFeatureSelector","createSelector","filter","subscription","dtvBoxes","length","selectAddresses","some","addressId","id","find","selectError","selectedAddressDevices","undefined","SuccessModel","DtvBoxType","SaleType","AddressMapper","toModel","rawAddress","country","countryCode","city","postalCode","street","houseNumber","NormalizationService","DtvBoxSubscriptionMapper","normalizationService","rawSubscriptions","raw","mapDtvBoxes","devices","type","saleType","macAddress","serialNumber","modelNumber","modelImageName","getModelImageName","normalizeKey","OcapiCallConfig","OcapiService","messageGroup","endpoint","ocapiService","doGet","path","doPost","ElementRef","SimpleChanges","ConfigService","ImageSrcInterceptorDirective","el","configService","imagesRootPath","src","moduleId","ngOnChanges","changes","source","currentValue","replace","isRemoteHost","nativeElement","getRemoteHostConfig","remoteHost","ɵɵdirectiveInject","selectors","inputs","ɵɵInputFlags","None","standalone","features","ɵɵNgOnChangesFeature"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}