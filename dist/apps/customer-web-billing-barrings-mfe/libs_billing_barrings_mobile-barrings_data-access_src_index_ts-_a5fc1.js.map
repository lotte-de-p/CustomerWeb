{"version":3,"file":"libs_billing_barrings_mobile-barrings_data-access_src_index_ts-_a5fc1.js","mappings":"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","sources":["./libs/billing/barrings/mobile-barrings/data-access/src/index.ts","./libs/billing/barrings/mobile-barrings/data-access/src/lib/+state/mobile-barrings-datalayer.facade.ts","./libs/billing/barrings/mobile-barrings/data-access/src/lib/+state/mobile-barrings-ngrx.module.ts","./libs/billing/barrings/mobile-barrings/data-access/src/lib/+state/mobile-barrings.actions.ts","./libs/billing/barrings/mobile-barrings/data-access/src/lib/+state/mobile-barrings.effects.ts","./libs/billing/barrings/mobile-barrings/data-access/src/lib/+state/mobile-barrings.facade.ts","./libs/billing/barrings/mobile-barrings/data-access/src/lib/+state/mobile-barrings.reducers.ts","./libs/billing/barrings/mobile-barrings/data-access/src/lib/+state/mobile-barrings.selectors.ts","./libs/billing/barrings/mobile-barrings/data-access/src/lib/entities/mobile-barrings.interface.ts","./libs/billing/barrings/mobile-barrings/data-access/src/lib/services/mobile-barrings-datalayer.service.ts","./libs/billing/barrings/mobile-barrings/data-access/src/lib/services/mobile-barrings.service.ts"],"sourcesContent":["export * from './lib/+state/mobile-barrings.facade';\nexport * from './lib/+state/mobile-barrings-datalayer.facade';\nexport { MyBaseDashoardNgrxModule } from './lib/+state/mobile-barrings-ngrx.module';\nexport {\n  MobileBarringGroup,\n  MobileBarringSettings,\n  UpdateMobileBarrings,\n  BarringsToUpdate,\n  MobileBarrings,\n  ALL_INCOMING_AND_OUTGOING,\n  ALL_INCOMING_AND_OUTGOING_GROUP,\n  MobileBarringStatus,\n  MobileBarringsDatalayer,\n} from './lib/entities/mobile-barrings.interface';\n","import { inject, Injectable } from '@angular/core';\nimport { MobileBarringsDatalayer } from '../entities/mobile-barrings.interface';\nimport { MobileBarringsDatalayerService } from '../services/mobile-barrings-datalayer.service';\n\n@Injectable({ providedIn: 'root' })\nexport class MobileBarringsDatalayerFacade {\n  private readonly mobileBarringsDatalayerService = inject(MobileBarringsDatalayerService);\n\n  initDataLayer(): void {\n    this.mobileBarringsDatalayerService.initDataLayer();\n  }\n\n  sendDatalayerEvent(event: MobileBarringsDatalayer) {\n    this.mobileBarringsDatalayerService.sendDataLayerEventWithAttributes(event);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { MobileBarringsEffects } from './mobile-barrings.effects';\nimport { mobileBarringsFeature } from './mobile-barrings.reducers';\n\n@NgModule({\n  imports: [EffectsModule.forFeature([MobileBarringsEffects]), StoreModule.forFeature(mobileBarringsFeature)],\n})\nexport class MyBaseDashoardNgrxModule {}\n","import { createAction, props } from '@ngrx/store';\nimport { MobileBarrings } from '../entities/mobile-barrings.interface';\nimport { MobileLine } from '@billing/shared/data-access';\n\nexport const fetchMobileBarringsSuccess = createAction(\n  '[mobile-barrings] fetchMobileBarringsSuccess',\n  props<{\n    mobileBarringObject: MobileBarrings;\n  }>()\n);\n\nexport const fetchMobileBarringsFailure = createAction(\n  '[mobile-barrings] fetchMobileBarringsFailure',\n  props<{\n    error: string;\n  }>()\n);\n\nexport const setSelectedMobileLine = createAction(\n  '[mobile-barrings] setSelectedMobileLine',\n  props<{\n    selectedMobileLine: MobileLine;\n  }>()\n);\n\nexport const triggerLoading = createAction(\n  '[mobile-barrings] triggerLoading',\n  props<{\n    value: boolean;\n  }>()\n);\n","import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { MobileBarringsFacade } from './mobile-barrings.facade';\nimport { MobileBarringsService } from '../services/mobile-barrings.service';\nimport {\n  fetchMobileBarringsFailure,\n  fetchMobileBarringsSuccess,\n  setSelectedMobileLine,\n} from './mobile-barrings.actions';\nimport { catchError, concatMap, map, of, startWith } from 'rxjs';\nimport { MobileBarringStatus, MobileBarrings } from '../entities/mobile-barrings.interface';\n\n@Injectable({ providedIn: 'root' })\nexport class MobileBarringsEffects {\n  loadMobileBarrings$;\n  defaultMobileBarrings: MobileBarrings = {\n    productName: '',\n    updatable: true,\n    productStatus: '',\n    barringGroups: [],\n  };\n\n  constructor(\n    private readonly actions$: Actions,\n    private readonly facade: MobileBarringsFacade,\n    private readonly mobileBarringsService: MobileBarringsService\n  ) {\n    this.loadMobileBarrings$ = createEffect(() =>\n      this.actions$.pipe(\n        ofType(setSelectedMobileLine),\n        concatMap(() => this.facade.selectMobileBarringSelectedMobileLine$),\n        concatMap((mobileLine) => {\n          if (mobileLine.status === MobileBarringStatus.ACTIVATION_IN_PROGRESS_STATUS) {\n            // we need to do this or the skeleton will keep flashing\n            this.facade.triggerLoading(false);\n            return of(this.defaultMobileBarrings);\n          } else {\n            return this.mobileBarringsService.getMobileBarrings(mobileLine.msisdn);\n          }\n        }),\n        map((mobileBarringObject) => fetchMobileBarringsSuccess({ mobileBarringObject })),\n        catchError((error, source) => source.pipe(startWith(fetchMobileBarringsFailure({ error }))))\n      )\n    );\n  }\n}\n","import { inject, Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { MobileBarrings, UpdateMobileBarrings } from '../entities/mobile-barrings.interface';\nimport { MobileBarringsService } from '../services/mobile-barrings.service';\nimport { fetchMobileBarringsSuccess, setSelectedMobileLine, triggerLoading } from './mobile-barrings.actions';\nimport { MobileBarringsState } from './mobile-barrings.reducers';\nimport {\n  selectLoadingState,\n  selectMobileBarringError,\n  selectMobileBarringGroups,\n  selectMobileBarringProductStatus,\n  selectMobileBarringReadOnly,\n  selectMobileBarringSelectedMobileLine,\n} from './mobile-barrings.selectors';\nimport { MobileLine } from '@billing/shared/data-access';\n\n@Injectable({ providedIn: 'root' })\nexport class MobileBarringsFacade {\n  private readonly store = inject(Store<MobileBarringsState>);\n  private readonly mobileBarringService = inject(MobileBarringsService);\n\n  selectMobileBarringSelectedMobileLine$ = this.store.select(selectMobileBarringSelectedMobileLine);\n  mobileBarringGroups$ = this.store.select(selectMobileBarringGroups);\n  mobileBarringReadOnly$ = this.store.select(selectMobileBarringReadOnly);\n  mobileBarringProductStatus$ = this.store.select(selectMobileBarringProductStatus);\n  mobileBarringError$ = this.store.select(selectMobileBarringError);\n  loadingState$ = this.store.select(selectLoadingState);\n\n  setSelectedMobileLine(selectedMobileLine: MobileLine) {\n    this.store.dispatch(setSelectedMobileLine({ selectedMobileLine }));\n  }\n\n  updateBarrings(payload: UpdateMobileBarrings, msisdn: string) {\n    return this.mobileBarringService.updateMobileBarrings(payload, msisdn);\n  }\n\n  triggerLoading(value: boolean) {\n    this.store.dispatch(triggerLoading({ value }));\n  }\n\n  setMobileBarrings(mobileBarringObject: MobileBarrings) {\n    this.store.dispatch(fetchMobileBarringsSuccess({ mobileBarringObject }));\n  }\n}\n","import { createFeature, createReducer, on } from '@ngrx/store';\n\nimport {\n  fetchMobileBarringsFailure,\n  fetchMobileBarringsSuccess,\n  setSelectedMobileLine,\n  triggerLoading,\n} from './mobile-barrings.actions';\nimport { MobileBarringGroup } from '../entities/mobile-barrings.interface';\nimport { MobileLine } from '@billing/shared/data-access';\n\nexport const MOBILE_BARRINGS_FEATURE_KEY = 'mobile-barrings';\n\nexport interface MobileBarringsState {\n  barringGroups: MobileBarringGroup[];\n  readOnly: boolean;\n  productName: string;\n  loading: boolean;\n  selectedMobileLine: MobileLine;\n  productStatus: string;\n  loadError: string | undefined;\n}\n\nexport const initialState: MobileBarringsState = {\n  barringGroups: [],\n  readOnly: false,\n  productName: '',\n  loading: false,\n  loadError: undefined,\n  productStatus: '',\n  selectedMobileLine: {\n    name: '',\n    msisdn: '',\n    isDataOnly: false,\n  },\n};\n\nexport const mobileBarringsReducer = createReducer(\n  initialState,\n  on(triggerLoading, (state: MobileBarringsState, action) => ({\n    ...state,\n    loading: action.value,\n  })),\n  on(fetchMobileBarringsSuccess, (state: MobileBarringsState, action) => ({\n    ...state,\n    loading: false,\n    barringGroups: action.mobileBarringObject.barringGroups,\n    readOnly: !action.mobileBarringObject.updatable,\n    productName: action.mobileBarringObject.productName,\n    productStatus: action.mobileBarringObject.productStatus,\n  })),\n  on(fetchMobileBarringsFailure, (state: MobileBarringsState, action) => ({\n    ...state,\n    loading: false,\n    loadError: action.error,\n  })),\n  on(setSelectedMobileLine, (state: MobileBarringsState, action) => ({\n    ...state,\n    loading: true,\n    selectedMobileLine: action.selectedMobileLine,\n  }))\n);\n\nexport const mobileBarringsFeature = createFeature({\n  name: MOBILE_BARRINGS_FEATURE_KEY,\n  reducer: mobileBarringsReducer,\n});\n","import { createFeatureSelector, createSelector } from '@ngrx/store';\nimport { MOBILE_BARRINGS_FEATURE_KEY, MobileBarringsState } from './mobile-barrings.reducers';\n\nexport const selectMobileBarringsFeature = createFeatureSelector<MobileBarringsState>(MOBILE_BARRINGS_FEATURE_KEY);\n\nexport const selectMobileBarringGroups = createSelector(selectMobileBarringsFeature, (state) => state.barringGroups);\n\nexport const selectMobileBarringReadOnly = createSelector(selectMobileBarringsFeature, (state) => state.readOnly);\n\nexport const selectMobileBarringError = createSelector(selectMobileBarringsFeature, (state) => state.loadError);\n\nexport const selectMobileBarringProductStatus = createSelector(\n  selectMobileBarringsFeature,\n  (state) => state.productStatus\n);\n\nexport const selectMobileBarringSelectedMobileLine = createSelector(\n  selectMobileBarringsFeature,\n  (state) => state.selectedMobileLine\n);\n\nexport const selectLoadingState = createSelector(selectMobileBarringsFeature, (state) => state.loading);\n","export interface MobileBarrings {\n  productName: string;\n  updatable: boolean;\n  productStatus: string;\n  barringGroups: MobileBarringGroup[];\n}\n\nexport interface MobileBarringGroup {\n  code: string;\n  barringSettings: MobileBarringSettings[];\n  disabledByFraud?: boolean;\n}\n\nexport interface MobileBarringSettings {\n  id: string;\n  code: string;\n  isBarred: boolean;\n  mutualExclusiveBarringIds?: string[];\n  isSetByFraudManager: boolean;\n}\n\nexport interface UpdateMobileBarrings {\n  updateBarringSettings: BarringsToUpdate[];\n  advisorId?: string | undefined;\n}\n\nexport interface BarringsToUpdate {\n  id: string;\n  isBarred: boolean;\n}\n\nexport const ALL_INCOMING_AND_OUTGOING = 'all-incoming-and-outgoing';\nexport const ALL_INCOMING_AND_OUTGOING_GROUP = 'general';\n\nexport enum MobileBarringStatus {\n  ACTIVE_STATUS = 'ACTIVE',\n  SUSPENDED_STATUS = 'SUSPENDED',\n  ACTIVATION_IN_PROGRESS_STATUS = 'ACTIVATION_IN_PROGRESS',\n  DISCONNECTION_IN_PROGRESS_STATUS = 'DISCONNECTION_IN_PROGRESS',\n  DISCONNECTED_STATUS = 'DISCONNECTED',\n}\n\nexport interface MobileBarringsDatalayer {\n  eventName: string;\n  eventType: string;\n  attributeName: string;\n  attributeData?: string;\n  attributeGroup?: string;\n  destinationUrl?: string;\n}\n","import { Injectable } from '@angular/core';\nimport { DataLayerService } from '@telenet/ng-lib-datalayer';\nimport { MobileBarringsDatalayer } from '../entities/mobile-barrings.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MobileBarringsDatalayerService {\n  private static readonly MESSAGE_GROUP = 'mobile';\n  public static readonly CATEGORY_GENERAL = 'care';\n\n  public static readonly ATTRIBUTES_ITEM_NAME = 'itemName';\n  public static readonly ATTRIBUTES_ITEM_DATA = 'itemData';\n  public static readonly ATTRIBUTES_ITEM_GROUP = 'itemGroup';\n  public static readonly ATTRIBUTES_DESTINATION_URL = 'destinationURL';\n\n  constructor(private readonly dataLayerService: DataLayerService) {}\n\n  sendDataLayerEventWithAttributes(event: MobileBarringsDatalayer) {\n    const attributes: Record<string, unknown> = {};\n\n    attributes[MobileBarringsDatalayerService.ATTRIBUTES_ITEM_NAME] = event.attributeName;\n    attributes[MobileBarringsDatalayerService.ATTRIBUTES_ITEM_DATA] = event.attributeData;\n    attributes[MobileBarringsDatalayerService.ATTRIBUTES_ITEM_GROUP] = event.attributeGroup;\n    attributes[MobileBarringsDatalayerService.ATTRIBUTES_DESTINATION_URL] = event.destinationUrl;\n    const category = this.dataLayerService.createCategory(\n      MobileBarringsDatalayerService.CATEGORY_GENERAL,\n      MobileBarringsDatalayerService.MESSAGE_GROUP\n    );\n    const eventInfo = this.dataLayerService.createEventInfo(event.eventName, event.eventType, [\n      MobileBarringsDatalayerService.MESSAGE_GROUP,\n    ]);\n    this.dataLayerService.addEvent(eventInfo, attributes, category);\n  }\n\n  initDataLayer(): void {\n    this.dataLayerService.init();\n  }\n}\n","import { OcapiCallConfig, OcapiService } from '@telenet/ng-lib-ocapi';\nimport { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { MobileBarrings, UpdateMobileBarrings } from '../entities/mobile-barrings.interface';\n\n@Injectable({ providedIn: 'root' })\nexport class MobileBarringsService {\n  private static readonly MESSAGE_GROUP = 'mobile-barrings';\n  constructor(private readonly ocapiService: OcapiService) {}\n\n  getMobileBarrings(msisdn: string): Observable<MobileBarrings> {\n    const endpoint = `/public/api/mobile-barrings-service/v1/mobile-barrings/${msisdn}`;\n    return this.ocapiService.doGet(new OcapiCallConfig(MobileBarringsService.MESSAGE_GROUP, endpoint));\n  }\n\n  updateMobileBarrings(payload: UpdateMobileBarrings, msisdn: string): Observable<MobileBarrings> {\n    const endpoint = `/public/api/mobile-barrings-service/v1/mobile-barrings/${msisdn}`;\n    return this.ocapiService.doPatch(\n      new OcapiCallConfig(MobileBarringsService.MESSAGE_GROUP, endpoint, undefined, payload)\n    );\n  }\n}\n"],"names":["MyBaseDashoardNgrxModule","ALL_INCOMING_AND_OUTGOING","ALL_INCOMING_AND_OUTGOING_GROUP","MobileBarringStatus","inject","MobileBarringsDatalayerService","MobileBarringsDatalayerFacade","constructor","mobileBarringsDatalayerService","initDataLayer","sendDatalayerEvent","event","sendDataLayerEventWithAttributes","_","_2","factory","ɵfac","providedIn","EffectsModule","StoreModule","MobileBarringsEffects","mobileBarringsFeature","_3","forFeature","imports","i1","EffectsFeatureModule","i2","StoreFeatureModule","createAction","props","fetchMobileBarringsSuccess","fetchMobileBarringsFailure","setSelectedMobileLine","triggerLoading","Actions","createEffect","ofType","MobileBarringsFacade","MobileBarringsService","catchError","concatMap","map","of","startWith","actions$","facade","mobileBarringsService","defaultMobileBarrings","productName","updatable","productStatus","barringGroups","loadMobileBarrings$","pipe","selectMobileBarringSelectedMobileLine$","mobileLine","status","ACTIVATION_IN_PROGRESS_STATUS","getMobileBarrings","msisdn","mobileBarringObject","error","source","i0","ɵɵinject","i3","Store","selectLoadingState","selectMobileBarringError","selectMobileBarringGroups","selectMobileBarringProductStatus","selectMobileBarringReadOnly","selectMobileBarringSelectedMobileLine","store","mobileBarringService","select","mobileBarringGroups$","mobileBarringReadOnly$","mobileBarringProductStatus$","mobileBarringError$","loadingState$","selectedMobileLine","dispatch","updateBarrings","payload","updateMobileBarrings","value","setMobileBarrings","createFeature","createReducer","on","MOBILE_BARRINGS_FEATURE_KEY","initialState","readOnly","loading","loadError","undefined","name","isDataOnly","mobileBarringsReducer","state","action","reducer","createFeatureSelector","createSelector","selectMobileBarringsFeature","DataLayerService","MESSAGE_GROUP","CATEGORY_GENERAL","ATTRIBUTES_ITEM_NAME","_4","ATTRIBUTES_ITEM_DATA","_5","ATTRIBUTES_ITEM_GROUP","_6","ATTRIBUTES_DESTINATION_URL","dataLayerService","attributes","attributeName","attributeData","attributeGroup","destinationUrl","category","createCategory","eventInfo","createEventInfo","eventName","eventType","addEvent","init","_7","_8","OcapiCallConfig","OcapiService","ocapiService","endpoint","doGet","doPatch"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}