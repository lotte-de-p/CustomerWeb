{"version":3,"file":"libs_billing_barrings_mobile-barrings_feat-mobile-barrings_src_index_ts.js","mappings":"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","sources":["./libs/billing/barrings/mobile-barrings/feat-mobile-barrings/src/index.ts","./libs/billing/barrings/mobile-barrings/feat-mobile-barrings/src/lib/barring/barring.component.ts","./libs/billing/barrings/mobile-barrings/feat-mobile-barrings/src/lib/barring/barring.component.html","./libs/billing/barrings/mobile-barrings/feat-mobile-barrings/src/lib/mobile-barrings.component.ts","./libs/billing/barrings/mobile-barrings/feat-mobile-barrings/src/lib/mobile-barrings.component.html"],"sourcesContent":["export * from './lib/mobile-barrings.component';\nexport * from './lib/barring/barring.component';\n","import { Component, EventEmitter, Input, Output, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BarringSelectorComponent } from '@billing/barrings/mobile-barrings/ui';\nimport {\n  MobileBarringGroup,\n  MobileBarringSettings,\n  MobileBarringsDatalayer,\n} from '@billing/barrings/mobile-barrings/data-access';\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\n\n@Component({\n  selector: 'tg-barring',\n  standalone: true,\n  imports: [CommonModule, BarringSelectorComponent, TranslateModule],\n  templateUrl: './barring.component.html',\n})\nexport class BarringComponent {\n  private readonly translateService = inject(TranslateService);\n  @Input() set barringGroup(data: { group: MobileBarringGroup; savedBarring: boolean }) {\n    if (data?.group) {\n      this.barringGroupData = data.group;\n      if (data.savedBarring) {\n        this.activeBarrings = data.group.barringSettings.reduce((setting: string[], item) => {\n          if (item.isBarred) {\n            setting.push(this.translateService.instant(`ng.mobile-barrings.barring-name.${item.code}`));\n          }\n          return setting;\n        }, []);\n      }\n      if (data.group.disabledByFraud) {\n        const analyticsEvent: MobileBarringsDatalayer = {\n          eventName: 'message banner',\n          eventType: 'view-banner',\n          attributeName: 'fraud ban',\n          attributeData: 'info',\n          attributeGroup: data.group.code,\n        };\n        this.addAnalyticsEvent.emit(analyticsEvent);\n      }\n    }\n  }\n  @Input() isReadOnly = false;\n  @Input() globalBarringEnabled = false;\n  @Input() bannerLinkClicked = false;\n  @Input() suspendedNumber = false;\n  @Input() originalValueOfGeneralBarring!: boolean;\n\n  @Output() saveBarrings = new EventEmitter();\n  @Output() toggleBarring = new EventEmitter<{ setting: MobileBarringSettings; groupCode: string }>();\n  @Output() cancel = new EventEmitter();\n  @Output() addAnalyticsEvent = new EventEmitter<MobileBarringsDatalayer>();\n\n  activeBarrings: string[] = [];\n  barringGroupData!: MobileBarringGroup;\n\n  switchBarring(setting: MobileBarringSettings) {\n    this.toggleBarring.emit({ setting, groupCode: this.barringGroupData.code });\n  }\n}\n","<div class=\"background-white\">\n  <div class=\"barring-header display--flex justify-content--between align-items--center p--xl\">\n    <div class=\"title heading--4 m--n\">{{ 'ng.mobile-barrings.group.title.' + barringGroupData.code | translate }}</div>\n    <tg-barring-selector\n      [isReadOnly]=\"isReadOnly\"\n      [barringSettings]=\"barringGroupData\"\n      [globalBarringEnabled]=\"globalBarringEnabled\"\n      [bannerLinkIsClicked]=\"bannerLinkClicked\"\n      [suspendedNumber]=\"suspendedNumber\"\n      [originalValueOfGeneralBarring]=\"originalValueOfGeneralBarring\"\n      (saveBarrings)=\"saveBarrings.emit()\"\n      (toggleBarring)=\"switchBarring($event)\"\n      (cancel)=\"cancel.emit()\"\n      (addAnalyticsEvent)=\"addAnalyticsEvent.emit($event)\"></tg-barring-selector>\n  </div>\n  <div class=\"divider divider--s__very-light-grey\"></div>\n  <div class=\"barring-details p--xl\">\n    @if (barringGroupData.disabledByFraud) {\n      <div class=\"background-notification--info--light--shade_16 p--m mb--l display--flex\">\n        <i class=\"icon icon-md icon-information-shape color-notification--info--light mr--l\"></i>\n        <div>\n          <div class=\"heading--6 mt--n mb--m\">\n            {{ 'ng.mobile-barrings.disabled-by-fraud.title' | translate }}\n          </div>\n          <div class=\"font--body-regular\">\n            {{ 'ng.mobile-barrings.disabled-by-fraud.explanation' | translate }}\n          </div>\n        </div>\n      </div>\n    }\n    <div class=\"barring-text mb--l text-flow text-flow--detail\">\n      {{ 'ng.mobile-barrings.group.description.' + barringGroupData.code | translate }}\n    </div>\n    <div class=\"current-barring-title font--caption\">\n      {{ 'ng.mobile-barrings.group.current-bar' | translate }}\n    </div>\n    @if (!activeBarrings.length) {\n      <div class=\"current-barring text-flow text-flow--h6\">\n        {{ 'ng.mobile-barrings.group.no-restrictions' | translate }}\n      </div>\n    }\n    @for (activeBar of activeBarrings; track activeBar) {\n      <ul\n        class=\"current-barring display--flex align-items--center text-flow text-flow--h6 listing--bullit\"\n        [ngClass]=\"{ 'listing--none': activeBarrings.length === 1, ' pl--m': activeBarrings.length !== 1 }\">\n        <li>{{ activeBar }}</li>\n      </ul>\n    }\n  </div>\n</div>\n","import { CommonModule } from '@angular/common';\nimport { Component, inject } from '@angular/core';\nimport {\n  ALL_INCOMING_AND_OUTGOING,\n  ALL_INCOMING_AND_OUTGOING_GROUP,\n  BarringsToUpdate,\n  MobileBarringGroup,\n  MobileBarringSettings,\n  MobileBarringStatus,\n  MobileBarrings,\n  MobileBarringsDatalayer,\n  MobileBarringsDatalayerFacade,\n  MobileBarringsFacade,\n  MyBaseDashoardNgrxModule,\n  UpdateMobileBarrings,\n} from '@billing/barrings/mobile-barrings/data-access';\nimport { MobileLine } from '@billing/shared/data-access';\nimport { MobileLineSelectorComponent } from '@billing/shared/feat-mobile-line-selector';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { LoginModule, UserDetailsService } from '@telenet/ng-lib-ocapi';\nimport { AbstractBaseComponent } from '@telenet/ng-lib-page';\nimport { combineLatest, map, switchMap, takeUntil } from 'rxjs';\nimport { BarringComponent } from './barring/barring.component';\nimport { ErrorNotificationComponent } from '@billing/shared/ui';\n\n@Component({\n  selector: 'tg-mobile-barrings',\n  standalone: true,\n  imports: [\n    MyBaseDashoardNgrxModule,\n    CommonModule,\n    BarringComponent,\n    LoginModule,\n    MobileLineSelectorComponent,\n    TranslateModule,\n    ErrorNotificationComponent,\n  ],\n  templateUrl: './mobile-barrings.component.html',\n  styleUrl: './mobile-barrings.component.scss',\n})\nexport class MobileBarringsComponent extends AbstractBaseComponent {\n  private readonly facade: MobileBarringsFacade = inject(MobileBarringsFacade);\n  protected readonly userDetailsService = inject(UserDetailsService);\n  private readonly datalayerFacade = inject(MobileBarringsDatalayerFacade);\n  scopes = ['barringsettings'];\n  mobileBarringGroups$ = this.facade.mobileBarringGroups$;\n  mobileBarringReadOnly$ = this.facade.mobileBarringReadOnly$;\n  mobileBarringProductStatus$ = this.facade.mobileBarringProductStatus$;\n  mobileBarringsLoading$ = this.facade.loadingState$;\n  mobileBarringError$ = this.facade.mobileBarringError$;\n  mobileBarringGroups!: MobileBarringGroup[];\n  originalMobileBarringGroups!: MobileBarringGroup[];\n  saveSuccessful = false;\n  isReadOnly = false;\n  errorOnSave = false;\n  savedBarring = true;\n  barringGroupOrder = {\n    general: 1,\n    roaming: 2,\n    'premium-voice': 3,\n    'premium-sms': 4,\n    'pay-by-mobile': 5,\n  };\n  globalBarringEnabled = false;\n  originalValueOfGeneralBarring!: boolean;\n  bannerLinkClicked = false;\n  suspendedNumber = false;\n  showGlobalBarringEnabledMessage = false;\n\n  initAfterLoggedIn() {\n    this.datalayerFacade.initDataLayer();\n    this.obs(this.mobileBarringReadOnly$)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe((readOnly) => {\n        this.isReadOnly = readOnly;\n        if (this.isReadOnly) {\n          const analyticsEvent: MobileBarringsDatalayer = {\n            eventName: 'message banner',\n            eventType: 'view-banner',\n            attributeName: 'member message',\n            attributeData: 'info',\n          };\n          this.addAnalyticsEvent(analyticsEvent);\n        }\n      });\n    this.obs(this.mobileBarringGroups$)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe((groups) => {\n        const groupsCheckedWithFraud = this.checkFraud(groups);\n        this.originalMobileBarringGroups = groupsCheckedWithFraud;\n        this.mobileBarringGroups = JSON.parse(JSON.stringify(groupsCheckedWithFraud));\n\n        // we have to track the original value of general barring because of the second window that needs to open\n        this.originalValueOfGeneralBarring = this.checkForGlobalSetting();\n        this.globalBarringEnabled = this.checkForGlobalSetting();\n        this.showGlobalBarringEnabledMessage = this.checkForGlobalSetting();\n      });\n    this.obs(this.mobileBarringProductStatus$)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe((productStatus) => {\n        this.suspendedNumber = productStatus === MobileBarringStatus.SUSPENDED_STATUS;\n      });\n  }\n\n  onSelectMobileLine(mobileLine: MobileLine): void {\n    if (mobileLine) {\n      this.facade.setSelectedMobileLine(mobileLine);\n      this.errorOnSave = false;\n      this.saveSuccessful = false;\n    }\n  }\n\n  toggleBarring(data: { setting: MobileBarringSettings; groupCode: string }) {\n    // this stupid boolean is making sure the barring component does not update when doing stuff in selector\n    this.savedBarring = false;\n    const newRefGroup: MobileBarringGroup[] = JSON.parse(JSON.stringify(this.mobileBarringGroups));\n    const affectedGroup = newRefGroup.find((group) => group.code === data.groupCode);\n    if (affectedGroup) {\n      const setting = affectedGroup.barringSettings.find((set) => set.id === data.setting.id);\n      if (setting) {\n        setting.isBarred = !setting?.isBarred;\n        if (setting.isBarred && setting.mutualExclusiveBarringIds?.length) {\n          setting.mutualExclusiveBarringIds.forEach((exBarId) => {\n            newRefGroup.forEach((group) => {\n              group.barringSettings.forEach((set) => {\n                if (set.id === exBarId) {\n                  set.isBarred = false;\n                }\n              });\n            });\n          });\n        }\n      }\n    }\n    this.mobileBarringGroups = newRefGroup;\n    this.globalBarringEnabled = this.checkForGlobalSetting();\n  }\n\n  checkFraud(groups: MobileBarringGroup[]): MobileBarringGroup[] {\n    const groupsCheckedForFraud: MobileBarringGroup[] = JSON.parse(JSON.stringify(groups));\n    let fraudIds: string[] = [];\n    groupsCheckedForFraud.forEach((group: MobileBarringGroup) => {\n      group.barringSettings.forEach((set) => {\n        if (set.isSetByFraudManager) {\n          fraudIds = [...fraudIds, set.id];\n          if (set.mutualExclusiveBarringIds?.length) {\n            fraudIds = [...fraudIds, ...set.mutualExclusiveBarringIds];\n          }\n        }\n      });\n    });\n    groupsCheckedForFraud.forEach((gr: MobileBarringGroup) => {\n      gr.disabledByFraud = gr.barringSettings.some((set) => fraudIds.includes(set.id));\n    });\n    return groupsCheckedForFraud;\n  }\n\n  checkForGlobalSetting(): boolean {\n    return (\n      this.mobileBarringGroups\n        .find((gr) => gr.code === ALL_INCOMING_AND_OUTGOING_GROUP)\n        ?.barringSettings.find((set) => set.code === ALL_INCOMING_AND_OUTGOING)?.isBarred ?? false\n    );\n  }\n\n  cancel() {\n    this.mobileBarringGroups = JSON.parse(JSON.stringify(this.originalMobileBarringGroups));\n    this.globalBarringEnabled = this.checkForGlobalSetting();\n    this.bannerLinkClicked = false;\n  }\n\n  openGeneral(event: Event) {\n    event.stopPropagation();\n    this.bannerLinkClicked = true;\n  }\n\n  addAnalyticsEvent(event: MobileBarringsDatalayer) {\n    this.datalayerFacade.sendDatalayerEvent(event);\n  }\n\n  save() {\n    this.facade.triggerLoading(true);\n    this.saveSuccessful = false;\n    this.errorOnSave = false;\n    this.savedBarring = true;\n    window.scrollTo(0, 0);\n\n    const barringsToSave: BarringsToUpdate[] = [];\n    this.mobileBarringGroups.forEach((group) => {\n      const originalGroup = this.originalMobileBarringGroups.find((ori) => ori.code === group.code);\n      group.barringSettings.forEach((setting) => {\n        const original = originalGroup?.barringSettings.find((set) => set.id === setting.id);\n        if (original && original.isBarred !== setting.isBarred) {\n          barringsToSave.push({\n            id: setting.id,\n            isBarred: setting.isBarred,\n          });\n        }\n      });\n    });\n\n    const payload = {\n      updateBarringSettings: barringsToSave,\n      advisorId: undefined,\n    } as UpdateMobileBarrings;\n\n    const selectedMobileLine$ = this.facade.selectMobileBarringSelectedMobileLine$;\n    const advisorId$ = this.userDetailsService.getUserDetails().pipe(map((details) => details.advisorId));\n\n    combineLatest([selectedMobileLine$, advisorId$])\n      .pipe(\n        switchMap(([selectedMobileLine, advisorId]) => {\n          payload.advisorId = advisorId;\n          return this.facade.updateBarrings(payload, selectedMobileLine.msisdn);\n        }),\n        takeUntil(this.unsubscribe$)\n      )\n      .subscribe({\n        next: (response) => {\n          this.saveSuccessful = true;\n          const barrings: MobileBarrings = {\n            barringGroups: response?.barringGroups,\n            updatable: response?.updatable,\n            productName: response?.productName,\n            productStatus: response?.productStatus,\n          };\n          this.facade.setMobileBarrings(barrings);\n        },\n        error: () => {\n          this.errorOnSave = true;\n          this.savedBarring = false;\n          this.facade.triggerLoading(false);\n          this.mobileBarringGroups = JSON.parse(JSON.stringify(this.originalMobileBarringGroups));\n        },\n      });\n  }\n}\n","<tg-login [scopes]=\"scopes\" (componentCanRender)=\"initAfterLoggedIn()\">\n  <div class=\"barrings-wrapper\">\n    @if (mobileBarringError$ | async) {\n      <div class=\"row\">\n        <div class=\"col-12 mt--l--md\">\n          <tg-error-notification\n            [description]=\"'ng.mobile-barrings.error-barrings-description' | translate\"\n            [label]=\"'ng.mobile-barrings.error-barrings-label' | translate\"></tg-error-notification>\n        </div>\n      </div>\n    } @else {\n      <tg-mobile-line-selector (mobileLineSelected)=\"onSelectMobileLine($event)\"></tg-mobile-line-selector>\n      @if (isReadOnly) {\n        <div class=\"background-notification--info--light--shade_16 pl--xl pt--m pr--m pb--m mt--s mb--l\">\n          <i class=\"icon icon-md icon-information-shape color-notification--info--light mr--xs\"></i>\n          <span class=\"heading--6\">\n            {{ 'ng.mobile-barrings.member-read-only' | translate }}\n          </span>\n        </div>\n      }\n      @if (showGlobalBarringEnabledMessage) {\n        <div class=\"background-notification--info--light--shade_16 pl--xl p--m mb--l display--flex\">\n          <i class=\"icon icon-md icon-information-shape color-notification--info--light mr--xs\"></i>\n          <div>\n            <div class=\"heading--6 mt--n\">\n              {{ 'ng.mobile-barrings.global-barring-enabled' | translate }}\n              <span class=\"underline cursor--pointer\" (click)=\"openGeneral($event)\">{{\n                'ng.mobile-barrings.group.title.general' | translate\n              }}</span>\n            </div>\n          </div>\n        </div>\n      }\n      @if (suspendedNumber) {\n        <div class=\"background-notification--info--light--shade_16 pl--xl pt--m pr--m pb--m mt--s mb--l\">\n          <i class=\"icon icon-md icon-information-shape color-notification--info--light mr--xs\"></i>\n          <span class=\"heading--6\">\n            {{ 'ng.mobile-barrings.suspended-mobile-line' | translate }}\n          </span>\n        </div>\n      }\n      @if (saveSuccessful) {\n        <div class=\"background-notification--success--light--shade_16 pl--xl pt--m pr--m pb--m mt--s mb--l\">\n          <i class=\"icon icon-md icon-check-shape color-notification--success--light mr--xs\"></i>\n          <span class=\"heading--6\">\n            {{ 'ng.mobile-barrings.save-successful' | translate }}\n          </span>\n        </div>\n      }\n      @if (errorOnSave) {\n        <div class=\"background-notification--error--light--shade_16 display--flex pl--xl pt--m pr--m pb--m mt--s mb--l\">\n          <i class=\"icon icon-md icon-error-shape color-notification--error--light mr--xs\"></i>\n          <div class=\"display--inline\" [innerHTML]=\"'ng.mobile-barrings.save-error' | translate\"></div>\n        </div>\n      }\n      @if (mobileBarringGroups?.length && (mobileBarringsLoading$ | async) === false) {\n        <div>\n          @for (group of mobileBarringGroups; track $index; let first = $first) {\n            <tg-barring\n              [ngClass]=\"{ 'mt--xl display--block': !first }\"\n              [barringGroup]=\"{ group, savedBarring }\"\n              [isReadOnly]=\"isReadOnly\"\n              [globalBarringEnabled]=\"globalBarringEnabled\"\n              [bannerLinkClicked]=\"bannerLinkClicked\"\n              [suspendedNumber]=\"suspendedNumber\"\n              [originalValueOfGeneralBarring]=\"originalValueOfGeneralBarring\"\n              (saveBarrings)=\"save()\"\n              (toggleBarring)=\"toggleBarring($event)\"\n              (cancel)=\"cancel()\"\n              (addAnalyticsEvent)=\"addAnalyticsEvent($event)\"></tg-barring>\n          }\n        </div>\n      }\n    }\n    @if (mobileBarringsLoading$ | async) {\n      <div class=\"p--xxxg skeleton skeleton--basic skeleton--container\">\n        <div class=\"p--l\"></div>\n      </div>\n      <div class=\"mt--xl p--xxxg skeleton skeleton--basic skeleton--container\">\n        <div class=\"p--l\"></div>\n      </div>\n      <div class=\"mt--xl p--xxxg skeleton skeleton--basic skeleton--container\">\n        <div class=\"p--l\"></div>\n      </div>\n      <div class=\"mt--xl p--xxxg skeleton skeleton--basic skeleton--container\">\n        <div class=\"p--l\"></div>\n      </div>\n      <div class=\"mt--xl p--xxxg skeleton skeleton--basic skeleton--container\">\n        <div class=\"p--l\"></div>\n      </div>\n    }\n  </div>\n</tg-login>\n"],"names":["EventEmitter","inject","CommonModule","BarringSelectorComponent","TranslateModule","TranslateService","i0","ɵɵelementStart","ɵɵelement","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","ɵɵpipeBind1","ɵɵproperty","ɵɵpureFunction2","_c0","ctx_r2","activeBarrings","length","ɵɵtextInterpolate","activeBar_r3","BarringComponent","constructor","translateService","isReadOnly","globalBarringEnabled","bannerLinkClicked","suspendedNumber","saveBarrings","toggleBarring","cancel","addAnalyticsEvent","barringGroup","data","group","barringGroupData","savedBarring","barringSettings","reduce","setting","item","isBarred","push","instant","code","disabledByFraud","analyticsEvent","eventName","eventType","attributeName","attributeData","attributeGroup","emit","switchBarring","groupCode","_","_2","selectors","inputs","originalValueOfGeneralBarring","outputs","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","BarringComponent_Template","rf","ctx","ɵɵlistener","BarringComponent_Template_tg_barring_selector_saveBarrings_5_listener","BarringComponent_Template_tg_barring_selector_toggleBarring_5_listener","$event","BarringComponent_Template_tg_barring_selector_cancel_5_listener","BarringComponent_Template_tg_barring_selector_addAnalyticsEvent_5_listener","ɵɵtemplate","BarringComponent_Conditional_8_Template","BarringComponent_Conditional_15_Template","ɵɵrepeaterCreate","BarringComponent_For_17_Template","ɵɵrepeaterTrackByIdentity","ɵɵconditional","ɵɵrepeater","i1","NgClass","i2","TranslatePipe","encapsulation","ALL_INCOMING_AND_OUTGOING","ALL_INCOMING_AND_OUTGOING_GROUP","MobileBarringStatus","MobileBarringsDatalayerFacade","MobileBarringsFacade","MyBaseDashoardNgrxModule","MobileLineSelectorComponent","LoginModule","UserDetailsService","AbstractBaseComponent","combineLatest","map","switchMap","takeUntil","ErrorNotificationComponent","MobileBarringsComponent_Conditional_4_Conditional_2_Template_span_click_6_listener","ɵɵrestoreView","_r10","ctx_r9","ɵɵnextContext","ɵɵresetView","openGeneral","ɵɵsanitizeHtml","MobileBarringsComponent_Conditional_4_Conditional_6_For_2_Template_tg_barring_saveBarrings_0_listener","_r18","ctx_r17","save","MobileBarringsComponent_Conditional_4_Conditional_6_For_2_Template_tg_barring_toggleBarring_0_listener","ctx_r19","MobileBarringsComponent_Conditional_4_Conditional_6_For_2_Template_tg_barring_cancel_0_listener","ctx_r20","MobileBarringsComponent_Conditional_4_Conditional_6_For_2_Template_tg_barring_addAnalyticsEvent_0_listener","ctx_r21","ɵɵpureFunction1","$index_r13","_c1","group_r12","ctx_r11","MobileBarringsComponent_Conditional_4_Conditional_6_For_2_Template","ɵɵrepeaterTrackByIndex","ctx_r8","mobileBarringGroups","MobileBarringsComponent_Conditional_4_Template_tg_mobile_line_selector_mobileLineSelected_0_listener","_r23","ctx_r22","onSelectMobileLine","MobileBarringsComponent_Conditional_4_Conditional_1_Template","MobileBarringsComponent_Conditional_4_Conditional_2_Template","MobileBarringsComponent_Conditional_4_Conditional_3_Template","MobileBarringsComponent_Conditional_4_Conditional_4_Template","MobileBarringsComponent_Conditional_4_Conditional_5_Template","MobileBarringsComponent_Conditional_4_Conditional_6_Template","ctx_r1","showGlobalBarringEnabledMessage","saveSuccessful","errorOnSave","mobileBarringsLoading$","MobileBarringsComponent","facade","userDetailsService","datalayerFacade","scopes","mobileBarringGroups$","mobileBarringReadOnly$","mobileBarringProductStatus$","loadingState$","mobileBarringError$","barringGroupOrder","general","roaming","initAfterLoggedIn","initDataLayer","obs","pipe","unsubscribe$","subscribe","readOnly","groups","groupsCheckedWithFraud","checkFraud","originalMobileBarringGroups","JSON","parse","stringify","checkForGlobalSetting","productStatus","SUSPENDED_STATUS","mobileLine","setSelectedMobileLine","newRefGroup","affectedGroup","find","set","id","mutualExclusiveBarringIds","forEach","exBarId","groupsCheckedForFraud","fraudIds","isSetByFraudManager","gr","some","includes","event","stopPropagation","sendDatalayerEvent","triggerLoading","window","scrollTo","barringsToSave","originalGroup","ori","original","payload","updateBarringSettings","advisorId","undefined","selectedMobileLine$","selectMobileBarringSelectedMobileLine$","advisorId$","getUserDetails","details","selectedMobileLine","updateBarrings","msisdn","next","response","barrings","barringGroups","updatable","productName","setMobileBarrings","error","t","ɵɵInheritDefinitionFeature","MobileBarringsComponent_Template","MobileBarringsComponent_Template_tg_login_componentCanRender_0_listener","MobileBarringsComponent_Conditional_2_Template","MobileBarringsComponent_Conditional_4_Template","MobileBarringsComponent_Conditional_5_Template","AsyncPipe","LoginComponent","i3","styles"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}