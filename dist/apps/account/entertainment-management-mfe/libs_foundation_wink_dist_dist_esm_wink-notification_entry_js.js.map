{"version":3,"file":"libs_foundation_wink_dist_dist_esm_wink-notification_entry_js.js","mappings":"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","sources":["./libs/foundation/wink/dist/dist/core/src/components/icon/models/icon.types.tsx","./libs/foundation/wink/dist/dist/core/src/models/sizes.types.tsx","./libs/foundation/wink/dist/dist/core/src/models/statuses.types.tsx","./libs/foundation/wink/dist/dist/core/src/components/notification/models/notification.types.tsx","./libs/foundation/wink/dist/dist/core/src/components/notification/styles/brands/notification.base.scss","./libs/foundation/wink/dist/dist/core/src/components/notification/styles/brands/notification.telenet.scss","./libs/foundation/wink/dist/dist/core/src/components/notification/notification.tsx"],"sourcesContent":["import { SIZES } from '../../../models/sizes.types';\n\nexport const ICON_TYPES_BASIS = {\n  default: 'default',\n  primary: 'primary',\n  secondary: 'secondary',\n} as const;\nexport type IconTypeBasis = (typeof ICON_TYPES_BASIS)[keyof typeof ICON_TYPES_BASIS];\n\nexport const ICON_TYPES = {\n  ...ICON_TYPES_BASIS,\n  transparent: 'transparent',\n} as const;\nexport type IconType = (typeof ICON_TYPES)[keyof typeof ICON_TYPES];\n\nexport const ICON_SIZES = {\n  sm: SIZES.sm,\n  md: SIZES.md,\n  lg: SIZES.lg,\n  xl: SIZES.xl,\n} as const;\nexport type IconSize = (typeof ICON_SIZES)[keyof typeof ICON_SIZES];\n","export const SIZES = {\n  sm: 'sm',\n  md: 'md',\n  lg: 'lg',\n  xl: 'xl',\n  '3xs': '3xs',\n  '2xs': '2xs',\n  xs: 'xs',\n  s: 's',\n  m: 'm',\n  l: 'l',\n  none: 'none',\n  full: 'full',\n};\nexport type Size = (typeof SIZES)[keyof typeof SIZES];\n\nexport const WIDTHS = {};\nexport type Width = (typeof WIDTHS)[keyof typeof WIDTHS];\n","export const STATUS_VARIANTS = {\n  information: 'information',\n  success: 'success',\n  error: 'error',\n  warning: 'warning',\n} as const;\nexport type StatusVariants = (typeof STATUS_VARIANTS)[keyof typeof STATUS_VARIANTS];\n","import { STATUS_VARIANTS } from '../../../models/statuses.types';\n\nexport const NOTIFICATION_TYPES = {\n  information: STATUS_VARIANTS.information,\n  success: STATUS_VARIANTS.success,\n  error: STATUS_VARIANTS.error,\n  warning: STATUS_VARIANTS.warning,\n} as const;\nexport type NotificationType = (typeof NOTIFICATION_TYPES)[keyof typeof NOTIFICATION_TYPES];\n","@import '../vars/vars.base';\n@import '../notification.default';\n","@import '../vars/vars.telenet';\n@import '../notification.default';\n","import { Component, h, Host, Prop, State } from '@stencil/core';\nimport { NOTIFICATION_TYPES, NotificationType } from './models/notification.types';\nimport { ICON_SIZES } from '../icon/models/icon.types';\n\n@Component({\n  tag: 'wink-notification',\n  styleUrls: {\n    telenet: 'styles/brands/notification.telenet.scss',\n    base: 'styles/brands/notification.base.scss',\n  },\n  shadow: true,\n})\nexport class Notification {\n  @Prop() appearance: NotificationType = NOTIFICATION_TYPES.information;\n  @Prop() hasCloseIcon = false;\n\n  @State() isNotificationVisible = true;\n\n  private readonly iconsNamesMap = new Map([\n    ['information', 'information-shape'],\n    ['success', 'check-shape'],\n    ['error', 'error-shape'],\n    ['warning', 'alert-shape'],\n  ]);\n\n  private readonly closeNotification = () => {\n    this.isNotificationVisible = false;\n  };\n\n  render() {\n    return (\n      this.isNotificationVisible && (\n        <Host exportparts={`icon, icon-cross-small, icon-${this.iconsNamesMap.get(this.appearance)}`}>\n          <div class={`notification ${this.appearance} ${this.hasCloseIcon ? 'has-close-icon' : ''}`}>\n            <wink-icon size={ICON_SIZES.md} icon={this.iconsNamesMap.get(this.appearance)}></wink-icon>\n\n            {this.hasCloseIcon && (\n              <wink-icon\n                class=\"close-icon\"\n                appearance=\"default\"\n                icon=\"cross-small\"\n                size={ICON_SIZES.md}\n                onClick={this.closeNotification}></wink-icon>\n            )}\n\n            <div class=\"notification-text\">\n              <slot name=\"heading\" />\n              <slot name=\"content\" />\n            </div>\n          </div>\n        </Host>\n      )\n    );\n  }\n}\n"],"names":["ICON_TYPES_BASIS","default","primary","secondary","ICON_TYPES","transparent","ICON_SIZES","sm","SIZES","md","lg","xl","xs","s","m","l","none","full","STATUS_VARIANTS","information","success","error","warning","NOTIFICATION_TYPES","notificationBaseCss","WinkNotificationBaseStyle0","notificationTelenetCss","WinkNotificationTelenetStyle0","Notification","iconsNamesMap","Map","closeNotification","isNotificationVisible","render","h","Host","key","exportparts","get","appearance","class","hasCloseIcon","size","icon","onClick","name"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}