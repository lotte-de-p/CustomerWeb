{"version":3,"file":"libs_engagement_care-service-cases_service-case_data-access_src_index_ts-_f1570.js","mappings":"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","sources":["./libs/engagement/care-service-cases/service-case/data-access/src/index.ts","./libs/engagement/care-service-cases/service-case/data-access/src/lib/+state/service-case-datalayer.effects.ts","./libs/engagement/care-service-cases/service-case/data-access/src/lib/+state/service-case-ngrx.module.ts","./libs/engagement/care-service-cases/service-case/data-access/src/lib/+state/service-case.actions.ts","./libs/engagement/care-service-cases/service-case/data-access/src/lib/+state/service-case.effects.ts","./libs/engagement/care-service-cases/service-case/data-access/src/lib/+state/service-case.reducers.ts","./libs/engagement/care-service-cases/service-case/data-access/src/lib/+state/service-case.selectors.ts","./libs/engagement/care-service-cases/service-case/data-access/src/lib/constants/service-cases.constants.ts","./libs/engagement/care-service-cases/service-case/data-access/src/lib/entitities/service-case.interface.ts","./libs/engagement/care-service-cases/service-case/data-access/src/lib/index.ts","./libs/engagement/care-service-cases/service-case/data-access/src/lib/providers.ts","./libs/engagement/care-service-cases/service-case/data-access/src/lib/service-case.facade.ts","./libs/engagement/care-service-cases/service-case/data-access/src/lib/services/service-case.mapper.ts","./libs/engagement/care-service-cases/service-case/data-access/src/lib/services/service-case.service.ts","./libs/engagement/care-service-cases/service-case/data-access/src/lib/services/service-cases-datalayer.service.ts"],"sourcesContent":["export * from './lib';\n","import { Injectable } from '@angular/core';\nimport { ServiceCasesDatalayerService } from '../services/service-cases-datalayer.service';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport {\n  loadServiceCasesSuccess,\n  selectServiceCase,\n  serviceCasesPageView,\n  toggleHistoryAction,\n} from './service-case.actions';\nimport { combineLatestWith, tap } from 'rxjs/operators';\nimport { ServiceCasesConstants } from '../constants/service-cases.constants';\nimport { Status } from '../entitities/service-case.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ServiceCaseDatalayerEffects {\n  serviceCasesLoaded$;\n  serviceCaseSelected$;\n  toggleHistory$;\n\n  constructor(\n    private readonly actions$: Actions,\n    private readonly serviceCasesDatalayerService: ServiceCasesDatalayerService\n  ) {\n    this.serviceCasesLoaded$ = createEffect(\n      () =>\n        this.actions$.pipe(\n          ofType(loadServiceCasesSuccess),\n          combineLatestWith([this.actions$.pipe(ofType(serviceCasesPageView))]),\n          tap(([{ serviceCases }]) => {\n            if (serviceCases.length === 0) {\n              this.serviceCasesDatalayerService.addPageEvent();\n              this.serviceCasesDatalayerService.sendDataLayerEventWithAttributes(\n                ServiceCasesConstants.NO_SERVICE_CASES_EVENT_NAME,\n                ServiceCasesConstants.EVENT_INFO_TYPE_IMPRESSION\n              );\n            } else {\n              const openCase = serviceCases.find((serviceCase) => serviceCase.status === Status.OPEN);\n              if (openCase !== undefined) {\n                this.serviceCasesDatalayerService.sendDataLayerEventWithAttributes(\n                  ServiceCasesConstants.SERVICE_CASE_NAVIGATION_VIEWED_EVENT_NAME,\n                  ServiceCasesConstants.EVENT_INFO_TYPE_IMPRESSION,\n                  openCase.status,\n                  openCase.type\n                );\n              }\n            }\n          })\n        ),\n      { dispatch: false }\n    );\n\n    this.serviceCaseSelected$ = createEffect(\n      () =>\n        this.actions$.pipe(\n          ofType(selectServiceCase),\n          tap(({ selectedServiceCase }) => {\n            this.serviceCasesDatalayerService.sendDataLayerEventWithAttributes(\n              ServiceCasesConstants.SERVICE_CASE_NAVIGATION_VIEWED_EVENT_NAME,\n              ServiceCasesConstants.EVENT_INFO_TYPE_IMPRESSION,\n              selectedServiceCase.status,\n              selectedServiceCase.type\n            );\n          })\n        ),\n      { dispatch: false }\n    );\n\n    this.toggleHistory$ = createEffect(\n      () =>\n        this.actions$.pipe(\n          ofType(toggleHistoryAction),\n          tap(() => {\n            this.serviceCasesDatalayerService.sendDataLayerEventWithAttributes(\n              ServiceCasesConstants.SERVICE_CASE_NAVIGATION_CLICK_EVENT_NAME,\n              ServiceCasesConstants.EVENT_INFO_TYPE_CLICK,\n              ServiceCasesConstants.SERVICE_CASE_SHOW_HISTORY,\n              ''\n            );\n          })\n        ),\n      { dispatch: false }\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { serviceCaseFeature } from './service-case.reducers';\nimport { ServiceCaseEffects } from './service-case.effects';\nimport { ServiceCaseDatalayerEffects } from './service-case-datalayer.effects';\n\n@NgModule({\n  imports: [\n    EffectsModule.forFeature([ServiceCaseEffects, ServiceCaseDatalayerEffects]),\n    StoreModule.forFeature(serviceCaseFeature),\n  ],\n})\nexport class ServiceCaseNgrxModule {}\n","import { createAction, emptyProps, props } from '@ngrx/store';\nimport { ServiceCase } from '../entitities/service-case.interface';\n\nexport const loadServiceCases = createAction('[service-case] loadServiceCases', emptyProps);\nexport const serviceCasesPageView = createAction('[service-case] serviceCasesPageView', emptyProps);\n\nexport const loadServiceCasesSuccess = createAction(\n  '[service-case] loadServiceCasesSuccess',\n  props<{\n    serviceCases: ServiceCase[];\n  }>()\n);\n\nexport const loadServiceCasesFailure = createAction(\n  '[service-case] loadServiceCasesFailure',\n  props<{\n    error: string;\n  }>()\n);\n\nexport const selectServiceCase = createAction(\n  '[service-case] selectServiceCase',\n  props<{\n    selectedServiceCase: ServiceCase;\n  }>()\n);\n\nexport const toggleHistoryAction = createAction(\n  '[service-case] toggleHistory',\n  props<{\n    isToggleHistory: boolean;\n  }>()\n);\n","import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { ServiceCaseService } from '../services/service-case.service';\nimport { catchError, map, startWith, switchMap } from 'rxjs/operators';\nimport { loadServiceCases, loadServiceCasesFailure, loadServiceCasesSuccess } from './service-case.actions';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ServiceCaseEffects {\n  loadServiceCases$;\n\n  constructor(\n    private readonly actions$: Actions,\n    private readonly serviceCaseService: ServiceCaseService\n  ) {\n    this.loadServiceCases$ = createEffect(() =>\n      this.actions$.pipe(\n        ofType(loadServiceCases),\n        switchMap(() => this.serviceCaseService.load()),\n        map((serviceCases) => loadServiceCasesSuccess({ serviceCases })),\n        catchError((error, source) => source.pipe(startWith(loadServiceCasesFailure({ error }))))\n      )\n    );\n  }\n}\n","import { ServiceCase, Status } from '../entitities/service-case.interface';\nimport { createFeature, createReducer, on } from '@ngrx/store';\nimport {\n  loadServiceCases,\n  loadServiceCasesFailure,\n  loadServiceCasesSuccess,\n  selectServiceCase,\n} from './service-case.actions';\n\nexport const SERVICE_CASE_FEATURE_KEY = 'service-case';\n\nexport interface ServiceCaseState {\n  serviceCases: ServiceCase[];\n  selectedServiceCase: ServiceCase | undefined;\n  loading: boolean;\n  loadError: string | undefined;\n}\n\nexport interface ServiceCaseSlice {\n  [SERVICE_CASE_FEATURE_KEY]: ServiceCaseState;\n}\n\nexport const initialState: ServiceCaseState = {\n  serviceCases: [],\n  selectedServiceCase: undefined,\n  loading: false,\n  loadError: undefined,\n};\n\nconst getOpenCase = (serviceCases: ServiceCase[]): ServiceCase | undefined =>\n  serviceCases.find((serviceCase) => serviceCase.status === Status.OPEN);\n\nexport const serviceCaseFeature = createFeature({\n  name: SERVICE_CASE_FEATURE_KEY,\n  reducer: createReducer(\n    initialState,\n    on(loadServiceCases, (state: ServiceCaseState) => ({\n      ...state,\n      loading: true,\n    })),\n    on(loadServiceCasesSuccess, (state: ServiceCaseState, action) => ({\n      ...state,\n      selectedServiceCase: getOpenCase(action.serviceCases),\n      serviceCases: action.serviceCases,\n      loading: false,\n      loadError: undefined,\n    })),\n    on(selectServiceCase, (state: ServiceCaseState, action) => ({\n      ...state,\n      selectedServiceCase: action.selectedServiceCase,\n    })),\n    on(loadServiceCasesFailure, (state: ServiceCaseState, action) => ({\n      ...state,\n      loading: false,\n      loadError: action.error,\n    }))\n  ),\n});\n","import { createFeatureSelector, createSelector } from '@ngrx/store';\nimport { SERVICE_CASE_FEATURE_KEY, ServiceCaseState } from './service-case.reducers';\nimport { Status } from '../entitities/service-case.interface';\n\nexport const selectServiceCaseFeature = createFeatureSelector<ServiceCaseState>(SERVICE_CASE_FEATURE_KEY);\n\nexport const selectServiceCases = createSelector(selectServiceCaseFeature, (state) => state.serviceCases);\nexport const selectOpenServiceCases = createSelector(selectServiceCaseFeature, (state) =>\n  state.serviceCases.filter((serviceCase) => serviceCase.status === Status.OPEN)\n);\nexport const selectClosedServiceCases = createSelector(selectServiceCaseFeature, (state) =>\n  state.serviceCases.filter((serviceCase) => serviceCase.status === Status.RESOLVED)\n);\n\nexport const selectSelectedServiceCase = createSelector(selectServiceCaseFeature, (state) => state.selectedServiceCase);\n\nexport const selectLoadError = createSelector(selectServiceCaseFeature, (state) => state.loadError);\n\nexport const selectLoading = createSelector(selectServiceCaseFeature, (state) => state.loading);\n","export class ServiceCasesConstants {\n  static readonly MESSAGE_GROUP = 'service-cases';\n  static readonly STEP_SERVICE_CASES = 'service-cases';\n  static readonly INTENT_VIEW_SERVICE_CASES = 'view-service-cases';\n  static readonly CATEGORY_CARE = 'care';\n\n  static readonly NO_SERVICE_CASES_EVENT_NAME = 'no service case created';\n  static readonly FAQ_SERVICE_CASES_EVENT_NAME = 'faq accordeon expanded';\n  static readonly SERVICE_CASE_NAVIGATION_CLICK_EVENT_NAME = 'service case navigation clicked';\n  static readonly SERVICE_CASE_SHOW_HISTORY = 'show history';\n  static readonly SERVICE_CASE_NAVIGATION_VIEWED_EVENT_NAME = 'service case navigation viewed';\n\n  static readonly EVENT_INFO_TYPE_IMPRESSION = 'impression';\n  static readonly EVENT_INFO_TYPE_CLICK = 'click';\n\n  static readonly ATTRIBUTES_ITEM_NAME = 'itemName';\n  static readonly ATTRIBUTES_ITEM_DATA = 'itemData';\n  static readonly ATTRIBUTES_ITEM_GROUP = 'itemGroup';\n}\n","export enum Type {\n  INSTALL = 'INSTALL',\n  MOVE = 'MOVE',\n  TAKEOVER = 'TAKEOVER',\n  REPAIR = 'REPAIR',\n  HOME_DELIVERY = 'HOME_DELIVERY',\n  OTHER = 'OTHER',\n}\n\nexport enum Status {\n  OPEN = 'OPEN',\n  RESOLVED = 'RESOLVED',\n}\n\nexport interface ServiceCase {\n  id: string;\n  type: Type;\n  status: Status;\n  creationDate: Date;\n  deadlineDate?: Date;\n  productType: string;\n}\n","export * from './+state/service-case-ngrx.module';\nexport * from './service-case.facade';\nexport * from './entitities/service-case.interface';\nexport * from './providers';\nexport * from './services/service-case.service';\nexport * from './services/service-cases-datalayer.service';\nexport * from './constants/service-cases.constants';\n","import { importProvidersFrom } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { serviceCaseFeature } from './+state/service-case.reducers';\nimport { ServiceCaseEffects } from './+state/service-case.effects';\n\nexport function provideServiceCaseDomain() {\n  return [\n    importProvidersFrom(StoreModule.forFeature(serviceCaseFeature)),\n    importProvidersFrom(EffectsModule.forFeature([ServiceCaseEffects])),\n  ];\n}\n","import { inject, Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { ServiceCaseSlice } from './+state/service-case.reducers';\nimport {\n  selectClosedServiceCases,\n  selectLoadError,\n  selectLoading,\n  selectOpenServiceCases,\n  selectSelectedServiceCase,\n  selectServiceCases,\n} from './+state/service-case.selectors';\nimport {\n  loadServiceCases,\n  selectServiceCase,\n  serviceCasesPageView,\n  toggleHistoryAction,\n} from './+state/service-case.actions';\nimport { ServiceCase } from './entitities/service-case.interface';\n\n@Injectable({ providedIn: 'root' })\nexport class ServiceCaseFacade {\n  private readonly store = inject(Store<ServiceCaseSlice>);\n  loading$ = this.store.select(selectLoading);\n  loadError$ = this.store.select(selectLoadError);\n  serviceCases$ = this.store.select(selectServiceCases);\n  selectedServiceCase$ = this.store.select(selectSelectedServiceCase);\n  openServiceCases$ = this.store.select(selectOpenServiceCases);\n  closedServiceCases$ = this.store.select(selectClosedServiceCases);\n\n  loadServiceCases(): void {\n    this.store.dispatch(loadServiceCases());\n  }\n\n  serviceCasesPageView(): void {\n    this.store.dispatch(serviceCasesPageView());\n  }\n\n  selectServiceCase(selectedServiceCase: ServiceCase): void {\n    this.store.dispatch(selectServiceCase({ selectedServiceCase }));\n  }\n\n  toggleHistory(isToggleHistory: boolean): void {\n    this.store.dispatch(toggleHistoryAction({ isToggleHistory }));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MapperInterface } from '@telenet/ng-lib-shared';\nimport { ServiceCase, Status, Type } from '../entitities/service-case.interface';\nimport { RawServiceCase } from '../entitities/raw.service-case.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ServiceCaseMapper implements MapperInterface<RawServiceCase[], ServiceCase[]> {\n  toModel(data: RawServiceCase[]): ServiceCase[] {\n    return data.map((raw) => ({\n      id: raw.id,\n      status: Status[raw.status.toUpperCase() as keyof typeof Status],\n      type: Type[raw.type.toUpperCase() as keyof typeof Type],\n      creationDate: new Date(raw.creationDate),\n      deadlineDate: raw.deadlineDate ? new Date(raw.deadlineDate) : undefined,\n      productType: raw.productType,\n    }));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ServiceCase } from '../entitities/service-case.interface';\nimport { OcapiCallConfig, OcapiService } from '@telenet/ng-lib-ocapi';\nimport { ServiceCaseMapper } from './service-case.mapper';\nimport { RawServiceCase } from '../entitities/raw.service-case.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ServiceCaseService {\n  private static readonly MESSAGE_GROUP = 'service-cases';\n\n  constructor(\n    private readonly ocapiService: OcapiService,\n    private readonly serviceCaseMapper: ServiceCaseMapper\n  ) {}\n\n  load(): Observable<ServiceCase[]> {\n    const endpoint = '/public/api/service-cases-service/v1/service-cases';\n    return this.ocapiService.doGet(\n      new OcapiCallConfig<RawServiceCase[], ServiceCase[]>(\n        ServiceCaseService.MESSAGE_GROUP,\n        endpoint,\n        this.serviceCaseMapper\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { DataLayerService } from '@telenet/ng-lib-datalayer';\nimport { ServiceCasesConstants } from '../constants/service-cases.constants';\nimport { Page, PageInfo } from 'udl';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ServiceCasesDatalayerService {\n  constructor(private readonly dataLayerService: DataLayerService) {}\n\n  public setPageProperties(): void {\n    const pageInfo = new PageInfo();\n    pageInfo.setPageID(ServiceCasesConstants.MESSAGE_GROUP);\n    pageInfo.setPageName(ServiceCasesConstants.MESSAGE_GROUP);\n    const pageJSON = {\n      pageInfo: pageInfo,\n    };\n    const page = new Page(pageJSON);\n    this.dataLayerService.setPage(page);\n  }\n\n  public addPageEvent(): void {\n    this.dataLayerService.addPageEvent(ServiceCasesConstants.STEP_SERVICE_CASES, {\n      intent: ServiceCasesConstants.INTENT_VIEW_SERVICE_CASES,\n      stepId: ServiceCasesConstants.STEP_SERVICE_CASES,\n    });\n  }\n\n  public sendDataLayerEventWithAttributes(\n    name: string,\n    type: string,\n    itemName?: string,\n    itemData?: string,\n    itemGroup?: string\n  ) {\n    const attributes: Record<string, unknown> = {};\n\n    if (itemName !== null) {\n      attributes[ServiceCasesConstants.ATTRIBUTES_ITEM_NAME] = itemName;\n    }\n    if (itemData !== null) {\n      attributes[ServiceCasesConstants.ATTRIBUTES_ITEM_DATA] = itemData;\n    }\n    if (itemGroup !== null) {\n      attributes[ServiceCasesConstants.ATTRIBUTES_ITEM_GROUP] = itemGroup;\n    }\n    const category = this.dataLayerService.createCategory(\n      ServiceCasesConstants.CATEGORY_CARE,\n      ServiceCasesConstants.MESSAGE_GROUP\n    );\n    const eventInfo = this.dataLayerService.createEventInfo(name, type, [ServiceCasesConstants.MESSAGE_GROUP]);\n    this.dataLayerService.sendEvent({ eventInfo, attributes, category });\n  }\n}\n"],"names":["ServiceCasesDatalayerService","Actions","createEffect","ofType","loadServiceCasesSuccess","selectServiceCase","serviceCasesPageView","toggleHistoryAction","combineLatestWith","tap","ServiceCasesConstants","Status","ServiceCaseDatalayerEffects","actions$","serviceCasesDatalayerService","serviceCasesLoaded$","serviceCaseSelected$","toggleHistory$","constructor","pipe","serviceCases","length","addPageEvent","sendDataLayerEventWithAttributes","NO_SERVICE_CASES_EVENT_NAME","EVENT_INFO_TYPE_IMPRESSION","openCase","find","serviceCase","status","OPEN","undefined","SERVICE_CASE_NAVIGATION_VIEWED_EVENT_NAME","type","dispatch","selectedServiceCase","SERVICE_CASE_NAVIGATION_CLICK_EVENT_NAME","EVENT_INFO_TYPE_CLICK","SERVICE_CASE_SHOW_HISTORY","i0","ɵɵinject","i1","i2","factory","ɵfac","providedIn","EffectsModule","StoreModule","serviceCaseFeature","ServiceCaseEffects","ServiceCaseNgrxModule","forFeature","imports","EffectsFeatureModule","StoreFeatureModule","createAction","emptyProps","props","loadServiceCases","loadServiceCasesFailure","ServiceCaseService","catchError","map","startWith","switchMap","serviceCaseService","loadServiceCases$","load","error","source","createFeature","createReducer","on","SERVICE_CASE_FEATURE_KEY","initialState","loading","loadError","getOpenCase","name","reducer","state","action","createFeatureSelector","createSelector","selectServiceCaseFeature","selectServiceCases","selectOpenServiceCases","filter","selectClosedServiceCases","RESOLVED","selectSelectedServiceCase","selectLoadError","selectLoading","MESSAGE_GROUP","STEP_SERVICE_CASES","INTENT_VIEW_SERVICE_CASES","CATEGORY_CARE","FAQ_SERVICE_CASES_EVENT_NAME","ATTRIBUTES_ITEM_NAME","ATTRIBUTES_ITEM_DATA","ATTRIBUTES_ITEM_GROUP","Type","importProvidersFrom","provideServiceCaseDomain","inject","Store","ServiceCaseFacade","store","loading$","select","loadError$","serviceCases$","selectedServiceCase$","openServiceCases$","closedServiceCases$","toggleHistory","isToggleHistory","ServiceCaseMapper","toModel","data","raw","id","toUpperCase","creationDate","Date","deadlineDate","productType","OcapiCallConfig","OcapiService","ocapiService","serviceCaseMapper","endpoint","doGet","DataLayerService","Page","PageInfo","dataLayerService","setPageProperties","pageInfo","setPageID","setPageName","pageJSON","page","setPage","intent","stepId","itemName","itemData","itemGroup","attributes","category","createCategory","eventInfo","createEventInfo","sendEvent"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}