{"version":3,"file":"libs_foundation_demo_product_ui_src_index_ts-_efa31.js","mappings":"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","sources":["./libs/foundation/demo/product/ui/src/index.ts","./libs/foundation/demo/product/ui/src/lib/collapsible-header/collapsible-header.component.ts","./libs/foundation/demo/product/ui/src/lib/phone-number-transform.service.ts","./libs/foundation/demo/product/ui/src/lib/phone-number.pipe.ts"],"sourcesContent":["export { PhoneNumberPipe } from './lib/phone-number.pipe';\nexport { CollapsibleHeaderComponent } from './lib/collapsible-header/collapsible-header.component';\n","import { Component, ContentChild, Input, TemplateRef } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'demo-product-collapsible-header',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <div\n      class=\"display--flex justify-content--between cur-pointer align-items--center\"\n      [attr.data-testid]=\"'collapsible-header'\"\n      (click)=\"toggleContentVisebility()\">\n      <span class=\"text-font-family--t7\"> {{ header }} </span>\n      <i\n        class=\"icon icon-md product-overview__icon-section\"\n        [ngClass]=\"{ 'icon-chevron-up': showContent, 'icon-chevron-down': !showContent }\"\n        [attr.data-testid]=\"'dropdown'\"></i>\n    </div>\n    <div *ngIf=\"showContent\" [attr.data-testid]=\"'collapsible-content'\">\n      <ng-container *ngTemplateOutlet=\"detailRef\"></ng-container>\n    </div>`,\n})\nexport class CollapsibleHeaderComponent {\n  @ContentChild(TemplateRef) detailRef!: TemplateRef<unknown>;\n  showContent = false;\n\n  @Input() header!: string;\n\n  toggleContentVisebility(): void {\n    this.showContent = !this.showContent;\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PhoneNumberTransformService {\n  private static readonly NATIONAL_MOBILE_NUMBER = /^((0|0032|32|\\+32)4\\d{8})$/;\n  private static readonly INTERNATIONAL_NUMBER = /^(\\+|00|0)(?:\\d ?){6,14}\\d$/;\n  private static readonly NATIONAL_PHONE_NUMBER = /^((0|0032|\\+32)\\d{8})$/;\n  private static readonly BASE_PHONE_NUMBER = /^(((0|0032|\\+32|032|32)4\\d{8})|((00|\\+)(?!32)4\\d{8})|(4\\d{8}))$/;\n\n  transform(phoneNumber: string): string {\n    if (PhoneNumberTransformService.NATIONAL_PHONE_NUMBER.test(phoneNumber)) {\n      return this.filterNationalPhoneNumber(phoneNumber);\n    }\n    if (PhoneNumberTransformService.NATIONAL_MOBILE_NUMBER.test(phoneNumber)) {\n      return this.filterNationalMobileNumber(phoneNumber);\n    }\n    if (PhoneNumberTransformService.BASE_PHONE_NUMBER.test(phoneNumber)) {\n      return this.filterBasePhoneNumber(phoneNumber);\n    }\n    return this.filterInternationalNumber(phoneNumber);\n  }\n\n  doNormaliseMsisdn(phoneNumber: string): string {\n    let transFormedNumber = this.transform(phoneNumber);\n    transFormedNumber = transFormedNumber.indexOf('0') !== 0 ? '0' + transFormedNumber : transFormedNumber;\n    return transFormedNumber && transFormedNumber.replace(/ /g, '');\n  }\n\n  autoFormatPhoneNumber(msisdn: string): string {\n    const formattedPhoneNumber = this.doNormaliseMsisdn(msisdn);\n    if (!msisdn || !formattedPhoneNumber) {\n      return msisdn;\n    } else {\n      if (this.isValidNationalMobileNumber(formattedPhoneNumber)) {\n        return 0 + formattedPhoneNumber.substring(1);\n      } else if (this.isValidInternationalNumber(msisdn)) {\n        return msisdn;\n      }\n      return formattedPhoneNumber;\n    }\n  }\n\n  private filterNationalPhoneNumber(phoneNumber: string): string {\n    const numberLength = phoneNumber.length;\n    let numberStart = phoneNumber.slice(0, numberLength - 6);\n    let zoneCode = '0';\n    if (this.contains(numberStart, '0032')) {\n      numberStart = numberStart.slice(4, numberStart.length);\n    }\n    if (this.contains(numberStart, '+32')) {\n      numberStart = numberStart.slice(3, numberStart.length);\n    }\n    if (numberStart[0] === '2' || numberStart[0] === '3') {\n      zoneCode += numberStart[0] + ' ';\n      numberStart = numberStart.slice(1, numberStart.length);\n    }\n    return (\n      zoneCode +\n      numberStart +\n      phoneNumber.slice(numberLength - 6, numberLength - 4) +\n      ' ' +\n      phoneNumber.slice(numberLength - 4, numberLength - 2) +\n      ' ' +\n      phoneNumber.slice(numberLength - 2, numberLength)\n    );\n  }\n\n  private filterNationalMobileNumber(phoneNumber: string): string {\n    const numberLength = phoneNumber.length;\n    let numberStart = phoneNumber.slice(0, numberLength - 6);\n    if (numberStart.indexOf('0032') === 0) {\n      numberStart = '0' + numberStart.slice(4, numberStart.length);\n    }\n    if (numberStart.indexOf('+32') === 0) {\n      numberStart = '0' + numberStart.slice(3, numberStart.length);\n    }\n    if (numberStart.indexOf('32') === 0) {\n      numberStart = '0' + numberStart.slice(2, numberStart.length);\n    }\n    return (\n      numberStart +\n      ' ' +\n      phoneNumber.slice(numberLength - 6, numberLength - 4) +\n      ' ' +\n      phoneNumber.slice(numberLength - 4, numberLength - 2) +\n      ' ' +\n      phoneNumber.slice(numberLength - 2, numberLength)\n    );\n  }\n\n  private filterBasePhoneNumber(phoneNumber: string): string {\n    const numberLength = phoneNumber.length;\n    let numberStart = phoneNumber.slice(0, numberLength - 6);\n    if (this.contains(numberStart, '032')) {\n      numberStart = '0' + numberStart.slice(3, numberStart.length);\n    }\n    if (this.contains(numberStart, '00')) {\n      numberStart = '0' + numberStart.slice(2, numberStart.length);\n    }\n\n    return (\n      numberStart +\n      ' ' +\n      phoneNumber.slice(numberLength - 6, numberLength - 4) +\n      ' ' +\n      phoneNumber.slice(numberLength - 4, numberLength - 2) +\n      ' ' +\n      phoneNumber.slice(numberLength - 2, numberLength)\n    );\n  }\n\n  private filterInternationalNumber(phoneNumber: string): string {\n    const numberStart = phoneNumber.slice(0, 2);\n    if (this.contains(numberStart, '00')) {\n      return '+' + phoneNumber.slice(2, phoneNumber.length);\n    }\n    return phoneNumber;\n  }\n\n  private contains(master: string, test: string) {\n    return master.indexOf(test) > -1;\n  }\n\n  private isValidNationalMobileNumber(value: string): boolean {\n    return PhoneNumberTransformService.NATIONAL_MOBILE_NUMBER.test(value);\n  }\n\n  private isValidInternationalNumber(number: string): boolean {\n    const value = number.replace(/[-/\\\\,\\s.]/g, '');\n    return PhoneNumberTransformService.INTERNATIONAL_NUMBER.test(value);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { PhoneNumberTransformService } from './phone-number-transform.service';\n\n@Pipe({ name: 'phoneNumber', standalone: true })\nexport class PhoneNumberPipe implements PipeTransform {\n  constructor(private readonly phoneNumberTransformService: PhoneNumberTransformService) {}\n\n  transform(phoneNumber: string) {\n    return this.transFormPhoneNumber(phoneNumber);\n  }\n\n  private transFormPhoneNumber(phoneNumber: string): string {\n    if (!phoneNumber) {\n      return '';\n    }\n    phoneNumber = phoneNumber.trim();\n    return this.phoneNumberTransformService.transform(phoneNumber);\n  }\n}\n"],"names":["PhoneNumberPipe","CollapsibleHeaderComponent","TemplateRef","CommonModule","i0","ɵɵelementContainer","ɵɵelementStart","ɵɵtemplate","CollapsibleHeaderComponent_div_4_ng_container_1_Template","ɵɵelementEnd","ɵɵattribute","ɵɵadvance","ɵɵproperty","ctx_r0","detailRef","constructor","showContent","toggleContentVisebility","_","_2","selectors","contentQueries","CollapsibleHeaderComponent_ContentQueries","rf","ctx","dirIndex","ɵɵlistener","CollapsibleHeaderComponent_Template_div_click_0_listener","ɵɵtext","ɵɵelement","CollapsibleHeaderComponent_div_4_Template","ɵɵtextInterpolate1","header","ɵɵpureFunction2","_c0","i1","NgClass","NgIf","NgTemplateOutlet","encapsulation","PhoneNumberTransformService","NATIONAL_MOBILE_NUMBER","INTERNATIONAL_NUMBER","_3","NATIONAL_PHONE_NUMBER","_4","BASE_PHONE_NUMBER","transform","phoneNumber","test","filterNationalPhoneNumber","filterNationalMobileNumber","filterBasePhoneNumber","filterInternationalNumber","doNormaliseMsisdn","transFormedNumber","indexOf","replace","autoFormatPhoneNumber","msisdn","formattedPhoneNumber","isValidNationalMobileNumber","substring","isValidInternationalNumber","numberLength","length","numberStart","slice","zoneCode","contains","master","value","number","_5","_6","factory","ɵfac","providedIn","phoneNumberTransformService","transFormPhoneNumber","trim","ɵɵdirectiveInject","pure","standalone"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}