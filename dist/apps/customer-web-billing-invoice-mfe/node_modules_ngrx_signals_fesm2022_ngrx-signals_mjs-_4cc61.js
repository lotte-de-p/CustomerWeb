(self["webpackChunkcustomer_web_billing_invoice_mfe"] = self["webpackChunkcustomer_web_billing_invoice_mfe"] || []).push([["node_modules_ngrx_signals_fesm2022_ngrx-signals_mjs-_4cc61"],{

/***/ 10503:
/*!**************************************************************!*\
  !*** ./node_modules/@ngrx/signals/fesm2022/ngrx-signals.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getState: () => (/* binding */ getState),
/* harmony export */   patchState: () => (/* binding */ patchState),
/* harmony export */   signalState: () => (/* binding */ signalState),
/* harmony export */   signalStore: () => (/* binding */ signalStore),
/* harmony export */   signalStoreFeature: () => (/* binding */ signalStoreFeature),
/* harmony export */   type: () => (/* binding */ type),
/* harmony export */   withComputed: () => (/* binding */ withComputed),
/* harmony export */   withHooks: () => (/* binding */ withHooks),
/* harmony export */   withMethods: () => (/* binding */ withMethods),
/* harmony export */   withState: () => (/* binding */ withState)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 33829);


const STATE_SIGNAL = Symbol('STATE_SIGNAL');
function getState(stateSignal) {
  return stateSignal[STATE_SIGNAL]();
}
function patchState(stateSignal, ...updaters) {
  stateSignal[STATE_SIGNAL].update(currentState => updaters.reduce((nextState, updater) => ({
    ...nextState,
    ...(typeof updater === 'function' ? updater(nextState) : updater)
  }), currentState));
}
function toDeepSignal(signal) {
  const value = (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.untracked)(() => signal());
  if (!isRecord(value)) {
    return signal;
  }
  return new Proxy(signal, {
    get(target, prop) {
      if (!(prop in value)) {
        return target[prop];
      }
      if (!(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.isSignal)(target[prop])) {
        Object.defineProperty(target, prop, {
          value: (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.computed)(() => target()[prop]),
          configurable: true
        });
      }
      return toDeepSignal(target[prop]);
    }
  });
}
function isRecord(value) {
  return value?.constructor === Object;
}
function signalState(initialState) {
  const stateSignal = (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.signal)(initialState);
  const deepSignal = toDeepSignal(stateSignal.asReadonly());
  Object.defineProperty(deepSignal, STATE_SIGNAL, {
    value: stateSignal
  });
  return deepSignal;
}
function signalStore(...args) {
  const signalStoreArgs = [...args];
  const config = 'providedIn' in signalStoreArgs[0] ? signalStoreArgs.shift() : {};
  const features = signalStoreArgs;
  class SignalStore {
    constructor() {
      const innerStore = features.reduce((store, feature) => feature(store), getInitialInnerStore());
      const {
        slices,
        signals,
        methods,
        hooks
      } = innerStore;
      const props = {
        ...slices,
        ...signals,
        ...methods
      };
      this[STATE_SIGNAL] = innerStore[STATE_SIGNAL];
      for (const key in props) {
        this[key] = props[key];
      }
      const {
        onInit,
        onDestroy
      } = hooks;
      if (onInit) {
        onInit();
      }
      if (onDestroy) {
        (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(_angular_core__WEBPACK_IMPORTED_MODULE_0__.DestroyRef).onDestroy(onDestroy);
      }
    }
    /** @nocollapse */
    static ɵfac = function SignalStore_Factory(t) {
      return new (t || SignalStore)();
    };
    /** @nocollapse */
    static ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
      token: SignalStore,
      factory: SignalStore.ɵfac,
      providedIn: config.providedIn || null
    });
  }
  (() => {
    (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SignalStore, [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
      args: [{
        providedIn: config.providedIn || null
      }]
    }], () => [], null);
  })();
  return SignalStore;
}
function getInitialInnerStore() {
  return {
    [STATE_SIGNAL]: (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.signal)({}),
    slices: {},
    signals: {},
    methods: {},
    hooks: {}
  };
}
function signalStoreFeature(featureOrInput, ...restFeatures) {
  const features = typeof featureOrInput === 'function' ? [featureOrInput, ...restFeatures] : restFeatures;
  return inputStore => features.reduce((store, feature) => feature(store), inputStore);
}
function type() {
  return undefined;
}
function excludeKeys(obj, keys) {
  return Object.keys(obj).reduce((acc, key) => keys.includes(key) ? acc : {
    ...acc,
    [key]: obj[key]
  }, {});
}
function withComputed(signalsFactory) {
  return store => {
    const signals = signalsFactory({
      ...store.slices,
      ...store.signals
    });
    const signalsKeys = Object.keys(signals);
    const slices = excludeKeys(store.slices, signalsKeys);
    const methods = excludeKeys(store.methods, signalsKeys);
    return {
      ...store,
      slices,
      signals: {
        ...store.signals,
        ...signals
      },
      methods
    };
  };
}
function withHooks(hooksOrFactory) {
  return store => {
    const storeProps = {
      [STATE_SIGNAL]: store[STATE_SIGNAL],
      ...store.slices,
      ...store.signals,
      ...store.methods
    };
    const hooks = typeof hooksOrFactory === 'function' ? hooksOrFactory(storeProps) : hooksOrFactory;
    const createHook = name => {
      const hook = hooks[name];
      const currentHook = store.hooks[name];
      return hook ? () => {
        if (currentHook) {
          currentHook();
        }
        hook(storeProps);
      } : currentHook;
    };
    return {
      ...store,
      hooks: {
        onInit: createHook('onInit'),
        onDestroy: createHook('onDestroy')
      }
    };
  };
}
function withMethods(methodsFactory) {
  return store => {
    const methods = methodsFactory({
      [STATE_SIGNAL]: store[STATE_SIGNAL],
      ...store.slices,
      ...store.signals,
      ...store.methods
    });
    const methodsKeys = Object.keys(methods);
    const slices = excludeKeys(store.slices, methodsKeys);
    const signals = excludeKeys(store.signals, methodsKeys);
    return {
      ...store,
      slices,
      signals,
      methods: {
        ...store.methods,
        ...methods
      }
    };
  };
}
function withState(stateOrFactory) {
  return store => {
    const state = typeof stateOrFactory === 'function' ? stateOrFactory() : stateOrFactory;
    const stateKeys = Object.keys(state);
    store[STATE_SIGNAL].update(currentState => ({
      ...currentState,
      ...state
    }));
    const slices = stateKeys.reduce((acc, key) => {
      const slice = (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.computed)(() => store[STATE_SIGNAL]()[key]);
      return {
        ...acc,
        [key]: toDeepSignal(slice)
      };
    }, {});
    const signals = excludeKeys(store.signals, stateKeys);
    const methods = excludeKeys(store.methods, stateKeys);
    return {
      ...store,
      slices: {
        ...store.slices,
        ...slices
      },
      signals,
      methods
    };
  };
}

/**
 * Generated bundle index. Do not edit.
 */



/***/ })

}])
//# sourceMappingURL=node_modules_ngrx_signals_fesm2022_ngrx-signals_mjs-_4cc61.js.map