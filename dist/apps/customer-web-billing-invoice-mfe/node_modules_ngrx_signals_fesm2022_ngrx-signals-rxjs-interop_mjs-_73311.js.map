{"version":3,"file":"node_modules_ngrx_signals_fesm2022_ngrx-signals-rxjs-interop_mjs-_73311.js","mappings":";;;;;;;;;;;;;;;AAAiG;AACvC;AACT;AAEjD,SAASS,QAAQA,CAACC,SAAS,EAAEC,MAAM,EAAE;EACjC,IAAI,CAACA,MAAM,EAAEC,QAAQ,EAAE;IACnBZ,uEAAwB,CAACS,QAAQ,CAAC;EACtC;EACA,MAAMG,QAAQ,GAAGD,MAAM,EAAEC,QAAQ,IAAIV,qDAAM,CAACD,mDAAQ,CAAC;EACrD,MAAMY,UAAU,GAAGD,QAAQ,CAACE,GAAG,CAACX,qDAAU,CAAC;EAC3C,MAAMY,OAAO,GAAG,IAAIT,yCAAO,CAAC,CAAC;EAC7B,MAAMU,SAAS,GAAGN,SAAS,CAACK,OAAO,CAAC,CAACE,SAAS,CAAC,CAAC;EAChDJ,UAAU,CAACK,SAAS,CAAC,MAAMF,SAAS,CAACG,WAAW,CAAC,CAAC,CAAC;EACnD,MAAMC,UAAU,GAAIC,KAAK,IAAK;IAC1B,IAAIC,MAAM;IACV,IAAIlB,uDAAQ,CAACiB,KAAK,CAAC,EAAE;MACjBC,MAAM,GAAGjB,wEAAY,CAACgB,KAAK,EAAE;QAAET;MAAS,CAAC,CAAC;IAC9C,CAAC,MACI,IAAIL,kDAAY,CAACc,KAAK,CAAC,EAAE;MAC1BC,MAAM,GAAGD,KAAK;IAClB,CAAC,MACI;MACDC,MAAM,GAAGd,wCAAE,CAACa,KAAK,CAAC;IACtB;IACA,MAAME,WAAW,GAAGD,MAAM,CAACL,SAAS,CAAEO,KAAK,IAAKT,OAAO,CAACU,IAAI,CAACD,KAAK,CAAC,CAAC;IACpER,SAAS,CAACU,GAAG,CAACH,WAAW,CAAC;IAC1B,OAAOA,WAAW;EACtB,CAAC;EACDH,UAAU,CAACD,WAAW,GAAGH,SAAS,CAACG,WAAW,CAACQ,IAAI,CAACX,SAAS,CAAC;EAC9D,OAAOI,UAAU;AACrB;;AAEA;AACA;AACA","sources":["./node_modules/@ngrx/signals/fesm2022/ngrx-signals-rxjs-interop.mjs"],"sourcesContent":["import { assertInInjectionContext, Injector, inject, DestroyRef, isSignal } from '@angular/core';\nimport { toObservable } from '@angular/core/rxjs-interop';\nimport { Subject, isObservable, of } from 'rxjs';\n\nfunction rxMethod(generator, config) {\n    if (!config?.injector) {\n        assertInInjectionContext(rxMethod);\n    }\n    const injector = config?.injector ?? inject(Injector);\n    const destroyRef = injector.get(DestroyRef);\n    const source$ = new Subject();\n    const sourceSub = generator(source$).subscribe();\n    destroyRef.onDestroy(() => sourceSub.unsubscribe());\n    const rxMethodFn = (input) => {\n        let input$;\n        if (isSignal(input)) {\n            input$ = toObservable(input, { injector });\n        }\n        else if (isObservable(input)) {\n            input$ = input;\n        }\n        else {\n            input$ = of(input);\n        }\n        const instanceSub = input$.subscribe((value) => source$.next(value));\n        sourceSub.add(instanceSub);\n        return instanceSub;\n    };\n    rxMethodFn.unsubscribe = sourceSub.unsubscribe.bind(sourceSub);\n    return rxMethodFn;\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { rxMethod };\n"],"names":["assertInInjectionContext","Injector","inject","DestroyRef","isSignal","toObservable","Subject","isObservable","of","rxMethod","generator","config","injector","destroyRef","get","source$","sourceSub","subscribe","onDestroy","unsubscribe","rxMethodFn","input","input$","instanceSub","value","next","add","bind"],"sourceRoot":"webpack:///","x_google_ignoreList":[0]}