(self["webpackChunkcustomer_web_billing_invoice_mfe"] = self["webpackChunkcustomer_web_billing_invoice_mfe"] || []).push([["node_modules_ngrx_signals_fesm2022_ngrx-signals-rxjs-interop_mjs-_73310"],{

/***/ 47938:
/*!***************************************************************************!*\
  !*** ./node_modules/@ngrx/signals/fesm2022/ngrx-signals-rxjs-interop.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   rxMethod: () => (/* binding */ rxMethod)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 33829);
/* harmony import */ var _angular_core_rxjs_interop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core/rxjs-interop */ 24104);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ 44946);



function rxMethod(generator, config) {
  if (!config?.injector) {
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.assertInInjectionContext)(rxMethod);
  }
  const injector = config?.injector ?? (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(_angular_core__WEBPACK_IMPORTED_MODULE_0__.Injector);
  const destroyRef = injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_0__.DestroyRef);
  const source$ = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Subject();
  const sourceSub = generator(source$).subscribe();
  destroyRef.onDestroy(() => sourceSub.unsubscribe());
  const rxMethodFn = input => {
    let input$;
    if ((0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.isSignal)(input)) {
      input$ = (0,_angular_core_rxjs_interop__WEBPACK_IMPORTED_MODULE_1__.toObservable)(input, {
        injector
      });
    } else if ((0,rxjs__WEBPACK_IMPORTED_MODULE_2__.isObservable)(input)) {
      input$ = input;
    } else {
      input$ = (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(input);
    }
    const instanceSub = input$.subscribe(value => source$.next(value));
    sourceSub.add(instanceSub);
    return instanceSub;
  };
  rxMethodFn.unsubscribe = sourceSub.unsubscribe.bind(sourceSub);
  return rxMethodFn;
}

/**
 * Generated bundle index. Do not edit.
 */



/***/ })

}])
//# sourceMappingURL=node_modules_ngrx_signals_fesm2022_ngrx-signals-rxjs-interop_mjs-_73310.js.map