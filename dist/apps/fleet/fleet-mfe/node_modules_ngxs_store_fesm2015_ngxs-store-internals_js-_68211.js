(self["webpackChunkfleet_mfe"] = self["webpackChunkfleet_mfe"] || []).push([["node_modules_ngxs_store_fesm2015_ngxs-store-internals_js-_68211"],{

/***/ 14101:
/*!*******************************************************************!*\
  !*** ./node_modules/@ngxs/store/fesm2015/ngxs-store-internals.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   INITIAL_STATE_TOKEN: () => (/* binding */ INITIAL_STATE_TOKEN),
/* harmony export */   InitialState: () => (/* binding */ InitialState),
/* harmony export */   NgxsBootstrapper: () => (/* binding */ NgxsBootstrapper),
/* harmony export */   memoize: () => (/* binding */ memoize),
/* harmony export */   "ɵNGXS_STATE_CONTEXT_FACTORY": () => (/* binding */ ɵNGXS_STATE_CONTEXT_FACTORY),
/* harmony export */   "ɵNGXS_STATE_FACTORY": () => (/* binding */ ɵNGXS_STATE_FACTORY)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 33829);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_angular_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs */ 55400);



class NgxsBootstrapper {
  constructor() {
    /**
     * Use `ReplaySubject`, thus we can get cached value even if the stream is completed
     */
    this.bootstrap$ = new rxjs__WEBPACK_IMPORTED_MODULE_1__.ReplaySubject(1);
  }
  get appBootstrapped$() {
    return this.bootstrap$.asObservable();
  }
  /**
   * This event will be emitted after attaching `ComponentRef` of the root component
   * to the tree of views, that's a signal that application has been fully rendered
   */
  bootstrap() {
    this.bootstrap$.next(true);
    this.bootstrap$.complete();
  }
}
/** @nocollapse */
NgxsBootstrapper.ɵfac = function NgxsBootstrapper_Factory(t) {
  return new (t || NgxsBootstrapper)();
};
/** @nocollapse */
NgxsBootstrapper.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: NgxsBootstrapper,
  factory: NgxsBootstrapper.ɵfac,
  providedIn: 'root'
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NgxsBootstrapper, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], null, null);
})();
function defaultEqualityCheck(a, b) {
  return a === b;
}
function areArgumentsShallowlyEqual(equalityCheck, prev, next) {
  if (prev === null || next === null || prev.length !== next.length) {
    return false;
  }
  // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.
  const length = prev.length;
  for (let i = 0; i < length; i++) {
    if (!equalityCheck(prev[i], next[i])) {
      return false;
    }
  }
  return true;
}
/**
 * Memoize a function on its last inputs only.
 * Originally from: https://github.com/reduxjs/reselect/blob/master/src/index.js
 *
 * @ignore
 */
function memoize(func, equalityCheck = defaultEqualityCheck) {
  let lastArgs = null;
  let lastResult = null;
  // we reference arguments instead of spreading them for performance reasons
  function memoized() {
    // eslint-disable-next-line prefer-rest-params
    if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {
      // apply arguments instead of spreading for performance.
      // eslint-disable-next-line prefer-rest-params, prefer-spread
      lastResult = func.apply(null, arguments);
    }
    // eslint-disable-next-line prefer-rest-params
    lastArgs = arguments;
    return lastResult;
  }
  memoized.reset = function () {
    // The hidden (for now) ability to reset the memoization
    lastArgs = null;
    lastResult = null;
  };
  return memoized;
}
class InitialState {
  static set(state) {
    this._value = state;
  }
  static pop() {
    const state = this._value;
    this._value = {};
    return state;
  }
}
InitialState._value = {};
const INITIAL_STATE_TOKEN = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('INITIAL_STATE_TOKEN', {
  providedIn: 'root',
  factory: () => InitialState.pop()
});

// These tokens are internal and can change at any point.
const ɵNGXS_STATE_FACTORY = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('ɵNGXS_STATE_FACTORY');
const ɵNGXS_STATE_CONTEXT_FACTORY = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('ɵNGXS_STATE_CONTEXT_FACTORY');

/**
 * Generated bundle index. Do not edit.
 */



/***/ })

}])
//# sourceMappingURL=node_modules_ngxs_store_fesm2015_ngxs-store-internals_js-_68211.js.map