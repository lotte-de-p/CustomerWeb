{"version":3,"file":"libs_sales_goliath_feat-goliath_src_index_ts-_02221.js","mappings":"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","sources":["./libs/sales/goliath/feat-goliath/src/index.ts","./libs/sales/goliath/feat-goliath/src/lib/services/goliath.service.ts","./libs/sales/goliath/feat-goliath/src/lib/utils/goliath.util.ts"],"sourcesContent":["export * from './lib/services/goliath.service';\nexport * from './lib/utils/goliath.util';\n","import { Injectable } from '@angular/core';\nimport {\n  Customer,\n  Flow,\n  GoliathFacade,\n  SalesOrderState,\n  ShoppingBasket,\n  StateAction,\n  Step,\n} from '@sales/goliath/data-access';\nimport { take } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GoliathService {\n  constructor(private readonly goliathFacade: GoliathFacade) {}\n\n  getRequiredFlows<T>(flows: Flow<T>[], shoppingBasket: ShoppingBasket): Flow<T>[] {\n    // Find all flows that are needed\n    return flows.filter((flow) => flow.isRequired(shoppingBasket));\n  }\n\n  /**\n   * Adds actions to the afterExecutionHooks of default actions based on matching names.\n   *\n   * @param defaultActions The list of default StateActions.\n   * @param actionsLists A list of lists containing StateActions to add to the default actions' afterExecutionHooks.\n   */\n  createActionsList<T>(defaultActions: StateAction<T>[], actionsLists: StateAction<T>[][]): StateAction<T>[] {\n    const combinedActions = defaultActions.map((action) => ({\n      ...action,\n      afterExecutionHooks: action.afterExecutionHooks ? [...action.afterExecutionHooks] : [],\n    }));\n\n    actionsLists.forEach((actionsList) => {\n      actionsList.forEach((action) => {\n        const targetAction = combinedActions.find((defaultAction) => defaultAction.name === action.name);\n\n        if (targetAction) {\n          targetAction.afterExecutionHooks.push({ ...action });\n        }\n      });\n    });\n\n    // Return the modified list of combined actions, which is a deep copy and doesn't affect the originals\n    return combinedActions;\n  }\n\n  getStatesToProcess(currentState: SalesOrderState, targetState: SalesOrderState): SalesOrderState[] {\n    if (currentState > targetState) {\n      console.warn('Current state is later in the sequence than the target state. No states to process.');\n      return [];\n    }\n\n    const statesToProcess: SalesOrderState[] = [];\n\n    // if currentState is INITIALIZED we need to include it so that initializing actions are executed\n    const startState = currentState === SalesOrderState.INITIALIZED ? currentState : currentState + 1;\n\n    // Start from currentState + 1 to include the next state up to and including targetState\n    for (let state = startState; state <= targetState; state++) {\n      statesToProcess.push(state);\n    }\n\n    return statesToProcess;\n  }\n\n  executeActionsBetweenSteps() {\n    return this.goliathFacade.steps$.pipe(take(1));\n  }\n\n  getSteps<T>(requiredFlows: Flow<T>[], shoppingBasket: ShoppingBasket, customer?: Customer): Step[] {\n    // then we build a list of steps that are possible for that flow\n    // whenever we press next or previous we rebuild the list of steps as the optional steps can change\n    const requiredSteps: Step[] = requiredFlows.flatMap((flow) =>\n      flow.steps.filter((step) => step.isRequired(shoppingBasket, customer))\n    );\n\n    // When we have the flows that apply we can go over the steps that are needed, if a step needs to have a certain\n    // Sales order state before load then we add that required state to the first step we find that needs it\n    // All other flows that require this state will add their requirement to that state\n    // This way we assure the correct flow of api calls to the backend\n\n    // In the end we have a list of steps each step will need a state that happens by making backend calls\n    // Some flows will require custom api calls for their steps\n\n    // If some states are skipped we need to execute the required ones first\n    return this.createListOfUniqueStepsWithCorrectStateRequirements(requiredSteps);\n  }\n\n  private createListOfUniqueStepsWithCorrectStateRequirements(requiredSteps: Step[]) {\n    const uniqueStepsWithCorrectStates = requiredSteps.reduce((acc: Step[], currentStep: Step) => {\n      // Check if a step with the same name already exists in the accumulator\n      const existingStepIndex = acc.findIndex((accStep) => accStep.name === currentStep.name);\n\n      if (existingStepIndex !== -1) {\n        // A step with the same name was found\n        const existingStep = acc[existingStepIndex];\n        if (currentStep.requiredStateBeforeLoad.state > existingStep.requiredStateBeforeLoad.state) {\n          // The current step has a \"larger\" state than the existing one, so we update the requiredStateBeforeLoad\n          acc[existingStepIndex].requiredStateBeforeLoad = currentStep.requiredStateBeforeLoad;\n        }\n      } else {\n        // No step with the same name was found, so we add the current step to the accumulator\n        acc.push(currentStep);\n      }\n\n      return acc;\n    }, []);\n\n    // Sort the steps by their enum numeric values\n    return uniqueStepsWithCorrectStates.sort((a, b) => a.name - b.name);\n  }\n}\n","import { Flow, Step } from '@sales/goliath/data-access';\n\nexport class GoliathUtil {\n  static removeComponentsFromFlows<T>(flows: Flow<T>[]): Flow<T>[] {\n    return flows.map((flow) => ({\n      ...flow,\n      steps: flow.steps.map(({ component: _component, ...rest }) => rest),\n    }));\n  }\n\n  static removeComponentsFromSteps(steps: Step[]): Step[] {\n    return steps.map(({ component: _component, ...restStep }) => restStep);\n  }\n}\n"],"names":["GoliathFacade","SalesOrderState","take","GoliathService","constructor","goliathFacade","getRequiredFlows","flows","shoppingBasket","filter","flow","isRequired","createActionsList","defaultActions","actionsLists","combinedActions","map","action","afterExecutionHooks","forEach","actionsList","targetAction","find","defaultAction","name","push","getStatesToProcess","currentState","targetState","console","warn","statesToProcess","startState","INITIALIZED","state","executeActionsBetweenSteps","steps$","pipe","getSteps","requiredFlows","customer","requiredSteps","flatMap","steps","step","createListOfUniqueStepsWithCorrectStateRequirements","uniqueStepsWithCorrectStates","reduce","acc","currentStep","existingStepIndex","findIndex","accStep","existingStep","requiredStateBeforeLoad","sort","a","b","_","i0","ɵɵinject","i1","_2","factory","ɵfac","providedIn","GoliathUtil","removeComponentsFromFlows","component","_component","rest","removeComponentsFromSteps","restStep"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}