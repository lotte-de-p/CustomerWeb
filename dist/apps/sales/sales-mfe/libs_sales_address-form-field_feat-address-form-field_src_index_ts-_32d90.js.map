{"version":3,"file":"libs_sales_address-form-field_feat-address-form-field_src_index_ts-_32d90.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA6D;AAcrC;AACyC;AACR;AACc;AACjB;AACe;AACO;AACZ;AAWjB;AACqB;AACjB;AAEwC;AAEW;;;;AAmC/F,IAAM0B,yBAAyB,GAA/B,MAAMA,yBAAyB;EAapCC,YACmBC,WAAwB,EACxBC,WAAwB;IADxB,KAAAD,WAAW,GAAXA,WAAW;IACX,KAAAC,WAAW,GAAXA,WAAW;IAdrB,KAAAC,WAAW,GAAG,KAAK;IACnB,KAAAC,sBAAsB,GAAG,IAAI;IAGtC,KAAAC,WAAW,GAAc,IAAI5B,qDAAS,CAAC,EAAE,CAAC;IAC1C,KAAA6B,iBAAiB,GAAsB,EAAE;IAKtB,KAAA/B,WAAW,GAAGA,uDAAW;IAM1C,IAAI,CAAC8B,WAAW,GAAG,IAAI5B,qDAAS,CAAC;MAC/B,CAACe,gFAAa,CAACe,YAAY,GAAG,IAAIhC,uDAAW,CAAC,EAAE,CAAC;MACjD,CAACiB,gFAAa,CAACgB,MAAM,GAAG,IAAIjC,uDAAW,CAAC,EAAE,CAAC;MAC3C,CAACiB,gFAAa,CAACiB,oBAAoB,GAAG,IAAIlC,uDAAW,CAAC,EAAE;KACzD,CAAC;EACJ;EAEAmC,UAAUA,CAACC,OAAuB;IAChC,IAAI;MACF,IAAI,CAACC,cAAc,GAAGD,OAAO;MAC7B,IAAI,CAACE,QAAQ,EAAE;MAEf,MAAMC,KAAK,GAAG,IAAI,CAACC,qBAAqB,EAAE;MAC1C,IAAID,KAAK,EAAE;QACT,IAAI,CAACE,WAAW,CAACF,KAAK,CAAC;MACzB;IACF,CAAC,CAAC,OAAOG,CAAU,EAAE;MACnB,IAAI,CAACf,WAAW,CAACgB,YAAY,CAACxB,qEAAU,CAACuB,CAAC,CAAC,CAAC;IAC9C;EACF;EAEAE,gBAAgBA,CAACC,EAAsC;IACrD,IAAI,CAACC,QAAQ,GAAGD,EAAE;EACpB;EAEAE,iBAAiBA,CAACF,EAAc;IAC9B,IAAI,CAACG,OAAO,GAAGH,EAAE;EACnB;EAEAI,QAAQA,CAAA;IACN,IAAI,IAAI,CAACnB,WAAW,IAAI,IAAI,CAACA,WAAW,CAACoB,KAAK,EAAE;MAC9C,OAAO,IAAI;IACb;IACA,IAAI,CAACtB,WAAW,GAAG,IAAI;IACvB,OAAO;MAAEuB,WAAW,EAAE;QAAED,KAAK,EAAE;MAAK;IAAE,CAAE;EAC1C;EAEA;;;;;;EAMAE,gBAAgBA,CAACC,cAAiC,EAAEC,aAAgC;IAClF,KAAK,MAAMC,GAAG,IAAID,aAAa,EAAE;MAC/B,IAAIA,aAAa,CAACC,GAAG,CAAC,EAAEC,UAAU,IAAIF,aAAa,CAACC,GAAG,CAAC,EAAEC,UAAU,KAAKH,cAAc,CAACE,GAAG,CAAC,EAAEC,UAAU,EAAE;QACxG,OAAOD,GAAG;MACZ;MACA,IAAID,aAAa,CAACC,GAAG,CAAC,EAAEE,KAAK,KAAKJ,cAAc,CAACE,GAAG,CAAC,EAAEE,KAAK,EAAE;QAC5D,OAAOF,GAAG;MACZ;IACF;IACA,OAAO,IAAI;EACb;EAEQjB,QAAQA,CAAA;IACd,IAAI,CAACR,WAAW,GAAG,IAAI,CAACJ,WAAW,CAACgC,KAAK,CAAC,EAAE,CAAC;IAC7C,IAAI,CAACC,6BAA6B,CAAC,CAACnD,sDAAU,CAACoD,QAAQ,CAAC,CAAC;IACzD,IAAI,CAACC,uBAAuB,EAAE;IAC9B,IAAI,CAACC,oCAAoC,EAAE;IAE3C,IAAI,CAAChC,WAAW,CAACiC,YAAY,CAACC,IAAI,CAAClD,sEAAc,CAAC,IAAI,CAAC,CAAC,CAACmD,SAAS,CAAER,KAAwB,IAAI;MAC9F,MAAMS,YAAY,GAAG,IAAI,CAACd,gBAAgB,CAAC,IAAI,CAACrB,iBAAiB,EAAE0B,KAAK,CAAC;MACzE,IAAI,CAAC1B,iBAAiB,GAAG0B,KAAK;MAC9B,IAAIS,YAAY,EAAE;QAChB,IAAI,CAACzB,WAAW,CAACyB,YAAY,CAAC;MAChC;MACA,IAAI,IAAI,CAACpB,QAAQ,IAAI,IAAI,CAACE,OAAO,EAAE;QACjC,IAAI,CAACF,QAAQ,CAACW,KAAK,CAAC;QACpB,IAAI,CAACT,OAAO,EAAE;MAChB;IACF,CAAC,CAAC;EACJ;EAEQW,6BAA6BA,CAACQ,UAAyB;IAC7D,IAAI,CAAC,IAAI,CAAC9B,cAAc,IAAI,CAAC,IAAI,CAACA,cAAc,EAAEmB,UAAU,EAAE;MAC5D,MAAM,IAAIY,KAAK,CAAC,uBAAuB,CAAC;IAC1C;IACA,MAAMC,iBAAiB,GAAGhD,6DAAW,CAACiD,oBAAoB,CACxD,IAAI,CAACjC,cAAc,CAACmB,UAAU,EAC9B,IAAI,CAACnB,cAAc,CAACkC,WAAW,CAChC;IACD,MAAMC,gBAAgB,GAA0C;MAC9Df,KAAK,EAAEY,iBAAiB;MACxBI,QAAQ,EAAE,CAACJ;KACZ;IACD,IAAI,CAACvC,WAAW,CAAC4C,UAAU,CAACzD,gFAAa,CAACe,YAAY,EAAE,IAAIhC,uDAAW,CAACwE,gBAAgB,EAAEL,UAAU,CAAC,CAAC;IACtG,IAAI,CAACpC,iBAAiB,CAACd,gFAAa,CAACe,YAAY,CAAC,GAAGqC,iBAAiB;EACxE;EAEQR,uBAAuBA,CAAA;IAC7B,IAAIc,iBAAiB,GAAmC,IAAI,CAACtC,cAAc,EAAEkC,WAAW;IACxF,IAAI,EAAE,IAAI,CAAClC,cAAc,EAAEkC,WAAW,CAACK,iBAAiB,KAAKrD,sFAAsB,CAACsD,OAAO,CAAC,EAAE;MAC5FF,iBAAiB,GAAGtD,6DAAW,CAACyD,eAAe,CAAC7D,gFAAa,CAACgB,MAAM,EAAE,IAAI,CAACI,cAAc,EAAEkC,WAAW,CAAC;IACzG;IAEA,IAAII,iBAAiB,IAAI,IAAI,CAACtC,cAAc,EAAEkC,WAAW,EAAE;MACzD,MAAMQ,gBAAgB,GAAgB,IAAI,CAACC,qBAAqB,CAC9D;QAAE,GAAGL;MAAiB,CAAE,EACxB;QAAE,GAAG,IAAI,CAACtC,cAAc,EAAEkC;MAAW,CAAE,CACxC;MAED,MAAMU,WAAW,GAAG;QAClBxB,KAAK,EAAE,IAAI,CAACpB,cAAc,CAAC6C,MAAM;QACjCX,WAAW,EAAEQ;OACd;MAED,IAAIA,gBAAgB,EAAE;QACpB,MAAMP,gBAAgB,GAAyC;UAC7Df,KAAK,EAAEwB,WAAW;UAClBR,QAAQ,EAAE;SACX;QAED,IAAI,CAAC3C,WAAW,CAAC4C,UAAU,CAACzD,gFAAa,CAACgB,MAAM,EAAE,IAAIjC,uDAAW,CAACwE,gBAAgB,EAAE,CAAChE,sDAAU,CAACoD,QAAQ,CAAC,CAAC,CAAC;QAC3G,IAAI,CAAC7B,iBAAiB,CAACd,gFAAa,CAACgB,MAAM,CAAC,GAAGgD,WAAW;MAC5D;IACF;EACF;EAEQnB,oCAAoCA,CAAA;IAC1C,MAAMqB,wBAAwB,GAAwB;MACpDC,WAAW,EAAE,IAAI,CAAC/C,cAAc,EAAEgD,WAAW;MAC7CC,cAAc,EAAE,IAAI,CAACjD,cAAc,EAAEkD,cAAc;MACnDC,GAAG,EAAE;QACHC,SAAS,EAAE,IAAI,CAACpD,cAAc,EAAEmD,GAAG;QACnCE,KAAK,EAAE,IAAI,CAACrD,cAAc,EAAEqD;OAC7B;MACDC,eAAe,EAAE;KAClB;IAED,IAAI,IAAI,CAACtD,cAAc,EAAEkC,WAAW,CAACK,iBAAiB,KAAKrD,sFAAsB,CAACW,oBAAoB,EAAE;MACtGiD,wBAAwB,CAACQ,eAAe,GAAG,KAAK;MAChDR,wBAAwB,CAACZ,WAAW,GAAG,IAAI,CAAClC,cAAc,EAAEkC,WAAW;IACzE;IACA,MAAMC,gBAAgB,GAAiD;MACrEf,KAAK,EAAE0B,wBAAwB;MAC/BV,QAAQ,EAAE,CAACU;KACZ;IACD,IAAI,CAACrD,WAAW,CAAC4C,UAAU,CACzBzD,gFAAa,CAACiB,oBAAoB,EAClC,IAAIlC,uDAAW,CAACwE,gBAAgB,EAAE,CAAChE,sDAAU,CAACoD,QAAQ,CAAC,CAAC,CACzD;IACD,IAAI,CAAC7B,iBAAiB,CAACd,gFAAa,CAACiB,oBAAoB,CAAC,GAAGiD,wBAAwB;EACvF;EAEQH,qBAAqBA,CAACL,iBAA8B,EAAEI,gBAA6B;IACzF,MAAMa,kBAAkB,GAAGvE,6DAAW,CAACyD,eAAe,CAAC7D,gFAAa,CAAC4E,OAAO,EAAEd,gBAAgB,CAAC;IAC/F,MAAMe,uBAAuB,GAAGzE,6DAAW,CAACyD,eAAe,CAAC7D,gFAAa,CAACe,YAAY,EAAE+C,gBAAgB,CAAC;IAEzGJ,iBAAiB,CAACoB,gBAAgB,GAAG,EAAE;IAEvC,IAAIH,kBAAkB,IAAIE,uBAAuB,EAAE;MACjDnB,iBAAiB,CAACoB,gBAAgB,CAACC,IAAI,CAACJ,kBAAkB,EAAEE,uBAAuB,CAAC;IACtF;IACA,OAAOnB,iBAAiB;EAC1B;EAEQlC,WAAWA,CAACyB,YAAoB;IACtC,MAAM+B,eAAe,GAAG/E,oFAAiB,CAACgF,IAAI,CAAEC,UAAU,IAAKjC,YAAY,KAAKiC,UAAU,CAAC5C,GAAG,CAAC;IAC/F,IAAI0C,eAAe,EAAE;MACnBA,eAAe,CAACG,KAAK,CAACC,OAAO,CAAEC,SAAS,IAAK,IAAI,CAACC,UAAU,CAACD,SAAS,CAAC,CAAC;MACxEL,eAAe,CAACO,cAAc,CAACH,OAAO,CAAEC,SAAS,IAAK,IAAI,CAACG,UAAU,CAACH,SAAS,CAAC,CAAC;MACjFL,eAAe,CAACS,eAAe,CAACL,OAAO,CAAEC,SAAS,IAAK,IAAI,CAACG,UAAU,CAACH,SAAS,EAAE,IAAI,CAAC,CAAC;IAC1F;EACF;EAEQC,UAAUA,CAACD,SAAiB;IAClC,IAAI,IAAI,CAACvE,iBAAiB,EAAE;MAC1B,OAAO,IAAI,CAACA,iBAAiB,CAACuE,SAAS,CAAC;IAC1C;EACF;EAEQG,UAAUA,CAACH,SAAiB,EAAE7B,QAAA,GAAoB,KAAK;IAC7D,OAAO,IAAI,CAAC3C,WAAW,CAAC6E,GAAG,CAACL,SAAS,CAAC,EAAEM,KAAK,CAC3C;MACEnD,KAAK,EAAE,IAAI;MACXgB,QAAQ,EAAEA;KACX,EACD;MAAEoC,SAAS,EAAE;IAAK,CAAE,CACrB;EACH;EAEA;;;;;EAKQrE,qBAAqBA,CAAA;IAC3B,MAAMsE,mBAAmB,GAAsB5F,oFAAiB,CAAC6F,IAAI,CACnE,CAACC,CAAkB,EAAEC,CAAkB,KAAKD,CAAC,CAACE,MAAM,GAAGD,CAAC,CAACC,MAAM,CAChE;IACD,IAAIC,iBAAiB,GAAGC,SAAS;IACjC,KAAK,MAAMjB,UAAU,IAAIW,mBAAmB,EAAE;MAC5C,MAAMO,OAAO,GAAG,IAAI,CAACvF,WAAW,CAACwF,QAAQ,CAACnB,UAAU,CAAC5C,GAAG,CAAC;MAEzD,IAAI8D,OAAO,CAAC5D,KAAK,KAAK,IAAI,EAAE;QAC1B,OAAO0D,iBAAiB;MAC1B;MACAA,iBAAiB,GAAGhB,UAAU,CAAC5C,GAAG;IACpC;IAEA,OAAO6D,SAAS;EAClB;EAAC,QAAAG,CAAA;qBA3NU/F,yBAAyB,EAAAgG,+DAAA,CAAAE,uDAAA,GAAAF,+DAAA,CAAAG,kEAAA;EAAA;EAAA,QAAAC,EAAA;UAAzBpG,yBAAyB;IAAAqG,SAAA;IAAAC,MAAA;MAAAlG,WAAA;MAAAC,sBAAA;IAAA;IAAAkG,UAAA;IAAAC,QAAA,GAAAR,gEAAA,CAdzB,CACT;MACEU,OAAO,EAAE9H,6DAAiB;MAC1B+H,WAAW,EAAErI,yDAAU,CAAC,MAAM0B,yBAAyB,CAAC;MACxD4G,KAAK,EAAE;KACR,EACD;MACEF,OAAO,EAAE/H,yDAAa;MACtBgI,WAAW,EAAErI,yDAAU,CAAC,MAAM0B,yBAAyB,CAAC;MACxD4G,KAAK,EAAE;KACR,CACF,GAAAZ,iEAAA;IAAAc,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,mCAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCtEHnB,4DAAA,cAAwE;QAGlEA,uDAAA,uCAA8F;QAChGA,0DAAA,EAAM;QAERA,4DAAA,aAAiB;QAEbA,uDAAA,iCAGsF;QACxFA,0DAAA,EAAM;QAERA,uDAAA,+CAIwC;QAC1CA,0DAAA,EAAO;;;QAnBDA,wDAAA,cAAAoB,GAAA,CAAA9G,WAAA,CAAyB;QAUvB0F,uDAAA,GAA2B;QAA3BA,wDAAA,gBAAAoB,GAAA,CAAAhH,WAAA,CAA2B,eAAAgH,GAAA,CAAA7G,iBAAA,CAAAmH,YAAA,kBAAAN,GAAA,CAAA7G,iBAAA,CAAAmH,YAAA,CAAA1F,UAAA;QAM/BgE,uDAAA,EAA2B;QAA3BA,wDAAA,gBAAAoB,GAAA,CAAAhH,WAAA,CAA2B,sBAAAgH,GAAA,CAAA7G,iBAAA,CAAAmD,MAAA,kBAAA0D,GAAA,CAAA7G,iBAAA,CAAAmD,MAAA,CAAAX,WAAA;;;mBD2B3B9D,yDAAY,EACZC,mEAAc,EACdC,iFAAqB,EACrBN,+DAAmB,EAAAqH,4DAAA,EAAAA,2DAAA,EAAAA,gEAAA,EAAAA,8DAAA,EAAAA,2DAAA,EAGnB9G,gEAAe,EACfG,qFAAqB,EACrBC,yEAAe,EAIfM,qGAA4B;IAAAkI,aAAA;EAAA;;AAkBnBhI,yBAAyB,GAAAiI,UAAA,EADrC5I,oEAAY,EAAE,mCAemBd,uDAAW,EACXqB,kEAAW,KAfhCI,yBAAyB,CA4NrC;;;;;;;;;;;;;;;;;AEnS+E;AAE1E,MAAgBkI,aAAa;EAAnCjI,YAAA;IACE,KAAA4F,OAAO,GAAG,IAAIrH,uDAAW,EAAE;IAC3B,KAAA2J,aAAa,GAAG,IAAI;EAsBtB;EAlBE1G,QAAQA,CAACoE,OAAwB;IAC/B,OAAOA,OAAO,CAACnE,KAAK,GAAG,IAAI,GAAG;MAAEU,QAAQ,EAAE;IAAI,CAAE;EAClD;EAEAgG,yBAAyBA,CAACC,MAAoB;IAC5C,IAAIA,MAAM,EAAE;MACV,IAAI,CAACC,iBAAiB,CAACD,MAAM,CAACE,YAAY,KAAK,IAAI,CAAC;IACtD;EACF;EAEAD,iBAAiBA,CAACH,aAAsB;IACtC,IAAI,CAACA,aAAa,GAAGA,aAAa;IAClC,IAAIA,aAAa,EAAE;MACjB,IAAI,CAACtC,OAAO,CAAC2C,OAAO,EAAE;IACxB,CAAC,MAAM;MACL,IAAI,CAAC3C,OAAO,CAAC4C,MAAM,EAAE;IACvB;EACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3BmE;AACmD;AACzB;AAC9C;AACgB;AACR;AACsC;AACzC;AACU;AAC+B;AAClB;AAEzB;AAC8B;;;;;;;;;;ICD9EzC,4DAAA,oBAA4E;IAC1EA,oDAAA,GACF;IAAAA,0DAAA,EAAa;;;;IAF8CA,wDAAA,UAAAuD,SAAA,CAAgB;IACzEvD,uDAAA,EACF;IADEA,gEAAA,MAAAuD,SAAA,CAAAtF,SAAA,QAAAsF,SAAA,CAAArF,KAAA,OACF;;;;;IAEF8B,4DAAA,aAAgG;IACzFA,oDAAA,GAAsD;;IAAAA,0DAAA,EAAM;;;IAA5DA,uDAAA,GAAsD;IAAtDA,+DAAA,CAAAA,yDAAA,6CAAsD;;;;;;AD0BxD,IAAM2D,YAAY,GAAlB,MAAMA,YACX,SAAQzB,0DAA0B;EAmBlCjI,YAAA;IACE,KAAK,EAAE;IAhBA,KAAAG,WAAW,GAAG,KAAK;IACnB,KAAAwJ,wBAAwB,GAAuBhE,SAAS;IACxD,KAAAiE,2BAA2B,GAAuBjE,SAAS;IAOpE,KAAAkE,OAAO,GAAa,EAAE;IAQpB,IAAI,CAACjE,OAAO,CAACkE,aAAa,CAAC,CAACV,+FAA2B,CAACD,6EAAU,CAAC,CAAC,CAAC;EACvE;EAEAY,QAAQA,CAAA;IACN,IAAI,CAACC,WAAW,EAAE;IAClB,IAAI,CAACC,cAAc,EAAE;IACrB,IAAI,CAACrE,OAAO,CAACsE,aAAa,CAAC3H,IAAI,CAAClD,sEAAc,CAAC,IAAI,CAAC,CAAC,CAACmD,SAAS,CAAE2H,MAAM,IAAI;MACzE,IAAI,CAAChK,WAAW,GAAGgK,MAAM,KAAK,SAAS;IACzC,CAAC,CAAC;EACJ;EAEAH,WAAWA,CAAA;IACT,IAAI,CAACI,eAAe,GAAG,IAAI,CAACxE,OAAO,CAACtD,YAAY,CAACC,IAAI,CACnD0G,yDAAS,CAAC,EAAE,CAAC,EACbH,4DAAY,CAAC,GAAG,CAAC,EACjBC,oEAAoB,EAAE,EACtBG,yDAAS,CAAEmB,GAAG,IAAK1B,yCAAG,CAAC,MAAM0B,GAAG,EAAE,IAAI,CAACC,cAAc,CAACD,GAAG,IAAI,EAAE,CAAC,EAAE3B,uCAAK,CAAC,CAAC,EACzEM,mDAAG,CAAEuB,YAA2B,IAC9BA,YAAY,CAACvB,GAAG,CACblG,WAAwB,KAAgB;MACvCkB,SAAS,EAAElB,WAAW,CAACkB,SAAS;MAChCC,KAAK,EAAEnB,WAAW,CAACmB;KACpB,CAAC,CACH,CACF,EACD+E,mDAAG,CAAEwB,SAAqB,IACxBA,SAAS,CAACC,MAAM,CAAEC,QAAkB,IAAKA,QAAQ,KAAK/E,SAAS,IAAI+E,QAAQ,CAAC1G,SAAS,KAAK2B,SAAS,CAAC,CACrG,EACDtG,sEAAc,CAAC,IAAI,CAAC,CACrB;EACH;EAEA8B,gBAAgBA,CAACC,EAAyC;IACxD,IAAI,CAACC,QAAQ,GAAGD,EAAE;EACpB;EAEAE,iBAAiBA,CAACF,EAAc;IAC9B,IAAI,CAACG,OAAO,GAAGH,EAAE;EACnB;EAEAV,UAAUA,CAACsB,KAAsB;IAC/B,IAAIA,KAAK,EAAEiC,KAAK,IAAIjC,KAAK,EAAEgC,SAAS,IAAIhC,KAAK,KAAK,IAAI,EAAE;MACtD,IAAI,CAAC4D,OAAO,CAAC+E,QAAQ,CAAC3I,KAAK,EAAE;QAAEoD,SAAS,EAAE;MAAK,CAAE,CAAC;IACpD;EACF;EAEAwF,OAAOA,CAACF,QAA8B;IACpC,MAAMG,aAAa,GAAGH,QAAQ,EAAE1G,SAAS,GAAG0G,QAAQ,CAAC1G,SAAS,GAAG,EAAE;IACnE,IAAI0G,QAAQ,EAAEzG,KAAK,EAAE;MACnB4G,aAAa,CAACC,MAAM,CAAC,KAAKJ,QAAQ,CAACzG,KAAK,GAAG,CAAC;IAC9C;IACA,OAAO4G,aAAa;EACtB;EAEAE,eAAeA,CAAA;IACb,IAAI,CAACC,mBAAmB,EAAEC,mBAAmB,CAC1C1I,IAAI,CAAClD,sEAAc,CAAC,IAAI,CAAC,CAAC,CAC1BmD,SAAS,CAAE0I,KAAsC,IAAI;MACpD,IAAI,CAACC,2BAA2B,CAACD,KAAK,CAAC;IACzC,CAAC,CAAC;EACN;EAEAZ,cAAcA,CAACtI,KAAwB;IACrC,IACE,OAAOA,KAAK,KAAK,QAAQ,IACzB,IAAI,CAAC2H,wBAAwB,IAC7B,IAAI,CAAC/D,OAAO,CAAC5D,KAAK,IAClB,IAAI,CAACoJ,6BAA6B,EAClC;MACA,OAAOxL,6DAAW,CAACyL,gBAAgB,CACjCrJ,KAAK,EACL,IAAI,CAAC2H,wBAAwB,EAC7B,IAAI,CAACC,2BAA2B,EAChC,IAAI,CAACwB,6BAA6B,CACnC;IACH;IACA,OAAOvC,wCAAE,CAAC,EAAE,CAAC;EACf;EAEAyC,gBAAgBA,CAACC,UAAmB;IAClC,IAAI,CAAClD,iBAAiB,CAACkD,UAAU,CAAC;EACpC;EAEA;;;;;;;EAOQtB,cAAcA,CAAA;IACpB,IAAI,CAACuB,iBAAiB,GAAG,IAAI,CAACC,YAAY,CAAClJ,IAAI,CAAClD,sEAAc,CAAC,IAAI,CAAC,CAAC,CAACmD,SAAS,CAAC,MAAK;MACnF,IAAI,CAAC4H,eAAe,GAAGvB,wCAAE,CAAC,EAAE,CAAC;MAC7B,IAAI,CAACmB,WAAW,EAAE;IACpB,CAAC,CAAC;EACJ;EAEQmB,2BAA2BA,CAACD,KAAsC;IACxE,IAAIA,KAAK,IAAIA,KAAK,CAACQ,WAAW,EAAE;MAC9B,IAAI,CAACC,wBAAwB,CAACT,KAAK,CAACU,MAAM,CAAC5J,KAAK,CAAC;IACnD,CAAC,MAAM,IAAI,CAACkJ,KAAK,IAAI,IAAI,CAACF,mBAAmB,IAAI,IAAI,CAACA,mBAAmB,CAACa,YAAY,EAAE;MACtF,IAAI,CAACC,2BAA2B,CAAC,IAAI,CAACd,mBAAmB,CAACa,YAAY,CAAC7J,KAAK,CAAC;IAC/E,CAAC,MAAM;MACL,IAAI,CAAC+J,iBAAiB,EAAE;IAC1B;EACF;EAEQJ,wBAAwBA,CAAC3J,KAAe;IAC9C,IAAIA,KAAK,IAAI,IAAI,CAACX,QAAQ,EAAE;MAC1B,IAAI,CAACuE,OAAO,CAAC+E,QAAQ,CAAC3I,KAAK,CAAC;MAC5B,IAAI,CAACX,QAAQ,CAACW,KAAK,CAAC;IACtB;EACF;EAEQ8J,2BAA2BA,CAAC9J,KAAe;IACjD,IAAI,CAAC2J,wBAAwB,CAAC3J,KAAK,CAAC;EACtC;EAEQ+J,iBAAiBA,CAAA;IACvB,IAAI,IAAI,CAAC1K,QAAQ,EAAE;MACjB,IAAI,IAAI,CAACuE,OAAO,CAAC5D,KAAK,KAAK,EAAE,EAAE;QAC7B,IAAI,CAACX,QAAQ,CAAC;UACZ2C,SAAS,EAAE,IAAI,CAAC4B,OAAO,CAAC5D;SACzB,CAAC;MACJ,CAAC,MAAM;QACL,IAAI,CAACX,QAAQ,CAACsE,SAAS,CAAC;MAC1B;IACF;EACF;EAAC,QAAAG,CAAA;qBAtJU4D,YAAY;EAAA;EAAA,QAAAvD,EAAA;UAAZuD,YAAY;IAAAtD,SAAA;IAAA4F,SAAA,WAAAC,mBAAA/E,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;0EAUKuB,kFAAsB;;;;;;;;;;;;;;;gFAxBvC,CACT;MACEhC,OAAO,EAAE9H,6DAAiB;MAC1B+H,WAAW,EAAErI,yDAAU,CAAC,MAAMqL,YAAY,CAAC;MAC3C/C,KAAK,EAAE;KACR,EACD;MACEF,OAAO,EAAE/H,yDAAa;MACtBgI,WAAW,EAAErI,yDAAU,CAAC,MAAMqL,YAAY,CAAC;MAC3C/C,KAAK,EAAE;KACR,CACF,GAAAZ,wEAAA,EAAAA,iEAAA;IAAAc,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAmF,sBAAAjF,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCxCHnB,4DAAA,aAAgD;QAAAA,oDAAA,GAA6C;;QAAAA,0DAAA,EAAM;QACnGA,4DAAA,aAAqD;QACnDA,uDAAA,kBAQgB;;QAChBA,4DAAA,6BAAwE;QACtEA,wDAAA,IAAAsG,kCAAA,wBAEa;;QACftG,0DAAA,EAAmB;QACnBA,wDAAA,KAAAuG,4BAAA,iBAEM;QACRvG,0DAAA,EAAM;;;;QAnB0CA,uDAAA,EAA6C;QAA7CA,+DAAA,CAAAA,yDAAA,oCAA6C;QACxFA,uDAAA,GAA+C;QAA/CA,wDAAA,YAAAA,6DAAA,KAAAyG,GAAA,EAAArF,GAAA,CAAAe,aAAA,EAA+C;QAIhDnC,uDAAA,EAA8B;QAA9BA,wDAAA,oBAAA0G,GAAA,CAA8B,gBAAAtF,GAAA,CAAAvB,OAAA,iBAAAG,yDAAA;QAD9BA,yDAAA,6CAAiD;QAOHA,uDAAA,GAAuB;QAAvBA,wDAAA,gBAAAoB,GAAA,CAAAyD,OAAA,CAAuB;QACtC7E,uDAAA,GAA0B;QAA1BA,wDAAA,YAAAA,yDAAA,SAAAoB,GAAA,CAAAiD,eAAA,EAA0B;QAIrDrE,uDAAA,GAAgD;QAAhDA,wDAAA,SAAAoB,GAAA,CAAAhH,WAAA,IAAAgH,GAAA,CAAAvB,OAAA,CAAA+G,QAAA,YAAgD;;;mBDGpD3N,yDAAY,EAAAiH,oDAAA,EAAAA,oDAAA,EAAAA,iDAAA,EAAAA,sDAAA,EACZhH,mEAAc,EACdC,iFAAqB,EAAAgH,2EAAA,EAAA+G,8DAAA,EAAA/G,kFAAA,EACrBtH,+DAAmB,EAAAuO,gEAAA,EAAAA,2DAAA,EAAAA,gEAAA,EAGnBhO,gEAAe,EAAAmO,8DAAA;IAAAvF,aAAA;EAAA;;AAkBN2B,YAAY,GAAA1B,UAAA,EADxB5I,oEAAY,EAAE,wCACFsK,YAAY,CAuJxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AElMyG;AAYlF;AACyC;AACR;AACc;AACjB;AACe;AAOtB;AACiB;AACO;AACxB;AACqB;AACjB;AACC;AACf;AAC6C;;;;;AAiC3E,IAAM7J,4BAA4B,GAAlC,MAAMA,4BAA4B;EAiBvCG,YACmBgO,GAAsB,EACtB/N,WAAwB,EACxBC,WAAwB,EACxB+N,sBAA8C;IAH9C,KAAAD,GAAG,GAAHA,GAAG;IACH,KAAA/N,WAAW,GAAXA,WAAW;IACX,KAAAC,WAAW,GAAXA,WAAW;IACX,KAAA+N,sBAAsB,GAAtBA,sBAAsB;IApBhC,KAAA9N,WAAW,GAAG,KAAK;IAG5B,KAAA+N,2BAA2B,GAAG,IAAIJ,kDAAe,CAAOnI,SAAS,CAAC;IAKlE,KAAAwI,wBAAwB,GAAuBxI,SAAS;IACxD,KAAAyI,2BAA2B,GAAuBzI,SAAS;IAE3D,KAAA0I,uBAAuB,GAAc,IAAI5P,qDAAS,CAAC,EAAE,CAAC;IAWpD,IAAI,CAAC4P,uBAAuB,GAAG,IAAI5P,qDAAS,CAAC;MAC3C,CAACe,gFAAa,CAAC8O,YAAY,GAAG,IAAI/P,uDAAW,CAAC,EAAE,CAAC;MACjD,CAACiB,gFAAa,CAAC+O,gBAAgB,GAAG,IAAIhQ,uDAAW,CAAC,EAAE,CAAC;MACrD,CAACiB,gFAAa,CAACgP,GAAG,GAAG,IAAIjQ,uDAAW,CAAC,EAAE;KACxC,CAAC;EACJ;EAEAmC,UAAUA,CAACsB,KAAiC;IAC1C,IAAI;MACF,IAAI,CAACnB,QAAQ,CAACmB,KAAK,CAAC;MACpB,IAAIA,KAAK,EAAE2B,WAAW,EAAE;QACtB,IAAI,CAAC8K,wBAAwB,CAACzM,KAAK,CAAC2B,WAAW,EAAE3B,KAAK,CAAC6B,cAAc,CAAC;MACxE;IACF,CAAC,CAAC,OAAO5C,CAAU,EAAE;MACnB,IAAI,CAACf,WAAW,CAACgB,YAAY,CAACxB,sEAAU,CAACuB,CAAC,CAAC,CAAC;IAC9C;EACF;EAEAE,gBAAgBA,CAACC,EAAwC;IACvD,IAAI,CAACC,QAAQ,GAAGD,EAAE;EACpB;EAEAE,iBAAiBA,CAACF,EAAc;IAC9B,IAAI,CAACG,OAAO,GAAGH,EAAE;EACnB;EAEAI,QAAQA,CAAA;IACN,IAAI,IAAI,CAAC6M,uBAAuB,IAAI,IAAI,CAACA,uBAAuB,CAAC5M,KAAK,EAAE;MACtE,OAAO,IAAI;IACb;IACA,IAAI,CAACtB,WAAW,GAAG,IAAI;IACvB,OAAO;MAAEuB,WAAW,EAAE;QAAED,KAAK,EAAE;MAAK;IAAE,CAAE;EAC1C;EAEA6J,gBAAgBA,CAACC,UAAmB;IAClC,IAAIA,UAAU,EAAE;MACd,IAAI,CAAC8C,uBAAuB,CAACnJ,GAAG,CAAC1F,gFAAa,CAAC8O,YAAY,CAAC,EAAEnJ,KAAK,CAAC,IAAI,EAAE;QAAEC,SAAS,EAAE;MAAK,CAAE,CAAC;MAC/F,IAAI,CAACiJ,uBAAuB,CAACnJ,GAAG,CAAC1F,gFAAa,CAAC8O,YAAY,CAAC,EAAE/F,OAAO,CAAC;QAAEnD,SAAS,EAAE;MAAK,CAAE,CAAC;MAE3F,IAAI,CAACiJ,uBAAuB,CAACnJ,GAAG,CAAC1F,gFAAa,CAAC+O,gBAAgB,CAAC,EAAEpJ,KAAK,CAAC,IAAI,EAAE;QAAEC,SAAS,EAAE;MAAK,CAAE,CAAC;MACnG,IAAI,CAACiJ,uBAAuB,CAACnJ,GAAG,CAAC1F,gFAAa,CAAC+O,gBAAgB,CAAC,EAAEhG,OAAO,CAAC;QAAEnD,SAAS,EAAE;MAAK,CAAE,CAAC;MAE/F,IAAI,CAACiJ,uBAAuB,CAACnJ,GAAG,CAAC1F,gFAAa,CAACgP,GAAG,CAAC,EAAErJ,KAAK,CAAC,IAAI,EAAE;QAAEC,SAAS,EAAE;MAAK,CAAE,CAAC;MACtF,IAAI,CAACiJ,uBAAuB,CAACnJ,GAAG,CAAC1F,gFAAa,CAACgP,GAAG,CAAC,EAAEjG,OAAO,CAAC;QAAEnD,SAAS,EAAE;MAAK,CAAE,CAAC;IACpF,CAAC,MAAM;MACL,MAAMsJ,kBAAkB,GAAG,IAAI,CAACL,uBAAuB,CAACnJ,GAAG,CAAC1F,gFAAa,CAAC8O,YAAY,CAAC;MACvF,IAAII,kBAAkB,IAAIA,kBAAkB,CAACjN,KAAK,EAAE;QAClD,IAAI,CAAC4M,uBAAuB,CAACnJ,GAAG,CAAC1F,gFAAa,CAAC+O,gBAAgB,CAAC,EAAE/F,MAAM,CAAC;UAAEpD,SAAS,EAAE;QAAK,CAAE,CAAC;QAC9F,IAAI,CAACiJ,uBAAuB,CAACnJ,GAAG,CAAC1F,gFAAa,CAACgP,GAAG,CAAC,EAAEhG,MAAM,CAAC;UAAEpD,SAAS,EAAE;QAAK,CAAE,CAAC;MACnF;MACA,IAAI,CAACiJ,uBAAuB,CAACnJ,GAAG,CAAC1F,gFAAa,CAAC8O,YAAY,CAAC,EAAE9F,MAAM,CAAC;QAAEpD,SAAS,EAAE;MAAK,CAAE,CAAC;IAC5F;EACF;EAEAuJ,WAAWA,CAACC,OAAsB;IAChC,IAAIA,OAAO,CAAC,mBAAmB,CAAC,EAAE;MAChC,MAAMtG,YAAY,GAA4BsG,OAAO,CAAC,mBAAmB,CAAC,CAACtG,YAAY;MACvF,MAAMuG,aAAa,GAA4BD,OAAO,CAAC,mBAAmB,CAAC,CAACC,aAAa;MAEzF,IAAI,CAACC,6BAA6B,CAACxG,YAAY,EAAEuG,aAAa,CAAC;IACjE;EACF;EAEAJ,wBAAwBA,CAAC9K,WAAmB,EAAEoL,cAAA,GAAqCpJ,SAAS;IAC1F,IAAIhC,WAAW,IAAI,IAAI,CAACT,iBAAiB,EAAE;MACzC,IAAI,CAAC8L,8BAA8B,GAAGpP,6DAAW,CAACqP,kCAAkC,CAClFtL,WAAW,EACX,IAAI,CAACT,iBAAiB,CAACgM,EAAE,EACzB,IAAI,CAACjB,sBAAsB,CAC5B,CAAC1L,IAAI,CACJwL,oDAAG,CAAExD,YAA2B,IAAI;QAClC,OAAQ,IAAI,CAACa,6BAA6B,GAAGb,YAAY;MAC3D,CAAC,CAAC,CACH;MAED,IAAI,CAAC4D,wBAAwB,GAAGxK,WAAW;MAC3C,IAAIoL,cAAc,EAAE;QAClB,IAAI,CAACX,2BAA2B,GAAGW,cAAc;MACnD;MACA,IAAI,CAACf,GAAG,CAACmB,aAAa,EAAE;IAC1B;EACF;EAEQC,YAAYA,CAAA;IAClB,IAAI,CAAClB,2BAA2B,CAACmB,IAAI,EAAE;EACzC;EAEQP,6BAA6BA,CACnCxG,YAAqC,EACrCuG,aAAsC;IAEtC,IAAIA,aAAa,IAAI,CAACvG,YAAY,EAAE;MAClC,IAAI,CAACgD,gBAAgB,CAAC,IAAI,CAAC;IAC7B,CAAC,MAAM,IAAIhD,YAAY,KAAKuG,aAAa,EAAE;MACzC,IAAI,CAACO,YAAY,EAAE;MACnB,IAAI,CAACpO,WAAW,CAACxB,gFAAa,CAACgB,MAAM,CAAC;IACxC;EACF;EAEQK,QAAQA,CAACmB,KAAiC;IAChD,IAAI,CAACqM,uBAAuB,GAAG,IAAI,CAACpO,WAAW,CAACgC,KAAK,CAAC,EAAE,CAAC;IACzD,MAAMqN,qBAAqB,GAAG,CAAC,IAAI,CAACpM,iBAAiB;IAErD,IAAI,CAACmL,uBAAuB,CAACpL,UAAU,CACrCzD,gFAAa,CAAC8O,YAAY,EAC1B,IAAI/P,uDAAW,CACb;MACEyD,KAAK,EAAEA,KAAK,EAAE2B,WAAW;MACzBX,QAAQ,EAAEsM;KACX,EACD,CAACvQ,sDAAU,CAACoD,QAAQ,EAAEpD,sDAAU,CAACwQ,SAAS,CAAC,CAAC,CAAC,EAAExQ,sDAAU,CAACyQ,OAAO,CAAC,MAAM,CAAC,CAAC,CAC3E,CACF;IAED,MAAMC,8BAA8B,GAAG,CAACzN,KAAK,EAAE2B,WAAW;IAE1D,IAAI,CAAC0K,uBAAuB,CAACpL,UAAU,CACrCzD,gFAAa,CAAC+O,gBAAgB,EAC9B,IAAIhQ,uDAAW,CACb;MACEyD,KAAK,EAAEA,KAAK,EAAE6B,cAAc;MAC5Bb,QAAQ,EAAEyM;KACX,EACD,CAAC1Q,sDAAU,CAACyQ,OAAO,CAAC,kBAAkB,CAAC,CAAC,CACzC,CACF;IACD,IAAI,CAACnB,uBAAuB,CAACpL,UAAU,CACrCzD,gFAAa,CAACgP,GAAG,EACjB,IAAIjQ,uDAAW,CACb;MACEyD,KAAK,EAAEA,KAAK,EAAE+B,GAAG;MACjBf,QAAQ,EAAEyM;KACX,EACD,CAACrG,+FAA2B,CAACD,6EAAU,CAAC,CAAC,CAC1C,CACF;IAED,IAAI,CAACkF,uBAAuB,CACzBnJ,GAAG,CAAC1F,gFAAa,CAAC8O,YAAY,CAAC,EAC9BhM,YAAY,CAACC,IAAI,CAAClD,sEAAc,CAAC,IAAI,CAAC,CAAC,CACxCmD,SAAS,CAAC,MAAK;MACd,IAAI,CAACxB,WAAW,CAACxB,gFAAa,CAAC8O,YAAY,CAAC;IAC9C,CAAC,CAAC;IAEJ;IACA,IAAI,CAACD,uBAAuB,CAAC/L,YAAY,CAACC,IAAI,CAAClD,sEAAc,CAAC,IAAI,CAAC,CAAC,CAACmD,SAAS,CAAER,KAA0B,IAAI;MAC5G,IAAI,CAACmM,wBAAwB,GAAGnM,KAAK,CAAC2B,WAAW;MACjD,IAAI,CAACyK,2BAA2B,GAAGpM,KAAK,CAAC6B,cAAc;MAEvD;MACA,MAAM6L,mBAAmB,GAAG9P,6DAAW,CAAC+P,qCAAqC,CAC3E,IAAI,CAACvE,6BAA6B,EAClCpJ,KAAK,CACN;MACD,IAAI0N,mBAAmB,EAAE;QACvB1N,KAAK,CAACkC,eAAe,GAAG,KAAK;QAC7BlC,KAAK,CAACc,WAAW,GAAG4M,mBAAmB;MACzC,CAAC,MAAM;QACL1N,KAAK,CAACkC,eAAe,GAAG,IAAI;MAC9B;MAEA,IAAI,IAAI,CAAC7C,QAAQ,EAAE;QACjB,IAAI,CAACA,QAAQ,CAACW,KAAK,CAAC;MACtB;IACF,CAAC,CAAC;EACJ;EAEQhB,WAAWA,CAACyB,YAAoB;IACtC,MAAM+B,eAAe,GAAGmJ,uGAAoC,CAAClJ,IAAI,CAAEC,UAAU,IAAKjC,YAAY,KAAKiC,UAAU,CAAC5C,GAAG,CAAC;IAClH,IAAI0C,eAAe,EAAE;MACnBA,eAAe,CAACO,cAAc,CAACH,OAAO,CAAEC,SAAS,IAAK,IAAI,CAACG,UAAU,CAACH,SAAS,CAAC,CAAC;MACjFL,eAAe,CAACS,eAAe,CAACL,OAAO,CAAEC,SAAS,IAAK,IAAI,CAACG,UAAU,CAACH,SAAS,EAAE,IAAI,CAAC,CAAC;IAC1F;EACF;EAEQG,UAAUA,CAACH,SAAiB,EAAE7B,QAAA,GAAoB,KAAK;IAC7D,OAAO,IAAI,CAACqL,uBAAuB,CAACnJ,GAAG,CAACL,SAAS,CAAC,EAAEM,KAAK,CACvD;MACEnD,KAAK,EAAE,IAAI;MACXgB,QAAQ,EAAEA;KACX,EACD;MAAEoC,SAAS,EAAE;IAAK,CAAE,CACrB;EACH;EAAC,QAAAU,CAAA;qBA9MUjG,4BAA4B,EAAAkG,+DAAA,CAAAA,4DAAA,GAAAA,+DAAA,CAAAE,uDAAA,GAAAF,+DAAA,CAAAG,mEAAA,GAAAH,+DAAA,CAAAkH,yFAAA;EAAA;EAAA,QAAA9G,EAAA;UAA5BtG,4BAA4B;IAAAuG,SAAA;IAAAC,MAAA;MAAAlG,WAAA;MAAA+C,iBAAA;IAAA;IAAAoD,UAAA;IAAAC,QAAA,GAAAR,gEAAA,CAd5B,CACT;MACEU,OAAO,EAAE9H,6DAAiB;MAC1B+H,WAAW,EAAErI,yDAAU,CAAC,MAAMwB,4BAA4B,CAAC;MAC3D8G,KAAK,EAAE;KACR,EACD;MACEF,OAAO,EAAE/H,yDAAa;MACtBgI,WAAW,EAAErI,yDAAU,CAAC,MAAMwB,4BAA4B,CAAC;MAC3D8G,KAAK,EAAE;KACR,CACF,GAAAZ,kEAAA,EAAAA,iEAAA;IAAAc,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAA6I,sCAAA3I,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QC9DHnB,4DAAA,aAAuD;QAKjDA,wDAAA,qCAAAgK,uGAAAC,MAAA;UAAA,OAA2B7I,GAAA,CAAAsH,wBAAA,CAAAuB,MAAA,CAAgC;QAAA,EAAC;QAEhCjK,0DAAA,EAAgC;QAEhEA,4DAAA,aAAiC;QAC/BA,uDAAA,2CAKkE;QACpEA,0DAAA,EAAM;QACNA,4DAAA,aAAiC;QAC/BA,uDAAA,8BAMqD;QACvDA,0DAAA,EAAM;;;QAzBSA,wDAAA,cAAAoB,GAAA,CAAAkH,uBAAA,CAAqC;QAIhDtI,uDAAA,GAA2D;QAA3DA,wDAAA,iBAAAoB,GAAA,CAAA+G,2BAAA,CAAA+B,YAAA,GAA2D,kCAAA9I,GAAA,CAAA6H,8BAAA,iBAAA7H,GAAA,CAAAhH,WAAA;QAQ3D4F,uDAAA,GAA2D;QAA3DA,wDAAA,iBAAAoB,GAAA,CAAA+G,2BAAA,CAAA+B,YAAA,GAA2D,kCAAA9I,GAAA,CAAA6H,8BAAA,8BAAA7H,GAAA,CAAAgH,wBAAA,iBAAAhH,GAAA,CAAAhH,WAAA;QAQ3D4F,uDAAA,GAA2D;QAA3DA,wDAAA,iBAAAoB,GAAA,CAAA+G,2BAAA,CAAA+B,YAAA,GAA2D,kCAAA9I,GAAA,CAAA6H,8BAAA,8BAAA7H,GAAA,CAAAgH,wBAAA,iCAAAhH,GAAA,CAAAiH,2BAAA,iBAAAjH,GAAA,CAAAhH,WAAA;;;mBDkB7DnB,yDAAY,EACZC,mEAAc,EACdC,iFAAqB,EACrBN,+DAAmB,EAAAqH,2DAAA,EAAAA,gEAAA,EAAAA,8DAAA,EAAAA,2DAAA,EAGnB9G,gEAAe,EACfyO,yEAAoB,EACpBC,gFAAuB,EACvBnE,wDAAY;IAAA3B,aAAA;EAAA;;AAkBHlI,4BAA4B,GAAAmI,UAAA,EADxC5I,oEAAY,EAAE,mCAmBWoO,4DAAiB,EACTlP,uDAAW,EACXqB,mEAAW,EACA+N,yFAAsB,KArBtD7N,4BAA4B,CA+MxC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEhRoE;AAQ7C;AAC6F;AACpE;AACgB;AACR;AACsC;AACzC;AACU;AAC+B;AAE3C;;;;;;;;;;ICNhDkG,4DAAA,oBAA4E;IAC1EA,oDAAA,GACF;IAAAA,0DAAA,EAAa;;;;IAF8CA,wDAAA,UAAAoK,SAAA,CAAgB;IACzEpK,uDAAA,EACF;IADEA,gEAAA,MAAAoK,SAAA,MACF;;;;;IAEFpK,4DAAA,aAE0C;IACxCA,oDAAA,GACF;;IAAAA,0DAAA,EAAM;;;IADJA,uDAAA,EACF;IADEA,gEAAA,MAAAA,yDAAA,qDACF;;;;;IACAA,4DAAA,aAE0C;IACnCA,oDAAA,GAAwD;;IAAAA,0DAAA,EAAM;;;IAA9DA,uDAAA,GAAwD;IAAxDA,+DAAA,CAAAA,yDAAA,+CAAwD;;;;;;ADwB1D,IAAM6H,oBAAoB,GAA1B,MAAMA,oBACX,SAAQ3F,0DAA0B;EAgBlCjI,YAAA;IACE,KAAK,EAAE;IAbA,KAAAG,WAAW,GAAG,KAAK;IAElB,KAAAkQ,uBAAuB,GAAG,IAAIH,uDAAY,EAAU;IAY5D,IAAI,CAACtK,OAAO,CAACkE,aAAa,CAAC,CAAC/K,sDAAU,CAACoD,QAAQ,EAAEpD,sDAAU,CAACwQ,SAAS,CAAC,CAAC,CAAC,EAAExQ,sDAAU,CAACyQ,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;EACxG;EAEAzF,QAAQA,CAAA;IACN,IAAI,CAACC,WAAW,EAAE;IAClB,IAAI,CAACC,cAAc,EAAE;IACrB,IAAI,CAACrE,OAAO,CAACtD,YAAY,CAACC,IAAI,CAAClD,sEAAc,CAAC,IAAI,CAAC,CAAC,CAACmD,SAAS,CAAER,KAAK,IAAI;MACvE,IAAI,CAACqO,uBAAuB,CAACC,IAAI,CAACtO,KAAK,CAAC;IAC1C,CAAC,CAAC;IACF,IAAI,CAAC4D,OAAO,CAACsE,aAAa,CAAC3H,IAAI,CAAClD,sEAAc,CAAC,IAAI,CAAC,CAAC,CAACmD,SAAS,CAAE2H,MAAM,IAAI;MACzE,IAAI,CAAChK,WAAW,GAAGgK,MAAM,KAAK,SAAS;IACzC,CAAC,CAAC;EACJ;EAEAH,WAAWA,CAAA;IACT,IAAI,CAACI,eAAe,GAAG,IAAI,CAACxE,OAAO,CAACtD,YAAY,CAACC,IAAI,CACnD0G,yDAAS,CAAC,EAAE,CAAC,EACbH,4DAAY,CAAC,GAAG,CAAC,EACjBC,oEAAoB,EAAE,EACtBG,yDAAS,CAAEmB,GAAG,IAAK1B,yCAAG,CAAC,MAAM0B,GAAG,EAAE,IAAI,CAACC,cAAc,EAAE,EAAE5B,uCAAK,CAAC,CAAC,EAChEM,mDAAG,CAAEuB,YAA2B,IAAKA,YAAY,CAACvB,GAAG,CAAElG,WAAwB,IAAKA,WAAW,CAACyN,IAAI,CAAC,CAAC,EACtGlR,sEAAc,CAAC,IAAI,CAAC,CACrB;EACH;EAEA8B,gBAAgBA,CAACC,EAAuC;IACtD,IAAI,CAACC,QAAQ,GAAGD,EAAE;EACpB;EAEAE,iBAAiBA,CAACF,EAAc;IAC9B,IAAI,CAACG,OAAO,GAAGH,EAAE;EACnB;EAEAV,UAAUA,CAACsB,KAAoB;IAC7B,IAAI,CAAC4D,OAAO,CAAC+E,QAAQ,CAAC3I,KAAK,EAAE;MAAEoD,SAAS,EAAE;IAAK,CAAE,CAAC;EACpD;EAEAwF,OAAOA,CAAC9H,WAAoC;IAC1C,OAAOA,WAAW,IAAIA,WAAW,CAACyN,IAAI,GAAGzN,WAAW,CAACyN,IAAI,GAAG,EAAE;EAChE;EAEAxF,eAAeA,CAAA;IACb,IAAI,CAACC,mBAAmB,EAAEC,mBAAmB,CAC1C1I,IAAI,CAAClD,sEAAc,CAAC,IAAI,CAAC,CAAC,CAC1BmD,SAAS,CAAE0I,KAAsC,IAAI;MACpD,IAAI,CAACC,2BAA2B,CAACD,KAAK,CAAC;IACzC,CAAC,CAAC;EACN;EAEAZ,cAAcA,CAAA;IACZ,IAAI,IAAI,CAAC1E,OAAO,CAAC5D,KAAK,IAAI,IAAI,CAACoJ,6BAA6B,EAAE;MAC5D,OAAOxL,4DAAW,CAAC4Q,kBAAkB,CAAC,IAAI,CAACpF,6BAA6B,CAAC;IAC3E;IACA,OAAOvC,wCAAE,CAAC,EAAE,CAAC;EACf;EAEAyC,gBAAgBA,CAACC,UAAmB;IAClC,IAAI,CAAClD,iBAAiB,CAACkD,UAAU,CAAC;EACpC;EAEA;;;;;;;EAOQtB,cAAcA,CAAA;IACpB,IAAI,CAACuB,iBAAiB,GAAG,IAAI,CAACC,YAAY,CAAClJ,IAAI,CAAClD,sEAAc,CAAC,IAAI,CAAC,CAAC,CAACmD,SAAS,CAAC,MAAK;MACnF,IAAI,CAAC4H,eAAe,GAAGvB,wCAAE,CAAC,EAAE,CAAC;MAC7B,IAAI,CAACmB,WAAW,EAAE;IACpB,CAAC,CAAC;EACJ;EAEQmB,2BAA2BA,CAACD,KAAsC;IACxE,IAAIA,KAAK,IAAIA,KAAK,CAACQ,WAAW,EAAE;MAC9B,IAAI,CAACC,wBAAwB,CAACT,KAAK,CAACU,MAAM,CAAC5J,KAAK,CAAC;IACnD,CAAC,MAAM;MACL,IAAI,CAAC+J,iBAAiB,EAAE;IAC1B;EACF;EAEQJ,wBAAwBA,CAAC3J,KAAa;IAC5C,IAAIA,KAAK,IAAI,IAAI,CAACX,QAAQ,EAAE;MAC1B,IAAI,CAACuE,OAAO,CAAC+E,QAAQ,CAAC3I,KAAK,CAAC;MAC5B,IAAI,CAACX,QAAQ,CAACW,KAAK,CAAC;IACtB;EACF;EAEQ+J,iBAAiBA,CAAA;IACvB,IAAI,IAAI,CAAC1K,QAAQ,EAAE;MACjB,IAAI,IAAI,CAACuE,OAAO,CAAC5D,KAAK,KAAK,EAAE,EAAE;QAC7B,IAAI,CAACX,QAAQ,CAAC,IAAI,CAACuE,OAAO,CAAC5D,KAAK,CAAC;MACnC,CAAC,MAAM;QACL,IAAI,CAACX,QAAQ,CAACsE,SAAS,CAAC;MAC1B;IACF;EACF;EAAC,QAAAG,CAAA;qBApHU8H,oBAAoB;EAAA;EAAA,QAAAzH,EAAA;UAApByH,oBAAoB;IAAAxH,SAAA;IAAA4F,SAAA,WAAAyE,2BAAAvJ,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;0EASHuB,kFAAsB;;;;;;;;;;;;;;;;gFAvBvC,CACT;MACEhC,OAAO,EAAE9H,6DAAiB;MAC1B+H,WAAW,EAAErI,yDAAU,CAAC,MAAMuP,oBAAoB,CAAC;MACnDjH,KAAK,EAAE;KACR,EACD;MACEF,OAAO,EAAE/H,yDAAa;MACtBgI,WAAW,EAAErI,yDAAU,CAAC,MAAMuP,oBAAoB,CAAC;MACnDjH,KAAK,EAAE;KACR,CACF,GAAAZ,wEAAA,EAAAA,iEAAA;IAAAc,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAA0J,8BAAAxJ,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QC7CHnB,4DAAA,aAAgD;QAAAA,oDAAA,GAA+C;;QAAAA,0DAAA,EAAM;QACrGA,4DAAA,aAAqD;QACnDA,uDAAA,kBAQgB;;QAChBA,4DAAA,gCAAgD;QAC9CA,wDAAA,IAAA4K,0CAAA,wBAEa;;QACf5K,0DAAA,EAAmB;QACnBA,wDAAA,KAAA6K,oCAAA,iBAIM,KAAAC,oCAAA;QAMR9K,0DAAA,EAAM;;;;QA1B0CA,uDAAA,EAA+C;QAA/CA,+DAAA,CAAAA,yDAAA,sCAA+C;QAC1FA,uDAAA,GAA+C;QAA/CA,wDAAA,YAAAA,6DAAA,KAAAyG,GAAA,EAAArF,GAAA,CAAAe,aAAA,EAA+C;QAIhDnC,uDAAA,EAA8B;QAA9BA,wDAAA,oBAAA0G,GAAA,CAA8B,gBAAAtF,GAAA,CAAAvB,OAAA,iBAAAG,yDAAA;QAD9BA,yDAAA,sDAA0D;QAQ3BA,uDAAA,GAA0B;QAA1BA,wDAAA,YAAAA,yDAAA,SAAAoB,GAAA,CAAAiD,eAAA,EAA0B;QAKxDrE,uDAAA,GAAwG;QAAxGA,wDAAA,SAAAoB,GAAA,CAAAhH,WAAA,IAAAgH,GAAA,CAAAvB,OAAA,CAAA+G,QAAA,gBAAAxF,GAAA,CAAAvB,OAAA,CAAAkL,OAAA,IAAA3J,GAAA,CAAAvB,OAAA,CAAA+G,QAAA,aAAwG;QAKxG5G,uDAAA,EAAmF;QAAnFA,wDAAA,SAAAoB,GAAA,CAAAhH,WAAA,KAAAgH,GAAA,CAAAvB,OAAA,CAAA+G,QAAA,eAAAxF,GAAA,CAAAvB,OAAA,CAAA+G,QAAA,eAAmF;;;mBDEpF3N,yDAAY,EAAAiH,oDAAA,EAAAA,oDAAA,EAAAA,iDAAA,EAAAA,sDAAA,EACZhH,mEAAc,EACdC,iFAAqB,EAAAgH,2EAAA,EAAA+G,8DAAA,EAAA/G,kFAAA,EACrBtH,+DAAmB,EAAAuO,gEAAA,EAAAA,2DAAA,EAAAA,gEAAA,EAGnBhO,gEAAe,EAAAmO,8DAAA;IAAAvF,aAAA;EAAA;;AAkBN6F,oBAAoB,GAAA5F,UAAA,EADhC5I,oEAAY,EAAE,wCACFwO,oBAAoB,CAqHhC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AErKoE;AAQ7C;AACuE;AAC9C;AACgB;AACR;AACsC;AACzC;AACJ;AACE;AACsC;AAEX;;;;;;;;;;;ICR7E7H,4DAAA,oBAA4E;IAC1EA,oDAAA,GACF;IAAAA,0DAAA,EAAa;;;;IAF8CA,wDAAA,UAAAuD,SAAA,CAAgB;IACzEvD,uDAAA,EACF;IADEA,gEAAA,MAAAuD,SAAA,CAAAvH,UAAA,SAAAuH,SAAA,CAAAyH,QAAA,MACF;;;;;IAEFhL,4DAAA,aAE0C;IACxCA,oDAAA,GACF;;IAAAA,0DAAA,EAAM;;;IADJA,uDAAA,EACF;IADEA,gEAAA,MAAAA,yDAAA,kDACF;;;AD8BO,IAAMzG,qBAAqB,GAA3B,MAAMA,qBACX,SAAQ2I,0DAA2B;EAanCjI,YAA6BiO,sBAA8C;IACzE,KAAK,EAAE;IADoB,KAAAA,sBAAsB,GAAtBA,sBAAsB;IAV1C,KAAA9N,WAAW,GAAG,KAAK;IAI5B,KAAA0J,OAAO,GAAa,EAAE;IAQpB,IAAI,CAACjE,OAAO,CAACkE,aAAa,CAAC/K,sDAAU,CAACoD,QAAQ,CAAC;EACjD;EAEA4H,QAAQA,CAAA;IACN,IAAI,CAACC,WAAW,EAAE;EACpB;EAEAA,WAAWA,CAAA;IACT,IAAI,CAACI,eAAe,GAAG,IAAI,CAACxE,OAAO,CAACtD,YAAY,CAACC,IAAI,CACnD0G,yDAAS,CAAC,EAAE,CAAC,EACbH,4DAAY,CAAC,GAAG,CAAC,EACjBC,oEAAoB,EAAE,EACtBG,yDAAS,CAAEmB,GAAG,IAAK1B,yCAAG,CAAC,MAAM0B,GAAG,IAAIA,GAAG,CAAC2G,MAAM,GAAG,CAAC,EAAE,IAAI,CAAC1G,cAAc,CAACD,GAAG,IAAI,EAAE,CAAC,EAAE3B,uCAAK,CAAC,CAAC,EAC3FrJ,sEAAc,CAAC,IAAI,CAAC,CACrB;EACH;EAEA8B,gBAAgBA,CAACC,EAAiC;IAChD,IAAI,CAACC,QAAQ,GAAGD,EAAE;EACpB;EAEAE,iBAAiBA,CAACF,EAAc;IAC9B,IAAI,CAACG,OAAO,GAAGH,EAAE;EACnB;EAEAV,UAAUA,CAACqQ,QAA6B;IACtC,IAAI,CAACnL,OAAO,CAAC+E,QAAQ,CAACoG,QAAQ,CAAC;EACjC;EAEAnG,OAAOA,CAACnD,YAAsC;IAC5C,OAAOA,YAAY,GAAG,GAAGA,YAAY,CAAC1F,UAAU,MAAM0F,YAAY,CAACsJ,QAAQ,EAAE,GAAG,EAAE;EACpF;EAEAhG,eAAeA,CAAA;IACb,IAAI,CAACC,mBAAmB,EAAEC,mBAAmB,CAC1C1I,IAAI,CAAClD,sEAAc,CAAC,IAAI,CAAC,CAAC,CAC1BmD,SAAS,CAAE0I,KAAsC,IAAI;MACpD,IAAI,CAACC,2BAA2B,CAACD,KAAK,CAAC;IACzC,CAAC,CAAC;EACN;EAEAZ,cAAcA,CAACtI,KAA4B;IACzC,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC7B,MAAMiP,WAAW,GAAGjP,KAAK,CAACkP,WAAW,EAAE;MACvC,OAAOtR,4DAAW,CAACuR,yBAAyB,CAACF,WAAW,EAAE,IAAI,CAAChD,sBAAsB,CAAC;IACxF;IACA,OAAOpF,wCAAE,CAAC,EAAE,CAAC;EACf;EAEAyC,gBAAgBA,CAACC,UAAmB;IAClC,IAAI,CAACrD,aAAa,GAAGqD,UAAU;EACjC;EAEQJ,2BAA2BA,CAACD,KAAsC;IACxE,IAAIA,KAAK,IAAIA,KAAK,CAACQ,WAAW,EAAE;MAC9B,IAAI,CAACC,wBAAwB,CAACT,KAAK,CAACU,MAAM,CAAC5J,KAAK,CAAC;IACnD,CAAC,MAAM,IAAI,CAACkJ,KAAK,IAAI,IAAI,CAACF,mBAAmB,IAAI,IAAI,CAACA,mBAAmB,CAACa,YAAY,EAAE;MACtF,IAAI,CAACC,2BAA2B,CAAC,IAAI,CAACd,mBAAmB,CAACa,YAAY,CAAC7J,KAAK,CAAC;IAC/E;EACF;EAEQ2J,wBAAwBA,CAAC3J,KAAmB;IAClD,IAAIA,KAAK,IAAI,IAAI,CAACX,QAAQ,EAAE;MAC1B,IAAI,CAACuE,OAAO,CAAC+E,QAAQ,CAAC3I,KAAK,CAAC;MAC5B,IAAI,CAACX,QAAQ,CAACW,KAAK,CAAC;IACtB;EACF;EAEQ8J,2BAA2BA,CAAC9J,KAAmB;IACrD,IAAI,CAAC2J,wBAAwB,CAAC3J,KAAK,CAAC;EACtC;EAAC,QAAA8D,CAAA;qBAtFUxG,qBAAqB,EAAAyG,+DAAA,CAAAE,0FAAA;EAAA;EAAA,QAAAE,EAAA;UAArB7G,qBAAqB;IAAA8G,SAAA;IAAA4F,SAAA,WAAAoF,4BAAAlK,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;0EAMJuB,kFAAsB;;;;;;;;;;;gFApBvC,CACT;MACEhC,OAAO,EAAE9H,6DAAiB;MAC1B+H,WAAW,EAAErI,yDAAU,CAAC,MAAMiB,qBAAqB,CAAC;MACpDqH,KAAK,EAAE;KACR,EACD;MACEF,OAAO,EAAE/H,yDAAa;MACtBgI,WAAW,EAAErI,yDAAU,CAAC,MAAMiB,qBAAqB,CAAC;MACpDqH,KAAK,EAAE;KACR,CACF,GAAAZ,wEAAA,EAAAA,iEAAA;IAAAc,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAqK,+BAAAnK,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QC9CHnB,4DAAA,aAAgD;QAAAA,oDAAA,GAA2C;;QAAAA,0DAAA,EAAM;QACjGA,uDAAA,kBAQgB;;QAChBA,4DAAA,6BAAqG;QACnGA,wDAAA,IAAAuL,2CAAA,wBAEa;;QACfvL,0DAAA,EAAmB;QACnBA,wDAAA,KAAAwL,qCAAA,iBAIM;;;;QAnB0CxL,uDAAA,EAA2C;QAA3CA,+DAAA,CAAAA,yDAAA,kCAA2C;QAIzFA,uDAAA,GAA8B;QAA9BA,wDAAA,oBAAA0G,GAAA,CAA8B,gBAAAtF,GAAA,CAAAvB,OAAA,iBAAAG,yDAAA;QAD9BA,yDAAA,sDAA0D;QAOZA,uDAAA,GAAuB;QAAvBA,wDAAA,gBAAAoB,GAAA,CAAAyD,OAAA,CAAuB;QACtC7E,uDAAA,GAA0B;QAA1BA,wDAAA,YAAAA,yDAAA,QAAAoB,GAAA,CAAAiD,eAAA,EAA0B;QAKxDrE,uDAAA,GAAwG;QAAxGA,wDAAA,SAAAoB,GAAA,CAAAhH,WAAA,IAAAgH,GAAA,CAAAvB,OAAA,CAAA+G,QAAA,gBAAAxF,GAAA,CAAAvB,OAAA,CAAAkL,OAAA,IAAA3J,GAAA,CAAAvB,OAAA,CAAA+G,QAAA,aAAwG;;;mBDSvG3N,yDAAY,EAAAkH,oDAAA,EAAAA,iDAAA,EAAAA,sDAAA,EACZjH,mEAAc,EACdC,iFAAqB,EAAA+N,2EAAA,EAAAE,8DAAA,EAAAF,kFAAA,EACrBrO,+DAAmB,EAAA0O,gEAAA,EAAAA,2DAAA,EAAAA,gEAAA,EAGnBnO,gEAAe,EAAAqS,8DAAA;IAAAzJ,aAAA;EAAA;;AAkBNzI,qBAAqB,GAAA0I,UAAA,EADjC5I,oEAAY,EAAE,mCAewCsO,0FAAsB,KAdhEpO,qBAAqB,CAuFjC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AExIoE;AAQ7C;AAUD;AAC0B;AACgB;AACR;AACsC;AACzC;AACJ;AACE;AACsC;AACc;;;;;;;;;;;ICfpGyG,4DAAA,oBAA4E;IAC1EA,oDAAA,GACF;IAAAA,0DAAA,EAAa;;;;IAF8CA,wDAAA,UAAAuD,SAAA,CAAgB;IACzEvD,uDAAA,EACF;IADEA,gEAAA,MAAAuD,SAAA,CAAAmI,MAAA,MACF;;;;;IAEF1L,4DAAA,aAE0C;IACxCA,oDAAA,GACF;;IAAAA,0DAAA,EAAM;;;IADJA,uDAAA,EACF;IADEA,gEAAA,MAAAA,yDAAA,gDACF;;;;;;ADsCK,IAAMxG,eAAe,GAArB,MAAMA,eACX,SAAQ0I,0DAA0B;EAclCjI,YAA6BiO,sBAA8C;IACzE,KAAK,EAAE;IADoB,KAAAA,sBAAsB,GAAtBA,sBAAsB;IAX1C,KAAAlM,UAAU,GAAuB4D,SAAS;IAC1C,KAAAxF,WAAW,GAAG,KAAK;IAI5B,KAAA0J,OAAO,GAAa,EAAE;IAQpB,IAAI,CAACjE,OAAO,CAACkE,aAAa,CAAC/K,sDAAU,CAACoD,QAAQ,CAAC;EACjD;EAEA4H,QAAQA,CAAA;IACN,IAAI,CAACC,WAAW,EAAE;EACpB;EAEAA,WAAWA,CAAA;IACT,IAAI,CAACI,eAAe,GAAG,IAAI,CAACxE,OAAO,CAACtD,YAAY,CAACC,IAAI,CACnD0G,yDAAS,CAAC,EAAE,CAAC,EACbH,4DAAY,CAAC,GAAG,CAAC,EACjBC,oEAAoB,EAAE,EACtBG,yDAAS,CAAEmB,GAAG,IAAK1B,yCAAG,CAAC,MAAM0B,GAAG,IAAIA,GAAG,CAAC2G,MAAM,GAAG,CAAC,EAAE,IAAI,CAAC1G,cAAc,CAACD,GAAG,IAAI,EAAE,CAAC,EAAE3B,uCAAK,CAAC,CAAC,EAC3FrJ,sEAAc,CAAC,IAAI,CAAC,CACrB;EACH;EAEA8B,gBAAgBA,CAACC,EAA2C;IAC1D,IAAI,CAACC,QAAQ,GAAGD,EAAE;EACpB;EAEAE,iBAAiBA,CAACF,EAAc;IAC9B,IAAI,CAACG,OAAO,GAAGH,EAAE;EACnB;EAEAV,UAAUA,CAACsB,KAAyB;IAClC,IAAI,CAAC4D,OAAO,CAAC+E,QAAQ,CAAC3I,KAAK,EAAEc,WAAW,CAAC;EAC3C;EAEA8H,OAAOA,CAAC9H,WAAoC;IAC1C,OAAOA,WAAW,IAAIA,WAAW,CAAC2O,MAAM,GAAG3O,WAAW,CAAC2O,MAAM,GAAG,EAAE;EACpE;EAEA1G,eAAeA,CAAA;IACb,IAAI,CAACC,mBAAmB,EAAEC,mBAAmB,CAC1C1I,IAAI,CAAClD,sEAAc,CAAC,IAAI,CAAC,CAAC,CAC1BmD,SAAS,CAAE0I,KAAsC,IAAI;MACpD,IAAI,CAACC,2BAA2B,CAACD,KAAK,CAAC;IACzC,CAAC,CAAC;EACN;EAEAZ,cAAcA,CAACtI,KAA2B;IACxC,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAI,IAAI,CAACD,UAAU,EAAE;MAChD,OAAOnC,4DAAW,CAAC8R,kBAAkB,CAAC1P,KAAK,EAAE,IAAI,CAACD,UAAU,EAAE,IAAI,CAACkM,sBAAsB,CAAC;IAC5F;IACA,OAAOpF,wCAAE,CAAC,EAAE,CAAC;EACf;EAEAyC,gBAAgBA,CAACC,UAAmB;IAClC,IAAI,CAAClD,iBAAiB,CAACkD,UAAU,CAAC;EACpC;EAEAoD,WAAWA,CAACC,OAAsB;IAChC,IAAIA,OAAO,CAAC,YAAY,CAAC,EAAE;MACzB,MAAMtG,YAAY,GAA4BsG,OAAO,CAAC,YAAY,CAAC,CAACtG,YAAY;MAChF,MAAMuG,aAAa,GAA4BD,OAAO,CAAC,YAAY,CAAC,CAACC,aAAa;MAElF,IAAI,CAAC8C,mCAAmC,CAACrJ,YAAY,EAAEuG,aAAa,CAAC;IACvE;EACF;EAEQ8C,mCAAmCA,CACzCrJ,YAAqC,EACrCuG,aAAsC;IAEtC,IAAIvG,YAAY,KAAKuG,aAAa,EAAE;MAClC,IAAI,CAACzE,eAAe,GAAGvB,wCAAE,CAAC,EAAE,CAAC;MAC7B,IAAI,CAACmB,WAAW,EAAE;IACpB;EACF;EAEQmB,2BAA2BA,CAACD,KAAsC;IACxE,IAAIA,KAAK,IAAIA,KAAK,CAACU,MAAM,CAACgG,QAAQ,EAAE;MAClC,IAAI1G,KAAK,CAACQ,WAAW,IAAK,IAAI,CAACV,mBAAmB,IAAI,IAAI,CAACA,mBAAmB,CAACa,YAAa,EAAE;QAC5F,IAAI,CAACF,wBAAwB,CAACT,KAAK,CAACU,MAAM,CAAC5J,KAAK,EAAE,QAAQ,CAAC;MAC7D,CAAC,MAAM;QACL,IAAI,CAAC+J,iBAAiB,EAAE;MAC1B;IACF;EACF;EAEQJ,wBAAwBA,CAAC3J,KAAkB,EAAE6P,WAAmB;IACtE,IAAI7P,KAAK,IAAI,IAAI,CAACX,QAAQ,EAAE;MAC1B,IAAI,CAACuE,OAAO,CAAC+E,QAAQ,CAAC3I,KAAK,CAAC;MAC5B,MAAM8P,gBAAgB,GAAG9P,KAAK,CAAC6P,WAAW,CAAC,GAAG7P,KAAK,CAAC6P,WAAW,CAAC,GAAG,EAAE;MACrE,IAAI,CAACxQ,QAAQ,CAAC;QACZW,KAAK,EAAE8P,gBAAgB;QACvBhP,WAAW,EAAEd;OACd,CAAC;IACJ;EACF;EAEQ+J,iBAAiBA,CAAA;IACvB,IAAI,IAAI,CAAC1K,QAAQ,EAAE;MACjB,IAAI,CAACA,QAAQ,CAAC;QACZW,KAAK,EAAE,IAAI,CAAC4D,OAAO,CAAC5D;OACrB,CAAC;IACJ;EACF;EAAC,QAAA8D,CAAA;qBAnHUvG,eAAe,EAAAwG,+DAAA,CAAAE,0FAAA;EAAA;EAAA,QAAAE,EAAA;UAAf5G,eAAe;IAAA6G,SAAA;IAAA4F,SAAA,WAAA+F,sBAAA7K,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;0EAOEuB,kFAAsB;;;;;;;;;;;;gFArBvC,CACT;MACEhC,OAAO,EAAE9H,6DAAiB;MAC1B+H,WAAW,EAAErI,yDAAU,CAAC,MAAMkB,eAAe,CAAC;MAC9CoH,KAAK,EAAE;KACR,EACD;MACEF,OAAO,EAAE/H,yDAAa;MACtBgI,WAAW,EAAErI,yDAAU,CAAC,MAAMkB,eAAe,CAAC;MAC9CoH,KAAK,EAAE;KACR,CACF,GAAAZ,wEAAA,EAAAA,kEAAA,EAAAA,iEAAA;IAAAc,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAgL,yBAAA9K,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCvDHnB,4DAAA,aAAgD;QAAAA,oDAAA,GAAyC;;QAAAA,0DAAA,EAAM;QAC/FA,4DAAA,aAAqD;QACnDA,uDAAA,kBAQgB;;QAChBA,4DAAA,6BAAwE;QACtEA,wDAAA,IAAAkM,qCAAA,wBAEa;;QACflM,0DAAA,EAAmB;QACnBA,wDAAA,KAAAmM,+BAAA,iBAIM;QACRnM,0DAAA,EAAM;;;;QArB0CA,uDAAA,EAAyC;QAAzCA,+DAAA,CAAAA,yDAAA,gCAAyC;QACpFA,uDAAA,GAA+C;QAA/CA,wDAAA,YAAAA,6DAAA,KAAAyG,GAAA,EAAArF,GAAA,CAAAe,aAAA,EAA+C;QAIhDnC,uDAAA,EAA8B;QAA9BA,wDAAA,oBAAA0G,GAAA,CAA8B,gBAAAtF,GAAA,CAAAvB,OAAA,iBAAAG,yDAAA;QAD9BA,yDAAA,gDAAoD;QAONA,uDAAA,GAAuB;QAAvBA,wDAAA,gBAAAoB,GAAA,CAAAyD,OAAA,CAAuB;QACtC7E,uDAAA,GAA0B;QAA1BA,wDAAA,YAAAA,yDAAA,SAAAoB,GAAA,CAAAiD,eAAA,EAA0B;QAKxDrE,uDAAA,GAAwG;QAAxGA,wDAAA,SAAAoB,GAAA,CAAAhH,WAAA,IAAAgH,GAAA,CAAAvB,OAAA,CAAA+G,QAAA,gBAAAxF,GAAA,CAAAvB,OAAA,CAAAkL,OAAA,IAAA3J,GAAA,CAAAvB,OAAA,CAAA+G,QAAA,aAAwG;;;mBDiBzG3N,yDAAY,EAAAkH,oDAAA,EAAAA,oDAAA,EAAAA,iDAAA,EAAAA,sDAAA,EACZjH,mEAAc,EACdC,iFAAqB,EAAA+N,2EAAA,EAAAE,8DAAA,EAAAF,kFAAA,EACrBrO,+DAAmB,EAAA0O,gEAAA,EAAAA,2DAAA,EAAAA,gEAAA,EAGnBnO,gEAAe,EAAAqS,8DAAA;IAAAzJ,aAAA;EAAA;;AAkBNxI,eAAe,GAAAyI,UAAA,EAD3B5I,oEAAY,EAAE,mCAgBwCsO,0FAAsB,KAfhEnO,eAAe,CAoH3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AE9KoE;AAQ7C;AACuE;AAC9C;AACgB;AACR;AACsC;AACzC;AACU;AAC+B;AAE3C;;;;;;;;;;ICNhDwG,4DAAA,oBAA4E;IAC1EA,oDAAA,GACF;IAAAA,0DAAA,EAAa;;;;IAF8CA,wDAAA,UAAAuD,SAAA,CAAgB;IACzEvD,uDAAA,EACF;IADEA,gEAAA,MAAAuD,SAAA,MACF;;;;;IAEFvD,4DAAA,aAAgG;IACzFA,oDAAA,GAAqD;;IAAAA,0DAAA,EAAM;;;IAA3DA,uDAAA,GAAqD;IAArDA,+DAAA,CAAAA,yDAAA,4CAAqD;;;;;;AD+BvD,IAAM8H,uBAAuB,GAA7B,MAAMA,uBACX,SAAQ5F,0DAA0B;EAgBlCjI,YAAA;IACE,KAAK,EAAE;IAbA,KAAAG,WAAW,GAAG,KAAK;IACnB,KAAAwJ,wBAAwB,GAAuBhE,SAAS;IAa/D,IAAI,CAACC,OAAO,CAACkE,aAAa,CAAC,CAAC/K,sDAAU,CAACyQ,OAAO,CAAC,kBAAkB,CAAC,CAAC,CAAC;EACtE;EAEAzF,QAAQA,CAAA;IACN,IAAI,CAACC,WAAW,EAAE;IAClB,IAAI,CAACC,cAAc,EAAE;IACrB,IAAI,CAACrE,OAAO,CAACsE,aAAa,CAAC3H,IAAI,CAAClD,sEAAc,CAAC,IAAI,CAAC,CAAC,CAACmD,SAAS,CAAE2H,MAAM,IAAI;MACzE,IAAI,CAAChK,WAAW,GAAGgK,MAAM,KAAK,SAAS;IACzC,CAAC,CAAC;EACJ;EAEAH,WAAWA,CAAA;IACT,IAAI,CAACI,eAAe,GAAG,IAAI,CAACxE,OAAO,CAACtD,YAAY,CAACC,IAAI,CACnD0G,yDAAS,CAAC,EAAE,CAAC,EACbH,4DAAY,CAAC,GAAG,CAAC,EACjBC,oEAAoB,EAAE,EACtBG,yDAAS,CAAEmB,GAAG,IAAK1B,yCAAG,CAAC,MAAM0B,GAAG,EAAE,IAAI,CAACC,cAAc,CAACD,GAAG,IAAI,EAAE,CAAC,EAAE3B,uCAAK,CAAC,CAAC,EACzEM,mDAAG,CAAEuB,YAA2B,IAAKA,YAAY,CAACvB,GAAG,CAAElG,WAAwB,IAAKA,WAAW,CAACgB,cAAc,CAAC,CAAC,EAChHkF,mDAAG,CAAEmJ,eAAuC,IAC1CA,eAAe,CAAC1H,MAAM,CAAE3G,cAAc,IAA+BA,cAAc,KAAK6B,SAAS,CAAC,CACnG,EACDtG,sEAAc,CAAC,IAAI,CAAC,CACrB;EACH;EAEA8B,gBAAgBA,CAACC,EAAuC;IACtD,IAAI,CAACC,QAAQ,GAAGD,EAAE;EACpB;EAEAE,iBAAiBA,CAACF,EAAc;IAC9B,IAAI,CAACG,OAAO,GAAGH,EAAE;EACnB;EAEAV,UAAUA,CAACsB,KAAoB;IAC7B,IAAI,CAAC4D,OAAO,CAAC+E,QAAQ,CAAC3I,KAAK,EAAE;MAAEoD,SAAS,EAAE;IAAK,CAAE,CAAC;EACpD;EAEA2F,eAAeA,CAAA;IACb,IAAI,CAACC,mBAAmB,EAAEC,mBAAmB,CAC1C1I,IAAI,CAAClD,sEAAc,CAAC,IAAI,CAAC,CAAC,CAC1BmD,SAAS,CAAE0I,KAAsC,IAAI;MACpD,IAAI,CAACC,2BAA2B,CAACD,KAAK,CAAC;IACzC,CAAC,CAAC;EACN;EAEAZ,cAAcA,CAACtI,KAAa;IAC1B,IAAI,IAAI,CAAC2H,wBAAwB,IAAI,IAAI,CAAC/D,OAAO,CAAC5D,KAAK,IAAI,IAAI,CAACoJ,6BAA6B,EAAE;MAC7F,OAAOxL,4DAAW,CAACwS,qBAAqB,CACtCpQ,KAAK,EACL,IAAI,CAAC2H,wBAAwB,EAC7B,IAAI,CAACyB,6BAA6B,CACnC;IACH;IACA,OAAOvC,wCAAE,CAAC,EAAE,CAAC;EACf;EAEAyC,gBAAgBA,CAACC,UAAmB;IAClC,IAAI,CAAClD,iBAAiB,CAACkD,UAAU,CAAC;EACpC;EAEA;;;;;;;EAOQtB,cAAcA,CAAA;IACpB,IAAI,CAACuB,iBAAiB,GAAG,IAAI,CAACC,YAAY,CAAClJ,IAAI,CAAClD,sEAAc,CAAC,IAAI,CAAC,CAAC,CAACmD,SAAS,CAAC,MAAK;MACnF,IAAI,CAAC4H,eAAe,GAAGvB,wCAAE,CAAC,EAAE,CAAC;MAC7B,IAAI,CAACmB,WAAW,EAAE;IACpB,CAAC,CAAC;EACJ;EAEQmB,2BAA2BA,CAACD,KAAsC;IACxE,IAAIA,KAAK,IAAIA,KAAK,CAACQ,WAAW,EAAE;MAC9B,IAAI,CAACC,wBAAwB,CAACT,KAAK,CAACU,MAAM,CAAC5J,KAAK,CAAC;IACnD,CAAC,MAAM,IAAI,CAACkJ,KAAK,IAAI,IAAI,CAACF,mBAAmB,IAAI,IAAI,CAACA,mBAAmB,CAACa,YAAY,EAAE;MACtF,IAAI,CAACC,2BAA2B,CAAC,IAAI,CAACd,mBAAmB,CAACa,YAAY,CAAC7J,KAAK,CAAC;IAC/E,CAAC,MAAM;MACL,IAAI,CAAC+J,iBAAiB,EAAE;IAC1B;EACF;EAEQJ,wBAAwBA,CAAC3J,KAAa;IAC5C,IAAIA,KAAK,IAAI,IAAI,CAACX,QAAQ,EAAE;MAC1B,IAAI,CAACuE,OAAO,CAAC+E,QAAQ,CAAC3I,KAAK,CAAC;MAC5B,IAAI,CAACX,QAAQ,CAACW,KAAK,CAAC;IACtB;EACF;EAEQ8J,2BAA2BA,CAAC9J,KAAa;IAC/C,IAAI,CAAC2J,wBAAwB,CAAC3J,KAAK,CAAC;EACtC;EAEQ+J,iBAAiBA,CAAA;IACvB,IAAI,IAAI,CAAC1K,QAAQ,EAAE;MACjB,IAAI,IAAI,CAACuE,OAAO,CAAC5D,KAAK,KAAK,EAAE,EAAE;QAC7B,IAAI,CAACX,QAAQ,CAAC,IAAI,CAACuE,OAAO,CAAC5D,KAAK,CAAC;MACnC,CAAC,MAAM;QACL,IAAI,CAACX,QAAQ,CAACsE,SAAS,CAAC;MAC1B;IACF;EACF;EAAC,QAAAG,CAAA;qBA1HU+H,uBAAuB;EAAA;EAAA,QAAA1H,EAAA;UAAvB0H,uBAAuB;IAAAzH,SAAA;IAAA4F,SAAA,WAAAqG,8BAAAnL,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;0EAUNuB,kFAAsB;;;;;;;;;;;;;;gFAxBvC,CACT;MACEhC,OAAO,EAAE9H,6DAAiB;MAC1B+H,WAAW,EAAErI,yDAAU,CAAC,MAAMwP,uBAAuB,CAAC;MACtDlH,KAAK,EAAE;KACR,EACD;MACEF,OAAO,EAAE/H,yDAAa;MACtBgI,WAAW,EAAErI,yDAAU,CAAC,MAAMwP,uBAAuB,CAAC;MACtDlH,KAAK,EAAE;KACR,CACF,GAAAZ,wEAAA,EAAAA,iEAAA;IAAAc,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAsL,iCAAApL,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QC7CHnB,4DAAA,aAAgD;QAAAA,oDAAA,GAA4C;;QAAAA,0DAAA,EAAM;QAClGA,4DAAA,aAAqD;QACnDA,uDAAA,kBAQgB;;QAChBA,4DAAA,gCAAgD;QAC9CA,wDAAA,IAAAwM,6CAAA,wBAEa;;QACfxM,0DAAA,EAAmB;QACnBA,wDAAA,KAAAyM,uCAAA,iBAEM;QACRzM,0DAAA,EAAM;;;;QAnB0CA,uDAAA,EAA4C;QAA5CA,+DAAA,CAAAA,yDAAA,mCAA4C;QACvFA,uDAAA,GAA+C;QAA/CA,wDAAA,YAAAA,6DAAA,KAAAyG,GAAA,EAAArF,GAAA,CAAAe,aAAA,EAA+C;QAIhDnC,uDAAA,EAA8B;QAA9BA,wDAAA,oBAAA0G,GAAA,CAA8B,gBAAAtF,GAAA,CAAAvB,OAAA,iBAAAG,yDAAA;QAD9BA,yDAAA,0DAA8D;QAQ/BA,uDAAA,GAA0B;QAA1BA,wDAAA,YAAAA,yDAAA,SAAAoB,GAAA,CAAAiD,eAAA,EAA0B;QAIrDrE,uDAAA,GAAgD;QAAhDA,wDAAA,SAAAoB,GAAA,CAAAhH,WAAA,IAAAgH,GAAA,CAAAvB,OAAA,CAAA+G,QAAA,YAAgD;;;mBDQpD3N,yDAAY,EAAAiH,oDAAA,EAAAA,oDAAA,EAAAA,iDAAA,EAAAA,sDAAA,EACZhH,mEAAc,EACdC,iFAAqB,EAAAgH,2EAAA,EAAA+G,8DAAA,EAAA/G,kFAAA,EACrBtH,+DAAmB,EAAAuO,gEAAA,EAAAA,2DAAA,EAAAA,gEAAA,EAGnBhO,gEAAe,EAAAmO,8DAAA;IAAAvF,aAAA;EAAA;;AAkBN8F,uBAAuB,GAAA7F,UAAA,EADnC5I,oEAAY,EAAE,wCACFyO,uBAAuB,CA2HnC;;;;;;;;;;;;;;;;;;;AE1KoC;AAC8E;AAG7G,MAAOjO,WAAW;EACtB,OAAOuR,yBAAyBA,CAACF,WAAmB,EAAEhD,sBAA8C;IAClG,OAAOA,sBAAsB,CAACwE,iBAAiB,EAAE,CAAClQ,IAAI,CACpDyG,mDAAG,CAAE0J,QAAwB,IAAI;MAC/B,OAAOA,QAAQ,CAACjI,MAAM,CAAEhD,YAAY,IAAI;QACtC,MAAMkL,kBAAkB,GAAG,GAAGlL,YAAY,CAAC1F,UAAU,CAACmP,WAAW,EAAE,MAAMzJ,YAAY,CAACsJ,QAAQ,CAACG,WAAW,EAAE,EAAE;QAC9G,OAAOyB,kBAAkB,CAACC,OAAO,CAAC3B,WAAW,CAACC,WAAW,EAAE,CAAC,KAAK,CAAC;MACpE,CAAC,CAAC;IACJ,CAAC,CAAC,CACH;EACH;EAEA,OAAOQ,kBAAkBA,CAAC1P,KAAa,EAAE6Q,eAAuB,EAAE5E,sBAA8C;IAC9G,OAAOA,sBAAsB,CAAC6E,UAAU,CAAC9Q,KAAK,EAAE6Q,eAAe,CAAC,CAACtQ,IAAI,EAAE;EACzE;EAEA,OAAO0M,kCAAkCA,CACvCgC,WAAmB,EACnB8B,mBAA2B,EAC3B9E,sBAA8C;IAE9C,OAAOA,sBAAsB,CAAC+E,wBAAwB,CAAC/B,WAAW,EAAE8B,mBAAmB,CAAC;EAC1F;EAEA,OAAOvC,kBAAkBA,CAACpF,6BAAwD;IAChF,OAAOA,6BAA6B,CAAC7I,IAAI,CACvCyG,mDAAG,CAAEuB,YAAY,IAAI;MACnB,OAAOA,YAAY,CAChB0I,MAAM,CAAC,CAACC,eAA8B,EAAEpQ,WAAW,KAAI;QACtD,MAAMqQ,UAAU,GAAGD,eAAe,CAACE,IAAI,CACpCC,mBAAmB,IAAKA,mBAAmB,CAAC9C,IAAI,KAAKzN,WAAW,CAACyN,IAAI,CACvE;QACD,IAAI4C,UAAU,EAAE;UACd,OAAOD,eAAe;QACxB;QACA,OAAO,CAAC,GAAGA,eAAe,EAAEpQ,WAAW,CAAC;MAC1C,CAAC,EAAE,EAAE,CAAC,CACLwC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAI;QACb,IAAI;UACF,OAAO8N,MAAM,CAAC/N,CAAC,CAACgL,IAAI,CAAC,GAAG+C,MAAM,CAAC9N,CAAC,CAAC+K,IAAI,CAAC;QACxC,CAAC,CAAC,OAAOtP,CAAC,EAAE;UACV,OAAO,CAAC;QACV;MACF,CAAC,CAAC;IACN,CAAC,CAAC,CACH;EACH;EAEA,OAAOmR,qBAAqBA,CAC1BnB,WAAmB,EACnBsC,gBAAwB,EACxBnI,6BAAwD;IAExD,OAAOA,6BAA6B,CAAC7I,IAAI,CACvCyG,mDAAG,CAAEuB,YAAY,IAAI;MACnB,OAAOA,YAAY,CAChBE,MAAM,CAAE3H,WAAW,IAAI;QACtB,OACEA,WAAW,CAACyN,IAAI,KAAKgD,gBAAgB,IACrCzQ,WAAW,CAACgB,cAAc,EAAEoN,WAAW,EAAE,CAACsC,UAAU,CAACvC,WAAW,CAACC,WAAW,EAAE,CAAC;MAEnF,CAAC,CAAC,CACD+B,MAAM,CAAC,CAACC,eAA8B,EAAEpQ,WAAW,KAAI;QACtD,MAAMqQ,UAAU,GAAGD,eAAe,CAACE,IAAI,CACpCC,mBAAmB,IAAKA,mBAAmB,CAACvP,cAAc,KAAKhB,WAAW,CAACgB,cAAc,CAC3F;QACD,IAAIqP,UAAU,EAAE;UACd,OAAOD,eAAe;QACxB;QACA,OAAO,CAAC,GAAGA,eAAe,EAAEpQ,WAAW,CAAC;MAC1C,CAAC,EAAE,EAAE,CAAC,CACLwC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAI;QACb,IAAI;UACF,OAAO8N,MAAM,CAAC/N,CAAC,CAACgL,IAAI,CAAC,GAAG+C,MAAM,CAAC9N,CAAC,CAAC+K,IAAI,CAAC;QACxC,CAAC,CAAC,OAAOtP,CAAC,EAAE;UACV,OAAO,CAAC;QACV;MACF,CAAC,CAAC;IACN,CAAC,CAAC,CACH;EACH;EAEA,OAAOoK,gBAAgBA,CACrB4F,WAAmB,EACnBsC,gBAAwB,EACxBE,mBAAuC,EACvCrI,6BAAwD;IAExD,OAAOA,6BAA6B,CAAC7I,IAAI,CACvCyG,mDAAG,CAAEuB,YAAY,IAAI;MACnB,OAAOA,YAAY,CAChBE,MAAM,CAAE3H,WAAW,IAAI;QACtB,MAAM4Q,qBAAqB,GAAGD,mBAAmB,GAC7C3Q,WAAW,CAACgB,cAAc,KAAK2P,mBAAmB,GAClD,CAAC3Q,WAAW,CAACgB,cAAc;QAE/B,OACEhB,WAAW,CAACyN,IAAI,KAAKgD,gBAAgB,IACrCG,qBAAqB,IACrB5Q,WAAW,CAACkB,SAAS,EAAEkN,WAAW,EAAE,CAACsC,UAAU,CAACvC,WAAW,CAACC,WAAW,EAAE,CAAC;MAE9E,CAAC,CAAC,CACD5L,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAI;QACb,IAAI;UACF,OAAO8N,MAAM,CAAC/N,CAAC,CAACgL,IAAI,CAAC,GAAG+C,MAAM,CAAC9N,CAAC,CAAC+K,IAAI,CAAC;QACxC,CAAC,CAAC,OAAOtP,CAAC,EAAE;UACV,OAAO,CAAC;QACV;MACF,CAAC,CAAC;IACN,CAAC,CAAC,CACH;EACH;EAEA,OAAO0S,iCAAiCA,CAACC,gBAA2C;IAClF,OAAOA,gBAAgB,CAACrR,IAAI,CAC1ByG,mDAAG,CAAEuB,YAAY,IAAI;MACnB,OAAOA,YAAY,CAChBE,MAAM,CAAE3H,WAAW,IAAKA,WAAW,CAACgB,cAAc,CAAC,CACnD2G,MAAM,CAAE3H,WAAW,IAAKA,WAAW,CAACkB,SAAS,KAAK2B,SAAS,CAAC;IACjE,CAAC,CAAC,CACH;EACH;EAEA,OAAO9C,oBAAoBA,CAACd,UAAkB,EAAEe,WAAyB;IACvE,MAAM2E,YAAY,GAAG,IAAI,CAACoM,+BAA+B,CAAC,cAAc,EAAE/Q,WAAW,CAAC;IACtF,IAAI2E,YAAY,EAAE8I,IAAI,EAAE;MACtB,OAAO;QACLQ,QAAQ,EAAEtJ,YAAY,CAAC8I,IAAI;QAC3BxO,UAAU,EAAEA;OACb;IACH;IACA,MAAM,IAAIY,KAAK,CAAC,kDAAkD,CAAC;EACrE;EAEA,OAAOU,eAAeA,CAACrB,KAAa,EAAEc,WAAyB;IAC7D,IAAId,KAAK,KAAKxC,gFAAa,CAAC4E,OAAO,IAAIpC,KAAK,KAAKxC,gFAAa,CAACe,YAAY,IAAIyB,KAAK,KAAKxC,gFAAa,CAACgB,MAAM,EAAE;MAC7G,OAAO,IAAI,CAACqT,+BAA+B,CAAC7R,KAAK,EAAEc,WAAW,CAAC;IACjE,CAAC,MAAM;MACL,OAAO,IAAI,CAACgR,uBAAuB,CAAC9R,KAAK,EAAEc,WAAW,CAAC;IACzD;EACF;EAEA,OAAO6M,qCAAqCA,CAC1CvE,6BAAwD,EACxDpJ,KAA0B;IAE1B,IAAI,CAACoJ,6BAA6B,EAAE;MAClC,OAAOzF,SAAS;IAClB;IACA,OAAOyF,6BAA6B,CAAC3G,IAAI,CACtCsP,IAAiB,IAChBA,IAAI,CAACxD,IAAI,KAAKvO,KAAK,CAAC2B,WAAW,IAC/BoQ,IAAI,CAACjQ,cAAc,KAAK9B,KAAK,CAAC6B,cAAc,IAC5CkQ,IAAI,CAAC/P,SAAS,KAAKhC,KAAK,CAAC+B,GAAG,EAAEC,SAAS,IACvC+P,IAAI,CAAC9P,KAAK,KAAKjC,KAAK,CAAC+B,GAAG,EAAEE,KAAK,CAClC;EACH;EAEQ,OAAO4P,+BAA+BA,CAAC7R,KAAa,EAAEc,WAAyB;IACrF,MAAMkR,UAAU,GAAGlR,WAAW,EAAEwB,gBAAgB,EAAEG,IAAI,CACnD3B,WAAW,IAAKA,WAAW,CAACmR,IAAI,CAAC/C,WAAW,EAAE,KAAKlP,KAAK,CAACkP,WAAW,EAAE,CACxE;IACD,OAAO8C,UAAU,GAAGA,UAAU,GAAG,IAAI;EACvC;EAEQ,OAAOF,uBAAuBA,CAAC9R,KAAa,EAAEc,WAAyB;IAC7E,QAAQd,KAAK;MACX,KAAK,aAAa;QAChB,OAAOc,WAAW,GAAGA,WAAW,GAAG,IAAI;MACzC,KAAK,gBAAgB;QACnB,IAAIA,WAAW,EAAEgB,cAAc,EAAE;UAC/B,OAAOhB,WAAW;QACpB;QACA;MACF,KAAK,KAAK;QACR,IAAIA,WAAW,EAAEkB,SAAS,EAAE;UAC1B,OAAOlB,WAAW;QACpB;QACA;IACJ;IACA,OAAO,IAAI;EACb;;;;;;;;;;;;;;;ACxLI,SAAUsG,2BAA2BA,CAACoG,OAAe;EACzD,OAAQ5J,OAAwB,IAA6B;IAC3D,MAAM5D,KAAK,GAAG4D,OAAO,CAAC5D,KAAK;IAE3B,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC7B,OAAOwN,OAAO,CAAC0E,IAAI,CAAClS,KAAK,CAAC,GAAG,IAAI,GAAG;QAAEwN,OAAO,EAAE;MAAI,CAAE;IACvD;IAEA,OAAO,IAAI;EACb,CAAC;AACH;;;;;;;;;;;;;;;;;;ACZ0D;AACU;AACf;AAErD,MAAMmF,WAAW,GAAGL,0DAAY;AAChC,SAASM,MAAMA,CAACC,MAAM,EAAE;EACpB,OAAO,CAAC,CAACA,MAAM,CAACF,WAAW,CAAC;AAChC;;AAEA;AACA;AACA;AACA;AACA,MAAMG,OAAO,GAAGC,MAAM,CAAC,WAAW,CAAC;AACnC;AACA;AACA;AACA,MAAMC,iBAAiB,GAAGD,MAAM,CAAC,oBAAoB,CAAC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,SAASA,CAACC,iBAAiB,EAAE;EAClC,IAAI,OAAOA,iBAAiB,KAAK,QAAQ,EAAE;IACvC,OAAOH,MAAM,CAAE,cAAaG,iBAAkB,EAAC,CAAC;EACpD,CAAC,MACI;IACD,OAAOJ,OAAO;EAClB;AACJ;AACA,SAASK,eAAeA,CAAClB,IAAI,EAAE;EAC3B;EACA;EACAA,IAAI,CAACmB,SAAS,CAACJ,iBAAiB,CAAC,GAAG,IAAI;AAC5C;AACA,SAASK,0BAA0BA,CAACC,QAAQ,EAAEC,MAAM,EAAE;EAClD,IAAI,CAACD,QAAQ,CAACC,MAAM,CAAC,EAAE;IACnBD,QAAQ,CAACC,MAAM,CAAC,GAAG,IAAIpB,yCAAO,CAAC,CAAC;EACpC;AACJ;AACA,SAASqB,4BAA4BA,CAACF,QAAQ,EAAEC,MAAM,EAAE;EACpD,IAAID,QAAQ,CAACC,MAAM,CAAC,EAAE;IAClBD,QAAQ,CAACC,MAAM,CAAC,CAAClG,IAAI,CAAC,CAAC;IACvBiG,QAAQ,CAACC,MAAM,CAAC,CAACE,QAAQ,CAAC,CAAC;IAC3B;IACA;IACAH,QAAQ,CAACC,MAAM,CAAC,GAAG,IAAI;EAC3B;AACJ;AAEA,SAASG,WAAWA,CAACC,QAAQ,EAAE;EAC3B,IAAIA,QAAQ,YAAYvB,8CAAY,EAAE;IAClCuB,QAAQ,CAACD,WAAW,CAAC,CAAC;EAC1B;AACJ;AACA,SAASE,gCAAgCA,CAACD,QAAQ,EAAE;EAChDE,KAAK,CAACC,OAAO,CAACH,QAAQ,CAAC,IAAIA,QAAQ,CAAC/Q,OAAO,CAAC8Q,WAAW,CAAC;AAC5D;AACA,SAASK,mBAAmBA,CAACC,WAAW,EAAEnM,OAAO,EAAE;EAC/C,OAAO,YAAY;IACf;IACAmM,WAAW,IAAIA,WAAW,CAACC,IAAI,CAAC,IAAI,CAAC;IACrC;IACA;IACAT,4BAA4B,CAAC,IAAI,EAAEP,SAAS,CAAC,CAAC,CAAC;IAC/C;IACA,IAAIpL,OAAO,CAACqM,SAAS,EAAE;MACnBN,gCAAgC,CAAC,IAAI,CAAC/L,OAAO,CAACqM,SAAS,CAAC,CAAC;IAC7D;IACA;IACA,IAAIrM,OAAO,CAACsM,eAAe,EAAE;MACzB,KAAK,MAAMR,QAAQ,IAAI,IAAI,EAAE;QACzB,IAAI9L,OAAO,CAACuM,SAAS,EAAEC,QAAQ,CAACV,QAAQ,CAAC,EAAE;UACvC;QACJ;QACAD,WAAW,CAAC,IAAI,CAACC,QAAQ,CAAC,CAAC;MAC/B;IACJ;EACJ,CAAC;AACL;AACA,SAASW,oCAAoCA,CAACrC,IAAI,EAAEpK,OAAO,EAAE;EACzDoK,IAAI,CAACmB,SAAS,CAACY,WAAW,GAAGD,mBAAmB,CAAC9B,IAAI,CAACmB,SAAS,CAACY,WAAW,EAAEnM,OAAO,CAAC;AACzF;AACA,SAAS0M,YAAYA,CAACtC,IAAI,EAAEpK,OAAO,EAAE;EACjC,MAAM2M,GAAG,GAAGvC,IAAI,CAACwC,KAAK;EACtBD,GAAG,CAACE,SAAS,GAAGX,mBAAmB,CAACS,GAAG,CAACE,SAAS,EAAE7M,OAAO,CAAC;AAC/D;AACA,SAASzK,YAAYA,CAACyK,OAAO,GAAG,CAAC,CAAC,EAAE;EAChC,OAAQoK,IAAI,IAAK;IACb,IAAIW,MAAM,CAACX,IAAI,CAAC,EAAE;MACdsC,YAAY,CAACtC,IAAI,EAAEpK,OAAO,CAAC;IAC/B,CAAC,MACI;MACDyM,oCAAoC,CAACrC,IAAI,EAAEpK,OAAO,CAAC;IACvD;IACAsL,eAAe,CAAClB,IAAI,CAAC;EACzB,CAAC;AACL;;AAEA;AACA;AACA;AACA,MAAM0C,OAAO,GAAG,CAAC;AACjB,MAAMC,iBAAiB,GAAG7B,MAAM,CAAC,mBAAmB,CAAC;AACrD,SAAS8B,+BAA+BA,CAACvB,QAAQ,EAAEwB,QAAQ,EAAE;EACzD;EACA;EACA;EACA;EACA,IAAIxB,QAAQ,CAACsB,iBAAiB,CAAC,IAAIG,mBAAmB,CAAC,CAAC,EAAE;IACtD;EACJ;EACAC,iBAAiB,CAAC,MAAM3C,0CAAI,CAAC4C,OAAO,CAACC,OAAO,CAAC,CAAC,CAAC,CAC1C3U,IAAI,CAACkS,wDAAQ,CAAC,MAAM;IACrB,IAAI0C,QAAQ;IACZ,IAAI;MACA;MACA;MACAA,QAAQ,GAAG5C,8DAAY,CAACe,QAAQ,CAAC;IACrC,CAAC,CACD,MAAM;MACF6B,QAAQ,GAAG,IAAI;IACnB;IACA,MAAMC,KAAK,GAAGD,QAAQ,EAAEC,KAAK;IAC7B,IAAIA,KAAK,IAAI,IAAI,EAAE;MACf,OAAO1O,uCAAK;IAChB;IACA,MAAM2O,QAAQ,GAAGD,KAAK,CAACT,OAAO,CAAC,KAAKS,KAAK,CAACT,OAAO,CAAC,GAAG,EAAE,CAAC;IACxD,MAAMW,uBAAuB,GAAG,IAAInD,yCAAO,CAAC,CAAC;IAC7C;IACAkD,QAAQ,CAAC9S,IAAI,CAAC,SAASgT,sBAAsBA,CAAA,EAAG;MAC5C;MACA;MACA;MACAP,iBAAiB,CAAC,MAAM;QACpBM,uBAAuB,CAACjI,IAAI,CAAC,CAAC;QAC9BiI,uBAAuB,CAAC7B,QAAQ,CAAC,CAAC;MACtC,CAAC,CAAC;IACN,CAAC,CAAC;IACF,OAAO6B,uBAAuB;EAClC,CAAC,CAAC;EACF;EACA;EACA;EACA;EACA7C,wDAAQ,CAAC,MAAMwC,OAAO,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC,CAC7B1U,SAAS,CAAC,MAAM;IACjB;IACA;IACA;IACA;IACA,MAAMgV,QAAQ,GAAGV,QAAQ,CAAC,UAAU,CAAC,IAAIA,QAAQ,CAAC,WAAW,CAAC,CAAC9F,MAAM,GAAG,CAAC;IACzE,IAAIwG,QAAQ,EAAE;MACVC,OAAO,CAACC,IAAI,CAACC,aAAa,CAACrC,QAAQ,CAAC,CAAC;IACzC;EACJ,CAAC,CAAC,CAAC;EACHA,QAAQ,CAACsB,iBAAiB,CAAC,GAAG,IAAI;AACtC;AACA,SAASG,mBAAmBA,CAAA,EAAG;EAC3B;EACA;EACA;IACA;IACA;IACC,OAAOa,SAAS,KAAK,WAAW,IAAI,CAAC,CAACA,SAAS;IAC5C;IACA;IACC,OAAOC,OAAO,KAAK,WAAW,IAAI,CAAC,CAACA,OAAQ;IAC7C;IACA;IACC,OAAOC,IAAI,KAAK,WAAW,IAAI,CAAC,CAACA,IAAK;IACvC;IACA;IACC,OAAOC,KAAK,KAAK,WAAW,IAAI,CAAC,CAACA,KAAM;IACzC;IACA;IACA;IACA;IACC,OAAOC,OAAO,KAAK,WAAW,IAC3BC,MAAM,CAAC7C,SAAS,CAAC8C,QAAQ,CAACjC,IAAI,CAAC+B,OAAO,CAAC,KAAK;EAAmB;AAC3E;AACA,SAAShB,iBAAiBA,CAAC5V,EAAE,EAAE;EAC3B;EACA;EACA;EACA;EACA;EACA,MAAM+W,IAAI,GAAG3D,qDAAO,CAAC2D,IAAI;EACzB,MAAMC,eAAe,GAAG,CAAC,CAACD,IAAI,IAAI,OAAOA,IAAI,CAACE,IAAI,EAAEC,GAAG,KAAK,UAAU;EACtE,OAAOF,eAAe,GAAGD,IAAI,CAACE,IAAI,CAACC,GAAG,CAAClX,EAAE,CAAC,GAAGA,EAAE,CAAC,CAAC;AACrD;AACA,SAASuW,aAAaA,CAACrC,QAAQ,EAAE;EAC7B,OAAQ;AACZ,QAAQA,QAAQ,CAACtV,WAAW,CAACuQ,IAAK;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AAEA,MAAMgI,WAAW,GAAG,OAAOC,SAAS,KAAK,WAAW,IAAIA,SAAS;AACjE,SAASC,kCAAkCA,CAACnD,QAAQ,EAAEJ,iBAAiB,EAAEK,MAAM,EAAE;EAC7E,MAAMmD,eAAe,GAAGpD,QAAQ,CAACJ,iBAAiB,CAAC;EACnD,IAAIqD,WAAW,IAAI,OAAOG,eAAe,KAAK,UAAU,EAAE;IACtD,MAAM,IAAI/V,KAAK,CAAE,GAAE2S,QAAQ,CAACtV,WAAW,CAACuQ,IAAK,kDAAiD2E,iBAAkB,EAAC,CAAC;EACtH;EACAG,0BAA0B,CAACC,QAAQ,EAAEC,MAAM,CAAC;EAC5CD,QAAQ,CAACJ,iBAAiB,CAAC,GAAG,YAAY;IACtC;IACAwD,eAAe,CAACC,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;IACtCpD,4BAA4B,CAAC,IAAI,EAAED,MAAM,CAAC;IAC1C;IACA;IACA;IACA;IACAD,QAAQ,CAACJ,iBAAiB,CAAC,GAAGwD,eAAe;EACjD,CAAC;AACL;AACA,SAASrZ,cAAcA,CAACiW,QAAQ,EAAEJ,iBAAiB,EAAE;EACjD,OAAQtJ,MAAM,IAAK;IACf,MAAM2J,MAAM,GAAGN,SAAS,CAACC,iBAAiB,CAAC;IAC3C;IACA;IACA,IAAI,OAAOA,iBAAiB,KAAK,QAAQ,EAAE;MACvCuD,kCAAkC,CAACnD,QAAQ,EAAEJ,iBAAiB,EAAEK,MAAM,CAAC;IAC3E,CAAC,MACI;MACDgD,WAAW,IAAIM,sBAAsB,CAACvD,QAAQ,CAAC;MAC/CD,0BAA0B,CAACC,QAAQ,EAAEC,MAAM,CAAC;IAChD;IACA,MAAMuB,QAAQ,GAAGxB,QAAQ,CAACC,MAAM,CAAC;IACjCgD,WAAW,IAAI1B,+BAA+B,CAACvB,QAAQ,EAAEwB,QAAQ,CAAC;IAClE,OAAOlL,MAAM,CAACrJ,IAAI,CAACmS,yDAAS,CAACoC,QAAQ,CAAC,CAAC;EAC3C,CAAC;AACL;AACA,SAAS+B,sBAAsBA,CAACvD,QAAQ,EAAE;EACtC,MAAMF,SAAS,GAAG6C,MAAM,CAACa,cAAc,CAACxD,QAAQ,CAAC;EACjD,MAAMyD,gBAAgB,GAAG,EAAE/D,iBAAiB,IAAII,SAAS,CAAC;EAC1D,IAAI2D,gBAAgB,EAAE;IAClB,MAAM,IAAIpW,KAAK,CAAC,8DAA8D,GAC1E,4EAA4E,CAAC;EACrF;AACJ;;AAEA;AACA;AACA","sources":["./libs/sales/address-form-field/feat-address-form-field/src/index.ts","./libs/sales/address-form-field/feat-address-form-field/src/lib/address-form-field.component.ts","./libs/sales/address-form-field/feat-address-form-field/src/lib/address-form-field.component.html","./libs/sales/address-form-field/feat-address-form-field/src/lib/components/base.component.ts","./libs/sales/address-form-field/feat-address-form-field/src/lib/components/box.component.ts","./libs/sales/address-form-field/feat-address-form-field/src/lib/components/box.component.html","./libs/sales/address-form-field/feat-address-form-field/src/lib/components/geographical-address.component.ts","./libs/sales/address-form-field/feat-address-form-field/src/lib/components/geographical-address.component.html","./libs/sales/address-form-field/feat-address-form-field/src/lib/components/house-number.component.ts","./libs/sales/address-form-field/feat-address-form-field/src/lib/components/house-number.component.html","./libs/sales/address-form-field/feat-address-form-field/src/lib/components/municipality.component.ts","./libs/sales/address-form-field/feat-address-form-field/src/lib/components/municipality.component.html","./libs/sales/address-form-field/feat-address-form-field/src/lib/components/street.component.ts","./libs/sales/address-form-field/feat-address-form-field/src/lib/components/street.component.html","./libs/sales/address-form-field/feat-address-form-field/src/lib/components/sub-house-number.component.ts","./libs/sales/address-form-field/feat-address-form-field/src/lib/components/sub-house-number.component.html","./libs/sales/address-form-field/feat-address-form-field/src/lib/utils/address.util.ts","./libs/sales/address-form-field/feat-address-form-field/src/lib/validators/conditional.validator.ts","./node_modules/@ngneat/until-destroy/fesm2022/ngneat-until-destroy.mjs"],"sourcesContent":["export * from './lib/address-form-field.component';\n","import { Component, forwardRef, Input } from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormBuilder,\n  FormControl,\n  FormControlState,\n  FormGroup,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ReactiveFormsModule,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport { AsyncPipe, CommonModule, NgFor } from '@angular/common';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { MunicipalityComponent } from './components/municipality.component';\nimport { StreetComponent } from './components/street.component';\nimport { HouseNumberComponent } from './components/house-number.component';\nimport { SubHouseNumberComponent } from './components/sub-house-number.component';\nimport { BoxComponent } from './components/box.component';\nimport {\n  AddressFieldValue,\n  fieldConstant,\n  fieldDependencies,\n  fieldDependency,\n  GeographicalAddress,\n  StreetValue,\n} from '@sales/address-form-field/data-access';\nimport { ErrorEvent, EventFacade } from '@sales/events/data-access';\nimport { AddressUtil } from './utils/address.util';\n\nimport { GeographicalAddressComponent } from './components/geographical-address.component';\nimport { InitialAddress } from '@sales/delivery/data-access';\nimport { AddressTypeIdConstants, AddressUnit, Municipality } from '@sales/shared/address/data-access';\n\n@Component({\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatInputModule,\n    MatAutocompleteModule,\n    ReactiveFormsModule,\n    NgFor,\n    AsyncPipe,\n    TranslateModule,\n    MunicipalityComponent,\n    StreetComponent,\n    HouseNumberComponent,\n    SubHouseNumberComponent,\n    BoxComponent,\n    GeographicalAddressComponent,\n  ],\n  selector: 'tg-sales-address-form-field',\n  templateUrl: './address-form-field.component.html',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => AddressFormFieldComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => AddressFormFieldComponent),\n      multi: true,\n    },\n  ],\n})\n@UntilDestroy()\nexport class AddressFormFieldComponent implements ControlValueAccessor, Validator {\n  @Input() isSubmitted = false;\n  @Input() manualAddressIsAllowed = true;\n\n  initialAddress: InitialAddress | undefined;\n  addressForm: FormGroup = new FormGroup({});\n  configuredAddress: AddressFieldValue = {};\n\n  onChange: ((value: AddressFieldValue) => void) | undefined;\n  onTouch: (() => void) | undefined;\n\n  protected readonly FormControl = FormControl;\n\n  constructor(\n    private readonly formBuilder: FormBuilder,\n    private readonly eventFacade: EventFacade\n  ) {\n    this.addressForm = new FormGroup({\n      [fieldConstant.MUNICIPALITY]: new FormControl(''),\n      [fieldConstant.STREET]: new FormControl(''),\n      [fieldConstant.GEOGRAPHICAL_ADDRESS]: new FormControl(''),\n    });\n  }\n\n  writeValue(address: InitialAddress): void {\n    try {\n      this.initialAddress = address;\n      this.initForm();\n\n      const field = this.findLastNonEmptyField();\n      if (field) {\n        this.resetFields(field);\n      }\n    } catch (e: unknown) {\n      this.eventFacade.triggerEvent(ErrorEvent(e));\n    }\n  }\n\n  registerOnChange(fn: (value: AddressFieldValue) => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouch = fn;\n  }\n\n  validate(): ValidationErrors | null {\n    if (this.addressForm && this.addressForm.valid) {\n      return null;\n    }\n    this.isSubmitted = true;\n    return { invalidForm: { valid: false } };\n  }\n\n  /**\n   * Finds the first field that has changed between the current and previous address field values.\n   * @param previousValues The previous address field values.\n   * @param currentValues The current address field values.\n   * @returns The key of the first changed field, or null if no fields have changed.\n   */\n  findChangedField(previousValues: AddressFieldValue, currentValues: AddressFieldValue): string | null {\n    for (const key in currentValues) {\n      if (currentValues[key]?.postalCode && currentValues[key]?.postalCode !== previousValues[key]?.postalCode) {\n        return key;\n      }\n      if (currentValues[key]?.value !== previousValues[key]?.value) {\n        return key;\n      }\n    }\n    return null;\n  }\n\n  private initForm() {\n    this.addressForm = this.formBuilder.group({});\n    this.createMunicipalityFormControl([Validators.required]);\n    this.createStreetFormControl();\n    this.createGeographicalAddressFormControl();\n\n    this.addressForm.valueChanges.pipe(untilDestroyed(this)).subscribe((value: AddressFieldValue) => {\n      const changedField = this.findChangedField(this.configuredAddress, value);\n      this.configuredAddress = value;\n      if (changedField) {\n        this.resetFields(changedField);\n      }\n      if (this.onChange && this.onTouch) {\n        this.onChange(value);\n        this.onTouch();\n      }\n    });\n  }\n\n  private createMunicipalityFormControl(validators: ValidatorFn[]) {\n    if (!this.initialAddress || !this.initialAddress?.postalCode) {\n      throw new Error('No postal code exists');\n    }\n    const municipalityValue = AddressUtil.getMunicipalityValue(\n      this.initialAddress.postalCode,\n      this.initialAddress.addressUnit\n    );\n    const formControlState: FormControlState<Municipality | null> = {\n      value: municipalityValue,\n      disabled: !municipalityValue,\n    };\n    this.addressForm.addControl(fieldConstant.MUNICIPALITY, new FormControl(formControlState, validators));\n    this.configuredAddress[fieldConstant.MUNICIPALITY] = municipalityValue;\n  }\n\n  private createStreetFormControl() {\n    let streetAddressUnit: AddressUnit | null | undefined = this.initialAddress?.addressUnit;\n    if (!(this.initialAddress?.addressUnit.addressUnitTypeId === AddressTypeIdConstants.STREETS)) {\n      streetAddressUnit = AddressUtil.getAddressValue(fieldConstant.STREET, this.initialAddress?.addressUnit);\n    }\n\n    if (streetAddressUnit && this.initialAddress?.addressUnit) {\n      const addressUnitValue: AddressUnit = this.setStreetAddressUnits(\n        { ...streetAddressUnit },\n        { ...this.initialAddress?.addressUnit }\n      );\n\n      const streetValue = {\n        value: this.initialAddress.street,\n        addressUnit: addressUnitValue,\n      };\n\n      if (addressUnitValue) {\n        const formControlState: FormControlState<StreetValue | null> = {\n          value: streetValue,\n          disabled: false,\n        };\n\n        this.addressForm.addControl(fieldConstant.STREET, new FormControl(formControlState, [Validators.required]));\n        this.configuredAddress[fieldConstant.STREET] = streetValue;\n      }\n    }\n  }\n\n  private createGeographicalAddressFormControl() {\n    const geographicalAddressValue: GeographicalAddress = {\n      housenumber: this.initialAddress?.houseNumber,\n      subhousenumber: this.initialAddress?.subHouseNumber,\n      box: {\n        boxNumber: this.initialAddress?.box,\n        floor: this.initialAddress?.floor,\n      },\n      isManualAddress: true,\n    };\n\n    if (this.initialAddress?.addressUnit.addressUnitTypeId === AddressTypeIdConstants.GEOGRAPHICAL_ADDRESS) {\n      geographicalAddressValue.isManualAddress = false;\n      geographicalAddressValue.addressUnit = this.initialAddress?.addressUnit;\n    }\n    const formControlState: FormControlState<GeographicalAddress | null> = {\n      value: geographicalAddressValue,\n      disabled: !geographicalAddressValue,\n    };\n    this.addressForm.addControl(\n      fieldConstant.GEOGRAPHICAL_ADDRESS,\n      new FormControl(formControlState, [Validators.required])\n    );\n    this.configuredAddress[fieldConstant.GEOGRAPHICAL_ADDRESS] = geographicalAddressValue;\n  }\n\n  private setStreetAddressUnits(streetAddressUnit: AddressUnit, addressUnitValue: AddressUnit) {\n    const countryAddressUnit = AddressUtil.getAddressValue(fieldConstant.COUNTRY, addressUnitValue);\n    const municipalityAddressUnit = AddressUtil.getAddressValue(fieldConstant.MUNICIPALITY, addressUnitValue);\n\n    streetAddressUnit.addressUnitChain = [];\n\n    if (countryAddressUnit && municipalityAddressUnit) {\n      streetAddressUnit.addressUnitChain.push(countryAddressUnit, municipalityAddressUnit);\n    }\n    return streetAddressUnit;\n  }\n\n  private resetFields(changedField: string) {\n    const fieldDependency = fieldDependencies.find((dependency) => changedField === dependency.key);\n    if (fieldDependency) {\n      fieldDependency.clear.forEach((fieldName) => this.clearField(fieldName));\n      fieldDependency.enableAndReset.forEach((fieldName) => this.resetField(fieldName));\n      fieldDependency.disableAndReset.forEach((fieldName) => this.resetField(fieldName, true));\n    }\n  }\n\n  private clearField(fieldName: string) {\n    if (this.configuredAddress) {\n      delete this.configuredAddress[fieldName];\n    }\n  }\n\n  private resetField(fieldName: string, disabled: boolean = false) {\n    return this.addressForm.get(fieldName)?.reset(\n      {\n        value: null,\n        disabled: disabled,\n      },\n      { emitEvent: false }\n    );\n  }\n\n  /**\n   * Finds the last non-empty field in the address form based on field dependencies.\n   * Fields are considered non-empty if their value is not null.\n   * @returns The key of the last non-empty field, or undefined if all fields are empty.\n   */\n  private findLastNonEmptyField(): string | undefined {\n    const orderedDependencies: fieldDependency[] = fieldDependencies.sort(\n      (a: fieldDependency, b: fieldDependency) => a.weight - b.weight\n    );\n    let previousFieldName = undefined;\n    for (const dependency of orderedDependencies) {\n      const control = this.addressForm.controls[dependency.key];\n\n      if (control.value === null) {\n        return previousFieldName;\n      }\n      previousFieldName = dependency.key;\n    }\n\n    return undefined;\n  }\n}\n","<form [formGroup]=\"addressForm\" action=\"\" autocomplete=\"off\" novalidate>\n  <div class=\"row\">\n    <div class=\"col-sm-12 form-group\">\n      <tg-sales-address-municipality formControlName=\"municipality\"></tg-sales-address-municipality>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-sm-12 form-group\">\n      <tg-sales-address-street\n        formControlName=\"street\"\n        [isSubmitted]=\"isSubmitted\"\n        [postalCode]=\"configuredAddress.municipality?.postalCode\"></tg-sales-address-street>\n    </div>\n  </div>\n  <tg-sales-address-geographical-address\n    formControlName=\"geographical_address\"\n    [isSubmitted]=\"isSubmitted\"\n    [streetAddressUnit]=\"configuredAddress.street?.addressUnit\">\n  </tg-sales-address-geographical-address>\n</form>\n","import { Observable } from 'rxjs';\nimport { SimpleChange } from '@angular/core';\nimport { AbstractControl, FormControl, ValidationErrors } from '@angular/forms';\n\nexport abstract class BaseComponent<T> {\n  control = new FormControl();\n  disabledState = true;\n\n  abstract _filterOptions(value: string): Observable<T[]>;\n\n  validate(control: AbstractControl): ValidationErrors | null {\n    return control.valid ? null : { required: true };\n  }\n\n  _setDisabledStateOnChange(change: SimpleChange): void {\n    if (change) {\n      this._setDisabledState(change.currentValue === null);\n    }\n  }\n\n  _setDisabledState(disabledState: boolean): void {\n    this.disabledState = disabledState;\n    if (disabledState) {\n      this.control.disable();\n    } else {\n      this.control.enable();\n    }\n  }\n}\n","import { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR, ReactiveFormsModule, Validator } from '@angular/forms';\nimport { AfterViewInit, Component, forwardRef, Input, OnInit, ViewChild } from '@angular/core';\nimport { BaseComponent } from './base.component';\nimport { AsyncPipe, CommonModule, NgFor } from '@angular/common';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatAutocompleteModule, MatAutocompleteTrigger } from '@angular/material/autocomplete';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { EMPTY, iif, Observable, of, Subscription } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, map, startWith, switchMap } from 'rxjs/operators';\nimport { BoxFloor, boxPattern } from '@sales/address-form-field/data-access';\nimport { MatOptionSelectionChange } from '@angular/material/core';\nimport { AddressUtil } from '../utils/address.util';\nimport { conditionalPatternValidator } from '../validators/conditional.validator';\nimport { AddressUnit } from '@sales/shared/address/data-access';\n\n@Component({\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatInputModule,\n    MatAutocompleteModule,\n    ReactiveFormsModule,\n    NgFor,\n    AsyncPipe,\n    TranslateModule,\n  ],\n  selector: 'tg-sales-address-box',\n  templateUrl: './box.component.html',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => BoxComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => BoxComponent),\n      multi: true,\n    },\n  ],\n})\n@UntilDestroy()\nexport class BoxComponent\n  extends BaseComponent<AddressUnit>\n  implements ControlValueAccessor, Validator, OnInit, AfterViewInit\n{\n  @Input() resetTrigger!: Observable<void>;\n  @Input() isSubmitted = false;\n  @Input() selectedHouseNumberValue: string | undefined = undefined;\n  @Input() selectedSubHouseNumberValue: string | undefined = undefined;\n  @Input() houseNumberAddressUnitOptions: Observable<AddressUnit[]> | undefined;\n\n  @ViewChild('input', { read: MatAutocompleteTrigger }) autoCompleteTrigger: MatAutocompleteTrigger | undefined;\n\n  resetSubscription!: Subscription;\n\n  options: string[] = [];\n  filteredOptions!: Observable<BoxFloor[]>;\n\n  onChange: ((value: BoxFloor | undefined) => void) | undefined;\n  onTouch: (() => void) | undefined;\n\n  constructor() {\n    super();\n    this.control.addValidators([conditionalPatternValidator(boxPattern)]);\n  }\n\n  ngOnInit(): void {\n    this.setupFilter();\n    this.listenForReset();\n    this.control.statusChanges.pipe(untilDestroyed(this)).subscribe((status) => {\n      this.isSubmitted = status === 'INVALID';\n    });\n  }\n\n  setupFilter(): void {\n    this.filteredOptions = this.control.valueChanges.pipe(\n      startWith(''),\n      debounceTime(200),\n      distinctUntilChanged(),\n      switchMap((val) => iif(() => val, this._filterOptions(val || ''), EMPTY)),\n      map((addressUnits: AddressUnit[]) =>\n        addressUnits.map(\n          (addressUnit: AddressUnit): BoxFloor => ({\n            boxNumber: addressUnit.boxNumber,\n            floor: addressUnit.floor,\n          })\n        )\n      ),\n      map((boxFloors: BoxFloor[]) =>\n        boxFloors.filter((boxFloor: BoxFloor) => boxFloor !== undefined && boxFloor.boxNumber !== undefined)\n      ),\n      untilDestroyed(this)\n    );\n  }\n\n  registerOnChange(fn: (value: BoxFloor | undefined) => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouch = fn;\n  }\n\n  writeValue(value: BoxFloor | null): void {\n    if (value?.floor || value?.boxNumber || value === null) {\n      this.control.setValue(value, { emitEvent: false });\n    }\n  }\n\n  display(boxFloor: BoxFloor | undefined): string {\n    const displayString = boxFloor?.boxNumber ? boxFloor.boxNumber : '';\n    if (boxFloor?.floor) {\n      displayString.concat(` (${boxFloor.floor})`);\n    }\n    return displayString;\n  }\n\n  ngAfterViewInit(): void {\n    this.autoCompleteTrigger?.panelClosingActions\n      .pipe(untilDestroyed(this))\n      .subscribe((event: MatOptionSelectionChange | null) => {\n        this.handleAutoCompleteSelection(event);\n      });\n  }\n\n  _filterOptions(value: string | BoxFloor): Observable<AddressUnit[]> {\n    if (\n      typeof value === 'string' &&\n      this.selectedHouseNumberValue &&\n      this.control.value &&\n      this.houseNumberAddressUnitOptions\n    ) {\n      return AddressUtil.filterBoxNumbers(\n        value,\n        this.selectedHouseNumberValue,\n        this.selectedSubHouseNumberValue,\n        this.houseNumberAddressUnitOptions\n      );\n    }\n    return of([]);\n  }\n\n  setDisabledState(isDisabled: boolean) {\n    this._setDisabledState(isDisabled);\n  }\n\n  /**\n   * Subscribes to the resetTrigger observable to listen for reset events, which are\n   * emitted when the street value changes in the parent component. Upon receiving a\n   * reset signal, this method clears the list of house numbers by setting `filteredOptions`\n   * to an observable that emits an empty array. This ensures that the list of house numbers\n   * is reset and no longer displays previous results that were relevant to the old street value.\n   */\n  private listenForReset() {\n    this.resetSubscription = this.resetTrigger.pipe(untilDestroyed(this)).subscribe(() => {\n      this.filteredOptions = of([]);\n      this.setupFilter();\n    });\n  }\n\n  private handleAutoCompleteSelection(event: MatOptionSelectionChange | null): void {\n    if (event && event.isUserInput) {\n      this.handleUserInputSelection(event.source.value);\n    } else if (!event && this.autoCompleteTrigger && this.autoCompleteTrigger.activeOption) {\n      this.handleActiveOptionSelection(this.autoCompleteTrigger.activeOption.value);\n    } else {\n      this.handleNoSelection();\n    }\n  }\n\n  private handleUserInputSelection(value: BoxFloor): void {\n    if (value && this.onChange) {\n      this.control.setValue(value);\n      this.onChange(value);\n    }\n  }\n\n  private handleActiveOptionSelection(value: BoxFloor): void {\n    this.handleUserInputSelection(value);\n  }\n\n  private handleNoSelection(): void {\n    if (this.onChange) {\n      if (this.control.value !== '') {\n        this.onChange({\n          boxNumber: this.control.value,\n        });\n      } else {\n        this.onChange(undefined);\n      }\n    }\n  }\n}\n","<div class=\"font--caption cur-default my--xxxs\">{{ 'ng.address.lbl.box-number' | translate }}</div>\n<div [ngClass]=\"{ 'disabled-state': disabledState }\">\n  <input\n    #input\n    [attr.data-cy]=\"'feat-delivery-address-form-box'\"\n    [matAutocomplete]=\"optionList\"\n    autocomplete=\"one-time-code\"\n    class=\"form__input\"\n    [formControl]=\"control\"\n    [placeholder]=\"'ng.address.form-box-number-placeholder-label' | translate\"\n    type=\"text\" />\n  <mat-autocomplete #optionList=\"matAutocomplete\" [displayWith]=\"display\">\n    <mat-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option\">\n      {{ option.boxNumber }} ({{ option.floor }})\n    </mat-option>\n  </mat-autocomplete>\n  <div *ngIf=\"isSubmitted && control.hasError('pattern')\" class=\"formErrorInput text-align--left\">\n    <div>{{ 'ng.address.boxNumber-pattern.error' | translate }}</div>\n  </div>\n</div>\n","import { ChangeDetectorRef, Component, forwardRef, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ReactiveFormsModule,\n  ValidationErrors,\n  Validator,\n  Validators,\n} from '@angular/forms';\nimport { AsyncPipe, CommonModule, NgFor } from '@angular/common';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport {\n  AddressFormFieldFacade,\n  boxPattern,\n  fieldConstant,\n  GeographicalAddress,\n  geographicalAddressFieldDependencies,\n} from '@sales/address-form-field/data-access';\nimport { HouseNumberComponent } from './house-number.component';\nimport { SubHouseNumberComponent } from './sub-house-number.component';\nimport { BoxComponent } from './box.component';\nimport { ErrorEvent, EventFacade } from '@sales/events/data-access';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { AddressUtil } from '../utils/address.util';\nimport { tap } from 'rxjs/operators';\nimport { conditionalPatternValidator } from '../validators/conditional.validator';\nimport { AddressUnit } from '@sales/shared/address/data-access';\n\n@Component({\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatInputModule,\n    MatAutocompleteModule,\n    ReactiveFormsModule,\n    NgFor,\n    AsyncPipe,\n    TranslateModule,\n    HouseNumberComponent,\n    SubHouseNumberComponent,\n    BoxComponent,\n  ],\n  selector: 'tg-sales-address-geographical-address',\n  templateUrl: './geographical-address.component.html',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => GeographicalAddressComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => GeographicalAddressComponent),\n      multi: true,\n    },\n  ],\n})\n@UntilDestroy()\nexport class GeographicalAddressComponent implements ControlValueAccessor, Validator, OnChanges {\n  @Input() isSubmitted = false;\n  @Input() streetAddressUnit: AddressUnit | undefined;\n\n  resetFilteredOptionsTrigger = new BehaviorSubject<void>(undefined);\n\n  houseNumberAddressUnitOptions$: Observable<AddressUnit[]> | undefined;\n  houseNumberAddressUnitOptions: AddressUnit[] | undefined;\n\n  selectedHousenumberValue: string | undefined = undefined;\n  selectedSubHousenumberValue: string | undefined = undefined;\n\n  geographicalAddressForm: FormGroup = new FormGroup({});\n\n  onChange: ((value: GeographicalAddress) => void) | undefined;\n  onTouch: (() => void) | undefined;\n\n  constructor(\n    private readonly cdr: ChangeDetectorRef,\n    private readonly formBuilder: FormBuilder,\n    private readonly eventFacade: EventFacade,\n    private readonly addressFormFieldFacade: AddressFormFieldFacade\n  ) {\n    this.geographicalAddressForm = new FormGroup({\n      [fieldConstant.HOUSE_NUMBER]: new FormControl(''),\n      [fieldConstant.SUB_HOUSE_NUMBER]: new FormControl(''),\n      [fieldConstant.BOX]: new FormControl(''),\n    });\n  }\n\n  writeValue(value: GeographicalAddress | null): void {\n    try {\n      this.initForm(value);\n      if (value?.housenumber) {\n        this.updateAddressUnitOptions(value.housenumber, value.subhousenumber);\n      }\n    } catch (e: unknown) {\n      this.eventFacade.triggerEvent(ErrorEvent(e));\n    }\n  }\n\n  registerOnChange(fn: (value: GeographicalAddress) => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouch = fn;\n  }\n\n  validate(): ValidationErrors | null {\n    if (this.geographicalAddressForm && this.geographicalAddressForm.valid) {\n      return null;\n    }\n    this.isSubmitted = true;\n    return { invalidForm: { valid: false } };\n  }\n\n  setDisabledState(isDisabled: boolean) {\n    if (isDisabled) {\n      this.geographicalAddressForm.get(fieldConstant.HOUSE_NUMBER)?.reset(null, { emitEvent: false });\n      this.geographicalAddressForm.get(fieldConstant.HOUSE_NUMBER)?.disable({ emitEvent: false });\n\n      this.geographicalAddressForm.get(fieldConstant.SUB_HOUSE_NUMBER)?.reset(null, { emitEvent: false });\n      this.geographicalAddressForm.get(fieldConstant.SUB_HOUSE_NUMBER)?.disable({ emitEvent: false });\n\n      this.geographicalAddressForm.get(fieldConstant.BOX)?.reset(null, { emitEvent: false });\n      this.geographicalAddressForm.get(fieldConstant.BOX)?.disable({ emitEvent: false });\n    } else {\n      const housenumberControl = this.geographicalAddressForm.get(fieldConstant.HOUSE_NUMBER);\n      if (housenumberControl && housenumberControl.valid) {\n        this.geographicalAddressForm.get(fieldConstant.SUB_HOUSE_NUMBER)?.enable({ emitEvent: false });\n        this.geographicalAddressForm.get(fieldConstant.BOX)?.enable({ emitEvent: false });\n      }\n      this.geographicalAddressForm.get(fieldConstant.HOUSE_NUMBER)?.enable({ emitEvent: false });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['streetAddressUnit']) {\n      const currentValue: AddressUnit | undefined = changes['streetAddressUnit'].currentValue;\n      const previousValue: AddressUnit | undefined = changes['streetAddressUnit'].previousValue;\n\n      this.handleStreetAddressUnitChange(currentValue, previousValue);\n    }\n  }\n\n  updateAddressUnitOptions(housenumber: string, subHousenumber: string | undefined = undefined) {\n    if (housenumber && this.streetAddressUnit) {\n      this.houseNumberAddressUnitOptions$ = AddressUtil.getGeographicalAddressAddressUnits(\n        housenumber,\n        this.streetAddressUnit.id,\n        this.addressFormFieldFacade\n      ).pipe(\n        tap((addressUnits: AddressUnit[]) => {\n          return (this.houseNumberAddressUnitOptions = addressUnits);\n        })\n      );\n\n      this.selectedHousenumberValue = housenumber;\n      if (subHousenumber) {\n        this.selectedSubHousenumberValue = subHousenumber;\n      }\n      this.cdr.detectChanges();\n    }\n  }\n\n  private triggerReset() {\n    this.resetFilteredOptionsTrigger.next();\n  }\n\n  private handleStreetAddressUnitChange(\n    currentValue: AddressUnit | undefined,\n    previousValue: AddressUnit | undefined\n  ): void {\n    if (previousValue && !currentValue) {\n      this.setDisabledState(true);\n    } else if (currentValue !== previousValue) {\n      this.triggerReset();\n      this.resetFields(fieldConstant.STREET);\n    }\n  }\n\n  private initForm(value: GeographicalAddress | null) {\n    this.geographicalAddressForm = this.formBuilder.group({});\n    const isHousenumberDisabled = !this.streetAddressUnit;\n\n    this.geographicalAddressForm.addControl(\n      fieldConstant.HOUSE_NUMBER,\n      new FormControl(\n        {\n          value: value?.housenumber,\n          disabled: isHousenumberDisabled,\n        },\n        [Validators.required, Validators.maxLength(6), Validators.pattern('\\\\d*')]\n      )\n    );\n\n    const isSubHouseNumberAndBoxDisabled = !value?.housenumber;\n\n    this.geographicalAddressForm.addControl(\n      fieldConstant.SUB_HOUSE_NUMBER,\n      new FormControl(\n        {\n          value: value?.subhousenumber,\n          disabled: isSubHouseNumberAndBoxDisabled,\n        },\n        [Validators.pattern('[A-Za-z0-9]{0,6}')]\n      )\n    );\n    this.geographicalAddressForm.addControl(\n      fieldConstant.BOX,\n      new FormControl(\n        {\n          value: value?.box,\n          disabled: isSubHouseNumberAndBoxDisabled,\n        },\n        [conditionalPatternValidator(boxPattern)]\n      )\n    );\n\n    this.geographicalAddressForm\n      .get(fieldConstant.HOUSE_NUMBER)\n      ?.valueChanges.pipe(untilDestroyed(this))\n      .subscribe(() => {\n        this.resetFields(fieldConstant.HOUSE_NUMBER);\n      });\n\n    // Whenever a value changes we want to find out if we have an address unit or a manual address\n    this.geographicalAddressForm.valueChanges.pipe(untilDestroyed(this)).subscribe((value: GeographicalAddress) => {\n      this.selectedHousenumberValue = value.housenumber;\n      this.selectedSubHousenumberValue = value.subhousenumber;\n\n      // Set the address unit and manual address\n      const matchingAddressUnit = AddressUtil.findAddressBasedOnGeographicalAddress(\n        this.houseNumberAddressUnitOptions,\n        value\n      );\n      if (matchingAddressUnit) {\n        value.isManualAddress = false;\n        value.addressUnit = matchingAddressUnit;\n      } else {\n        value.isManualAddress = true;\n      }\n\n      if (this.onChange) {\n        this.onChange(value);\n      }\n    });\n  }\n\n  private resetFields(changedField: string) {\n    const fieldDependency = geographicalAddressFieldDependencies.find((dependency) => changedField === dependency.key);\n    if (fieldDependency) {\n      fieldDependency.enableAndReset.forEach((fieldName) => this.resetField(fieldName));\n      fieldDependency.disableAndReset.forEach((fieldName) => this.resetField(fieldName, true));\n    }\n  }\n\n  private resetField(fieldName: string, disabled: boolean = false) {\n    return this.geographicalAddressForm.get(fieldName)?.reset(\n      {\n        value: null,\n        disabled: disabled,\n      },\n      { emitEvent: false }\n    );\n  }\n}\n","<div class=\"row\" [formGroup]=\"geographicalAddressForm\">\n  <div class=\"col-sm-5 form-group\">\n    <tg-sales-address-house-number\n      formControlName=\"housenumber\"\n      [resetTrigger]=\"resetFilteredOptionsTrigger.asObservable()\"\n      (housenumberInputChanged)=\"updateAddressUnitOptions($event)\"\n      [houseNumberAddressUnitOptions]=\"houseNumberAddressUnitOptions$\"\n      [isSubmitted]=\"isSubmitted\"></tg-sales-address-house-number>\n  </div>\n  <div class=\"col-sm-4 form-group\">\n    <tg-sales-address-sub-house-number\n      formControlName=\"subhousenumber\"\n      [resetTrigger]=\"resetFilteredOptionsTrigger.asObservable()\"\n      [houseNumberAddressUnitOptions]=\"houseNumberAddressUnitOptions$\"\n      [selectedHouseNumberValue]=\"selectedHousenumberValue\"\n      [isSubmitted]=\"isSubmitted\"></tg-sales-address-sub-house-number>\n  </div>\n  <div class=\"col-sm-3 form-group\">\n    <tg-sales-address-box\n      formControlName=\"box\"\n      [resetTrigger]=\"resetFilteredOptionsTrigger.asObservable()\"\n      [houseNumberAddressUnitOptions]=\"houseNumberAddressUnitOptions$\"\n      [selectedHouseNumberValue]=\"selectedHousenumberValue\"\n      [selectedSubHouseNumberValue]=\"selectedSubHousenumberValue\"\n      [isSubmitted]=\"isSubmitted\"></tg-sales-address-box>\n  </div>\n</div>\n","import { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport {\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ReactiveFormsModule,\n  Validator,\n  Validators,\n} from '@angular/forms';\nimport { AfterViewInit, Component, EventEmitter, forwardRef, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport { BaseComponent } from './base.component';\nimport { AsyncPipe, CommonModule, NgFor } from '@angular/common';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatAutocompleteModule, MatAutocompleteTrigger } from '@angular/material/autocomplete';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { EMPTY, iif, Observable, of, Subscription } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, map, startWith, switchMap } from 'rxjs/operators';\nimport { MatOptionSelectionChange } from '@angular/material/core';\nimport { AddressUtil } from '../utils/address.util';\nimport { AddressUnit } from '@sales/shared/address/data-access';\n\n@Component({\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatInputModule,\n    MatAutocompleteModule,\n    ReactiveFormsModule,\n    NgFor,\n    AsyncPipe,\n    TranslateModule,\n  ],\n  selector: 'tg-sales-address-house-number',\n  templateUrl: './house-number.component.html',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => HouseNumberComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => HouseNumberComponent),\n      multi: true,\n    },\n  ],\n})\n@UntilDestroy()\nexport class HouseNumberComponent\n  extends BaseComponent<AddressUnit>\n  implements ControlValueAccessor, Validator, OnInit, AfterViewInit\n{\n  @Input() resetTrigger!: Observable<void>;\n  @Input() isSubmitted = false;\n  @Input() houseNumberAddressUnitOptions: Observable<AddressUnit[]> | undefined;\n  @Output() housenumberInputChanged = new EventEmitter<string>();\n\n  @ViewChild('input', { read: MatAutocompleteTrigger }) autoCompleteTrigger: MatAutocompleteTrigger | undefined;\n\n  resetSubscription!: Subscription;\n\n  filteredOptions!: Observable<string[]>;\n  onChange: ((value: string | undefined) => void) | undefined;\n  onTouch: (() => void) | undefined;\n\n  constructor() {\n    super();\n    this.control.addValidators([Validators.required, Validators.maxLength(6), Validators.pattern('\\\\d*')]);\n  }\n\n  ngOnInit(): void {\n    this.setupFilter();\n    this.listenForReset();\n    this.control.valueChanges.pipe(untilDestroyed(this)).subscribe((value) => {\n      this.housenumberInputChanged.emit(value);\n    });\n    this.control.statusChanges.pipe(untilDestroyed(this)).subscribe((status) => {\n      this.isSubmitted = status === 'INVALID';\n    });\n  }\n\n  setupFilter(): void {\n    this.filteredOptions = this.control.valueChanges.pipe(\n      startWith(''),\n      debounceTime(200),\n      distinctUntilChanged(),\n      switchMap((val) => iif(() => val, this._filterOptions(), EMPTY)),\n      map((addressUnits: AddressUnit[]) => addressUnits.map((addressUnit: AddressUnit) => addressUnit.name)),\n      untilDestroyed(this)\n    );\n  }\n\n  registerOnChange(fn: (value: string | undefined) => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouch = fn;\n  }\n\n  writeValue(value: string | null): void {\n    this.control.setValue(value, { emitEvent: false });\n  }\n\n  display(addressUnit: AddressUnit | undefined): string {\n    return addressUnit && addressUnit.name ? addressUnit.name : '';\n  }\n\n  ngAfterViewInit(): void {\n    this.autoCompleteTrigger?.panelClosingActions\n      .pipe(untilDestroyed(this))\n      .subscribe((event: MatOptionSelectionChange | null) => {\n        this.handleAutoCompleteSelection(event);\n      });\n  }\n\n  _filterOptions(): Observable<AddressUnit[]> {\n    if (this.control.value && this.houseNumberAddressUnitOptions) {\n      return AddressUtil.filterHouseNumbers(this.houseNumberAddressUnitOptions);\n    }\n    return of([]);\n  }\n\n  setDisabledState(isDisabled: boolean) {\n    this._setDisabledState(isDisabled);\n  }\n\n  /**\n   * Subscribes to the resetTrigger observable to listen for reset events, which are\n   * emitted when the street value changes in the parent component. Upon receiving a\n   * reset signal, this method clears the list of house numbers by setting `filteredOptions`\n   * to an observable that emits an empty array. This ensures that the list of house numbers\n   * is reset and no longer displays previous results that were relevant to the old street value.\n   */\n  private listenForReset() {\n    this.resetSubscription = this.resetTrigger.pipe(untilDestroyed(this)).subscribe(() => {\n      this.filteredOptions = of([]);\n      this.setupFilter();\n    });\n  }\n\n  private handleAutoCompleteSelection(event: MatOptionSelectionChange | null): void {\n    if (event && event.isUserInput) {\n      this.handleUserInputSelection(event.source.value);\n    } else {\n      this.handleNoSelection();\n    }\n  }\n\n  private handleUserInputSelection(value: string): void {\n    if (value && this.onChange) {\n      this.control.setValue(value);\n      this.onChange(value);\n    }\n  }\n\n  private handleNoSelection(): void {\n    if (this.onChange) {\n      if (this.control.value !== '') {\n        this.onChange(this.control.value);\n      } else {\n        this.onChange(undefined);\n      }\n    }\n  }\n}\n","<div class=\"font--caption cur-default my--xxxs\">{{ 'ng.address.lbl.house-number' | translate }}</div>\n<div [ngClass]=\"{ 'disabled-state': disabledState }\">\n  <input\n    #input\n    [attr.data-cy]=\"'feat-delivery-address-form-house-number'\"\n    [matAutocomplete]=\"optionList\"\n    autocomplete=\"one-time-code\"\n    class=\"form__input\"\n    [formControl]=\"control\"\n    [placeholder]=\"'ng.address.form-house-number-placeholder-label' | translate\"\n    type=\"text\" />\n  <mat-autocomplete #optionList=\"matAutocomplete\">\n    <mat-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option\">\n      {{ option }}\n    </mat-option>\n  </mat-autocomplete>\n  <div\n    *ngIf=\"(isSubmitted && control.hasError('required')) || (control.touched && control.hasError('required'))\"\n    class=\"formErrorInput text-align--left\">\n    {{ 'ng.address.error.houseNumber.required' | translate }}\n  </div>\n  <div\n    *ngIf=\"isSubmitted && (control.hasError('pattern') || control.hasError('maxlength'))\"\n    class=\"formErrorInput text-align--left\">\n    <div>{{ 'ng.address.error.houseNumber.invalid' | translate }}</div>\n  </div>\n</div>\n","import { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport {\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ReactiveFormsModule,\n  Validator,\n  Validators,\n} from '@angular/forms';\nimport { AfterViewInit, Component, forwardRef, Input, OnInit, ViewChild } from '@angular/core';\nimport { BaseComponent } from './base.component';\nimport { AsyncPipe, CommonModule, NgFor } from '@angular/common';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatAutocompleteModule, MatAutocompleteTrigger } from '@angular/material/autocomplete';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { EMPTY, iif, Observable, of } from 'rxjs';\nimport { AddressUtil } from '../utils/address.util';\nimport { debounceTime, distinctUntilChanged, startWith, switchMap } from 'rxjs/operators';\nimport { MatOptionSelectionChange } from '@angular/material/core';\nimport { AddressFormFieldFacade } from '@sales/address-form-field/data-access';\nimport { Municipality } from '@sales/shared/address/data-access';\n\n@Component({\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatInputModule,\n    MatAutocompleteModule,\n    ReactiveFormsModule,\n    NgFor,\n    AsyncPipe,\n    TranslateModule,\n  ],\n  selector: 'tg-sales-address-municipality',\n  templateUrl: './municipality.component.html',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MunicipalityComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => MunicipalityComponent),\n      multi: true,\n    },\n  ],\n})\n@UntilDestroy()\nexport class MunicipalityComponent\n  extends BaseComponent<Municipality>\n  implements ControlValueAccessor, Validator, OnInit, AfterViewInit\n{\n  @Input() isSubmitted = false;\n\n  @ViewChild('input', { read: MatAutocompleteTrigger }) autoCompleteTrigger: MatAutocompleteTrigger | undefined;\n\n  options: string[] = [];\n  filteredOptions!: Observable<Municipality[]>;\n\n  onChange: ((value: Municipality) => void) | undefined;\n  onTouch: (() => void) | undefined;\n\n  constructor(private readonly addressFormFieldFacade: AddressFormFieldFacade) {\n    super();\n    this.control.addValidators(Validators.required);\n  }\n\n  ngOnInit(): void {\n    this.setupFilter();\n  }\n\n  setupFilter(): void {\n    this.filteredOptions = this.control.valueChanges.pipe(\n      startWith(''),\n      debounceTime(200),\n      distinctUntilChanged(),\n      switchMap((val) => iif(() => val && val.length > 1, this._filterOptions(val || ''), EMPTY)),\n      untilDestroyed(this)\n    );\n  }\n\n  registerOnChange(fn: (value: Municipality) => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouch = fn;\n  }\n\n  writeValue(location: Municipality | null): void {\n    this.control.setValue(location);\n  }\n\n  display(municipality: Municipality | undefined): string {\n    return municipality ? `${municipality.postalCode} - ${municipality.location}` : '';\n  }\n\n  ngAfterViewInit(): void {\n    this.autoCompleteTrigger?.panelClosingActions\n      .pipe(untilDestroyed(this))\n      .subscribe((event: MatOptionSelectionChange | null) => {\n        this.handleAutoCompleteSelection(event);\n      });\n  }\n\n  _filterOptions(value: string | Municipality): Observable<Municipality[]> {\n    if (typeof value === 'string') {\n      const filterValue = value.toLowerCase();\n      return AddressUtil.getFilteredMunicipalities(filterValue, this.addressFormFieldFacade);\n    }\n    return of([]);\n  }\n\n  setDisabledState(isDisabled: boolean) {\n    this.disabledState = isDisabled;\n  }\n\n  private handleAutoCompleteSelection(event: MatOptionSelectionChange | null): void {\n    if (event && event.isUserInput) {\n      this.handleUserInputSelection(event.source.value);\n    } else if (!event && this.autoCompleteTrigger && this.autoCompleteTrigger.activeOption) {\n      this.handleActiveOptionSelection(this.autoCompleteTrigger.activeOption.value);\n    }\n  }\n\n  private handleUserInputSelection(value: Municipality): void {\n    if (value && this.onChange) {\n      this.control.setValue(value);\n      this.onChange(value);\n    }\n  }\n\n  private handleActiveOptionSelection(value: Municipality): void {\n    this.handleUserInputSelection(value);\n  }\n}\n","<div class=\"font--caption cur-default my--xxxs\">{{ 'ng.address.lbl.zip-code' | translate }}</div>\n<input\n  #input\n  [attr.data-cy]=\"'feat-delivery-address-form-municipality'\"\n  [matAutocomplete]=\"optionList\"\n  autocomplete=\"one-time-code\"\n  class=\"form__input\"\n  [formControl]=\"control\"\n  [placeholder]=\"'ng.address.form-municipality-placeholder-label' | translate\"\n  type=\"text\" />\n<mat-autocomplete #optionList=\"matAutocomplete\" [displayWith]=\"display\" autoActiveFirstOption=\"true\">\n  <mat-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option\">\n    {{ option.postalCode }} - {{ option.location }}\n  </mat-option>\n</mat-autocomplete>\n<div\n  *ngIf=\"(isSubmitted && control.hasError('required')) || (control.touched && control.hasError('required'))\"\n  class=\"formErrorInput text-align--left\">\n  {{ 'ng.address.error.zipCode.required' | translate }}\n</div>\n","import { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport {\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ReactiveFormsModule,\n  Validator,\n  Validators,\n} from '@angular/forms';\nimport {\n  AfterViewInit,\n  Component,\n  forwardRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { BaseComponent } from './base.component';\nimport { AsyncPipe, CommonModule, NgFor } from '@angular/common';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatAutocompleteModule, MatAutocompleteTrigger } from '@angular/material/autocomplete';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { EMPTY, iif, Observable, of } from 'rxjs';\nimport { AddressUtil } from '../utils/address.util';\nimport { debounceTime, distinctUntilChanged, startWith, switchMap } from 'rxjs/operators';\nimport { AddressFormFieldFacade, FieldValue, StreetValue } from '@sales/address-form-field/data-access';\nimport { MatOptionSelectionChange } from '@angular/material/core';\nimport { AddressUnit } from '@sales/shared/address/data-access';\n\n@Component({\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatInputModule,\n    MatAutocompleteModule,\n    ReactiveFormsModule,\n    NgFor,\n    AsyncPipe,\n    TranslateModule,\n  ],\n  selector: 'tg-sales-address-street',\n  templateUrl: './street.component.html',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => StreetComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => StreetComponent),\n      multi: true,\n    },\n  ],\n})\n@UntilDestroy()\nexport class StreetComponent\n  extends BaseComponent<AddressUnit>\n  implements ControlValueAccessor, Validator, OnInit, AfterViewInit, OnChanges\n{\n  @Input() postalCode: string | undefined = undefined;\n  @Input() isSubmitted = false;\n\n  @ViewChild('input', { read: MatAutocompleteTrigger }) autoCompleteTrigger: MatAutocompleteTrigger | undefined;\n\n  options: string[] = [];\n  filteredOptions!: Observable<AddressUnit[]>;\n\n  onChange: ((value: FieldValue | undefined) => void) | undefined;\n  onTouch: (() => void) | undefined;\n\n  constructor(private readonly addressFormFieldFacade: AddressFormFieldFacade) {\n    super();\n    this.control.addValidators(Validators.required);\n  }\n\n  ngOnInit(): void {\n    this.setupFilter();\n  }\n\n  setupFilter(): void {\n    this.filteredOptions = this.control.valueChanges.pipe(\n      startWith(''),\n      debounceTime(200),\n      distinctUntilChanged(),\n      switchMap((val) => iif(() => val && val.length > 2, this._filterOptions(val || ''), EMPTY)),\n      untilDestroyed(this)\n    );\n  }\n\n  registerOnChange(fn: (value: FieldValue | undefined) => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouch = fn;\n  }\n\n  writeValue(value: StreetValue | null): void {\n    this.control.setValue(value?.addressUnit);\n  }\n\n  display(addressUnit: AddressUnit | undefined): string {\n    return addressUnit && addressUnit.nameDU ? addressUnit.nameDU : '';\n  }\n\n  ngAfterViewInit(): void {\n    this.autoCompleteTrigger?.panelClosingActions\n      .pipe(untilDestroyed(this))\n      .subscribe((event: MatOptionSelectionChange | null) => {\n        this.handleAutoCompleteSelection(event);\n      });\n  }\n\n  _filterOptions(value: string | AddressUnit): Observable<AddressUnit[]> {\n    if (typeof value === 'string' && this.postalCode) {\n      return AddressUtil.getFilteredStreets(value, this.postalCode, this.addressFormFieldFacade);\n    }\n    return of([]);\n  }\n\n  setDisabledState(isDisabled: boolean) {\n    this._setDisabledState(isDisabled);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['postalCode']) {\n      const currentValue: AddressUnit | undefined = changes['postalCode'].currentValue;\n      const previousValue: AddressUnit | undefined = changes['postalCode'].previousValue;\n\n      this.handleMunicipalityAddressUnitChange(currentValue, previousValue);\n    }\n  }\n\n  private handleMunicipalityAddressUnitChange(\n    currentValue: AddressUnit | undefined,\n    previousValue: AddressUnit | undefined\n  ): void {\n    if (currentValue !== previousValue) {\n      this.filteredOptions = of([]);\n      this.setupFilter();\n    }\n  }\n\n  private handleAutoCompleteSelection(event: MatOptionSelectionChange | null): void {\n    if (event && event.source.selected) {\n      if (event.isUserInput || (this.autoCompleteTrigger && this.autoCompleteTrigger.activeOption)) {\n        this.handleUserInputSelection(event.source.value, 'nameDU');\n      } else {\n        this.handleNoSelection();\n      }\n    }\n  }\n\n  private handleUserInputSelection(value: AddressUnit, subProperty: string): void {\n    if (value && this.onChange) {\n      this.control.setValue(value);\n      const subPropertyValue = value[subProperty] ? value[subProperty] : '';\n      this.onChange({\n        value: subPropertyValue,\n        addressUnit: value,\n      });\n    }\n  }\n\n  private handleNoSelection(): void {\n    if (this.onChange) {\n      this.onChange({\n        value: this.control.value,\n      });\n    }\n  }\n}\n","<div class=\"font--caption cur-default my--xxxs\">{{ 'ng.address.lbl.street' | translate }}</div>\n<div [ngClass]=\"{ 'disabled-state': disabledState }\">\n  <input\n    #input\n    [attr.data-cy]=\"'feat-delivery-address-form-street'\"\n    [matAutocomplete]=\"optionList\"\n    autocomplete=\"one-time-code\"\n    class=\"form__input\"\n    [formControl]=\"control\"\n    [placeholder]=\"'ng.address.form-street-placeholder-label' | translate\"\n    type=\"text\" />\n  <mat-autocomplete #optionList=\"matAutocomplete\" [displayWith]=\"display\">\n    <mat-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option\">\n      {{ option.nameDU }}\n    </mat-option>\n  </mat-autocomplete>\n  <div\n    *ngIf=\"(isSubmitted && control.hasError('required')) || (control.touched && control.hasError('required'))\"\n    class=\"formErrorInput text-align--left\">\n    {{ 'ng.address.error.street.required' | translate }}\n  </div>\n</div>\n","import { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport {\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ReactiveFormsModule,\n  Validator,\n  Validators,\n} from '@angular/forms';\nimport { AfterViewInit, Component, forwardRef, Input, OnInit, ViewChild } from '@angular/core';\nimport { BaseComponent } from './base.component';\nimport { AsyncPipe, CommonModule, NgFor } from '@angular/common';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatAutocompleteModule, MatAutocompleteTrigger } from '@angular/material/autocomplete';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { EMPTY, iif, Observable, of, Subscription } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, map, startWith, switchMap } from 'rxjs/operators';\nimport { MatOptionSelectionChange } from '@angular/material/core';\nimport { AddressUtil } from '../utils/address.util';\nimport { AddressUnit } from '@sales/shared/address/data-access';\n\n@Component({\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatInputModule,\n    MatAutocompleteModule,\n    ReactiveFormsModule,\n    NgFor,\n    AsyncPipe,\n    TranslateModule,\n  ],\n  selector: 'tg-sales-address-sub-house-number',\n  templateUrl: './sub-house-number.component.html',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => SubHouseNumberComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => SubHouseNumberComponent),\n      multi: true,\n    },\n  ],\n})\n@UntilDestroy()\nexport class SubHouseNumberComponent\n  extends BaseComponent<AddressUnit>\n  implements ControlValueAccessor, Validator, OnInit, AfterViewInit\n{\n  @Input() resetTrigger!: Observable<void>;\n  @Input() isSubmitted = false;\n  @Input() selectedHouseNumberValue: string | undefined = undefined;\n  @Input() houseNumberAddressUnitOptions: Observable<AddressUnit[]> | undefined;\n  resetSubscription!: Subscription;\n\n  @ViewChild('input', { read: MatAutocompleteTrigger }) autoCompleteTrigger: MatAutocompleteTrigger | undefined;\n\n  filteredOptions!: Observable<string[]>;\n\n  onChange: ((value: string | undefined) => void) | undefined;\n  onTouch: (() => void) | undefined;\n\n  constructor() {\n    super();\n    this.control.addValidators([Validators.pattern('[A-Za-z0-9]{0,6}')]);\n  }\n\n  ngOnInit(): void {\n    this.setupFilter();\n    this.listenForReset();\n    this.control.statusChanges.pipe(untilDestroyed(this)).subscribe((status) => {\n      this.isSubmitted = status === 'INVALID';\n    });\n  }\n\n  setupFilter(): void {\n    this.filteredOptions = this.control.valueChanges.pipe(\n      startWith(''),\n      debounceTime(200),\n      distinctUntilChanged(),\n      switchMap((val) => iif(() => val, this._filterOptions(val || ''), EMPTY)),\n      map((addressUnits: AddressUnit[]) => addressUnits.map((addressUnit: AddressUnit) => addressUnit.subHouseNumber)),\n      map((subHouseNumbers: (string | undefined)[]) =>\n        subHouseNumbers.filter((subHouseNumber): subHouseNumber is string => subHouseNumber !== undefined)\n      ),\n      untilDestroyed(this)\n    );\n  }\n\n  registerOnChange(fn: (value: string | undefined) => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouch = fn;\n  }\n\n  writeValue(value: string | null): void {\n    this.control.setValue(value, { emitEvent: false });\n  }\n\n  ngAfterViewInit(): void {\n    this.autoCompleteTrigger?.panelClosingActions\n      .pipe(untilDestroyed(this))\n      .subscribe((event: MatOptionSelectionChange | null) => {\n        this.handleAutoCompleteSelection(event);\n      });\n  }\n\n  _filterOptions(value: string): Observable<AddressUnit[]> {\n    if (this.selectedHouseNumberValue && this.control.value && this.houseNumberAddressUnitOptions) {\n      return AddressUtil.filterSubHouseNumbers(\n        value,\n        this.selectedHouseNumberValue,\n        this.houseNumberAddressUnitOptions\n      );\n    }\n    return of([]);\n  }\n\n  setDisabledState(isDisabled: boolean) {\n    this._setDisabledState(isDisabled);\n  }\n\n  /**\n   * Subscribes to the resetTrigger observable to listen for reset events, which are\n   * emitted when the street value changes in the parent component. Upon receiving a\n   * reset signal, this method clears the list of house numbers by setting `filteredOptions`\n   * to an observable that emits an empty array. This ensures that the list of house numbers\n   * is reset and no longer displays previous results that were relevant to the old street value.\n   */\n  private listenForReset() {\n    this.resetSubscription = this.resetTrigger.pipe(untilDestroyed(this)).subscribe(() => {\n      this.filteredOptions = of([]);\n      this.setupFilter();\n    });\n  }\n\n  private handleAutoCompleteSelection(event: MatOptionSelectionChange | null): void {\n    if (event && event.isUserInput) {\n      this.handleUserInputSelection(event.source.value);\n    } else if (!event && this.autoCompleteTrigger && this.autoCompleteTrigger.activeOption) {\n      this.handleActiveOptionSelection(this.autoCompleteTrigger.activeOption.value);\n    } else {\n      this.handleNoSelection();\n    }\n  }\n\n  private handleUserInputSelection(value: string): void {\n    if (value && this.onChange) {\n      this.control.setValue(value);\n      this.onChange(value);\n    }\n  }\n\n  private handleActiveOptionSelection(value: string): void {\n    this.handleUserInputSelection(value);\n  }\n\n  private handleNoSelection(): void {\n    if (this.onChange) {\n      if (this.control.value !== '') {\n        this.onChange(this.control.value);\n      } else {\n        this.onChange(undefined);\n      }\n    }\n  }\n}\n","<div class=\"font--caption cur-default my--xxxs\">{{ 'ng.address.lbl.sub-house' | translate }}</div>\n<div [ngClass]=\"{ 'disabled-state': disabledState }\">\n  <input\n    #input\n    [attr.data-cy]=\"'feat-delivery-address-form-sub-house-number'\"\n    [matAutocomplete]=\"optionList\"\n    autocomplete=\"one-time-code\"\n    class=\"form__input\"\n    [formControl]=\"control\"\n    [placeholder]=\"'ng.address.form-sub-house-placeholder-label' | translate\"\n    type=\"text\" />\n  <mat-autocomplete #optionList=\"matAutocomplete\">\n    <mat-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option\">\n      {{ option }}\n    </mat-option>\n  </mat-autocomplete>\n  <div *ngIf=\"isSubmitted && control.hasError('pattern')\" class=\"formErrorInput text-align--left\">\n    <div>{{ 'ng.address.subHouse-pattern.error' | translate }}</div>\n  </div>\n</div>\n","import { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { AddressFormFieldFacade, fieldConstant, GeographicalAddress } from '@sales/address-form-field/data-access';\nimport { AddressUnit, Municipality } from '@sales/shared/address/data-access';\n\nexport class AddressUtil {\n  static getFilteredMunicipalities(filterValue: string, addressFormFieldFacade: AddressFormFieldFacade) {\n    return addressFormFieldFacade.getMunicipalities().pipe(\n      map((response: Municipality[]) => {\n        return response.filter((municipality) => {\n          const municipalityString = `${municipality.postalCode.toLowerCase()} - ${municipality.location.toLowerCase()}`;\n          return municipalityString.indexOf(filterValue.toLowerCase()) === 0;\n        });\n      })\n    );\n  }\n\n  static getFilteredStreets(value: string, postalCodeQuery: string, addressFormFieldFacade: AddressFormFieldFacade) {\n    return addressFormFieldFacade.getStreets(value, postalCodeQuery).pipe();\n  }\n\n  static getGeographicalAddressAddressUnits(\n    filterValue: string,\n    streetAddressUnitId: string,\n    addressFormFieldFacade: AddressFormFieldFacade\n  ): Observable<AddressUnit[]> {\n    return addressFormFieldFacade.getGeographicalAddresses(filterValue, streetAddressUnitId);\n  }\n\n  static filterHouseNumbers(houseNumberAddressUnitOptions: Observable<AddressUnit[]>) {\n    return houseNumberAddressUnitOptions.pipe(\n      map((addressUnits) => {\n        return addressUnits\n          .reduce((addressUnitList: AddressUnit[], addressUnit) => {\n            const itemExists = addressUnitList.some(\n              (existingAddressUnit) => existingAddressUnit.name === addressUnit.name\n            );\n            if (itemExists) {\n              return addressUnitList;\n            }\n            return [...addressUnitList, addressUnit];\n          }, [])\n          .sort((a, b) => {\n            try {\n              return Number(a.name) - Number(b.name);\n            } catch (e) {\n              return 0;\n            }\n          });\n      })\n    );\n  }\n\n  static filterSubHouseNumbers(\n    filterValue: string,\n    houseNumberValue: string,\n    houseNumberAddressUnitOptions: Observable<AddressUnit[]>\n  ) {\n    return houseNumberAddressUnitOptions.pipe(\n      map((addressUnits) => {\n        return addressUnits\n          .filter((addressUnit) => {\n            return (\n              addressUnit.name === houseNumberValue &&\n              addressUnit.subHouseNumber?.toLowerCase().startsWith(filterValue.toLowerCase())\n            );\n          })\n          .reduce((addressUnitList: AddressUnit[], addressUnit) => {\n            const itemExists = addressUnitList.some(\n              (existingAddressUnit) => existingAddressUnit.subHouseNumber === addressUnit.subHouseNumber\n            );\n            if (itemExists) {\n              return addressUnitList;\n            }\n            return [...addressUnitList, addressUnit];\n          }, [])\n          .sort((a, b) => {\n            try {\n              return Number(a.name) - Number(b.name);\n            } catch (e) {\n              return 0;\n            }\n          });\n      })\n    );\n  }\n\n  static filterBoxNumbers(\n    filterValue: string,\n    houseNumberValue: string,\n    subHouseNumberValue: string | undefined,\n    houseNumberAddressUnitOptions: Observable<AddressUnit[]>\n  ) {\n    return houseNumberAddressUnitOptions.pipe(\n      map((addressUnits) => {\n        return addressUnits\n          .filter((addressUnit) => {\n            const subHouseNumberMatches = subHouseNumberValue\n              ? addressUnit.subHouseNumber === subHouseNumberValue\n              : !addressUnit.subHouseNumber;\n\n            return (\n              addressUnit.name === houseNumberValue &&\n              subHouseNumberMatches &&\n              addressUnit.boxNumber?.toLowerCase().startsWith(filterValue.toLowerCase())\n            );\n          })\n          .sort((a, b) => {\n            try {\n              return Number(a.name) - Number(b.name);\n            } catch (e) {\n              return 0;\n            }\n          });\n      })\n    );\n  }\n\n  static getFilteredSubHouseNumberOptions$(subHouseNumbers$: Observable<AddressUnit[]>) {\n    return subHouseNumbers$.pipe(\n      map((addressUnits) => {\n        return addressUnits\n          .filter((addressUnit) => addressUnit.subHouseNumber)\n          .filter((addressUnit) => addressUnit.boxNumber === undefined);\n      })\n    );\n  }\n\n  static getMunicipalityValue(postalCode: string, addressUnit?: AddressUnit): Municipality | null {\n    const municipality = this.getAddressValueFromAddressChain('Municipality', addressUnit);\n    if (municipality?.name) {\n      return {\n        location: municipality.name,\n        postalCode: postalCode,\n      };\n    }\n    throw new Error('AddressFormField could not retrieve municipality');\n  }\n\n  static getAddressValue(value: string, addressUnit?: AddressUnit): AddressUnit | null {\n    if (value === fieldConstant.COUNTRY || value === fieldConstant.MUNICIPALITY || value === fieldConstant.STREET) {\n      return this.getAddressValueFromAddressChain(value, addressUnit);\n    } else {\n      return this.getTopLevelAddressValue(value, addressUnit);\n    }\n  }\n\n  static findAddressBasedOnGeographicalAddress(\n    houseNumberAddressUnitOptions: AddressUnit[] | undefined,\n    value: GeographicalAddress\n  ): AddressUnit | undefined {\n    if (!houseNumberAddressUnitOptions) {\n      return undefined;\n    }\n    return houseNumberAddressUnitOptions.find(\n      (unit: AddressUnit) =>\n        unit.name === value.housenumber &&\n        unit.subHouseNumber === value.subhousenumber &&\n        unit.boxNumber === value.box?.boxNumber &&\n        unit.floor === value.box?.floor\n    );\n  }\n\n  private static getAddressValueFromAddressChain(value: string, addressUnit?: AddressUnit): AddressUnit | null {\n    const foundValue = addressUnit?.addressUnitChain?.find(\n      (addressUnit) => addressUnit.type.toLowerCase() === value.toLowerCase()\n    );\n    return foundValue ? foundValue : null;\n  }\n\n  private static getTopLevelAddressValue(value: string, addressUnit?: AddressUnit): AddressUnit | null {\n    switch (value) {\n      case 'housenumber':\n        return addressUnit ? addressUnit : null;\n      case 'subhousenumber':\n        if (addressUnit?.subHouseNumber) {\n          return addressUnit;\n        }\n        break;\n      case 'box':\n        if (addressUnit?.boxNumber) {\n          return addressUnit;\n        }\n        break;\n    }\n    return null;\n  }\n}\n","import { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms';\n\nexport function conditionalPatternValidator(pattern: RegExp): ValidatorFn {\n  return (control: AbstractControl): ValidationErrors | null => {\n    const value = control.value;\n\n    if (typeof value === 'string') {\n      return pattern.test(value) ? null : { pattern: true };\n    }\n\n    return null;\n  };\n}\n","import { Subject, Subscription, from, EMPTY } from 'rxjs';\nimport { ɵNG_PIPE_DEF, ɵgetLContext, ɵglobal } from '@angular/core';\nimport { mergeMap, takeUntil } from 'rxjs/operators';\n\nconst NG_PIPE_DEF = ɵNG_PIPE_DEF;\nfunction isPipe(target) {\n    return !!target[NG_PIPE_DEF];\n}\n\n/**\n * Applied to instances and stores `Subject` instance when\n * no custom destroy method is provided.\n */\nconst DESTROY = Symbol('__destroy');\n/**\n * Applied to definitions and informs that class is decorated\n */\nconst DECORATOR_APPLIED = Symbol('__decoratorApplied');\n/**\n * If we use the `untilDestroyed` operator multiple times inside the single\n * instance providing different `destroyMethodName`, then all streams will\n * subscribe to the single subject. If any method is invoked, the subject will\n * emit and all streams will be unsubscribed. We wan't to prevent this behavior,\n * thus we store subjects under different symbols.\n */\nfunction getSymbol(destroyMethodName) {\n    if (typeof destroyMethodName === 'string') {\n        return Symbol(`__destroy__${destroyMethodName}`);\n    }\n    else {\n        return DESTROY;\n    }\n}\nfunction markAsDecorated(type) {\n    // Store this property on the prototype if it's an injectable class, component or directive.\n    // We will be able to handle class extension this way.\n    type.prototype[DECORATOR_APPLIED] = true;\n}\nfunction createSubjectOnTheInstance(instance, symbol) {\n    if (!instance[symbol]) {\n        instance[symbol] = new Subject();\n    }\n}\nfunction completeSubjectOnTheInstance(instance, symbol) {\n    if (instance[symbol]) {\n        instance[symbol].next();\n        instance[symbol].complete();\n        // We also have to re-assign this property thus in the future\n        // we will be able to create new subject on the same instance.\n        instance[symbol] = null;\n    }\n}\n\nfunction unsubscribe(property) {\n    if (property instanceof Subscription) {\n        property.unsubscribe();\n    }\n}\nfunction unsubscribeIfPropertyIsArrayLike(property) {\n    Array.isArray(property) && property.forEach(unsubscribe);\n}\nfunction decorateNgOnDestroy(ngOnDestroy, options) {\n    return function () {\n        // Invoke the original `ngOnDestroy` if it exists\n        ngOnDestroy && ngOnDestroy.call(this);\n        // It's important to use `this` instead of caching instance\n        // that may lead to memory leaks\n        completeSubjectOnTheInstance(this, getSymbol());\n        // Check if subscriptions are pushed to some array\n        if (options.arrayName) {\n            unsubscribeIfPropertyIsArrayLike(this[options.arrayName]);\n        }\n        // Loop through the properties and find subscriptions\n        if (options.checkProperties) {\n            for (const property in this) {\n                if (options.blackList?.includes(property)) {\n                    continue;\n                }\n                unsubscribe(this[property]);\n            }\n        }\n    };\n}\nfunction decorateProviderDirectiveOrComponent(type, options) {\n    type.prototype.ngOnDestroy = decorateNgOnDestroy(type.prototype.ngOnDestroy, options);\n}\nfunction decoratePipe(type, options) {\n    const def = type.ɵpipe;\n    def.onDestroy = decorateNgOnDestroy(def.onDestroy, options);\n}\nfunction UntilDestroy(options = {}) {\n    return (type) => {\n        if (isPipe(type)) {\n            decoratePipe(type, options);\n        }\n        else {\n            decorateProviderDirectiveOrComponent(type, options);\n        }\n        markAsDecorated(type);\n    };\n}\n\n// `LView` is an array where each index matches the specific data structure.\n// The 7th element in an `LView` is an array of cleanup listeners. They are\n// invoked when the view is removed (similar to `ComponentRef.onDestroy`).\nconst CLEANUP = 7;\nconst CheckerHasBeenSet = Symbol('CheckerHasBeenSet');\nfunction setupSubjectUnsubscribedChecker(instance, destroy$) {\n    // This function is used within the `untilDestroyed` operator and setups a function that\n    // listens for the view removal and checks if the `destroy$` subject has any observers (usually `takeUntil`).\n    // Note: this code will not be shipped into production since it's guarded with `ngDevMode`,\n    // this means it'll exist only in development mode.\n    if (instance[CheckerHasBeenSet] || isAngularInTestMode()) {\n        return;\n    }\n    runOutsideAngular(() => from(Promise.resolve())\n        .pipe(mergeMap(() => {\n        let lContext;\n        try {\n            // The `ɵgetLContext` might not work for a pipe, because it's not a component nor a directive,\n            // which means there's no `RNode` for an instance.\n            lContext = ɵgetLContext(instance);\n        }\n        catch {\n            lContext = null;\n        }\n        const lView = lContext?.lView;\n        if (lView == null) {\n            return EMPTY;\n        }\n        const lCleanup = lView[CLEANUP] || (lView[CLEANUP] = []);\n        const cleanupHasBeenExecuted$ = new Subject();\n        // Note: this function is named for debugging purposes.\n        lCleanup.push(function untilDestroyedLCleanup() {\n            // We leave the Angular zone, so RxJS will also call subsequent `next` functions\n            // outside of the Angular zone, which is done to avoid scheduling a microtask (through\n            // `asapScheduler`) within the Angular zone.\n            runOutsideAngular(() => {\n                cleanupHasBeenExecuted$.next();\n                cleanupHasBeenExecuted$.complete();\n            });\n        });\n        return cleanupHasBeenExecuted$;\n    }), \n    // We can't use `observeOn(asapScheduler)` because this might break the app's change detection.\n    // RxJS schedulers coalesce tasks and then flush the queue, which means our task might be scheduled\n    // within the root zone, and then all of the tasks (that were set up by developers in the Angular zone)\n    // will also be flushed in the root zone.\n    mergeMap(() => Promise.resolve()))\n        .subscribe(() => {\n        // Note: The `observed` property is available only in RxJS@7.2.0, which will throw\n        // an error in lower versions. We have integration test with RxJS@6 to ensure we don't\n        // import operators from `rxjs`; that's why it's wrapped into braces. The `observers`\n        // property is also being deprecated.\n        const observed = destroy$['observed'] ?? destroy$['observers'].length > 0;\n        if (observed) {\n            console.warn(createMessage(instance));\n        }\n    }));\n    instance[CheckerHasBeenSet] = true;\n}\nfunction isAngularInTestMode() {\n    // Gets whether the code is currently running in a test environment.\n    // We don't use `declare const` because it might cause conflicts with the real typings.\n    return (\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    (typeof __karma__ !== 'undefined' && !!__karma__) ||\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        (typeof jasmine !== 'undefined' && !!jasmine) ||\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        (typeof jest !== 'undefined' && !!jest) ||\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        (typeof Mocha !== 'undefined' && !!Mocha) ||\n        // Jest is not defined in ESM mode since it must be access only by importing from `@jest/globals`.\n        // There's no way to check if we're in Jest ESM mode or not, but we can check if the `process` is defined.\n        // Note: it's required to check for `[object process]` because someone might be running unit tests with\n        // Webpack and shimming `process`.\n        (typeof process !== 'undefined' &&\n            Object.prototype.toString.call(process) === '[object process]'));\n}\nfunction runOutsideAngular(fn) {\n    // We cannot inject the `NgZone` class when running the checker. The `__ngContext__` is read\n    // for the first time within a microtask which triggers change detection; we want to avoid that.\n    // The `Zone` is always available globally when the `zone.js` is imported. Otherwise, it may be\n    // nooped through bootstrap options. The `NgZone.runOutsideAngular` calls `Zone.root.run`, so we're\n    // safe calling that function directly.\n    const Zone = ɵglobal.Zone;\n    const isNgZoneEnabled = !!Zone && typeof Zone.root?.run === 'function';\n    return isNgZoneEnabled ? Zone.root.run(fn) : fn();\n}\nfunction createMessage(instance) {\n    return `\n  The ${instance.constructor.name} still has subscriptions that haven't been unsubscribed.\n  This may happen if the class extends another class decorated with @UntilDestroy().\n  The child class implements its own ngOnDestroy() method but doesn't call super.ngOnDestroy().\n  Let's look at the following example:\n  @UntilDestroy()\n  @Directive()\n  export abstract class BaseDirective {}\n  @Component({ template: '' })\n  export class ConcreteComponent extends BaseDirective implements OnDestroy {\n    constructor() {\n      super();\n      someObservable$.pipe(untilDestroyed(this)).subscribe();\n    }\n    ngOnDestroy(): void {\n      // Some logic here...\n    }\n  }\n  The BaseDirective.ngOnDestroy() will not be called since Angular will call ngOnDestroy()\n  on the ConcreteComponent, but not on the BaseDirective.\n  One of the solutions is to declare an empty ngOnDestroy method on the BaseDirective:\n  @UntilDestroy()\n  @Directive()\n  export abstract class BaseDirective {\n    ngOnDestroy(): void {}\n  }\n  @Component({ template: '' })\n  export class ConcreteComponent extends BaseDirective implements OnDestroy {\n    constructor() {\n      super();\n      someObservable$.pipe(untilDestroyed(this)).subscribe();\n    }\n    ngOnDestroy(): void {\n      // Some logic here...\n      super.ngOnDestroy();\n    }\n  }\n  `;\n}\n\nconst NG_DEV_MODE = typeof ngDevMode === 'undefined' || ngDevMode;\nfunction overrideNonDirectiveInstanceMethod(instance, destroyMethodName, symbol) {\n    const originalDestroy = instance[destroyMethodName];\n    if (NG_DEV_MODE && typeof originalDestroy !== 'function') {\n        throw new Error(`${instance.constructor.name} is using untilDestroyed but doesn't implement ${destroyMethodName}`);\n    }\n    createSubjectOnTheInstance(instance, symbol);\n    instance[destroyMethodName] = function () {\n        // eslint-disable-next-line prefer-rest-params\n        originalDestroy.apply(this, arguments);\n        completeSubjectOnTheInstance(this, symbol);\n        // We have to re-assign this property back to the original value.\n        // If the `untilDestroyed` operator is called for the same instance\n        // multiple times, then we will be able to get the original\n        // method again and not the patched one.\n        instance[destroyMethodName] = originalDestroy;\n    };\n}\nfunction untilDestroyed(instance, destroyMethodName) {\n    return (source) => {\n        const symbol = getSymbol(destroyMethodName);\n        // If `destroyMethodName` is passed then the developer applies\n        // this operator to something non-related to Angular DI system\n        if (typeof destroyMethodName === 'string') {\n            overrideNonDirectiveInstanceMethod(instance, destroyMethodName, symbol);\n        }\n        else {\n            NG_DEV_MODE && ensureClassIsDecorated(instance);\n            createSubjectOnTheInstance(instance, symbol);\n        }\n        const destroy$ = instance[symbol];\n        NG_DEV_MODE && setupSubjectUnsubscribedChecker(instance, destroy$);\n        return source.pipe(takeUntil(destroy$));\n    };\n}\nfunction ensureClassIsDecorated(instance) {\n    const prototype = Object.getPrototypeOf(instance);\n    const missingDecorator = !(DECORATOR_APPLIED in prototype);\n    if (missingDecorator) {\n        throw new Error('untilDestroyed operator cannot be used inside directives or ' +\n            'components or providers that are not decorated with UntilDestroy decorator');\n    }\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { UntilDestroy, untilDestroyed };\n"],"names":["forwardRef","FormBuilder","FormControl","FormControlState","FormGroup","NG_VALIDATORS","NG_VALUE_ACCESSOR","ReactiveFormsModule","ValidationErrors","ValidatorFn","Validators","CommonModule","MatInputModule","MatAutocompleteModule","TranslateModule","UntilDestroy","untilDestroyed","MunicipalityComponent","StreetComponent","fieldConstant","fieldDependencies","ErrorEvent","EventFacade","AddressUtil","GeographicalAddressComponent","AddressTypeIdConstants","AddressFormFieldComponent","constructor","formBuilder","eventFacade","isSubmitted","manualAddressIsAllowed","addressForm","configuredAddress","MUNICIPALITY","STREET","GEOGRAPHICAL_ADDRESS","writeValue","address","initialAddress","initForm","field","findLastNonEmptyField","resetFields","e","triggerEvent","registerOnChange","fn","onChange","registerOnTouched","onTouch","validate","valid","invalidForm","findChangedField","previousValues","currentValues","key","postalCode","value","group","createMunicipalityFormControl","required","createStreetFormControl","createGeographicalAddressFormControl","valueChanges","pipe","subscribe","changedField","validators","Error","municipalityValue","getMunicipalityValue","addressUnit","formControlState","disabled","addControl","streetAddressUnit","addressUnitTypeId","STREETS","getAddressValue","addressUnitValue","setStreetAddressUnits","streetValue","street","geographicalAddressValue","housenumber","houseNumber","subhousenumber","subHouseNumber","box","boxNumber","floor","isManualAddress","countryAddressUnit","COUNTRY","municipalityAddressUnit","addressUnitChain","push","fieldDependency","find","dependency","clear","forEach","fieldName","clearField","enableAndReset","resetField","disableAndReset","get","reset","emitEvent","orderedDependencies","sort","a","b","weight","previousFieldName","undefined","control","controls","_","i0","ɵɵdirectiveInject","i1","i2","_2","selectors","inputs","standalone","features","ɵɵProvidersFeature","provide","useExisting","multi","ɵɵStandaloneFeature","decls","vars","consts","template","AddressFormFieldComponent_Template","rf","ctx","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵproperty","ɵɵadvance","municipality","ɵNgNoValidate","NgControlStatus","NgControlStatusGroup","FormGroupDirective","FormControlName","encapsulation","__decorate","BaseComponent","disabledState","_setDisabledStateOnChange","change","_setDisabledState","currentValue","disable","enable","MatAutocompleteTrigger","EMPTY","iif","Observable","of","debounceTime","distinctUntilChanged","map","startWith","switchMap","boxPattern","conditionalPatternValidator","ɵɵtext","option_r4","ɵɵtextInterpolate2","ɵɵtextInterpolate","ɵɵpipeBind1","BoxComponent","selectedHouseNumberValue","selectedSubHouseNumberValue","options","addValidators","ngOnInit","setupFilter","listenForReset","statusChanges","status","filteredOptions","val","_filterOptions","addressUnits","boxFloors","filter","boxFloor","setValue","display","displayString","concat","ngAfterViewInit","autoCompleteTrigger","panelClosingActions","event","handleAutoCompleteSelection","houseNumberAddressUnitOptions","filterBoxNumbers","setDisabledState","isDisabled","resetSubscription","resetTrigger","isUserInput","handleUserInputSelection","source","activeOption","handleActiveOptionSelection","handleNoSelection","viewQuery","BoxComponent_Query","ɵɵInheritDefinitionFeature","BoxComponent_Template","ɵɵtemplate","BoxComponent_mat_option_9_Template","BoxComponent_div_11_Template","ɵɵpureFunction1","_c1","_r1","ɵɵattribute","hasError","NgClass","NgForOf","NgIf","AsyncPipe","MatAutocomplete","i3","MatOption","i4","DefaultValueAccessor","FormControlDirective","i5","TranslatePipe","ChangeDetectorRef","SimpleChanges","AddressFormFieldFacade","geographicalAddressFieldDependencies","HouseNumberComponent","SubHouseNumberComponent","BehaviorSubject","tap","cdr","addressFormFieldFacade","resetFilteredOptionsTrigger","selectedHousenumberValue","selectedSubHousenumberValue","geographicalAddressForm","HOUSE_NUMBER","SUB_HOUSE_NUMBER","BOX","updateAddressUnitOptions","housenumberControl","ngOnChanges","changes","previousValue","handleStreetAddressUnitChange","subHousenumber","houseNumberAddressUnitOptions$","getGeographicalAddressAddressUnits","id","detectChanges","triggerReset","next","isHousenumberDisabled","maxLength","pattern","isSubHouseNumberAndBoxDisabled","matchingAddressUnit","findAddressBasedOnGeographicalAddress","ɵɵNgOnChangesFeature","GeographicalAddressComponent_Template","ɵɵlistener","GeographicalAddressComponent_Template_tg_sales_address_house_number_housenumberInputChanged_2_listener","$event","asObservable","EventEmitter","option_r5","ɵɵtextInterpolate1","housenumberInputChanged","emit","name","filterHouseNumbers","HouseNumberComponent_Query","HouseNumberComponent_Template","HouseNumberComponent_mat_option_9_Template","HouseNumberComponent_div_11_Template","HouseNumberComponent_div_12_Template","touched","location","length","filterValue","toLowerCase","getFilteredMunicipalities","MunicipalityComponent_Query","MunicipalityComponent_Template","MunicipalityComponent_mat_option_8_Template","MunicipalityComponent_div_10_Template","i6","nameDU","getFilteredStreets","handleMunicipalityAddressUnitChange","selected","subProperty","subPropertyValue","StreetComponent_Query","StreetComponent_Template","StreetComponent_mat_option_9_Template","StreetComponent_div_11_Template","subHouseNumbers","filterSubHouseNumbers","SubHouseNumberComponent_Query","SubHouseNumberComponent_Template","SubHouseNumberComponent_mat_option_9_Template","SubHouseNumberComponent_div_11_Template","getMunicipalities","response","municipalityString","indexOf","postalCodeQuery","getStreets","streetAddressUnitId","getGeographicalAddresses","reduce","addressUnitList","itemExists","some","existingAddressUnit","Number","houseNumberValue","startsWith","subHouseNumberValue","subHouseNumberMatches","getFilteredSubHouseNumberOptions$","subHouseNumbers$","getAddressValueFromAddressChain","getTopLevelAddressValue","unit","foundValue","type","test","Subject","Subscription","from","ɵNG_PIPE_DEF","ɵgetLContext","ɵglobal","mergeMap","takeUntil","NG_PIPE_DEF","isPipe","target","DESTROY","Symbol","DECORATOR_APPLIED","getSymbol","destroyMethodName","markAsDecorated","prototype","createSubjectOnTheInstance","instance","symbol","completeSubjectOnTheInstance","complete","unsubscribe","property","unsubscribeIfPropertyIsArrayLike","Array","isArray","decorateNgOnDestroy","ngOnDestroy","call","arrayName","checkProperties","blackList","includes","decorateProviderDirectiveOrComponent","decoratePipe","def","ɵpipe","onDestroy","CLEANUP","CheckerHasBeenSet","setupSubjectUnsubscribedChecker","destroy$","isAngularInTestMode","runOutsideAngular","Promise","resolve","lContext","lView","lCleanup","cleanupHasBeenExecuted$","untilDestroyedLCleanup","observed","console","warn","createMessage","__karma__","jasmine","jest","Mocha","process","Object","toString","Zone","isNgZoneEnabled","root","run","NG_DEV_MODE","ngDevMode","overrideNonDirectiveInstanceMethod","originalDestroy","apply","arguments","ensureClassIsDecorated","getPrototypeOf","missingDecorator"],"sourceRoot":"webpack:///","x_google_ignoreList":[18]}