{"version":3,"file":"default-libs_sales_customer-registration_ui_src_index_ts.js","mappings":"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","sources":["./libs/sales/customer-registration/ui/src/index.ts","./libs/sales/customer-registration/ui/src/lib/address-form/address-form.component.ts","./libs/sales/customer-registration/ui/src/lib/address-form/address-form.component.html","./libs/sales/customer-registration/ui/src/lib/customer-registration-title/customer-registration-title.component.ts","./libs/sales/customer-registration/ui/src/lib/customer-registration-title/customer-registration-title.component.html","./libs/sales/customer-registration/ui/src/lib/error-message-with-login-button/error-message-with-login-button.component.ts","./libs/sales/customer-registration/ui/src/lib/error-message-with-login-button/error-message-with-login-button.component.html","./libs/sales/customer-registration/ui/src/lib/error-message/error-message.component.ts","./libs/sales/customer-registration/ui/src/lib/error-message/error-message.component.html","./libs/sales/customer-registration/ui/src/lib/restricted-product/restricted-product.component.ts","./libs/sales/customer-registration/ui/src/lib/restricted-product/restricted-product.component.html","./libs/sales/customer-registration/ui/src/lib/sales-address-toggle/address-toggle.component.ts","./libs/sales/customer-registration/ui/src/lib/sales-address-toggle/address-toggle.component.html"],"sourcesContent":["export * from './lib/error-message/error-message.component';\nexport * from './lib/customer-registration-title/customer-registration-title.component';\nexport * from './lib/restricted-product/restricted-product.component';\nexport * from './lib/error-message-with-login-button/error-message-with-login-button.component';\nexport * from './lib/address-form/address-form.component';\nexport * from './lib/sales-address-toggle/address-toggle.component';\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatAutocomplete, MatAutocompleteTrigger, MatOption } from '@angular/material/autocomplete';\nimport {\n  AddressForm,\n  AddressRequestInterface,\n  Municipality,\n  ItsMeResponseInterface,\n} from '@sales/customer-registration/data-access';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { CommonModule, NgClass } from '@angular/common';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { debounceTime, distinctUntilChanged } from 'rxjs';\n@Component({\n  selector: 'tg-sales-customer-registration-address-form',\n  templateUrl: './address-form.component.html',\n  standalone: true,\n  providers: [],\n  imports: [\n    CommonModule,\n    MatAutocompleteTrigger,\n    MatAutocomplete,\n    MatOption,\n    TranslateModule,\n    ReactiveFormsModule,\n    NgClass,\n  ],\n})\n@UntilDestroy()\nexport class AddressFormComponent implements OnInit {\n  @Input() isFormSubmit = false;\n  @Input() addressType = 'default';\n  @Input() isManualAddressAllowed = false;\n  @Input({\n    transform: (value: string[] | null) => {\n      return value ? value : [];\n    },\n  })\n  subHouseNoSuggestions: string[] = [];\n  @Input({\n    transform: (value: string[] | null) => {\n      return value ? value : [];\n    },\n  })\n  boxNoSuggestions: string[] = [];\n  @Input() itsMeDetails: ItsMeResponseInterface | null | undefined;\n\n  addressForm: AddressForm;\n  readonly ZIP_CODE = 'zipCode';\n  readonly STREET = 'street';\n\n  private matchedMunicipality: Municipality | undefined;\n  private matchedStreet: string | undefined;\n\n  @Input() set locationSuggestions(value: Municipality[] | null) {\n    this._locationSuggestions = value || [];\n    this.populateMunicipalityFromItsMe();\n  }\n\n  _locationSuggestions: Municipality[] = [];\n  filteredLocationSuggestions: Municipality[] = [];\n\n  @Input() set streetSuggestions(value: string[] | null) {\n    this._streetSuggestions = value || [];\n    this.populateStreetFromItsMe();\n  }\n\n  _streetSuggestions: string[] = [];\n  filteredStreetSuggestions: string[] = [];\n  private itsMeFlow = false;\n  isFormReady = false;\n\n  @Output() updateStreetsEmitter: EventEmitter<string> = new EventEmitter();\n  @Output() updateSubHouseEmitter: EventEmitter<string> = new EventEmitter();\n  @Output() updateBoxEmitter: EventEmitter<string> = new EventEmitter();\n  @Output() saveAddressEmitter: EventEmitter<AddressRequestInterface> = new EventEmitter();\n\n  constructor() {\n    this.addressForm = AddressForm.build();\n  }\n\n  ngOnInit(): void {\n    this.addressForm.controls[this.ZIP_CODE].valueChanges\n      .pipe(untilDestroyed(this))\n      .subscribe((value: Municipality | string) => {\n        if (typeof value === 'string') {\n          this.filteredLocationSuggestions = this.filterMunicipality(value);\n        } else {\n          if (value.postalCode && this.hasValidPostalCode()) {\n            this.updateStreets(value.postalCode);\n            this.enableFormField(this.STREET);\n          }\n        }\n      });\n\n    this.addressForm.controls[this.STREET].valueChanges\n      .pipe(debounceTime(300), distinctUntilChanged(), untilDestroyed(this))\n      .subscribe((value: string) => {\n        this.filteredStreetSuggestions = this.getFilteredStreetSuggestions(value);\n        if (this.hasValidStreet()) {\n          ['houseNumber', 'subHouse', 'boxNumber'].forEach((field) => this.enableFormField(field));\n        }\n      });\n\n    this.addressForm.controls['subHouse'].valueChanges\n      .pipe(debounceTime(300), distinctUntilChanged(), untilDestroyed(this))\n      .subscribe(() => {\n        this.updateSubHouseEmitter.emit();\n      });\n\n    this.addressForm.controls['boxNumber'].valueChanges\n      .pipe(debounceTime(300), distinctUntilChanged(), untilDestroyed(this))\n      .subscribe(() => {\n        this.updateBoxEmitter.emit();\n      });\n  }\n\n  private getFilteredStreetSuggestions(value: string, strict = false) {\n    return this._streetSuggestions.filter((street) =>\n      strict ? street.toLowerCase() === value.toLowerCase() : street.toLowerCase().includes(value.toLowerCase())\n    );\n  }\n\n  private populateAddressFormFieldsFromItsMe() {\n    const customerAddress = this.itsMeDetails?.customerAddress;\n    if (!customerAddress) {\n      this.isFormReady = true;\n      return;\n    }\n\n    if (this.matchedMunicipality && this.matchedStreet) {\n      this.addressForm.patchValue({\n        zipCode: this.matchedMunicipality,\n        street: this.matchedStreet,\n        houseNumber: customerAddress.houseNumber,\n        subHouse: customerAddress.subHouseNumber,\n        boxNumber: customerAddress.boxNumber,\n      });\n      [this.STREET, 'houseNumber', 'subHouse', 'boxNumber'].forEach((field) => this.enableFormField(field));\n    }\n  }\n\n  private enableFormField(controlName: string) {\n    this.addressForm.controls[controlName].enable();\n  }\n\n  displayFunction(option: Municipality | null): string {\n    return option ? option.postalCode + ' - ' + option.location : '';\n  }\n\n  private filterMunicipality(keyWord: string, strict = false): Municipality[] {\n    keyWord = keyWord.toLowerCase();\n    return this._locationSuggestions.filter((suggestion: Municipality) => {\n      const { postalCode, location } = suggestion;\n      return (\n        postalCode &&\n        location &&\n        (strict\n          ? postalCode + ' - ' + location.toLowerCase() === keyWord\n          : postalCode.toLowerCase().includes(keyWord) || location.toLowerCase().includes(keyWord))\n      );\n    });\n  }\n\n  private updateStreets(postalCode: string): void {\n    this.updateStreetsEmitter.emit(postalCode);\n  }\n\n  private hasValidPostalCode(): boolean {\n    return this.addressForm.controls[this.ZIP_CODE].valid;\n  }\n\n  private hasValidStreet(): boolean {\n    return this.addressForm.controls[this.STREET].valid;\n  }\n\n  updateAddress(formControlName: string) {\n    if (this.addressForm.controls[formControlName].valid && !this.addressForm.controls[formControlName].disabled) {\n      this.saveAddressEmitter.emit(this.getRequestData());\n    }\n  }\n\n  private getRequestData(): AddressRequestInterface {\n    const municipality = this.addressForm.controls[this.ZIP_CODE].value;\n    return {\n      houseNumber: this.addressForm.controls['houseNumber'].value,\n      municipality: municipality.location,\n      postalCode: municipality.postalCode,\n      street: this.addressForm.controls[this.STREET].value,\n      boxNumber: this.addressForm.controls['boxNumber'].value,\n      subHouseNumber: this.addressForm.controls['subHouse'].value,\n      type: this.addressType,\n    };\n  }\n\n  validateForm(): boolean {\n    const formGroup = this.addressForm;\n    const valid = formGroup.valid;\n    if (!valid) {\n      [this.ZIP_CODE, this.STREET, 'houseNumber'].forEach((formControlName: string) => {\n        this.enableFormField(formControlName);\n        this.addressForm.controls[formControlName].markAsTouched();\n        this.addressForm.controls[formControlName].markAsDirty();\n      });\n    }\n    return valid;\n  }\n\n  private populateMunicipalityFromItsMe() {\n    if (this.itsMeDetails) {\n      const itsMePostalCode = this.itsMeDetails?.customerAddress?.postalCode?.trim();\n      const itsMeMunicipality = this.itsMeDetails?.customerAddress?.municipality?.trim();\n      if (this._locationSuggestions.length && itsMePostalCode) {\n        this.itsMeFlow = true;\n        this.updateStreets(itsMePostalCode);\n        this.matchedMunicipality = this._locationSuggestions\n          .filter((suggestedMunicipality) => suggestedMunicipality.postalCode === itsMePostalCode)\n          .find(\n            (filteredMunicipality) => filteredMunicipality.location?.toLowerCase() === itsMeMunicipality?.toLowerCase()\n          );\n      }\n    }\n  }\n\n  private populateStreetFromItsMe() {\n    if (this.itsMeDetails) {\n      const street = this.itsMeDetails?.customerAddress?.street?.trim().toLowerCase();\n      if (this._streetSuggestions.length && street && this.itsMeFlow) {\n        this.matchedStreet = this._streetSuggestions.find(\n          (suggestion) => suggestion.toLowerCase() === street.toLowerCase()\n        );\n        this.populateAddressFormFieldsFromItsMe();\n        this.itsMeFlow = false;\n        this.isFormReady = true;\n      }\n    }\n  }\n\n  isValidInput(formControlName: string, value: string) {\n    if (formControlName === this.ZIP_CODE && this.filterMunicipality(value, true).length === 0)\n      this.setError(formControlName);\n    if (formControlName === this.STREET && this.getFilteredStreetSuggestions(value, true).length === 0)\n      this.setError(formControlName);\n  }\n\n  private setError(formControlName: string) {\n    this.addressForm.controls[formControlName].setErrors({ invalid: true });\n  }\n}\n","<form action=\"\" [formGroup]=\"addressForm\" autocomplete=\"off\" messageGroup=\"address\">\n  <div class=\"row mb--xl--md mb--l\">\n    <div class=\"col-sm-12 form-group\">\n      <label class=\"cursor--default\">{{ 'ng.address.lbl.zip-code' | translate }}</label>\n      <input\n        type=\"text\"\n        class=\"form__input\"\n        formControlName=\"zipCode\"\n        [matAutocomplete]=\"zipCodeList\"\n        #zipCode\n        [attr.data-cy]=\"'zip-code'\"\n        [attr.data-testid]=\"'zip-code'\"\n        (blur)=\"isValidInput('zipCode', zipCode.value)\" />\n      <mat-autocomplete #zipCodeList=\"matAutocomplete\" [autoActiveFirstOption]=\"true\" [displayWith]=\"displayFunction\">\n        @for (location of filteredLocationSuggestions; track location) {\n          <mat-option [value]=\"location\"> {{ location.postalCode }} - {{ location.location }} </mat-option>\n        }\n      </mat-autocomplete>\n      @if (\n        addressForm.controls['zipCode'].errors &&\n        addressForm.controls['zipCode'].touched &&\n        addressForm.controls['zipCode'].hasError('required')\n      ) {\n        <div class=\"formErrorInput text-align--left\">\n          {{ 'ng.address.error.zipCode.required' | translate }}\n        </div>\n      }\n      @if (addressForm.controls['zipCode'].hasError('invalid')) {\n        <div class=\"formErrorInput text-align--left\">\n          {{ 'ng.address.error.zipCode.invalid' | translate }}\n        </div>\n      }\n    </div>\n  </div>\n  <div class=\"row mb--xl--md mb--l\">\n    <div class=\"col-sm-12 form-group\">\n      <label class=\"cursor--default\">{{ 'ng.address.lbl.street' | translate }}</label>\n      <div [ngClass]=\"{ 'disabled-state': addressForm.controls['street'].disabled }\">\n        <input\n          class=\"form__input\"\n          formControlName=\"street\"\n          [matAutocomplete]=\"streetList\"\n          placeholder=\"{{ 'ng.address.form-street-placeholder-label' | translate }}\"\n          #streetName\n          [attr.data-cy]=\"'street'\"\n          [attr.data-testid]=\"'street'\"\n          (blur)=\"isValidInput('street', streetName.value)\" />\n        <mat-autocomplete #streetList=\"matAutocomplete\">\n          @for (street of filteredStreetSuggestions; track street) {\n            <mat-option [value]=\"street\">\n              {{ street }}\n            </mat-option>\n          }\n        </mat-autocomplete>\n      </div>\n      @if (addressForm.controls['street'].touched && addressForm.controls['street'].hasError('required')) {\n        <div class=\"formErrorInput text-align--left\">\n          {{ 'ng.address.error.street.required' | translate }}\n        </div>\n      }\n\n      @if (addressForm.controls['street'].hasError('invalid')) {\n        <div class=\"formErrorInput text-align--left\">\n          {{ 'ng.address.error.street.invalid' | translate }}\n        </div>\n      }\n    </div>\n  </div>\n  <div class=\"row mb--xs--md mb--xxxs\">\n    <div class=\"col-sm-6 form-group\">\n      <label class=\"cursor--default\">{{ 'ng.address.lbl.house-number' | translate }}</label>\n      <div [ngClass]=\"{ 'disabled-state': addressForm.controls['houseNumber'].disabled }\">\n        <input\n          class=\"form__input\"\n          formControlName=\"houseNumber\"\n          placeholder=\"{{ 'ng.address.form-house-number-placeholder-label' | translate }}\"\n          #house\n          (blur)=\"updateAddress('houseNumber')\" />\n      </div>\n      @if (addressForm.controls['houseNumber'].touched && addressForm.controls['houseNumber'].hasError('required')) {\n        <div class=\"formErrorInput text-align--left\">\n          {{ 'ng.address.error.houseNumber.required' | translate }}\n        </div>\n      }\n\n      @if (\n        addressForm.controls['houseNumber'].hasError('pattern') ||\n        addressForm.controls['houseNumber'].hasError('invalid')\n      ) {\n        <div class=\"formErrorInput text-align--left\">\n          <div>{{ 'ng.address.houseNumber-pattern.error' | translate }}</div>\n        </div>\n      }\n    </div>\n    <div class=\"col-sm-6 form-group\">\n      <div class=\"font--caption cursor--default my--xxxs\">{{ 'ng.address.lbl.sub-house' | translate }}</div>\n      <div [ngClass]=\"{ 'disabled-state': addressForm.controls['subHouse'].disabled }\">\n        <input\n          class=\"form__input\"\n          formControlName=\"subHouse\"\n          [matAutocomplete]=\"subHouseList\"\n          placeholder=\"{{ 'ng.address.form-sub-house-placeholder-label' | translate }}\"\n          #subHouse\n          (blur)=\"updateAddress('subHouse')\" />\n        <mat-autocomplete #subHouseList=\"matAutocomplete\">\n          @for (subhousenr of subHouseNoSuggestions; track subhousenr) {\n            <mat-option [value]=\"subhousenr\">\n              {{ subhousenr }}\n            </mat-option>\n          }\n        </mat-autocomplete>\n      </div>\n      @if (\n        addressForm.controls['subHouse'].hasError('pattern') || addressForm.controls['subHouse'].hasError('invalid')\n      ) {\n        <div class=\"formErrorInput text-align--left\">\n          <div>{{ 'ng.address.subHouse-pattern.error' | translate }}</div>\n        </div>\n      }\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-sm-12 form-group\">\n      <label class=\"cursor--default\">{{ 'ng.address.lbl.box-number' | translate }}</label>\n      <div [ngClass]=\"{ 'disabled-state': addressForm.controls['boxNumber'].disabled }\">\n        <input\n          class=\"form__input\"\n          autocomplete=\"off\"\n          formControlName=\"boxNumber\"\n          [matAutocomplete]=\"boxList\"\n          placeholder=\"{{ 'ng.address.form-box-number-placeholder-label' | translate }}\"\n          #boxNumber\n          (blur)=\"updateAddress('boxNumber')\" />\n        <mat-autocomplete #boxList=\"matAutocomplete\" [autoActiveFirstOption]=\"true\">\n          @for (boxNo of boxNoSuggestions; track boxNo) {\n            <mat-option [value]=\"boxNo\">\n              {{ boxNo }}\n            </mat-option>\n          }\n        </mat-autocomplete>\n      </div>\n      @if (\n        addressForm.controls['boxNumber'].hasError('pattern') || addressForm.controls['boxNumber'].hasError('invalid')\n      ) {\n        <div class=\"formErrorInput text-align--left\">\n          <div>{{ 'ng.address.boxNumber-pattern.error' | translate }}</div>\n        </div>\n      }\n    </div>\n  </div>\n</form>\n","import { Component, Input } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@Component({\n  selector: 'tg-sales-customer-registration-title',\n  templateUrl: './customer-registration-title.component.html',\n  standalone: true,\n  imports: [TranslateModule],\n})\nexport class CustomerRegistrationTitleComponent {\n  @Input() currentStep: string | null = '';\n}\n","<div class=\"text-align--center col-lg-6 col-md-8 col-12 mx--auto my--l mt--n--md\">\n  <div class=\"text-flow text-flow--h1\">\n    {{ 'customer-registration.lbl.' + currentStep + '-header-message' | translate }}\n  </div>\n  <div class=\"text-flow text-flow--body mt--xxxs\">\n    {{ 'customer-registration.lbl.' + currentStep + '-subTitle-message' | translate }}\n  </div>\n</div>\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@Component({\n  selector: 'tg-sales-error-message-with-login-button',\n  standalone: true,\n  imports: [CommonModule, TranslateModule],\n  templateUrl: './error-message-with-login-button.component.html',\n})\nexport class ErrorMessageWithLoginButtonComponent {\n  @Output() loginEmitter: EventEmitter<void> = new EventEmitter();\n  @Input() brand: string | undefined | null;\n\n  login(): void {\n    this.loginEmitter.emit();\n  }\n}\n","<div class=\"notification notification--errorfield mt-20 mb--xl\">\n  <span class=\"icon icon-error-shape errorfield\">{{\n    'customer-registration.lbl.login-header' | translate: { brand: brand }\n  }}</span>\n  <button type=\"button\" class=\"button button--primary button--width-auto\" (click)=\"login()\">\n    {{ 'customer-registration.button.login' | translate }}\n  </button>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@Component({\n  selector: 'tg-sales-error-message',\n  standalone: true,\n  imports: [CommonModule, TranslateModule],\n  templateUrl: './error-message.component.html',\n})\nexport class ErrorMessageComponent {\n  @Input() errorMessage: string | null = '';\n}\n","<div class=\"notification notification--errorfield notification--errorfield--flow\">\n  @if (errorMessage) {\n    <span class=\"icon icon-error-shape\">{{ errorMessage | lowercase | translate }}</span>\n  }\n</div>\n","import { Component, Input } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\n@Component({\n  selector: 'tg-sales-restricted-product',\n  templateUrl: './restricted-product.component.html',\n  imports: [TranslateModule],\n  standalone: true,\n})\nexport class RestrictedProductComponent {\n  @Input() currentCategory = '';\n  disclaimerTitleKey = '';\n  disclaimerDescriptionKey = '';\n  @Input()\n  marketingURL: string | null;\n\n  constructor() {\n    this.marketingURL = '';\n  }\n}\n","<div class=\"notification-disclaimer text-align--center\">\n  <div class=\"icon icon-information-shape\" [attr.data-cy]=\"'customer-registration-restricted-product-icon'\"></div>\n  <div class=\"notification-disclaimer__title\">\n    {{ 'customer-registration.lbl.restricted-product-' + this.currentCategory | translate }}\n  </div>\n  <p class=\"notification-disclaimer__desc\">\n    {{ 'customer-registration.lbl.see-our-products-' + this.currentCategory | translate: { link: marketingURL } }}\n  </p>\n</div>\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@Component({\n  selector: 'tg-sales-customer-registration-address-toggle',\n  templateUrl: './address-toggle.component.html',\n  imports: [TranslateModule],\n  standalone: true,\n})\nexport class AddressToggleComponent {\n  @Output() isChecked: EventEmitter<{ checked: boolean; type: string }> = new EventEmitter();\n  @Input() addressType = '';\n  @Input() showBillingAddressToggle = false;\n  @Input() showInstallationAddressToggle = false;\n\n  onAddressToggle(event: Event, addressType: string): void {\n    const inputElement = event.target as HTMLInputElement;\n    this.isChecked.emit({ checked: inputElement.checked, type: addressType });\n  }\n}\n","@if (showInstallationAddressToggle) {\n  <div class=\"display--flex align-items--baseline mt--xl--md mt--l\">\n    <span class=\"text-flow text-flow--h6 color-text\">{{\n      'customer-registration.lbl.same-business-installation-address' | translate\n    }}</span>\n    <div class=\"CheckboxSwitch\">\n      <input\n        type=\"checkbox\"\n        class=\"CheckboxSwitch-input\"\n        id=\"addressCheckboxSwitch\"\n        (change)=\"onAddressToggle($event, addressType)\"\n        checked />\n      <label class=\"CheckboxSwitch-control\" for=\"addressCheckboxSwitch\">&nbsp;</label>\n    </div>\n  </div>\n}\n@if (showBillingAddressToggle) {\n  <div class=\"display--flex align-items--baseline mt--xl--md mt--l\">\n    <label class=\"CheckboxSwitch--label\">{{\n      'customer-registration.form-billing-address-check-label' | translate\n    }}</label>\n    <span class=\"display--inline\">\n      <div class=\"CheckboxSwitch\">\n        <input\n          type=\"checkbox\"\n          class=\"CheckboxSwitch-input\"\n          id=\"billingAddressCheckboxSwitch\"\n          (change)=\"onAddressToggle($event, 'billingAddress')\"\n          checked />\n        <label class=\"CheckboxSwitch-control\" for=\"billingAddressCheckboxSwitch\">&nbsp;</label>\n      </div>\n    </span>\n  </div>\n}\n"],"names":["EventEmitter","ReactiveFormsModule","MatAutocomplete","MatAutocompleteTrigger","MatOption","AddressForm","TranslateModule","CommonModule","UntilDestroy","untilDestroyed","debounceTime","distinctUntilChanged","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵproperty","location_r21","ɵɵadvance","ɵɵtextInterpolate2","postalCode","location","ɵɵtextInterpolate1","ɵɵpipeBind1","street_r26","ɵɵtextInterpolate","subhousenr_r31","boxNo_r36","AddressFormComponent","locationSuggestions","value","_locationSuggestions","populateMunicipalityFromItsMe","streetSuggestions","_streetSuggestions","populateStreetFromItsMe","constructor","isFormSubmit","addressType","isManualAddressAllowed","subHouseNoSuggestions","boxNoSuggestions","ZIP_CODE","STREET","filteredLocationSuggestions","filteredStreetSuggestions","itsMeFlow","isFormReady","updateStreetsEmitter","updateSubHouseEmitter","updateBoxEmitter","saveAddressEmitter","addressForm","build","ngOnInit","controls","valueChanges","pipe","subscribe","filterMunicipality","hasValidPostalCode","updateStreets","enableFormField","getFilteredStreetSuggestions","hasValidStreet","forEach","field","emit","strict","filter","street","toLowerCase","includes","populateAddressFormFieldsFromItsMe","customerAddress","itsMeDetails","matchedMunicipality","matchedStreet","patchValue","zipCode","houseNumber","subHouse","subHouseNumber","boxNumber","controlName","enable","displayFunction","option","keyWord","suggestion","valid","updateAddress","formControlName","disabled","getRequestData","municipality","type","validateForm","formGroup","markAsTouched","markAsDirty","itsMePostalCode","trim","itsMeMunicipality","length","suggestedMunicipality","find","filteredMunicipality","isValidInput","setError","setErrors","invalid","_","_2","selectors","inputs","ɵɵInputFlags","HasDecoratorInputTransform","outputs","standalone","features","ɵɵProvidersFeature","ɵɵInputTransformsFeature","ɵɵStandaloneFeature","decls","vars","consts","template","AddressFormComponent_Template","rf","ctx","ɵɵlistener","AddressFormComponent_Template_input_blur_6_listener","ɵɵrestoreView","_r41","_r0","ɵɵreference","ɵɵresetView","ɵɵrepeaterCreate","AddressFormComponent_For_11_Template","ɵɵrepeaterTrackByIdentity","ɵɵtemplate","AddressFormComponent_Conditional_12_Template","AddressFormComponent_Conditional_13_Template","AddressFormComponent_Template_input_blur_20_listener","_r5","AddressFormComponent_For_26_Template","AddressFormComponent_Conditional_27_Template","AddressFormComponent_Conditional_28_Template","AddressFormComponent_Template_input_blur_35_listener","AddressFormComponent_Conditional_38_Template","AddressFormComponent_Conditional_39_Template","AddressFormComponent_Template_input_blur_45_listener","AddressFormComponent_For_51_Template","AddressFormComponent_Conditional_52_Template","AddressFormComponent_Template_input_blur_59_listener","AddressFormComponent_For_65_Template","AddressFormComponent_Conditional_66_Template","_r1","ɵɵattribute","ɵɵrepeater","ɵɵconditional","errors","touched","hasError","ɵɵpureFunction1","_c0","ɵɵpropertyInterpolate","_r6","_r14","_r18","i1","NgClass","i2","TranslatePipe","i3","ɵNgNoValidate","DefaultValueAccessor","NgControlStatus","NgControlStatusGroup","FormGroupDirective","FormControlName","encapsulation","__decorate","CustomerRegistrationTitleComponent","currentStep","CustomerRegistrationTitleComponent_Template","ErrorMessageWithLoginButtonComponent","loginEmitter","login","brand","ErrorMessageWithLoginButtonComponent_Template","ErrorMessageWithLoginButtonComponent_Template_button_click_4_listener","ɵɵpipeBind2","ctx_r0","errorMessage","ErrorMessageComponent","ErrorMessageComponent_Template","ErrorMessageComponent_Conditional_1_Template","LowerCasePipe","RestrictedProductComponent","currentCategory","disclaimerTitleKey","disclaimerDescriptionKey","marketingURL","RestrictedProductComponent_Template","ɵɵelement","AddressToggleComponent_Conditional_0_Template_input_change_5_listener","$event","_r3","ctx_r2","ɵɵnextContext","onAddressToggle","AddressToggleComponent_Conditional_1_Template_input_change_6_listener","ctx_r4","AddressToggleComponent","isChecked","showBillingAddressToggle","showInstallationAddressToggle","event","inputElement","target","checked","AddressToggleComponent_Template","AddressToggleComponent_Conditional_0_Template","AddressToggleComponent_Conditional_1_Template"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}