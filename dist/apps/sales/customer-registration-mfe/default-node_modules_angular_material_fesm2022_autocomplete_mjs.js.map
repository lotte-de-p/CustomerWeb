{"version":3,"file":"default-node_modules_angular_material_fesm2022_autocomplete_mjs.js","mappings":"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","sources":["./node_modules/@angular/material/fesm2022/autocomplete.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, booleanAttribute, TemplateRef, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, ViewChild, ContentChildren, Input, Output, Directive, forwardRef, inject, Optional, Host, NgModule } from '@angular/core';\nimport { MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\nexport { MatOptgroup, MatOption } from '@angular/material/core';\nimport { NgClass, DOCUMENT, CommonModule } from '@angular/common';\nimport * as i3 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { ActiveDescendantKeyManager, addAriaReferencedId, removeAriaReferencedId } from '@angular/cdk/a11y';\nimport { coerceStringArray } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/platform';\nimport { _getEventTarget } from '@angular/cdk/platform';\nimport { trigger, state, style, transition, group, animate } from '@angular/animations';\nimport { Subscription, Subject, defer, merge, of, fromEvent } from 'rxjs';\nimport { ESCAPE, hasModifierKey, UP_ARROW, ENTER, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i4 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD } from '@angular/material/form-field';\nimport { startWith, switchMap, take, filter, map, tap, delay } from 'rxjs/operators';\nimport * as i2 from '@angular/cdk/bidi';\n\n// Animation values come from\n// https://github.com/material-components/material-components-web/blob/master/packages/mdc-menu-surface/_mixins.scss\n// TODO(mmalerba): Ideally find a way to import the values from MDC's code.\nconst panelAnimation = trigger('panelAnimation', [\n    state('void, hidden', style({\n        opacity: 0,\n        transform: 'scaleY(0.8)',\n    })),\n    transition(':enter, hidden => visible', [\n        group([\n            animate('0.03s linear', style({ opacity: 1 })),\n            animate('0.12s cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'scaleY(1)' })),\n        ]),\n    ]),\n    transition(':leave, visible => hidden', [animate('0.075s linear', style({ opacity: 0 }))]),\n]);\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n/** Event object that is emitted when an autocomplete option is selected. */\nclass MatAutocompleteSelectedEvent {\n    constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    source, \n    /** Option that was selected. */\n    option) {\n        this.source = source;\n        this.option = option;\n    }\n}\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n    providedIn: 'root',\n    factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        autoActiveFirstOption: false,\n        autoSelectActiveOption: false,\n        hideSingleSelectionIndicator: false,\n        requireSelection: false,\n    };\n}\n/** Autocomplete component. */\nclass MatAutocomplete {\n    /** Whether the autocomplete panel is open. */\n    get isOpen() {\n        return this._isOpen && this.showPanel;\n    }\n    /** @docs-private Sets the theme color of the panel. */\n    _setColor(value) {\n        this._color = value;\n        this._setThemeClasses(this._classList);\n    }\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    set classList(value) {\n        if (value && value.length) {\n            this._classList = coerceStringArray(value).reduce((classList, className) => {\n                classList[className] = true;\n                return classList;\n            }, {});\n        }\n        else {\n            this._classList = {};\n        }\n        this._setVisibilityClasses(this._classList);\n        this._setThemeClasses(this._classList);\n        this._elementRef.nativeElement.className = '';\n    }\n    /** Whether checkmark indicator for single-selection options is hidden. */\n    get hideSingleSelectionIndicator() {\n        return this._hideSingleSelectionIndicator;\n    }\n    set hideSingleSelectionIndicator(value) {\n        this._hideSingleSelectionIndicator = value;\n        this._syncParentProperties();\n    }\n    /** Syncs the parent state with the individual options. */\n    _syncParentProperties() {\n        if (this.options) {\n            for (const option of this.options) {\n                option._changeDetectorRef.markForCheck();\n            }\n        }\n    }\n    constructor(_changeDetectorRef, _elementRef, _defaults, platform) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._defaults = _defaults;\n        this._activeOptionChanges = Subscription.EMPTY;\n        /** Class to apply to the panel when it's visible. */\n        this._visibleClass = 'mat-mdc-autocomplete-visible';\n        /** Class to apply to the panel when it's hidden. */\n        this._hiddenClass = 'mat-mdc-autocomplete-hidden';\n        /** Emits when the panel animation is done. Null if the panel doesn't animate. */\n        this._animationDone = new EventEmitter();\n        /** Whether the autocomplete panel should be visible, depending on option length. */\n        this.showPanel = false;\n        this._isOpen = false;\n        /** Function that maps an option's control value to its display value in the trigger. */\n        this.displayWith = null;\n        /** Event that is emitted whenever an option from the list is selected. */\n        this.optionSelected = new EventEmitter();\n        /** Event that is emitted when the autocomplete panel is opened. */\n        this.opened = new EventEmitter();\n        /** Event that is emitted when the autocomplete panel is closed. */\n        this.closed = new EventEmitter();\n        /** Emits whenever an option is activated. */\n        this.optionActivated = new EventEmitter();\n        this._classList = {};\n        /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n        this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n        // TODO(crisbeto): the problem that the `inertGroups` option resolves is only present on\n        // Safari using VoiceOver. We should occasionally check back to see whether the bug\n        // wasn't resolved in VoiceOver, and if it has, we can remove this and the `inertGroups`\n        // option altogether.\n        this.inertGroups = platform?.SAFARI || false;\n        this.autoActiveFirstOption = !!_defaults.autoActiveFirstOption;\n        this.autoSelectActiveOption = !!_defaults.autoSelectActiveOption;\n        this.requireSelection = !!_defaults.requireSelection;\n        this._hideSingleSelectionIndicator = this._defaults.hideSingleSelectionIndicator ?? false;\n    }\n    ngAfterContentInit() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withWrap()\n            .skipPredicate(this._skipPredicate);\n        this._activeOptionChanges = this._keyManager.change.subscribe(index => {\n            if (this.isOpen) {\n                this.optionActivated.emit({ source: this, option: this.options.toArray()[index] || null });\n            }\n        });\n        // Set the initial visibility state.\n        this._setVisibility();\n    }\n    ngOnDestroy() {\n        this._keyManager?.destroy();\n        this._activeOptionChanges.unsubscribe();\n        this._animationDone.complete();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     */\n    _setScrollTop(scrollTop) {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n    /** Returns the panel's scrollTop. */\n    _getScrollTop() {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /** Panel should hide itself when the option list is empty. */\n    _setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._setVisibilityClasses(this._classList);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Emits the `select` event. */\n    _emitSelectEvent(option) {\n        const event = new MatAutocompleteSelectedEvent(this, option);\n        this.optionSelected.emit(event);\n    }\n    /** Gets the aria-labelledby for the autocomplete panel. */\n    _getPanelAriaLabelledby(labelId) {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n    _setVisibilityClasses(classList) {\n        classList[this._visibleClass] = this.showPanel;\n        classList[this._hiddenClass] = !this.showPanel;\n    }\n    /** Sets the theming classes on a classlist based on the theme of the panel. */\n    _setThemeClasses(classList) {\n        classList['mat-primary'] = this._color === 'primary';\n        classList['mat-warn'] = this._color === 'warn';\n        classList['mat-accent'] = this._color === 'accent';\n    }\n    // `skipPredicate` determines if key manager should avoid putting a given option in the tab\n    // order. Allow disabled list items to receive focus via keyboard to align with WAI ARIA\n    // recommendation.\n    //\n    // Normally WAI ARIA's instructions are to exclude disabled items from the tab order, but it\n    // makes a few exceptions for compound widgets.\n    //\n    // From [Developing a Keyboard Interface](\n    // https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/):\n    //   \"For the following composite widget elements, keep them focusable when disabled: Options in a\n    //   Listbox...\"\n    //\n    // The user can focus disabled options using the keyboard, but the user cannot click disabled\n    // options.\n    _skipPredicate() {\n        return false;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.1.0-next.5\", ngImport: i0, type: MatAutocomplete, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS }, { token: i1.Platform }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"16.1.0\", version: \"17.1.0-next.5\", type: MatAutocomplete, isStandalone: true, selector: \"mat-autocomplete\", inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], displayWith: \"displayWith\", autoActiveFirstOption: [\"autoActiveFirstOption\", \"autoActiveFirstOption\", booleanAttribute], autoSelectActiveOption: [\"autoSelectActiveOption\", \"autoSelectActiveOption\", booleanAttribute], requireSelection: [\"requireSelection\", \"requireSelection\", booleanAttribute], panelWidth: \"panelWidth\", disableRipple: [\"disableRipple\", \"disableRipple\", booleanAttribute], classList: [\"class\", \"classList\"], hideSingleSelectionIndicator: [\"hideSingleSelectionIndicator\", \"hideSingleSelectionIndicator\", booleanAttribute] }, outputs: { optionSelected: \"optionSelected\", opened: \"opened\", closed: \"closed\", optionActivated: \"optionActivated\" }, host: { classAttribute: \"mat-mdc-autocomplete\" }, providers: [{ provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }], queries: [{ propertyName: \"options\", predicate: MatOption, descendants: true }, { propertyName: \"optionGroups\", predicate: MAT_OPTGROUP, descendants: true }], viewQueries: [{ propertyName: \"template\", first: true, predicate: TemplateRef, descendants: true, static: true }, { propertyName: \"panel\", first: true, predicate: [\"panel\"], descendants: true }], exportAs: [\"matAutocomplete\"], ngImport: i0, template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div\\n    class=\\\"mat-mdc-autocomplete-panel mdc-menu-surface mdc-menu-surface--open\\\"\\n    role=\\\"listbox\\\"\\n    [id]=\\\"id\\\"\\n    [ngClass]=\\\"_classList\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n    [@panelAnimation]=\\\"isOpen ? 'visible' : 'hidden'\\\"\\n    (@panelAnimation.done)=\\\"_animationDone.next($event)\\\"\\n    #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\"div.mat-mdc-autocomplete-panel{box-shadow:0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);width:100%;max-height:256px;visibility:hidden;transform-origin:center top;overflow:auto;padding:8px 0;border-radius:4px;box-sizing:border-box;position:static;background-color:var(--mat-autocomplete-background-color)}.cdk-high-contrast-active div.mat-mdc-autocomplete-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-autocomplete-panel-above) div.mat-mdc-autocomplete-panel{border-top-left-radius:0;border-top-right-radius:0}.mat-mdc-autocomplete-panel-above div.mat-mdc-autocomplete-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:center bottom}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-visible{visibility:visible}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-hidden{visibility:hidden}mat-autocomplete{display:none}\"], dependencies: [{ kind: \"directive\", type: NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], animations: [panelAnimation], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.1.0-next.5\", ngImport: i0, type: MatAutocomplete, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-autocomplete', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, exportAs: 'matAutocomplete', host: {\n                        'class': 'mat-mdc-autocomplete',\n                    }, providers: [{ provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }], animations: [panelAnimation], standalone: true, imports: [NgClass], template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div\\n    class=\\\"mat-mdc-autocomplete-panel mdc-menu-surface mdc-menu-surface--open\\\"\\n    role=\\\"listbox\\\"\\n    [id]=\\\"id\\\"\\n    [ngClass]=\\\"_classList\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n    [@panelAnimation]=\\\"isOpen ? 'visible' : 'hidden'\\\"\\n    (@panelAnimation.done)=\\\"_animationDone.next($event)\\\"\\n    #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\"div.mat-mdc-autocomplete-panel{box-shadow:0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);width:100%;max-height:256px;visibility:hidden;transform-origin:center top;overflow:auto;padding:8px 0;border-radius:4px;box-sizing:border-box;position:static;background-color:var(--mat-autocomplete-background-color)}.cdk-high-contrast-active div.mat-mdc-autocomplete-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-autocomplete-panel-above) div.mat-mdc-autocomplete-panel{border-top-left-radius:0;border-top-right-radius:0}.mat-mdc-autocomplete-panel-above div.mat-mdc-autocomplete-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:center bottom}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-visible{visibility:visible}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-hidden{visibility:hidden}mat-autocomplete{display:none}\"] }]\n        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n                }] }, { type: i1.Platform }], propDecorators: { template: [{\n                type: ViewChild,\n                args: [TemplateRef, { static: true }]\n            }], panel: [{\n                type: ViewChild,\n                args: ['panel']\n            }], options: [{\n                type: ContentChildren,\n                args: [MatOption, { descendants: true }]\n            }], optionGroups: [{\n                type: ContentChildren,\n                args: [MAT_OPTGROUP, { descendants: true }]\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], displayWith: [{\n                type: Input\n            }], autoActiveFirstOption: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], autoSelectActiveOption: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], requireSelection: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], panelWidth: [{\n                type: Input\n            }], disableRipple: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], optionSelected: [{\n                type: Output\n            }], opened: [{\n                type: Output\n            }], closed: [{\n                type: Output\n            }], optionActivated: [{\n                type: Output\n            }], classList: [{\n                type: Input,\n                args: ['class']\n            }], hideSingleSelectionIndicator: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nclass MatAutocompleteOrigin {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.1.0-next.5\", ngImport: i0, type: MatAutocompleteOrigin, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.1.0-next.5\", type: MatAutocompleteOrigin, isStandalone: true, selector: \"[matAutocompleteOrigin]\", exportAs: [\"matAutocompleteOrigin\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.1.0-next.5\", ngImport: i0, type: MatAutocompleteOrigin, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matAutocompleteOrigin]',\n                    exportAs: 'matAutocompleteOrigin',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }] });\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatAutocompleteTrigger),\n    multi: true,\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nfunction getMatAutocompleteMissingPanelError() {\n    return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n        'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n        \"you're attempting to open it after the ngAfterContentInit hook.\");\n}\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy', {\n    providedIn: 'root',\n    factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n    },\n});\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n/** Base class with all of the `MatAutocompleteTrigger` functionality. */\nclass MatAutocompleteTrigger {\n    constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler, _defaults) {\n        this._element = _element;\n        this._overlay = _overlay;\n        this._viewContainerRef = _viewContainerRef;\n        this._zone = _zone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._formField = _formField;\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        this._defaults = _defaults;\n        this._componentDestroyed = false;\n        /** Whether or not the label state is being overridden. */\n        this._manuallyFloatingLabel = false;\n        /** Subscription to viewport size changes. */\n        this._viewportSubscription = Subscription.EMPTY;\n        /**\n         * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n         * closed autocomplete from being reopened if the user switches to another browser tab and then\n         * comes back.\n         */\n        this._canOpenOnNextFocus = true;\n        /** Stream of keyboard events that can close the panel. */\n        this._closeKeyEventStream = new Subject();\n        /**\n         * Event handler for when the window is blurred. Needs to be an\n         * arrow function in order to preserve the context.\n         */\n        this._windowBlurHandler = () => {\n            // If the user blurred the window while the autocomplete is focused, it means that it'll be\n            // refocused when they come back. In this case we want to skip the first focus event, if the\n            // pane was closed, in order to avoid reopening it unintentionally.\n            this._canOpenOnNextFocus =\n                this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n        };\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when autocomplete has been touched` */\n        this._onTouched = () => { };\n        /**\n         * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n         * will render the panel underneath the trigger if there is enough space for it to fit in\n         * the viewport, otherwise the panel will be shown above it. If the position is set to\n         * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n         * whether it fits completely in the viewport.\n         */\n        this.position = 'auto';\n        /**\n         * `autocomplete` attribute to be set on the input element.\n         * @docs-private\n         */\n        this.autocompleteAttribute = 'off';\n        /** Class to apply to the panel when it's above the input. */\n        this._aboveClass = 'mat-mdc-autocomplete-panel-above';\n        this._overlayAttached = false;\n        /** Stream of changes to the selection state of the autocomplete options. */\n        this.optionSelections = defer(() => {\n            const options = this.autocomplete ? this.autocomplete.options : null;\n            if (options) {\n                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n            }\n            // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n            // Return a stream that we'll replace with the real one once everything is in place.\n            return this._zone.onStable.pipe(take(1), switchMap(() => this.optionSelections));\n        });\n        /** Handles keyboard events coming from the overlay panel. */\n        this._handlePanelKeydown = (event) => {\n            // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n            // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n            if ((event.keyCode === ESCAPE && !hasModifierKey(event)) ||\n                (event.keyCode === UP_ARROW && hasModifierKey(event, 'altKey'))) {\n                // If the user had typed something in before we autoselected an option, and they decided\n                // to cancel the selection, restore the input value to the one they had typed in.\n                if (this._pendingAutoselectedOption) {\n                    this._updateNativeInputValue(this._valueBeforeAutoSelection ?? '');\n                    this._pendingAutoselectedOption = null;\n                }\n                this._closeKeyEventStream.next();\n                this._resetActiveItem();\n                // We need to stop propagation, otherwise the event will eventually\n                // reach the input itself and cause the overlay to be reopened.\n                event.stopPropagation();\n                event.preventDefault();\n            }\n        };\n        /**\n         * Track which modal we have modified the `aria-owns` attribute of. When the combobox trigger is\n         * inside an aria-modal, we apply aria-owns to the parent modal with the `id` of the options\n         * panel. Track the modal we have changed so we can undo the changes on destroy.\n         */\n        this._trackedModal = null;\n        this._scrollStrategy = scrollStrategy;\n    }\n    ngAfterViewInit() {\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            this._zone.runOutsideAngular(() => window.addEventListener('blur', this._windowBlurHandler));\n        }\n    }\n    ngOnChanges(changes) {\n        if (changes['position'] && this._positionStrategy) {\n            this._setStrategyPositions(this._positionStrategy);\n            if (this.panelOpen) {\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    ngOnDestroy() {\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this._windowBlurHandler);\n        }\n        this._viewportSubscription.unsubscribe();\n        this._componentDestroyed = true;\n        this._destroyPanel();\n        this._closeKeyEventStream.complete();\n        this._clearFromModal();\n    }\n    /** Whether or not the autocomplete panel is open. */\n    get panelOpen() {\n        return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    /** Opens the autocomplete suggestion panel. */\n    openPanel() {\n        this._attachOverlay();\n        this._floatLabel();\n        // Add aria-owns attribute when the autocomplete becomes visible.\n        if (this._trackedModal) {\n            const panelId = this.autocomplete.id;\n            addAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        }\n    }\n    /** Closes the autocomplete suggestion panel. */\n    closePanel() {\n        this._resetLabel();\n        if (!this._overlayAttached) {\n            return;\n        }\n        if (this.panelOpen) {\n            // Only emit if the panel was visible.\n            // The `NgZone.onStable` always emits outside of the Angular zone,\n            // so all the subscriptions from `_subscribeToClosingActions()` are also outside of the Angular zone.\n            // We should manually run in Angular zone to update UI after panel closing.\n            this._zone.run(() => {\n                this.autocomplete.closed.emit();\n            });\n        }\n        this.autocomplete._isOpen = this._overlayAttached = false;\n        this._pendingAutoselectedOption = null;\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n            this._closingActionsSubscription.unsubscribe();\n        }\n        this._updatePanelState();\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this._componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this._changeDetectorRef.detectChanges();\n        }\n        // Remove aria-owns attribute when the autocomplete is no longer visible.\n        if (this._trackedModal) {\n            const panelId = this.autocomplete.id;\n            removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n    updatePosition() {\n        if (this._overlayAttached) {\n            this._overlayRef.updatePosition();\n        }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n    get panelClosingActions() {\n        return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef\n            ? this._overlayRef.detachments().pipe(filter(() => this._overlayAttached))\n            : of()).pipe(\n        // Normalize the output so we return a consistent type.\n        map(event => (event instanceof MatOptionSelectionChange ? event : null)));\n    }\n    /** The currently active option, coerced to MatOption type. */\n    get activeOption() {\n        if (this.autocomplete && this.autocomplete._keyManager) {\n            return this.autocomplete._keyManager.activeItem;\n        }\n        return null;\n    }\n    /** Stream of clicks outside of the autocomplete panel. */\n    _getOutsideClickStream() {\n        return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'auxclick'), fromEvent(this._document, 'touchend')).pipe(filter(event => {\n            // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n            // fall back to check the first element in the path of the click event.\n            const clickTarget = _getEventTarget(event);\n            const formField = this._formField\n                ? this._formField.getConnectedOverlayOrigin().nativeElement\n                : null;\n            const customOrigin = this.connectedTo ? this.connectedTo.elementRef.nativeElement : null;\n            return (this._overlayAttached &&\n                clickTarget !== this._element.nativeElement &&\n                // Normally focus moves inside `mousedown` so this condition will almost always be\n                // true. Its main purpose is to handle the case where the input is focused from an\n                // outside click which propagates up to the `body` listener within the same sequence\n                // and causes the panel to close immediately (see #3106).\n                this._document.activeElement !== this._element.nativeElement &&\n                (!formField || !formField.contains(clickTarget)) &&\n                (!customOrigin || !customOrigin.contains(clickTarget)) &&\n                !!this._overlayRef &&\n                !this._overlayRef.overlayElement.contains(clickTarget));\n        }));\n    }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        Promise.resolve(null).then(() => this._assignOptionValue(value));\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this._element.nativeElement.disabled = isDisabled;\n    }\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        const hasModifier = hasModifierKey(event);\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE && !hasModifier) {\n            event.preventDefault();\n        }\n        if (this.activeOption && keyCode === ENTER && this.panelOpen && !hasModifier) {\n            this.activeOption._selectViaInteraction();\n            this._resetActiveItem();\n            event.preventDefault();\n        }\n        else if (this.autocomplete) {\n            const prevActiveItem = this.autocomplete._keyManager.activeItem;\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n            if (keyCode === TAB || (isArrowKey && !hasModifier && this.panelOpen)) {\n                this.autocomplete._keyManager.onKeydown(event);\n            }\n            else if (isArrowKey && this._canOpen()) {\n                this.openPanel();\n            }\n            if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n                this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);\n                if (this.autocomplete.autoSelectActiveOption && this.activeOption) {\n                    if (!this._pendingAutoselectedOption) {\n                        this._valueBeforeAutoSelection = this._element.nativeElement.value;\n                    }\n                    this._pendingAutoselectedOption = this.activeOption;\n                    this._assignOptionValue(this.activeOption.value);\n                }\n            }\n        }\n    }\n    _handleInput(event) {\n        let target = event.target;\n        let value = target.value;\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value == '' ? null : parseFloat(value);\n        }\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this._previousValue !== value) {\n            this._previousValue = value;\n            this._pendingAutoselectedOption = null;\n            // If selection is required we don't write to the CVA while the user is typing.\n            // At the end of the selection either the user will have picked something\n            // or we'll reset the value back to null.\n            if (!this.autocomplete || !this.autocomplete.requireSelection) {\n                this._onChange(value);\n            }\n            if (!value) {\n                this._clearPreviousSelectedOption(null, false);\n            }\n            else if (this.panelOpen && !this.autocomplete.requireSelection) {\n                // Note that we don't reset this when `requireSelection` is enabled,\n                // because the option will be reset when the panel is closed.\n                const selectedOption = this.autocomplete.options?.find(option => option.selected);\n                if (selectedOption) {\n                    const display = this.autocomplete.displayWith?.(selectedOption) ?? selectedOption.value;\n                    if (value !== display) {\n                        selectedOption.deselect(false);\n                    }\n                }\n            }\n            if (this._canOpen() && this._document.activeElement === event.target) {\n                this.openPanel();\n            }\n        }\n    }\n    _handleFocus() {\n        if (!this._canOpenOnNextFocus) {\n            this._canOpenOnNextFocus = true;\n        }\n        else if (this._canOpen()) {\n            this._previousValue = this._element.nativeElement.value;\n            this._attachOverlay();\n            this._floatLabel(true);\n        }\n    }\n    _handleClick() {\n        if (this._canOpen() && !this.panelOpen) {\n            this.openPanel();\n        }\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @param shouldAnimate Whether the label should be animated when it is floated.\n     */\n    _floatLabel(shouldAnimate = false) {\n        if (this._formField && this._formField.floatLabel === 'auto') {\n            if (shouldAnimate) {\n                this._formField._animateAndLockLabel();\n            }\n            else {\n                this._formField.floatLabel = 'always';\n            }\n            this._manuallyFloatingLabel = true;\n        }\n    }\n    /** If the label has been manually elevated, return it to its normal state. */\n    _resetLabel() {\n        if (this._manuallyFloatingLabel) {\n            if (this._formField) {\n                this._formField.floatLabel = 'auto';\n            }\n            this._manuallyFloatingLabel = false;\n        }\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    _subscribeToClosingActions() {\n        const firstStable = this._zone.onStable.pipe(take(1));\n        const optionChanges = this.autocomplete.options.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()), \n        // Defer emitting to the stream until the next tick, because changing\n        // bindings in here will cause \"changed after checked\" errors.\n        delay(0));\n        // When the zone is stable initially, and when the option list changes...\n        return (merge(firstStable, optionChanges)\n            .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n            // The `NgZone.onStable` always emits outside of the Angular zone, thus we have to re-enter\n            // the Angular zone. This will lead to change detection being called outside of the Angular\n            // zone and the `autocomplete.opened` will also emit outside of the Angular.\n            this._zone.run(() => {\n                const wasOpen = this.panelOpen;\n                this._resetActiveItem();\n                this._updatePanelState();\n                this._changeDetectorRef.detectChanges();\n                if (this.panelOpen) {\n                    this._overlayRef.updatePosition();\n                }\n                if (wasOpen !== this.panelOpen) {\n                    // If the `panelOpen` state changed, we need to make sure to emit the `opened` or\n                    // `closed` event, because we may not have emitted it. This can happen\n                    // - if the users opens the panel and there are no options, but the\n                    //   options come in slightly later or as a result of the value changing,\n                    // - if the panel is closed after the user entered a string that did not match any\n                    //   of the available options,\n                    // - if a valid string is entered after an invalid one.\n                    if (this.panelOpen) {\n                        this._emitOpened();\n                    }\n                    else {\n                        this.autocomplete.closed.emit();\n                    }\n                }\n            });\n            return this.panelClosingActions;\n        }), \n        // when the first closing event occurs...\n        take(1))\n            // set the value, close the panel, and complete.\n            .subscribe(event => this._setValueAndClose(event)));\n    }\n    /**\n     * Emits the opened event once it's known that the panel will be shown and stores\n     * the state of the trigger right before the opening sequence was finished.\n     */\n    _emitOpened() {\n        this.autocomplete.opened.emit();\n    }\n    /** Destroys the autocomplete suggestion panel. */\n    _destroyPanel() {\n        if (this._overlayRef) {\n            this.closePanel();\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n    }\n    _assignOptionValue(value) {\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith\n            ? this.autocomplete.displayWith(value)\n            : value;\n        if (value == null) {\n            this._clearPreviousSelectedOption(null, false);\n        }\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        this._updateNativeInputValue(toDisplay != null ? toDisplay : '');\n    }\n    _updateNativeInputValue(value) {\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this._formField) {\n            this._formField._control.value = value;\n        }\n        else {\n            this._element.nativeElement.value = value;\n        }\n        this._previousValue = value;\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    _setValueAndClose(event) {\n        const panel = this.autocomplete;\n        const toSelect = event ? event.source : this._pendingAutoselectedOption;\n        if (toSelect) {\n            this._clearPreviousSelectedOption(toSelect);\n            this._assignOptionValue(toSelect.value);\n            // TODO(crisbeto): this should wait until the animation is done, otherwise the value\n            // gets reset while the panel is still animating which looks glitchy. It'll likely break\n            // some tests to change it at this point.\n            this._onChange(toSelect.value);\n            panel._emitSelectEvent(toSelect);\n            this._element.nativeElement.focus();\n        }\n        else if (panel.requireSelection &&\n            this._element.nativeElement.value !== this._valueOnAttach) {\n            this._clearPreviousSelectedOption(null);\n            this._assignOptionValue(null);\n            // Wait for the animation to finish before clearing the form control value, otherwise\n            // the options might change while the animation is running which looks glitchy.\n            if (panel._animationDone) {\n                panel._animationDone.pipe(take(1)).subscribe(() => this._onChange(null));\n            }\n            else {\n                this._onChange(null);\n            }\n        }\n        this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     */\n    _clearPreviousSelectedOption(skip, emitEvent) {\n        // Null checks are necessary here, because the autocomplete\n        // or its options may not have been assigned yet.\n        this.autocomplete?.options?.forEach(option => {\n            if (option !== skip && option.selected) {\n                option.deselect(emitEvent);\n            }\n        });\n    }\n    _attachOverlay() {\n        if (!this.autocomplete && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatAutocompleteMissingPanelError();\n        }\n        let overlayRef = this._overlayRef;\n        if (!overlayRef) {\n            this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef, {\n                id: this._formField?.getLabelId(),\n            });\n            overlayRef = this._overlay.create(this._getOverlayConfig());\n            this._overlayRef = overlayRef;\n            this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n                if (this.panelOpen && overlayRef) {\n                    overlayRef.updateSize({ width: this._getPanelWidth() });\n                }\n            });\n        }\n        else {\n            // Update the trigger, panel width and direction, in case anything has changed.\n            this._positionStrategy.setOrigin(this._getConnectedElement());\n            overlayRef.updateSize({ width: this._getPanelWidth() });\n        }\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this._portal);\n            this._valueOnAttach = this._element.nativeElement.value;\n            this._closingActionsSubscription = this._subscribeToClosingActions();\n        }\n        const wasOpen = this.panelOpen;\n        this.autocomplete._isOpen = this._overlayAttached = true;\n        this.autocomplete._setColor(this._formField?.color);\n        this._updatePanelState();\n        this._applyModalPanelOwnership();\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this._emitOpened();\n        }\n    }\n    /** Updates the panel's visibility state and any trigger state tied to id. */\n    _updatePanelState() {\n        this.autocomplete._setVisibility();\n        // Note that here we subscribe and unsubscribe based on the panel's visiblity state,\n        // because the act of subscribing will prevent events from reaching other overlays and\n        // we don't want to block the events if there are no options.\n        if (this.panelOpen) {\n            const overlayRef = this._overlayRef;\n            if (!this._keydownSubscription) {\n                // Use the `keydownEvents` in order to take advantage of\n                // the overlay event targeting provided by the CDK overlay.\n                this._keydownSubscription = overlayRef.keydownEvents().subscribe(this._handlePanelKeydown);\n            }\n            if (!this._outsideClickSubscription) {\n                // Subscribe to the pointer events stream so that it doesn't get picked up by other overlays.\n                // TODO(crisbeto): we should switch `_getOutsideClickStream` eventually to use this stream,\n                // but the behvior isn't exactly the same and it ends up breaking some internal tests.\n                this._outsideClickSubscription = overlayRef.outsidePointerEvents().subscribe();\n            }\n        }\n        else {\n            this._keydownSubscription?.unsubscribe();\n            this._outsideClickSubscription?.unsubscribe();\n            this._keydownSubscription = this._outsideClickSubscription = null;\n        }\n    }\n    _getOverlayConfig() {\n        return new OverlayConfig({\n            positionStrategy: this._getOverlayPosition(),\n            scrollStrategy: this._scrollStrategy(),\n            width: this._getPanelWidth(),\n            direction: this._dir ?? undefined,\n            panelClass: this._defaults?.overlayPanelClass,\n        });\n    }\n    _getOverlayPosition() {\n        const strategy = this._overlay\n            .position()\n            .flexibleConnectedTo(this._getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false);\n        this._setStrategyPositions(strategy);\n        this._positionStrategy = strategy;\n        return strategy;\n    }\n    /** Sets the positions on a position strategy based on the directive's input state. */\n    _setStrategyPositions(positionStrategy) {\n        // Note that we provide horizontal fallback positions, even though by default the dropdown\n        // width matches the input, because consumers can override the width. See #18854.\n        const belowPositions = [\n            { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n            { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' },\n        ];\n        // The overlay edge connected to the trigger should have squared corners, while\n        // the opposite end has rounded corners. We apply a CSS class to swap the\n        // border-radius based on the overlay position.\n        const panelClass = this._aboveClass;\n        const abovePositions = [\n            { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom', panelClass },\n            { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom', panelClass },\n        ];\n        let positions;\n        if (this.position === 'above') {\n            positions = abovePositions;\n        }\n        else if (this.position === 'below') {\n            positions = belowPositions;\n        }\n        else {\n            positions = [...belowPositions, ...abovePositions];\n        }\n        positionStrategy.withPositions(positions);\n    }\n    _getConnectedElement() {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n    _getPanelWidth() {\n        return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /** Returns the width of the input element, so the panel width can match it. */\n    _getHostWidth() {\n        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Reset the active item to -1. This is so that pressing arrow keys will activate the correct\n     * option.\n     *\n     * If the consumer opted-in to automatically activatating the first option, activate the first\n     * *enabled* option.\n     */\n    _resetActiveItem() {\n        const autocomplete = this.autocomplete;\n        if (autocomplete.autoActiveFirstOption) {\n            // Find the index of the first *enabled* option. Avoid calling `_keyManager.setActiveItem`\n            // because it activates the first option that passes the skip predicate, rather than the\n            // first *enabled* option.\n            let firstEnabledOptionIndex = -1;\n            for (let index = 0; index < autocomplete.options.length; index++) {\n                const option = autocomplete.options.get(index);\n                if (!option.disabled) {\n                    firstEnabledOptionIndex = index;\n                    break;\n                }\n            }\n            autocomplete._keyManager.setActiveItem(firstEnabledOptionIndex);\n        }\n        else {\n            autocomplete._keyManager.setActiveItem(-1);\n        }\n    }\n    /** Determines whether the panel can be opened. */\n    _canOpen() {\n        const element = this._element.nativeElement;\n        return !element.readOnly && !element.disabled && !this.autocompleteDisabled;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document?.defaultView || window;\n    }\n    /** Scrolls to a particular option in the list. */\n    _scrollToOption(index) {\n        // Given that we are not actually focusing active options, we must manually adjust scroll\n        // to reveal options below the fold. First, we find the offset of the option from the top\n        // of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n        // the panel height + the option height, so the active option will be just visible at the\n        // bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n        // will become the offset. If that offset is visible within the panel already, the scrollTop is\n        // not adjusted.\n        const autocomplete = this.autocomplete;\n        const labelCount = _countGroupLabelsBeforeOption(index, autocomplete.options, autocomplete.optionGroups);\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            autocomplete._setScrollTop(0);\n        }\n        else if (autocomplete.panel) {\n            const option = autocomplete.options.toArray()[index];\n            if (option) {\n                const element = option._getHostElement();\n                const newScrollPosition = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, autocomplete._getScrollTop(), autocomplete.panel.nativeElement.offsetHeight);\n                autocomplete._setScrollTop(newScrollPosition);\n            }\n        }\n    }\n    /**\n     * If the autocomplete trigger is inside of an `aria-modal` element, connect\n     * that modal to the options panel with `aria-owns`.\n     *\n     * For some browser + screen reader combinations, when navigation is inside\n     * of an `aria-modal` element, the screen reader treats everything outside\n     * of that modal as hidden or invisible.\n     *\n     * This causes a problem when the combobox trigger is _inside_ of a modal, because the\n     * options panel is rendered _outside_ of that modal, preventing screen reader navigation\n     * from reaching the panel.\n     *\n     * We can work around this issue by applying `aria-owns` to the modal with the `id` of\n     * the options panel. This effectively communicates to assistive technology that the\n     * options panel is part of the same interaction as the modal.\n     *\n     * At time of this writing, this issue is present in VoiceOver.\n     * See https://github.com/angular/components/issues/20694\n     */\n    _applyModalPanelOwnership() {\n        // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with\n        // the `LiveAnnouncer` and any other usages.\n        //\n        // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n        // section of the DOM we need to look through. This should cover all the cases we support, but\n        // the selector can be expanded if it turns out to be too narrow.\n        const modal = this._element.nativeElement.closest('body > .cdk-overlay-container [aria-modal=\"true\"]');\n        if (!modal) {\n            // Most commonly, the autocomplete trigger is not inside a modal.\n            return;\n        }\n        const panelId = this.autocomplete.id;\n        if (this._trackedModal) {\n            removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        }\n        addAriaReferencedId(modal, 'aria-owns', panelId);\n        this._trackedModal = modal;\n    }\n    /** Clears the references to the listbox overlay element from the modal it was added to. */\n    _clearFromModal() {\n        if (this._trackedModal) {\n            const panelId = this.autocomplete.id;\n            removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n            this._trackedModal = null;\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.1.0-next.5\", ngImport: i0, type: MatAutocompleteTrigger, deps: [{ token: i0.ElementRef }, { token: i1$1.Overlay }, { token: i0.ViewContainerRef }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }, { token: MAT_AUTOCOMPLETE_SCROLL_STRATEGY }, { token: i2.Directionality, optional: true }, { token: MAT_FORM_FIELD, host: true, optional: true }, { token: DOCUMENT, optional: true }, { token: i3.ViewportRuler }, { token: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.1.0-next.5\", type: MatAutocompleteTrigger, isStandalone: true, selector: \"input[matAutocomplete], textarea[matAutocomplete]\", inputs: { autocomplete: [\"matAutocomplete\", \"autocomplete\"], position: [\"matAutocompletePosition\", \"position\"], connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"], autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"], autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\", booleanAttribute] }, host: { listeners: { \"focusin\": \"_handleFocus()\", \"blur\": \"_onTouched()\", \"input\": \"_handleInput($event)\", \"keydown\": \"_handleKeydown($event)\", \"click\": \"_handleClick()\" }, properties: { \"attr.autocomplete\": \"autocompleteAttribute\", \"attr.role\": \"autocompleteDisabled ? null : \\\"combobox\\\"\", \"attr.aria-autocomplete\": \"autocompleteDisabled ? null : \\\"list\\\"\", \"attr.aria-activedescendant\": \"(panelOpen && activeOption) ? activeOption.id : null\", \"attr.aria-expanded\": \"autocompleteDisabled ? null : panelOpen.toString()\", \"attr.aria-controls\": \"(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id\", \"attr.aria-haspopup\": \"autocompleteDisabled ? null : \\\"listbox\\\"\" }, classAttribute: \"mat-mdc-autocomplete-trigger\" }, providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR], exportAs: [\"matAutocompleteTrigger\"], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.1.0-next.5\", ngImport: i0, type: MatAutocompleteTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n                    host: {\n                        'class': 'mat-mdc-autocomplete-trigger',\n                        '[attr.autocomplete]': 'autocompleteAttribute',\n                        '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n                        '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n                        '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n                        '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n                        '[attr.aria-controls]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n                        '[attr.aria-haspopup]': 'autocompleteDisabled ? null : \"listbox\"',\n                        // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n                        // a little earlier. This avoids issues where IE delays the focusing of the input.\n                        '(focusin)': '_handleFocus()',\n                        '(blur)': '_onTouched()',\n                        '(input)': '_handleInput($event)',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(click)': '_handleClick()',\n                    },\n                    exportAs: 'matAutocompleteTrigger',\n                    providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR],\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1$1.Overlay }, { type: i0.ViewContainerRef }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n                }] }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: i4.MatFormField, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_FORM_FIELD]\n                }, {\n                    type: Host\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i3.ViewportRuler }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n                }] }], propDecorators: { autocomplete: [{\n                type: Input,\n                args: ['matAutocomplete']\n            }], position: [{\n                type: Input,\n                args: ['matAutocompletePosition']\n            }], connectedTo: [{\n                type: Input,\n                args: ['matAutocompleteConnectedTo']\n            }], autocompleteAttribute: [{\n                type: Input,\n                args: ['autocomplete']\n            }], autocompleteDisabled: [{\n                type: Input,\n                args: [{ alias: 'matAutocompleteDisabled', transform: booleanAttribute }]\n            }] } });\n\nclass MatAutocompleteModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.1.0-next.5\", ngImport: i0, type: MatAutocompleteModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.1.0-next.5\", ngImport: i0, type: MatAutocompleteModule, imports: [OverlayModule,\n            MatOptionModule,\n            MatCommonModule,\n            CommonModule,\n            MatAutocomplete,\n            MatAutocompleteTrigger,\n            MatAutocompleteOrigin], exports: [CdkScrollableModule,\n            MatAutocomplete,\n            MatOptionModule,\n            MatCommonModule,\n            MatAutocompleteTrigger,\n            MatAutocompleteOrigin] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.1.0-next.5\", ngImport: i0, type: MatAutocompleteModule, providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [OverlayModule,\n            MatOptionModule,\n            MatCommonModule,\n            CommonModule, CdkScrollableModule,\n            MatOptionModule,\n            MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.1.0-next.5\", ngImport: i0, type: MatAutocompleteModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        OverlayModule,\n                        MatOptionModule,\n                        MatCommonModule,\n                        CommonModule,\n                        MatAutocomplete,\n                        MatAutocompleteTrigger,\n                        MatAutocompleteOrigin,\n                    ],\n                    exports: [\n                        CdkScrollableModule,\n                        MatAutocomplete,\n                        MatOptionModule,\n                        MatCommonModule,\n                        MatAutocompleteTrigger,\n                        MatAutocompleteOrigin,\n                    ],\n                    providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, getMatAutocompleteMissingPanelError };\n"],"names":["i0","InjectionToken","EventEmitter","booleanAttribute","TemplateRef","Component","ViewEncapsulation","ChangeDetectionStrategy","Inject","ViewChild","ContentChildren","Input","Output","Directive","forwardRef","inject","Optional","Host","NgModule","MAT_OPTION_PARENT_COMPONENT","MatOption","MAT_OPTGROUP","MatOptionSelectionChange","_countGroupLabelsBeforeOption","_getOptionScrollPosition","MatOptionModule","MatCommonModule","MatOptgroup","NgClass","DOCUMENT","CommonModule","i3","CdkScrollableModule","i1$1","Overlay","OverlayConfig","OverlayModule","ActiveDescendantKeyManager","addAriaReferencedId","removeAriaReferencedId","coerceStringArray","i1","_getEventTarget","trigger","state","style","transition","group","animate","Subscription","Subject","defer","merge","of","fromEvent","ESCAPE","hasModifierKey","UP_ARROW","ENTER","DOWN_ARROW","TAB","TemplatePortal","NG_VALUE_ACCESSOR","i4","MAT_FORM_FIELD","startWith","switchMap","take","filter","map","tap","delay","i2","_c0","MatAutocomplete_ng_template_0_Template","rf","ctx","_r4","ɵɵgetCurrentView","ɵɵelementStart","ɵɵlistener","MatAutocomplete_ng_template_0_Template_div_animation_panelAnimation_done_0_listener","$event","ɵɵrestoreView","ctx_r3","ɵɵnextContext","ɵɵresetView","_animationDone","next","ɵɵprojection","ɵɵelementEnd","formFieldId_r1","id","ctx_r0","ɵɵproperty","_classList","isOpen","ɵɵattribute","ariaLabel","_getPanelAriaLabelledby","_c1","panelAnimation","opacity","transform","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","constructor","source","option","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","providedIn","factory","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","autoActiveFirstOption","autoSelectActiveOption","hideSingleSelectionIndicator","requireSelection","MatAutocomplete","_isOpen","showPanel","_setColor","value","_color","_setThemeClasses","classList","length","reduce","className","_setVisibilityClasses","_elementRef","nativeElement","_hideSingleSelectionIndicator","_syncParentProperties","options","_changeDetectorRef","markForCheck","_defaults","platform","_activeOptionChanges","EMPTY","_visibleClass","_hiddenClass","displayWith","optionSelected","opened","closed","optionActivated","inertGroups","SAFARI","ngAfterContentInit","_keyManager","withWrap","skipPredicate","_skipPredicate","change","subscribe","index","emit","toArray","_setVisibility","ngOnDestroy","destroy","unsubscribe","complete","_setScrollTop","scrollTop","panel","_getScrollTop","_emitSelectEvent","event","labelId","labelExpression","ariaLabelledby","_","ɵfac","MatAutocomplete_Factory","t","ɵɵdirectiveInject","ChangeDetectorRef","ElementRef","Platform","_2","ɵcmp","ɵɵdefineComponent","type","selectors","contentQueries","MatAutocomplete_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","optionGroups","viewQuery","MatAutocomplete_Query","ɵɵviewQuery","template","first","hostAttrs","inputs","ɵɵInputFlags","None","HasDecoratorInputTransform","panelWidth","disableRipple","outputs","exportAs","standalone","features","ɵɵProvidersFeature","provide","useExisting","ɵɵInputTransformsFeature","ɵɵStandaloneFeature","ngContentSelectors","decls","vars","consts","MatAutocomplete_Template","ɵɵprojectionDef","ɵɵtemplate","dependencies","styles","encapsulation","data","animation","changeDetection","ngDevMode","ɵsetClassMetadata","args","selector","OnPush","host","providers","animations","imports","undefined","decorators","static","descendants","MatAutocompleteOrigin","elementRef","MatAutocompleteOrigin_Factory","ɵdir","ɵɵdefineDirective","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","multi","getMatAutocompleteMissingPanelError","Error","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","overlay","scrollStrategies","reposition","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","_element","_overlay","_viewContainerRef","_zone","scrollStrategy","_dir","_formField","_document","_viewportRuler","_componentDestroyed","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","activeElement","panelOpen","_onChange","_onTouched","position","autocompleteAttribute","_aboveClass","_overlayAttached","optionSelections","autocomplete","changes","pipe","onSelectionChange","onStable","_handlePanelKeydown","keyCode","_pendingAutoselectedOption","_updateNativeInputValue","_valueBeforeAutoSelection","_resetActiveItem","stopPropagation","preventDefault","_trackedModal","_scrollStrategy","ngAfterViewInit","window","_getWindow","runOutsideAngular","addEventListener","ngOnChanges","_positionStrategy","_setStrategyPositions","_overlayRef","updatePosition","removeEventListener","_destroyPanel","_clearFromModal","openPanel","_attachOverlay","_floatLabel","panelId","closePanel","_resetLabel","run","hasAttached","detach","_closingActionsSubscription","_updatePanelState","detectChanges","panelClosingActions","tabOut","_getOutsideClickStream","detachments","activeOption","activeItem","clickTarget","formField","getConnectedOverlayOrigin","customOrigin","connectedTo","contains","overlayElement","writeValue","Promise","resolve","then","_assignOptionValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","_handleKeydown","hasModifier","_selectViaInteraction","prevActiveItem","isArrowKey","onKeydown","_canOpen","_scrollToOption","activeItemIndex","_handleInput","target","parseFloat","_previousValue","_clearPreviousSelectedOption","selectedOption","find","selected","display","deselect","_handleFocus","_handleClick","shouldAnimate","floatLabel","_animateAndLockLabel","_subscribeToClosingActions","firstStable","optionChanges","reapplyLastPosition","wasOpen","_emitOpened","_setValueAndClose","dispose","toDisplay","_control","toSelect","focus","_valueOnAttach","skip","emitEvent","forEach","overlayRef","_portal","getLabelId","create","_getOverlayConfig","updateSize","width","_getPanelWidth","setOrigin","_getConnectedElement","attach","color","_applyModalPanelOwnership","_keydownSubscription","keydownEvents","_outsideClickSubscription","outsidePointerEvents","positionStrategy","_getOverlayPosition","direction","panelClass","overlayPanelClass","strategy","flexibleConnectedTo","withFlexibleDimensions","withPush","belowPositions","originX","originY","overlayX","overlayY","abovePositions","positions","withPositions","_getHostWidth","getBoundingClientRect","firstEnabledOptionIndex","get","setActiveItem","element","readOnly","autocompleteDisabled","defaultView","labelCount","_getHostElement","newScrollPosition","offsetTop","offsetHeight","modal","closest","MatAutocompleteTrigger_Factory","ViewContainerRef","NgZone","Directionality","ViewportRuler","hostVars","hostBindings","MatAutocompleteTrigger_HostBindings","MatAutocompleteTrigger_focusin_HostBindingHandler","MatAutocompleteTrigger_blur_HostBindingHandler","MatAutocompleteTrigger_input_HostBindingHandler","MatAutocompleteTrigger_keydown_HostBindingHandler","MatAutocompleteTrigger_click_HostBindingHandler","toString","ɵɵNgOnChangesFeature","MatFormField","alias","MatAutocompleteModule","MatAutocompleteModule_Factory","ɵmod","ɵɵdefineNgModule","_3","ɵinj","ɵɵdefineInjector","exports"],"sourceRoot":"webpack:///","x_google_ignoreList":[0]}