{"version":3,"file":"libs_base-customerzone_dashboard_feat-mybase-dashboard-dtv_src_index_ts.js","mappings":"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","sources":["./libs/base-customerzone/dashboard/feat-mybase-dashboard-dtv/src/index.ts","./libs/base-customerzone/dashboard/feat-mybase-dashboard-dtv/src/lib/mybase-dashboard-dtv.component.ts","./libs/base-customerzone/dashboard/feat-mybase-dashboard-dtv/src/lib/mybase-dashboard-dtv.component.html"],"sourcesContent":["export * from './lib/mybase-dashboard-dtv.component';\n","import { CommonModule } from '@angular/common';\nimport { Component, Input, inject } from '@angular/core';\nimport {\n  MyBaseDashboardDatalayer,\n  MyBaseDashboardDatalayerFacade,\n  MyBaseDashboardFacade,\n  MyBaseDashoardNgrxModule,\n  NavigationCardType,\n  ServiceType,\n} from '@mybase-dashboard/data-access';\nimport {\n  MyBaseDashboardErrorComponent,\n  MyBaseNavigationCardsComponent,\n  MyBaseServicesCardsComponent,\n} from '@mybase-dashboard/ui';\nimport { LoginModule } from '@telenet/ng-lib-ocapi';\nimport { Observable, map } from 'rxjs';\n\n@Component({\n  selector: 'tg-mybase-dashboard-dtv',\n  standalone: true,\n  imports: [\n    MyBaseDashoardNgrxModule,\n    CommonModule,\n    LoginModule,\n    MyBaseDashboardErrorComponent,\n    MyBaseNavigationCardsComponent,\n    MyBaseServicesCardsComponent,\n  ],\n  styleUrl: './mybase-dashboard-dtv.component.scss',\n  templateUrl: './mybase-dashboard-dtv.component.html',\n})\nexport class MyBaseDashboardDtvComponent {\n  @Input()\n  manageContentPacksUrl!: string;\n\n  @Input()\n  watchTvOnlineUrl!: string;\n\n  @Input()\n  productOverviewUrl!: string;\n\n  @Input()\n  manageYourDeviceUrl!: string;\n\n  @Input()\n  addTvBoxUrl!: string;\n\n  @Input()\n  returnDeviceUrl!: string;\n\n  scopes = ['customeraccount']; // TBD\n  private readonly facade: MyBaseDashboardFacade = inject(MyBaseDashboardFacade);\n  private readonly datalayerFacade: MyBaseDashboardDatalayerFacade = inject(MyBaseDashboardDatalayerFacade);\n\n  dtvLines$ = this.facade.dtvLines$;\n  myBaseDashboardDtvError$ = this.facade.myBaseDashboardDtvError$;\n  myBaseDashboardDtvLoading$ = this.facade.myBaseDashboardDtvLoading$;\n  myBaseDashboardDtvIdentifier$ = this.facade.myBaseDashboardDtvIdentifier$;\n  myBaseDashboardDtvSimpleCards$ = this.facade.myBaseDashboardDtvSimpleCards$.pipe(\n    map((cards) => {\n      const navCards = cards as NavigationCardType[];\n      return navCards.filter((card) => this.navigationCardTypes.includes(card));\n    })\n  ) as Observable<NavigationCardType[]>;\n  myBaseDashboardDtvServices$ = this.facade.myBaseDashboardDtvServices$.pipe(\n    map((cards) => {\n      const serviceCards = cards as ServiceType[];\n      return serviceCards.filter((card) => this.serviceTypes.includes(card));\n    })\n  ) as Observable<ServiceType[]>;\n\n  // Sorted array, determines the order of the cards\n  private readonly navigationCardTypes = [\n    NavigationCardType.PRODUCT_OVERVIEW,\n    NavigationCardType.MANAGE_YOUR_DEVICE,\n    NavigationCardType.WATCH_TV_ONLINE,\n    NavigationCardType.MANAGE_CONTENT_PACKS,\n    NavigationCardType.ADD_TV_BOX,\n  ];\n\n  private readonly serviceTypes = [ServiceType.RETURN_DEVICE];\n\n  initAfterLoggedIn() {\n    this.facade.loadDtvLines();\n  }\n\n  sendAnalyticsData(event: MyBaseDashboardDatalayer) {\n    this.datalayerFacade.sendDatalayerEvent(event);\n  }\n}\n","<tg-login [scopes]=\"scopes\" (componentCanRender)=\"initAfterLoggedIn()\">\n  <div class=\"mybase-dashboard-dtv\">\n    @if (myBaseDashboardDtvError$ | async) {\n      <div class=\"row\">\n        <div class=\"col-12 mt--l--md\">\n          <tg-mybase-dashboard-error [error]=\"(myBaseDashboardDtvError$ | async)!\"></tg-mybase-dashboard-error>\n        </div>\n      </div>\n    } @else {\n      <div class=\"row\">\n        @if (myBaseDashboardDtvLoading$ | async) {\n          <div class=\"col-12 col-md-6 col-lg-4 mb--l\">\n            <div class=\"height--full skeleton skeleton--basic skeleton--container navigation--card p--m\"></div>\n          </div>\n        }\n        @if ((myBaseDashboardDtvSimpleCards$ | async) && (myBaseDashboardDtvLoading$ | async) === false) {\n          <div class=\"col-12\">\n            <tg-mybase-navigation-cards\n              [manageContentPacksUrl]=\"manageContentPacksUrl\"\n              [watchTvOnlineUrl]=\"watchTvOnlineUrl\"\n              [manageYourDeviceUrl]=\"manageYourDeviceUrl\"\n              [productOverviewUrl]=\"productOverviewUrl\"\n              [addTvBoxUrl]=\"addTvBoxUrl\"\n              [type]=\"'dtv'\"\n              [customClassGrid]=\"'col-lg-4'\"\n              [productIdentifier]=\"(myBaseDashboardDtvIdentifier$ | async)!\"\n              [data]=\"(myBaseDashboardDtvSimpleCards$ | async)!\"\n              (analyticsData)=\"sendAnalyticsData($event)\"></tg-mybase-navigation-cards>\n          </div>\n        }\n      </div>\n      <div>\n        @if (myBaseDashboardDtvLoading$ | async) {\n          <div class=\"row\">\n            <div class=\"col-12 mb--l\">\n              <div class=\"skeleton skeleton--basic skeleton--container skeleton--title p--m\"></div>\n            </div>\n            <div class=\"col-12 mb--l col-lg-4\">\n              <div class=\"skeleton skeleton--basic skeleton--container service--card p--m\"></div>\n            </div>\n            <div class=\"col-12 mb--l col-lg-4\">\n              <div class=\"skeleton skeleton--basic skeleton--container service--card p--m\"></div>\n            </div>\n          </div>\n        }\n        <div>\n          <tg-mybase-services-cards\n            [returnDeviceUrl]=\"returnDeviceUrl\"\n            [type]=\"'dtv'\"\n            [data]=\"(myBaseDashboardDtvServices$ | async)!\"\n            (analyticsData)=\"sendAnalyticsData($event)\">\n          </tg-mybase-services-cards>\n        </div>\n      </div>\n    }\n  </div>\n</tg-login>\n"],"names":["CommonModule","inject","MyBaseDashboardDatalayerFacade","MyBaseDashboardFacade","MyBaseDashoardNgrxModule","NavigationCardType","ServiceType","MyBaseDashboardErrorComponent","MyBaseNavigationCardsComponent","MyBaseServicesCardsComponent","LoginModule","map","i0","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵadvance","ɵɵproperty","ɵɵpipeBind1","ctx_r0","myBaseDashboardDtvError$","ɵɵlistener","MyBaseDashboardDtvComponent_Conditional_4_Conditional_3_Template_tg_mybase_navigation_cards_analyticsData_1_listener","$event","ɵɵrestoreView","_r6","ctx_r5","ɵɵnextContext","ɵɵresetView","sendAnalyticsData","ctx_r3","manageContentPacksUrl","watchTvOnlineUrl","manageYourDeviceUrl","productOverviewUrl","addTvBoxUrl","myBaseDashboardDtvIdentifier$","myBaseDashboardDtvSimpleCards$","ɵɵtemplate","MyBaseDashboardDtvComponent_Conditional_4_Conditional_1_Template","MyBaseDashboardDtvComponent_Conditional_4_Conditional_3_Template","MyBaseDashboardDtvComponent_Conditional_4_Conditional_7_Template","MyBaseDashboardDtvComponent_Conditional_4_Template_tg_mybase_services_cards_analyticsData_10_listener","_r8","ctx_r7","ɵɵconditional","ctx_r1","myBaseDashboardDtvLoading$","returnDeviceUrl","myBaseDashboardDtvServices$","MyBaseDashboardDtvComponent","scopes","facade","datalayerFacade","dtvLines$","pipe","cards","navCards","filter","card","navigationCardTypes","includes","serviceCards","serviceTypes","PRODUCT_OVERVIEW","MANAGE_YOUR_DEVICE","WATCH_TV_ONLINE","MANAGE_CONTENT_PACKS","ADD_TV_BOX","RETURN_DEVICE","initAfterLoggedIn","loadDtvLines","event","sendDatalayerEvent","selectors","inputs","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","MyBaseDashboardDtvComponent_Template","rf","ctx","MyBaseDashboardDtvComponent_Template_tg_login_componentCanRender_0_listener","MyBaseDashboardDtvComponent_Conditional_2_Template","MyBaseDashboardDtvComponent_Conditional_4_Template","i1","AsyncPipe","i2","LoginComponent","styles"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}