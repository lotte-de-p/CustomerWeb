{"version":3,"file":"telenet-ng-lib-message.mjs","sources":["../../src/lib/model/message-type.enum.ts","../../src/lib/message.service.ts","../../src/lib/message/message.component.html","../../src/lib/message/message.component.ts","../../src/lib/message/message-flow.component.html","../../src/lib/message/message-flow.component.ts","../../src/lib/messages.module.ts","../../src/lib/model/abstract-message.model.ts","../../src/lib/model/error-flow-message.model.ts","../../src/lib/model/error-message.model.ts","../../src/lib/model/info-flow-message.model.ts","../../src/lib/model/success-flow-message.model.ts","../../src/lib/model/success-message.model.ts","../../src/lib/model/warning-flow-message.model.ts","../../src/lib/model/warning-message.model.ts","../../src/index.ts","../../src/telenet-ng-lib-message.ts"],"sourcesContent":["export enum MessageType {\n  ERROR = 'errorfield',\n  WARNING = 'warning',\n  INFORMATION_WARNING = 'information warning',\n  SUCCESS = 'success',\n  INFO = 'info',\n  ICON_ERROR = 'error-shape',\n  ICON_WARNING = 'alert-shape',\n  ICON_INFO = 'information-shape',\n  ICON_SUCCESS = 'check-shape',\n}\n","import { Injectable } from '@angular/core';\nimport { MessageType } from './model/message-type.enum';\nimport { AbstractMessage } from './model/abstract-message.model';\nimport { Messages } from './model/messages.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MessageService {\n  private messages: Messages = {};\n\n  addMessage(message: AbstractMessage): void {\n    if (!this.messages[message.messageGroupName]) {\n      this.messages[message.messageGroupName] = {\n        [message.type]: [],\n      };\n    }\n    if (!this.messages[message.messageGroupName][message.type]) {\n      this.messages[message.messageGroupName][message.type] = [];\n    }\n    this.messages[message.messageGroupName][message.type].push(message);\n  }\n\n  getErrorMessages(messageGroupName: string): AbstractMessage[] {\n    return this.getMessagesByType(messageGroupName, MessageType.ERROR);\n  }\n\n  getMessagesByGroupName(messageGroupName: string): AbstractMessage[] {\n    const messages: AbstractMessage[] = [];\n    if (this.hasMessagesOfType(messageGroupName, MessageType.ERROR)) {\n      messages.push(this.getMessagesByType(messageGroupName, MessageType.ERROR)[0]);\n    }\n    if (this.hasMessagesOfType(messageGroupName, MessageType.WARNING)) {\n      messages.push(this.getMessagesByType(messageGroupName, MessageType.WARNING)[0]);\n    }\n    if (this.hasMessagesOfType(messageGroupName, MessageType.SUCCESS)) {\n      messages.push(this.getMessagesByType(messageGroupName, MessageType.SUCCESS)[0]);\n    }\n    if (this.hasMessagesOfType(messageGroupName, MessageType.INFO)) {\n      messages.push(this.getMessagesByType(messageGroupName, MessageType.INFO)[0]);\n    }\n    return messages;\n  }\n\n  getMessagesByType(messageGroupName: string, type: MessageType): AbstractMessage[] {\n    const messagesByGroupName = this.messages[messageGroupName];\n\n    if (!messagesByGroupName) {\n      return [];\n    }\n\n    return messagesByGroupName[type];\n  }\n\n  clearErrorMessages(messageGroupName: string) {\n    return this.clearMessagesByType(messageGroupName, MessageType.ERROR);\n  }\n\n  clearMessagesByType(messageGroupName: string, type: MessageType) {\n    if (!this.messages[messageGroupName]) {\n      return;\n    }\n    this.messages[messageGroupName] = {\n      [type]: [],\n    };\n  }\n\n  hasErrorMessages(messageGroupName: string): boolean {\n    return this.hasMessagesOfType(messageGroupName, MessageType.ERROR);\n  }\n\n  hasMessagesOfType(messageGroupName: string, type: MessageType): boolean {\n    return this.getMessagesByType(messageGroupName, type)?.filter((m) => m.type === type).length > 0;\n  }\n\n  clearMessages(messageGroupName: string) {\n    if (!this.messages[messageGroupName]) {\n      return;\n    }\n    this.messages[messageGroupName] = {};\n  }\n\n  getRegisteredGroupNames(): string[] {\n    return Object.keys(this.messages);\n  }\n}\n","<ng-container *ngIf=\"getMessages().length > 0; else noErrorTemplate\">\n  <div *ngFor=\"let message of getMessages()\" class=\"notification notification--{{ message.type }}\">\n    <span class=\"icon icon-{{ message.subtype }} {{ message.type }}\" [innerHTML]=\"getTranslatedLabel(message)\"></span>\n  </div>\n</ng-container>\n<ng-template #noErrorTemplate>\n  <ng-content></ng-content>\n</ng-template>\n","import { Component, Input } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { MessageService } from '../message.service';\nimport { AbstractMessage } from '../model';\nimport { DomService } from '@telenet/ng-lib-shared';\n\n@Component({\n  selector: 'app-message',\n  templateUrl: './message.component.html',\n})\nexport class MessageComponent {\n  @Input() messageGroupName = '';\n  private scrollCheck = false;\n\n  constructor(\n    private readonly messageService: MessageService,\n    private readonly translateService: TranslateService,\n    private readonly domService: DomService\n  ) {}\n\n  getMessages(): AbstractMessage[] {\n    const messages = this.messageService.getMessagesByGroupName(this.messageGroupName);\n    if (messages.length > 0) {\n      this.scrollToTop();\n      return [messages[0]];\n    } else {\n      this.scrollCheck = false;\n      return [];\n    }\n  }\n\n  getTranslatedLabel(message: AbstractMessage): string {\n    const translatedLabel = this.translateService.instant(message.getMessageLabel(), message.interpolateParams);\n    if (translatedLabel === '' || translatedLabel === message.getMessageLabel()) {\n      return this.translateService.instant('ng.' + message.getMessageSuffix(), message.interpolateParams);\n    }\n    return translatedLabel;\n  }\n\n  private scrollToTop(): void {\n    if (!this.scrollCheck) {\n      this.domService.scrollToTop();\n      this.scrollCheck = true;\n    }\n  }\n}\n","<ng-container *ngIf=\"getMessages().length > 0; else noErrorTemplate\">\n  <div\n    [attr.data-cy]=\"'app-message-flow'\"\n    *ngFor=\"let message of getMessages()\"\n    class=\"notification notification--{{ message.type }} notification--{{ message.type }}--flow\">\n    <span class=\"icon-{{ message.subtype }}\"></span>\n    <div [innerHTML]=\"getTranslatedLabel(message)\"></div>\n  </div>\n</ng-container>\n<ng-template #noErrorTemplate>\n  <ng-content></ng-content>\n</ng-template>\n","import { Component } from '@angular/core';\nimport { MessageComponent } from './message.component';\n\n@Component({\n  selector: 'app-message-flow',\n  templateUrl: './message-flow.component.html',\n})\nexport class MessageFlowComponent extends MessageComponent {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\nimport { MessageComponent } from './message/message.component';\nimport { MessageFlowComponent } from './message/message-flow.component';\n\n@NgModule({\n  imports: [CommonModule, TranslateModule],\n  declarations: [MessageComponent, MessageFlowComponent],\n  exports: [MessageComponent, MessageFlowComponent],\n  providers: [TranslateService],\n})\nexport class MessagesModule {}\n","import { MessageType } from './message-type.enum';\n\nexport abstract class AbstractMessage {\n  private readonly _messageGroupName: string;\n  private readonly _key: string;\n  private readonly _type: MessageType;\n  private readonly _subtype?: MessageType;\n  private readonly _interpolateParams?: Record<string, unknown>;\n\n  protected constructor(\n    type: MessageType,\n    messageGroupName: string,\n    key: string,\n    subtype?: MessageType,\n    interpolateParams?: Record<string, unknown>\n  ) {\n    this._messageGroupName = messageGroupName;\n    this._key = key;\n    this._type = type;\n    this._subtype = subtype;\n    this._interpolateParams = interpolateParams;\n  }\n\n  get messageGroupName(): string {\n    return this._messageGroupName;\n  }\n\n  get key(): string {\n    return this._key;\n  }\n\n  get type(): MessageType {\n    return this._type;\n  }\n\n  get subtype(): MessageType | undefined {\n    return this._subtype;\n  }\n\n  get interpolateParams(): Record<string, unknown> | undefined {\n    return this._interpolateParams;\n  }\n\n  getMessageLabel(): string {\n    return 'ng.' + this.messageGroupName + '.' + this.getMessageSuffix();\n  }\n\n  getMessageSuffix(): string {\n    return this.key + '-' + this.type;\n  }\n}\n","import { AbstractMessage } from './abstract-message.model';\nimport { MessageType } from './message-type.enum';\n\nexport class ErrorFlowMessage extends AbstractMessage {\n  constructor(messageGroupName: string, key: string) {\n    super(MessageType.ERROR, messageGroupName, key, MessageType.ICON_ERROR);\n  }\n}\n","import { AbstractMessage } from './abstract-message.model';\nimport { MessageType } from './message-type.enum';\n\nexport class ErrorMessage extends AbstractMessage {\n  constructor(messageGroupName: string, key: string, interpolateParams?: Record<string, unknown>) {\n    super(MessageType.ERROR, messageGroupName, key, MessageType.ICON_ERROR, interpolateParams);\n  }\n}\n","import { AbstractMessage } from './abstract-message.model';\nimport { MessageType } from './message-type.enum';\n\nexport class InfoFlowMessage extends AbstractMessage {\n  constructor(messageGroupName: string, key: string, interpolateParams?: Record<string, unknown>) {\n    super(MessageType.INFO, messageGroupName, key, MessageType.ICON_INFO, interpolateParams);\n  }\n}\n","import { AbstractMessage } from './abstract-message.model';\nimport { MessageType } from './message-type.enum';\n\nexport class SuccessFlowMessageModel extends AbstractMessage {\n  constructor(messageGroupName: string, key: string, interpolateParams?: Record<string, unknown>) {\n    super(MessageType.SUCCESS, messageGroupName, key, MessageType.SUCCESS, interpolateParams);\n  }\n}\n","import { AbstractMessage } from './abstract-message.model';\nimport { MessageType } from './message-type.enum';\n\nexport class SuccessMessage extends AbstractMessage {\n  constructor(messageGroupName: string, key: string) {\n    super(MessageType.SUCCESS, messageGroupName, key, MessageType.ICON_SUCCESS);\n  }\n}\n","import { AbstractMessage } from './abstract-message.model';\nimport { MessageType } from './message-type.enum';\n\nexport class WarningFlowMessage extends AbstractMessage {\n  constructor(messageGroupName: string, key: string, interpolateParams?: Record<string, unknown>) {\n    super(MessageType.WARNING, messageGroupName, key, MessageType.INFORMATION_WARNING, interpolateParams);\n  }\n}\n","import { AbstractMessage } from './abstract-message.model';\nimport { MessageType } from './message-type.enum';\n\nexport class WarningMessage extends AbstractMessage {\n  constructor(messageGroupName: string, key: string, interpolateParams?: Record<string, unknown>) {\n    super(MessageType.WARNING, messageGroupName, key, MessageType.ICON_WARNING, interpolateParams);\n  }\n}\n","/*\n * Public API Surface of ng-lib-message\n */\n\nexport * from './lib/message.service';\nexport * from './lib/messages.module';\nexport * from './lib/message';\nexport * from './lib/model';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["i1.MessageService","_c0"],"mappings":"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"}