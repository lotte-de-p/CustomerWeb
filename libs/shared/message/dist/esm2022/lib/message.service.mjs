import { Injectable } from '@angular/core';
import { MessageType } from './model/message-type.enum';
import * as i0 from "@angular/core";
export class MessageService {
    messages = {};
    addMessage(message) {
        if (!this.messages[message.messageGroupName]) {
            this.messages[message.messageGroupName] = {
                [message.type]: [],
            };
        }
        if (!this.messages[message.messageGroupName][message.type]) {
            this.messages[message.messageGroupName][message.type] = [];
        }
        this.messages[message.messageGroupName][message.type].push(message);
    }
    getErrorMessages(messageGroupName) {
        return this.getMessagesByType(messageGroupName, MessageType.ERROR);
    }
    getMessagesByGroupName(messageGroupName) {
        const messages = [];
        if (this.hasMessagesOfType(messageGroupName, MessageType.ERROR)) {
            messages.push(this.getMessagesByType(messageGroupName, MessageType.ERROR)[0]);
        }
        if (this.hasMessagesOfType(messageGroupName, MessageType.WARNING)) {
            messages.push(this.getMessagesByType(messageGroupName, MessageType.WARNING)[0]);
        }
        if (this.hasMessagesOfType(messageGroupName, MessageType.SUCCESS)) {
            messages.push(this.getMessagesByType(messageGroupName, MessageType.SUCCESS)[0]);
        }
        if (this.hasMessagesOfType(messageGroupName, MessageType.INFO)) {
            messages.push(this.getMessagesByType(messageGroupName, MessageType.INFO)[0]);
        }
        return messages;
    }
    getMessagesByType(messageGroupName, type) {
        const messagesByGroupName = this.messages[messageGroupName];
        if (!messagesByGroupName) {
            return [];
        }
        return messagesByGroupName[type];
    }
    clearErrorMessages(messageGroupName) {
        return this.clearMessagesByType(messageGroupName, MessageType.ERROR);
    }
    clearMessagesByType(messageGroupName, type) {
        if (!this.messages[messageGroupName]) {
            return;
        }
        this.messages[messageGroupName] = {
            [type]: [],
        };
    }
    hasErrorMessages(messageGroupName) {
        return this.hasMessagesOfType(messageGroupName, MessageType.ERROR);
    }
    hasMessagesOfType(messageGroupName, type) {
        return this.getMessagesByType(messageGroupName, type)?.filter((m) => m.type === type).length > 0;
    }
    clearMessages(messageGroupName) {
        if (!this.messages[messageGroupName]) {
            return;
        }
        this.messages[messageGroupName] = {};
    }
    getRegisteredGroupNames() {
        return Object.keys(this.messages);
    }
    static ɵfac = function MessageService_Factory(t) { return new (t || MessageService)(); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: MessageService, factory: MessageService.ɵfac, providedIn: 'root' });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(MessageService, [{
        type: Injectable,
        args: [{
                providedIn: 'root',
            }]
    }], null, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9tZXNzYWdlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7O0FBT3hELE1BQU0sT0FBTyxjQUFjO0lBQ2pCLFFBQVEsR0FBYSxFQUFFLENBQUM7SUFFaEMsVUFBVSxDQUFDLE9BQXdCO1FBQ2pDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUM7WUFDN0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsR0FBRztnQkFDeEMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRTthQUNuQixDQUFDO1FBQ0osQ0FBQztRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1lBQzNELElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUM3RCxDQUFDO1FBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3RFLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxnQkFBd0I7UUFDdkMsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsZ0JBQWdCLEVBQUUsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JFLENBQUM7SUFFRCxzQkFBc0IsQ0FBQyxnQkFBd0I7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dkMsQ0FBQztJQUVELHVCQUF1QjtRQUNyQixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7d0VBNUVVLGNBQWM7Z0VBQWQsY0FBYyxXQUFkLGNBQWMsbUJBRmIsTUFBTTs7aUZBRVAsY0FBYztjQUgxQixVQUFVO2VBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNZXNzYWdlVHlwZSB9IGZyb20gJy4vbW9kZWwvbWVzc2FnZS10eXBlLmVudW0nO1xuaW1wb3J0IHsgQWJzdHJhY3RNZXNzYWdlIH0gZnJvbSAnLi9tb2RlbC9hYnN0cmFjdC1tZXNzYWdlLm1vZGVsJztcbmltcG9ydCB7IE1lc3NhZ2VzIH0gZnJvbSAnLi9tb2RlbC9tZXNzYWdlcy5tb2RlbCc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBNZXNzYWdlU2VydmljZSB7XG4gIHByaXZhdGUgbWVzc2FnZXM6IE1lc3NhZ2VzID0ge307XG5cbiAgYWRkTWVzc2FnZShtZXNzYWdlOiBBYnN0cmFjdE1lc3NhZ2UpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMubWVzc2FnZXNbbWVzc2FnZS5tZXNzYWdlR3JvdXBOYW1lXSkge1xuICAgICAgdGhpcy5tZXNzYWdlc1ttZXNzYWdlLm1lc3NhZ2VHcm91cE5hbWVdID0ge1xuICAgICAgICBbbWVzc2FnZS50eXBlXTogW10sXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAoIXRoaXMubWVzc2FnZXNbbWVzc2FnZS5tZXNzYWdlR3JvdXBOYW1lXVttZXNzYWdlLnR5cGVdKSB7XG4gICAgICB0aGlzLm1lc3NhZ2VzW21lc3NhZ2UubWVzc2FnZUdyb3VwTmFtZV1bbWVzc2FnZS50eXBlXSA9IFtdO1xuICAgIH1cbiAgICB0aGlzLm1lc3NhZ2VzW21lc3NhZ2UubWVzc2FnZUdyb3VwTmFtZV1bbWVzc2FnZS50eXBlXS5wdXNoKG1lc3NhZ2UpO1xuICB9XG5cbiAgZ2V0RXJyb3JNZXNzYWdlcyhtZXNzYWdlR3JvdXBOYW1lOiBzdHJpbmcpOiBBYnN0cmFjdE1lc3NhZ2VbXSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TWVzc2FnZXNCeVR5cGUobWVzc2FnZUdyb3VwTmFtZSwgTWVzc2FnZVR5cGUuRVJST1IpO1xuICB9XG5cbiAgZ2V0TWVzc2FnZXNCeUdyb3VwTmFtZShtZXNzYWdlR3JvdXBOYW1lOiBzdHJpbmcpOiBBYnN0cmFjdE1lc3NhZ2VbXSB7XG4gICAgY29uc3QgbWVzc2FnZXM6IEFic3RyYWN0TWVzc2FnZVtdID0gW107XG4gICAgaWYgKHRoaXMuaGFzTWVzc2FnZXNPZlR5cGUobWVzc2FnZUdyb3VwTmFtZSwgTWVzc2FnZVR5cGUuRVJST1IpKSB7XG4gICAgICBtZXNzYWdlcy5wdXNoKHRoaXMuZ2V0TWVzc2FnZXNCeVR5cGUobWVzc2FnZUdyb3VwTmFtZSwgTWVzc2FnZVR5cGUuRVJST1IpWzBdKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuaGFzTWVzc2FnZXNPZlR5cGUobWVzc2FnZUdyb3VwTmFtZSwgTWVzc2FnZVR5cGUuV0FSTklORykpIHtcbiAgICAgIG1lc3NhZ2VzLnB1c2godGhpcy5nZXRNZXNzYWdlc0J5VHlwZShtZXNzYWdlR3JvdXBOYW1lLCBNZXNzYWdlVHlwZS5XQVJOSU5HKVswXSk7XG4gICAgfVxuICAgIGlmICh0aGlzLmhhc01lc3NhZ2VzT2ZUeXBlKG1lc3NhZ2VHcm91cE5hbWUsIE1lc3NhZ2VUeXBlLlNVQ0NFU1MpKSB7XG4gICAgICBtZXNzYWdlcy5wdXNoKHRoaXMuZ2V0TWVzc2FnZXNCeVR5cGUobWVzc2FnZUdyb3VwTmFtZSwgTWVzc2FnZVR5cGUuU1VDQ0VTUylbMF0pO1xuICAgIH1cbiAgICBpZiAodGhpcy5oYXNNZXNzYWdlc09mVHlwZShtZXNzYWdlR3JvdXBOYW1lLCBNZXNzYWdlVHlwZS5JTkZPKSkge1xuICAgICAgbWVzc2FnZXMucHVzaCh0aGlzLmdldE1lc3NhZ2VzQnlUeXBlKG1lc3NhZ2VHcm91cE5hbWUsIE1lc3NhZ2VUeXBlLklORk8pWzBdKTtcbiAgICB9XG4gICAgcmV0dXJuIG1lc3NhZ2VzO1xuICB9XG5cbiAgZ2V0TWVzc2FnZXNCeVR5cGUobWVzc2FnZUdyb3VwTmFtZTogc3RyaW5nLCB0eXBlOiBNZXNzYWdlVHlwZSk6IEFic3RyYWN0TWVzc2FnZVtdIHtcbiAgICBjb25zdCBtZXNzYWdlc0J5R3JvdXBOYW1lID0gdGhpcy5tZXNzYWdlc1ttZXNzYWdlR3JvdXBOYW1lXTtcblxuICAgIGlmICghbWVzc2FnZXNCeUdyb3VwTmFtZSkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIHJldHVybiBtZXNzYWdlc0J5R3JvdXBOYW1lW3R5cGVdO1xuICB9XG5cbiAgY2xlYXJFcnJvck1lc3NhZ2VzKG1lc3NhZ2VHcm91cE5hbWU6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLmNsZWFyTWVzc2FnZXNCeVR5cGUobWVzc2FnZUdyb3VwTmFtZSwgTWVzc2FnZVR5cGUuRVJST1IpO1xuICB9XG5cbiAgY2xlYXJNZXNzYWdlc0J5VHlwZShtZXNzYWdlR3JvdXBOYW1lOiBzdHJpbmcsIHR5cGU6IE1lc3NhZ2VUeXBlKSB7XG4gICAgaWYgKCF0aGlzLm1lc3NhZ2VzW21lc3NhZ2VHcm91cE5hbWVdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMubWVzc2FnZXNbbWVzc2FnZUdyb3VwTmFtZV0gPSB7XG4gICAgICBbdHlwZV06IFtdLFxuICAgIH07XG4gIH1cblxuICBoYXNFcnJvck1lc3NhZ2VzKG1lc3NhZ2VHcm91cE5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmhhc01lc3NhZ2VzT2ZUeXBlKG1lc3NhZ2VHcm91cE5hbWUsIE1lc3NhZ2VUeXBlLkVSUk9SKTtcbiAgfVxuXG4gIGhhc01lc3NhZ2VzT2ZUeXBlKG1lc3NhZ2VHcm91cE5hbWU6IHN0cmluZywgdHlwZTogTWVzc2FnZVR5cGUpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5nZXRNZXNzYWdlc0J5VHlwZShtZXNzYWdlR3JvdXBOYW1lLCB0eXBlKT8uZmlsdGVyKChtKSA9PiBtLnR5cGUgPT09IHR5cGUpLmxlbmd0aCA+IDA7XG4gIH1cblxuICBjbGVhck1lc3NhZ2VzKG1lc3NhZ2VHcm91cE5hbWU6IHN0cmluZykge1xuICAgIGlmICghdGhpcy5tZXNzYWdlc1ttZXNzYWdlR3JvdXBOYW1lXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLm1lc3NhZ2VzW21lc3NhZ2VHcm91cE5hbWVdID0ge307XG4gIH1cblxuICBnZXRSZWdpc3RlcmVkR3JvdXBOYW1lcygpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMubWVzc2FnZXMpO1xuICB9XG59XG4iXX0=