import { Injectable } from '@angular/core';
import { map as lodashMap } from 'lodash-es';
import { forkJoin, of, throwError } from 'rxjs';
import { catchError, map, mergeMap, take } from 'rxjs/operators';
import { ErrorMessage } from '@telenet/ng-lib-message';
import { ConfigConstants } from '@telenet/ng-lib-config';
import { LogFactory } from '@telenet/ng-lib-shared';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@telenet/ng-lib-page";
import * as i3 from "@telenet/ng-lib-message";
import * as i4 from "../mappers/omapi-product.mapper";
import * as i5 from "./cache/omapi-cache.service";
import * as i6 from "@telenet/ng-lib-config";
export class OmapiProductService {
    http;
    urlService;
    messageService;
    omapiProductMapper;
    cacheService;
    configService;
    gatewayUrl;
    log = LogFactory.createLogger(OmapiProductService);
    FETCH_ERROR_PREFIX = 'An error occurred while trying to fetch ';
    constructor(http, urlService, messageService, omapiProductMapper, cacheService, configService) {
        this.http = http;
        this.urlService = urlService;
        this.messageService = messageService;
        this.omapiProductMapper = omapiProductMapper;
        this.cacheService = cacheService;
        this.configService = configService;
    }
    getProductByEPC(messageGroup, epc) {
        const endpoint = this.getProductEndpoint(epc);
        return this.http.get(endpoint, this.getHttpConfig()).pipe(take(1), catchError((error) => this.handleError(error, messageGroup)), map((response) => {
            return this.omapiProductMapper.toModel(response);
        }));
    }
    getRawProductByEndpoint(messageGroup, endpoint, silentlyHandleError = false) {
        if (!this.cacheService.get(endpoint)) {
            this.cacheService.add(endpoint, this.http.get(endpoint, this.getHttpConfig()));
        }
        return this.cacheService.get(endpoint).pipe(take(1), catchError((error) => silentlyHandleError ? this.handleErrorSilent(error, messageGroup) : this.handleError(error, messageGroup)), mergeMap((response) => {
            return this.addConstituentsToOmapiResponse(response, messageGroup);
        }), map((response) => {
            return response;
        }));
    }
    rawProductsFromEndpoints$(messageGroup, endpoints, silentlyHandleError = false) {
        return forkJoin(lodashMap(endpoints, (endpoint) => this.getRawProductByEndpoint(messageGroup, endpoint, silentlyHandleError))).pipe(map((omapiResponses) => omapiResponses.filter((omapiResponse) => omapiResponse !== undefined)));
    }
    getProductByEndpoint(messageGroup, endpoint) {
        return this.doGet(messageGroup, endpoint);
    }
    // to do cleanup (method name getProductById), maybe method for the hardcoded url
    getProductById(messageGroup, omapiId) {
        return this.doGet(messageGroup, this.getOmapiProductUrl(omapiId));
    }
    addConstituentsToOmapiResponse(rawOmapiResponse, messageGroup) {
        if (rawOmapiResponse?.product &&
            rawOmapiResponse.product.characteristics &&
            rawOmapiResponse.product.characteristics.constituents) {
            return this.resolveConstituents(rawOmapiResponse.product.characteristics.constituents, messageGroup).pipe(map((response) => {
                if (rawOmapiResponse?.product?.characteristics) {
                    rawOmapiResponse.product.characteristics.constituents = response;
                }
                return rawOmapiResponse;
            }));
        }
        else {
            return of(rawOmapiResponse);
        }
    }
    getOmapiProductUrl(omapiId) {
        return this.configService.getConfig(ConfigConstants.OMAPI_URL) + '/public/product/' + omapiId;
    }
    doGet(messageGroup, endpoint) {
        if (!this.cacheService.get(endpoint)) {
            const httpObservable$ = this.http.get(endpoint, this.getHttpConfig());
            this.cacheService.add(endpoint, httpObservable$);
        }
        return this.cacheService.get(endpoint).pipe(catchError((error) => this.handleError(error, messageGroup)), map((response) => {
            return this.omapiProductMapper.toModel(response);
        }));
    }
    resolveConstituents(constituents, messageGroup) {
        return forkJoin(lodashMap(constituents, (constituent) => this.resolveConstituent(constituent, messageGroup)));
    }
    resolveConstituent(constituent, messageGroup) {
        return forkJoin({
            specurl: of(constituent.specurl),
            type: of(constituent.type),
            rawOmapi: this.getRawProductByEndpoint(messageGroup, constituent.specurl, false),
        });
    }
    getProductEndpoint(epc) {
        return `${this.gatewayUrl}/omapi/public/product/${epc}`;
    }
    getHttpConfig() {
        return {
            headers: {
                'x-alt-referer': this.urlService.getCurrentUrl(),
                'X-Requested-With': 'XMLHttpRequest',
            },
            timeout: 10000,
            cache: true,
        };
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    handleError(error, messageGroup) {
        if (error.status !== 410) {
            this.messageService.addMessage(new ErrorMessage(messageGroup, 'omapi-' + error.status));
        }
        this.log.logError(this.FETCH_ERROR_PREFIX + messageGroup, error);
        return throwError(() => this.FETCH_ERROR_PREFIX + messageGroup);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    handleErrorSilent(error, messageGroup) {
        if (error.status !== 410) {
            this.messageService.addMessage(new ErrorMessage(messageGroup, 'omapi-' + error.status));
        }
        this.log.logError(this.FETCH_ERROR_PREFIX + messageGroup, error);
        return of(undefined);
    }
    static ɵfac = function OmapiProductService_Factory(t) { return new (t || OmapiProductService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.UrlService), i0.ɵɵinject(i3.MessageService), i0.ɵɵinject(i4.OmapiProductMapper), i0.ɵɵinject(i5.OmapiCacheService), i0.ɵɵinject(i6.ConfigService)); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: OmapiProductService, factory: OmapiProductService.ɵfac, providedIn: 'root' });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(OmapiProductService, [{
        type: Injectable,
        args: [{
                providedIn: 'root',
            }]
    }], () => [{ type: i1.HttpClient }, { type: i2.UrlService }, { type: i3.MessageService }, { type: i4.OmapiProductMapper }, { type: i5.OmapiCacheService }, { type: i6.ConfigService }], null); })();
//# sourceMappingURL=data:application/json;base64,