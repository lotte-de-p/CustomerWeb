import { findIndex } from 'lodash-es';
export class StepFlowUtil {
    static hasNextStep(currentStep, steps) {
        if (currentStep?.isFinal?.()) {
            return true;
        }
        return this.getStepByRelativeIndexOffset(currentStep, steps, '+', 1) !== undefined;
    }
    static hasPreviousStep(currentStep, steps) {
        if (currentStep?.isFinal?.()) {
            return false;
        }
        return this.getStepByRelativeIndexOffset(currentStep, steps, '-', 1) !== undefined;
    }
    static getStepCount(steps) {
        return this.getActiveSteps(steps).length;
    }
    static getActiveSteps(steps) {
        return steps.filter((step) => {
            return step.isEnabled;
        });
    }
    static getStepIndex(currentStep, steps) {
        const activeSteps = this.getActiveSteps(steps);
        return findIndex(activeSteps, (step) => step.key === currentStep.key);
    }
    static getStepByRelativeIndexOffset(currentStep, steps, operator, offset) {
        const activeSteps = this.getActiveSteps(steps);
        const currentStepIndex = findIndex(activeSteps, (step) => step.key === currentStep?.key);
        switch (operator) {
            case '+':
                return currentStepIndex === undefined ? undefined : activeSteps[currentStepIndex + offset];
            case '-':
                return currentStepIndex === undefined ? undefined : activeSteps[currentStepIndex - offset];
            default:
                throw new Error(`${operator} is not a correct operator`);
        }
    }
    static getNextIncompletedStep(steps) {
        return this.getActiveSteps(steps).find((step) => !step.isCompleted);
    }
    static getActiveStep(steps, stepKey) {
        return this.getActiveSteps(steps).find((step) => step.key === stepKey);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcC1mbG93LnV0aWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL3N0b3JlL3N0ZXAtZmxvdy51dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFdEMsTUFBTSxPQUFPLFlBQVk7SUFDaEIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxXQUFpQixFQUFFLEtBQWE7UUFDeEQsSUFBSSxXQUFXLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxDQUFDO1lBQzdCLE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQztRQUNELE9BQU8sSUFBSSxDQUFDLDRCQUE0QixDQUFDLFdBQVcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxLQUFLLFNBQVMsQ0FBQztJQUNyRixDQUFDO0lBRU0sTUFBTSxDQUFDLGVBQWUsQ0FBQyxXQUFpQixFQUFFLEtBQWE7UUFDNUQsSUFBSSxXQUFXLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxDQUFDO1lBQzdCLE9BQU8sS0FBSyxDQUFDO1FBQ2YsQ0FBQztRQUNELE9BQU8sSUFBSSxDQUFDLDRCQUE0QixDQUFDLFdBQVcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxLQUFLLFNBQVMsQ0FBQztJQUNyRixDQUFDO0lBRU0sTUFBTSxDQUFDLFlBQVksQ0FBQyxLQUFhO1FBQ3RDLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUM7SUFDM0MsQ0FBQztJQUVNLE1BQU0sQ0FBQyxjQUFjLENBQUMsS0FBYTtRQUN4QyxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUMzQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDeEIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU0sTUFBTSxDQUFDLFlBQVksQ0FBQyxXQUFpQixFQUFFLEtBQWE7UUFDekQsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMvQyxPQUFPLFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3hFLENBQUM7SUFFTSxNQUFNLENBQUMsNEJBQTRCLENBQ3hDLFdBQTZCLEVBQzdCLEtBQWEsRUFDYixRQUFnQixFQUNoQixNQUFjO1FBRWQsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMvQyxNQUFNLGdCQUFnQixHQUFHLFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFVLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssV0FBVyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQy9GLFFBQVEsUUFBUSxFQUFFLENBQUM7WUFDakIsS0FBSyxHQUFHO2dCQUNOLE9BQU8sZ0JBQWdCLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsR0FBRyxNQUFNLENBQUMsQ0FBQztZQUM3RixLQUFLLEdBQUc7Z0JBQ04sT0FBTyxnQkFBZ0IsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxDQUFDO1lBQzdGO2dCQUNFLE1BQU0sSUFBSSxLQUFLLENBQUMsR0FBRyxRQUFRLDRCQUE0QixDQUFDLENBQUM7UUFDN0QsQ0FBQztJQUNILENBQUM7SUFFTSxNQUFNLENBQUMsc0JBQXNCLENBQUMsS0FBYTtRQUNoRCxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN0RSxDQUFDO0lBRU0sTUFBTSxDQUFDLGFBQWEsQ0FBQyxLQUFhLEVBQUUsT0FBZTtRQUN4RCxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLE9BQU8sQ0FBQyxDQUFDO0lBQ3pFLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0ZXAgfSBmcm9tICcuLi9zdGVwLm1vZGVsJztcbmltcG9ydCB7IGZpbmRJbmRleCB9IGZyb20gJ2xvZGFzaC1lcyc7XG5cbmV4cG9ydCBjbGFzcyBTdGVwRmxvd1V0aWwge1xuICBwdWJsaWMgc3RhdGljIGhhc05leHRTdGVwKGN1cnJlbnRTdGVwOiBTdGVwLCBzdGVwczogU3RlcFtdKTogYm9vbGVhbiB7XG4gICAgaWYgKGN1cnJlbnRTdGVwPy5pc0ZpbmFsPy4oKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmdldFN0ZXBCeVJlbGF0aXZlSW5kZXhPZmZzZXQoY3VycmVudFN0ZXAsIHN0ZXBzLCAnKycsIDEpICE9PSB1bmRlZmluZWQ7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGhhc1ByZXZpb3VzU3RlcChjdXJyZW50U3RlcDogU3RlcCwgc3RlcHM6IFN0ZXBbXSk6IGJvb2xlYW4ge1xuICAgIGlmIChjdXJyZW50U3RlcD8uaXNGaW5hbD8uKCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RlcEJ5UmVsYXRpdmVJbmRleE9mZnNldChjdXJyZW50U3RlcCwgc3RlcHMsICctJywgMSkgIT09IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgZ2V0U3RlcENvdW50KHN0ZXBzOiBTdGVwW10pOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmdldEFjdGl2ZVN0ZXBzKHN0ZXBzKS5sZW5ndGg7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGdldEFjdGl2ZVN0ZXBzKHN0ZXBzOiBTdGVwW10pOiBTdGVwW10ge1xuICAgIHJldHVybiBzdGVwcy5maWx0ZXIoKHN0ZXApID0+IHtcbiAgICAgIHJldHVybiBzdGVwLmlzRW5hYmxlZDtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgZ2V0U3RlcEluZGV4KGN1cnJlbnRTdGVwOiBTdGVwLCBzdGVwczogU3RlcFtdKTogbnVtYmVyIHtcbiAgICBjb25zdCBhY3RpdmVTdGVwcyA9IHRoaXMuZ2V0QWN0aXZlU3RlcHMoc3RlcHMpO1xuICAgIHJldHVybiBmaW5kSW5kZXgoYWN0aXZlU3RlcHMsIChzdGVwKSA9PiBzdGVwLmtleSA9PT0gY3VycmVudFN0ZXAua2V5KTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgZ2V0U3RlcEJ5UmVsYXRpdmVJbmRleE9mZnNldChcbiAgICBjdXJyZW50U3RlcDogU3RlcCB8IHVuZGVmaW5lZCxcbiAgICBzdGVwczogU3RlcFtdLFxuICAgIG9wZXJhdG9yOiBzdHJpbmcsXG4gICAgb2Zmc2V0OiBudW1iZXJcbiAgKTogU3RlcCB8IHVuZGVmaW5lZCB7XG4gICAgY29uc3QgYWN0aXZlU3RlcHMgPSB0aGlzLmdldEFjdGl2ZVN0ZXBzKHN0ZXBzKTtcbiAgICBjb25zdCBjdXJyZW50U3RlcEluZGV4ID0gZmluZEluZGV4KGFjdGl2ZVN0ZXBzLCAoc3RlcDogU3RlcCkgPT4gc3RlcC5rZXkgPT09IGN1cnJlbnRTdGVwPy5rZXkpO1xuICAgIHN3aXRjaCAob3BlcmF0b3IpIHtcbiAgICAgIGNhc2UgJysnOlxuICAgICAgICByZXR1cm4gY3VycmVudFN0ZXBJbmRleCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogYWN0aXZlU3RlcHNbY3VycmVudFN0ZXBJbmRleCArIG9mZnNldF07XG4gICAgICBjYXNlICctJzpcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRTdGVwSW5kZXggPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IGFjdGl2ZVN0ZXBzW2N1cnJlbnRTdGVwSW5kZXggLSBvZmZzZXRdO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke29wZXJhdG9yfSBpcyBub3QgYSBjb3JyZWN0IG9wZXJhdG9yYCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHN0YXRpYyBnZXROZXh0SW5jb21wbGV0ZWRTdGVwKHN0ZXBzOiBTdGVwW10pOiBTdGVwIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5nZXRBY3RpdmVTdGVwcyhzdGVwcykuZmluZCgoc3RlcCkgPT4gIXN0ZXAuaXNDb21wbGV0ZWQpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBnZXRBY3RpdmVTdGVwKHN0ZXBzOiBTdGVwW10sIHN0ZXBLZXk6IHN0cmluZyk6IFN0ZXAgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLmdldEFjdGl2ZVN0ZXBzKHN0ZXBzKS5maW5kKChzdGVwKSA9PiBzdGVwLmtleSA9PT0gc3RlcEtleSk7XG4gIH1cbn1cbiJdfQ==