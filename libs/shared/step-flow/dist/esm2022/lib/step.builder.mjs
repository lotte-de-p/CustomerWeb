import { Step } from './step.model';
import { StepEnum } from './step.enum';
export class StepBuilder {
    _step;
    constructor(key) {
        this._step = new Step(key);
    }
    static builder(key) {
        return new StepBuilder(key);
    }
    withLayoutOptions(layout) {
        if (layout) {
            this._step.layoutOptions = layout;
        }
        return this;
    }
    withAnalyticsOptions(analyticsOptions) {
        if (analyticsOptions) {
            this._step.analyticsOptions = analyticsOptions;
        }
        return this;
    }
    withImage(image) {
        if (image) {
            this._step.image = image;
        }
        return this;
    }
    withComponent(selector) {
        this._step.component = { selector: selector };
        return this;
    }
    withOrder(order) {
        this._step.order = order;
        return this;
    }
    withEnabledState(state = true) {
        this._step.isEnabled = state;
        return this;
    }
    withTemplate(template) {
        this._step.template = template;
        return this;
    }
    withCompletedState(state = true) {
        this._step.setCompleted(state);
        return this;
    }
    withPreviousStepDisabled(state = false) {
        this._step.previousStepDisabled = state;
        return this;
    }
    withFinalState() {
        this._step.type = StepEnum.FINAL;
        return this;
    }
    withConfirmState() {
        this._step.type = StepEnum.CONFIRM;
        return this;
    }
    withOverwriteFlowLabel(flowLabel) {
        this._step.overwriteFlowLabel = flowLabel;
        return this;
    }
    withTitleParameterValue(value) {
        this._step.titleParameterValue = value;
        return this;
    }
    withChosenProductValue(value) {
        this._step.chosenProduct$ = value;
        return this;
    }
    withMobileImage(value) {
        this._step.imageMobile = value;
        return this;
    }
    withScrollableImage(scrollable = true) {
        this._step.isImageScrollable = scrollable;
        return this;
    }
    withAsAlternativeFirstStep() {
        this._step.asAlternativeFirstStep = true;
        return this;
    }
    build() {
        return this._step;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcC5idWlsZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9zdGVwLmJ1aWxkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUNwQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBT3ZDLE1BQU0sT0FBTyxXQUFXO0lBQ0wsS0FBSyxDQUFPO0lBRTdCLFlBQW9CLEdBQVc7UUFDN0IsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBRU0sTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFXO1FBQy9CLE9BQU8sSUFBSSxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVNLGlCQUFpQixDQUFDLE1BQW1DO1FBQzFELElBQUksTUFBTSxFQUFFLENBQUM7WUFDWCxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUM7UUFDcEMsQ0FBQztRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVNLG9CQUFvQixDQUFDLGdCQUF1QztRQUNqRSxJQUFJLGdCQUFnQixFQUFFLENBQUM7WUFDckIsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQztRQUNqRCxDQUFDO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU0sU0FBUyxDQUFDLEtBQWM7UUFDN0IsSUFBSSxLQUFLLEVBQUUsQ0FBQztZQUNWLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUMzQixDQUFDO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU0sYUFBYSxDQUFDLFFBQWlCO1FBQ3BDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxDQUFDO1FBQzlDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVNLFNBQVMsQ0FBQyxLQUFhO1FBQzVCLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUN6QixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFTSxnQkFBZ0IsQ0FBQyxLQUFLLEdBQUcsSUFBSTtRQUNsQyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDN0IsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU0sWUFBWSxDQUFDLFFBQXVCO1FBQ3pDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUMvQixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFTSxrQkFBa0IsQ0FBQyxLQUFLLEdBQUcsSUFBSTtRQUNwQyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMvQixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFTSx3QkFBd0IsQ0FBQyxLQUFLLEdBQUcsS0FBSztRQUMzQyxJQUFJLENBQUMsS0FBSyxDQUFDLG9CQUFvQixHQUFHLEtBQUssQ0FBQztRQUN4QyxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFTSxjQUFjO1FBQ25CLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUM7UUFDakMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU0sZ0JBQWdCO1FBQ3JCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUM7UUFDbkMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU0sc0JBQXNCLENBQUMsU0FBaUI7UUFDN0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsR0FBRyxTQUFTLENBQUM7UUFDMUMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU0sdUJBQXVCLENBQUMsS0FBeUI7UUFDdEQsSUFBSSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsR0FBRyxLQUFLLENBQUM7UUFDdkMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU0sc0JBQXNCLENBQUMsS0FBeUM7UUFDckUsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDO1FBQ2xDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVNLGVBQWUsQ0FBQyxLQUFhO1FBQ2xDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztRQUMvQixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFTSxtQkFBbUIsQ0FBQyxVQUFVLEdBQUcsSUFBSTtRQUMxQyxJQUFJLENBQUMsS0FBSyxDQUFDLGlCQUFpQixHQUFHLFVBQVUsQ0FBQztRQUMxQyxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFTSwwQkFBMEI7UUFDL0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsR0FBRyxJQUFJLENBQUM7UUFDekMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU0sS0FBSztRQUNWLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdGVwIH0gZnJvbSAnLi9zdGVwLm1vZGVsJztcbmltcG9ydCB7IFN0ZXBFbnVtIH0gZnJvbSAnLi9zdGVwLmVudW0nO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgU3RlcExheW91dE9wdGlvbnNJbnRlcmZhY2UgfSBmcm9tICcuL3N0ZXAtbGF5b3V0LW9wdGlvbnMuaW50ZXJmYWNlJztcbmltcG9ydCB7IFN0ZXBBbmFseXRpY3NPcHRpb25zIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3N0ZXAtYW5hbHl0aWNzLW9wdGlvbnMuaW50ZXJmYWNlJztcbmltcG9ydCB7IFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9tYXBpUHJvZHVjdCB9IGZyb20gJ0B0ZWxlbmV0L25nLWxpYi1vbWFwaSc7XG5cbmV4cG9ydCBjbGFzcyBTdGVwQnVpbGRlciB7XG4gIHByaXZhdGUgcmVhZG9ubHkgX3N0ZXA6IFN0ZXA7XG5cbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcihrZXk6IHN0cmluZykge1xuICAgIHRoaXMuX3N0ZXAgPSBuZXcgU3RlcChrZXkpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBidWlsZGVyKGtleTogc3RyaW5nKTogU3RlcEJ1aWxkZXIge1xuICAgIHJldHVybiBuZXcgU3RlcEJ1aWxkZXIoa2V5KTtcbiAgfVxuXG4gIHB1YmxpYyB3aXRoTGF5b3V0T3B0aW9ucyhsYXlvdXQ/OiBTdGVwTGF5b3V0T3B0aW9uc0ludGVyZmFjZSk6IFN0ZXBCdWlsZGVyIHtcbiAgICBpZiAobGF5b3V0KSB7XG4gICAgICB0aGlzLl9zdGVwLmxheW91dE9wdGlvbnMgPSBsYXlvdXQ7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcHVibGljIHdpdGhBbmFseXRpY3NPcHRpb25zKGFuYWx5dGljc09wdGlvbnM/OiBTdGVwQW5hbHl0aWNzT3B0aW9ucyk6IFN0ZXBCdWlsZGVyIHtcbiAgICBpZiAoYW5hbHl0aWNzT3B0aW9ucykge1xuICAgICAgdGhpcy5fc3RlcC5hbmFseXRpY3NPcHRpb25zID0gYW5hbHl0aWNzT3B0aW9ucztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBwdWJsaWMgd2l0aEltYWdlKGltYWdlPzogc3RyaW5nKTogU3RlcEJ1aWxkZXIge1xuICAgIGlmIChpbWFnZSkge1xuICAgICAgdGhpcy5fc3RlcC5pbWFnZSA9IGltYWdlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHB1YmxpYyB3aXRoQ29tcG9uZW50KHNlbGVjdG9yOiB1bmtub3duKTogU3RlcEJ1aWxkZXIge1xuICAgIHRoaXMuX3N0ZXAuY29tcG9uZW50ID0geyBzZWxlY3Rvcjogc2VsZWN0b3IgfTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHB1YmxpYyB3aXRoT3JkZXIob3JkZXI6IG51bWJlcik6IFN0ZXBCdWlsZGVyIHtcbiAgICB0aGlzLl9zdGVwLm9yZGVyID0gb3JkZXI7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBwdWJsaWMgd2l0aEVuYWJsZWRTdGF0ZShzdGF0ZSA9IHRydWUpOiBTdGVwQnVpbGRlciB7XG4gICAgdGhpcy5fc3RlcC5pc0VuYWJsZWQgPSBzdGF0ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHB1YmxpYyB3aXRoVGVtcGxhdGUodGVtcGxhdGU6IFR5cGU8dW5rbm93bj4pOiBTdGVwQnVpbGRlciB7XG4gICAgdGhpcy5fc3RlcC50ZW1wbGF0ZSA9IHRlbXBsYXRlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcHVibGljIHdpdGhDb21wbGV0ZWRTdGF0ZShzdGF0ZSA9IHRydWUpOiBTdGVwQnVpbGRlciB7XG4gICAgdGhpcy5fc3RlcC5zZXRDb21wbGV0ZWQoc3RhdGUpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcHVibGljIHdpdGhQcmV2aW91c1N0ZXBEaXNhYmxlZChzdGF0ZSA9IGZhbHNlKTogU3RlcEJ1aWxkZXIge1xuICAgIHRoaXMuX3N0ZXAucHJldmlvdXNTdGVwRGlzYWJsZWQgPSBzdGF0ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHB1YmxpYyB3aXRoRmluYWxTdGF0ZSgpOiBTdGVwQnVpbGRlciB7XG4gICAgdGhpcy5fc3RlcC50eXBlID0gU3RlcEVudW0uRklOQUw7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBwdWJsaWMgd2l0aENvbmZpcm1TdGF0ZSgpOiBTdGVwQnVpbGRlciB7XG4gICAgdGhpcy5fc3RlcC50eXBlID0gU3RlcEVudW0uQ09ORklSTTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHB1YmxpYyB3aXRoT3ZlcndyaXRlRmxvd0xhYmVsKGZsb3dMYWJlbDogc3RyaW5nKTogU3RlcEJ1aWxkZXIge1xuICAgIHRoaXMuX3N0ZXAub3ZlcndyaXRlRmxvd0xhYmVsID0gZmxvd0xhYmVsO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcHVibGljIHdpdGhUaXRsZVBhcmFtZXRlclZhbHVlKHZhbHVlOiBPYnNlcnZhYmxlPHN0cmluZz4pOiBTdGVwQnVpbGRlciB7XG4gICAgdGhpcy5fc3RlcC50aXRsZVBhcmFtZXRlclZhbHVlID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBwdWJsaWMgd2l0aENob3NlblByb2R1Y3RWYWx1ZSh2YWx1ZTogT2JzZXJ2YWJsZTxPbWFwaVByb2R1Y3QgfCB1bmtub3duPik6IFN0ZXBCdWlsZGVyIHtcbiAgICB0aGlzLl9zdGVwLmNob3NlblByb2R1Y3QkID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBwdWJsaWMgd2l0aE1vYmlsZUltYWdlKHZhbHVlOiBzdHJpbmcpOiBTdGVwQnVpbGRlciB7XG4gICAgdGhpcy5fc3RlcC5pbWFnZU1vYmlsZSA9IHZhbHVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcHVibGljIHdpdGhTY3JvbGxhYmxlSW1hZ2Uoc2Nyb2xsYWJsZSA9IHRydWUpOiBTdGVwQnVpbGRlciB7XG4gICAgdGhpcy5fc3RlcC5pc0ltYWdlU2Nyb2xsYWJsZSA9IHNjcm9sbGFibGU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBwdWJsaWMgd2l0aEFzQWx0ZXJuYXRpdmVGaXJzdFN0ZXAoKTogU3RlcEJ1aWxkZXIge1xuICAgIHRoaXMuX3N0ZXAuYXNBbHRlcm5hdGl2ZUZpcnN0U3RlcCA9IHRydWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBwdWJsaWMgYnVpbGQoKTogU3RlcCB7XG4gICAgcmV0dXJuIHRoaXMuX3N0ZXA7XG4gIH1cbn1cbiJdfQ==