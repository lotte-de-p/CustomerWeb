import { LabelKeyType } from './label-key-type.enum';
export class LabelUtil {
    static LABEL_PREFIX = 'ng';
    static getLabelKeyWithTypeLabel(key) {
        return this.parseKey(key, LabelKeyType.LABEL);
    }
    static getLabelKeyWithTypeTitle(key) {
        return this.parseKey(key, LabelKeyType.TITLE);
    }
    static getLabelKeyWithTypePlaceholder(key) {
        return this.parseKey(key, LabelKeyType.PLACEHOLDER);
    }
    static getLabelKeyWithTypeText(key) {
        return this.parseKey(key, LabelKeyType.TXT);
    }
    static getLabelKeyWithTypeError(key) {
        return this.parseKey(key, LabelKeyType.ERROR);
    }
    static getLabelKeyWithTypeButton(key) {
        return this.parseKey(key, LabelKeyType.BUTTON);
    }
    static normalizeKey(key) {
        return key
            .replace(/ /g, '-')
            .replace(/_/g, '-')
            .replace(/[^.0-9a-zA-Z_-]/g, '')
            .toLowerCase();
    }
    static parseKey(key, labelKeyType) {
        if (Array.isArray(key)) {
            return this.joinKeys([this.LABEL_PREFIX, this.joinKeys(key), labelKeyType]);
        }
        return this.joinKeys([this.LABEL_PREFIX, key, labelKeyType]);
    }
    static joinKeys(values) {
        return values.join('.');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFiZWwudXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvaTE4bi9sYWJlbC51dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUVyRCxNQUFNLE9BQU8sU0FBUztJQUNwQixNQUFNLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztJQUUzQixNQUFNLENBQUMsd0JBQXdCLENBQUMsR0FBc0I7UUFDcEQsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVELE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxHQUFzQjtRQUNwRCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRUQsTUFBTSxDQUFDLDhCQUE4QixDQUFDLEdBQXNCO1FBQzFELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsWUFBWSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFRCxNQUFNLENBQUMsdUJBQXVCLENBQUMsR0FBc0I7UUFDbkQsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVELE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxHQUFzQjtRQUNwRCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRUQsTUFBTSxDQUFDLHlCQUF5QixDQUFDLEdBQXNCO1FBQ3JELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFRCxNQUFNLENBQUMsWUFBWSxDQUFDLEdBQVc7UUFDN0IsT0FBTyxHQUFHO2FBQ1AsT0FBTyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUM7YUFDbEIsT0FBTyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUM7YUFDbEIsT0FBTyxDQUFDLGtCQUFrQixFQUFFLEVBQUUsQ0FBQzthQUMvQixXQUFXLEVBQUUsQ0FBQztJQUNuQixDQUFDO0lBRU8sTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFzQixFQUFFLFlBQTBCO1FBQ3hFLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQ3ZCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDO1FBQzlFLENBQUM7UUFDRCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLEdBQUcsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFFTyxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQWdCO1FBQ3RDLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMxQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTGFiZWxLZXlUeXBlIH0gZnJvbSAnLi9sYWJlbC1rZXktdHlwZS5lbnVtJztcblxuZXhwb3J0IGNsYXNzIExhYmVsVXRpbCB7XG4gIHN0YXRpYyBMQUJFTF9QUkVGSVggPSAnbmcnO1xuXG4gIHN0YXRpYyBnZXRMYWJlbEtleVdpdGhUeXBlTGFiZWwoa2V5OiBzdHJpbmcgfCBzdHJpbmdbXSk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMucGFyc2VLZXkoa2V5LCBMYWJlbEtleVR5cGUuTEFCRUwpO1xuICB9XG5cbiAgc3RhdGljIGdldExhYmVsS2V5V2l0aFR5cGVUaXRsZShrZXk6IHN0cmluZyB8IHN0cmluZ1tdKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5wYXJzZUtleShrZXksIExhYmVsS2V5VHlwZS5USVRMRSk7XG4gIH1cblxuICBzdGF0aWMgZ2V0TGFiZWxLZXlXaXRoVHlwZVBsYWNlaG9sZGVyKGtleTogc3RyaW5nIHwgc3RyaW5nW10pIHtcbiAgICByZXR1cm4gdGhpcy5wYXJzZUtleShrZXksIExhYmVsS2V5VHlwZS5QTEFDRUhPTERFUik7XG4gIH1cblxuICBzdGF0aWMgZ2V0TGFiZWxLZXlXaXRoVHlwZVRleHQoa2V5OiBzdHJpbmcgfCBzdHJpbmdbXSkge1xuICAgIHJldHVybiB0aGlzLnBhcnNlS2V5KGtleSwgTGFiZWxLZXlUeXBlLlRYVCk7XG4gIH1cblxuICBzdGF0aWMgZ2V0TGFiZWxLZXlXaXRoVHlwZUVycm9yKGtleTogc3RyaW5nIHwgc3RyaW5nW10pIHtcbiAgICByZXR1cm4gdGhpcy5wYXJzZUtleShrZXksIExhYmVsS2V5VHlwZS5FUlJPUik7XG4gIH1cblxuICBzdGF0aWMgZ2V0TGFiZWxLZXlXaXRoVHlwZUJ1dHRvbihrZXk6IHN0cmluZyB8IHN0cmluZ1tdKSB7XG4gICAgcmV0dXJuIHRoaXMucGFyc2VLZXkoa2V5LCBMYWJlbEtleVR5cGUuQlVUVE9OKTtcbiAgfVxuXG4gIHN0YXRpYyBub3JtYWxpemVLZXkoa2V5OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBrZXlcbiAgICAgIC5yZXBsYWNlKC8gL2csICctJylcbiAgICAgIC5yZXBsYWNlKC9fL2csICctJylcbiAgICAgIC5yZXBsYWNlKC9bXi4wLTlhLXpBLVpfLV0vZywgJycpXG4gICAgICAudG9Mb3dlckNhc2UoKTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIHBhcnNlS2V5KGtleTogc3RyaW5nIHwgc3RyaW5nW10sIGxhYmVsS2V5VHlwZTogTGFiZWxLZXlUeXBlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoa2V5KSkge1xuICAgICAgcmV0dXJuIHRoaXMuam9pbktleXMoW3RoaXMuTEFCRUxfUFJFRklYLCB0aGlzLmpvaW5LZXlzKGtleSksIGxhYmVsS2V5VHlwZV0pO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5qb2luS2V5cyhbdGhpcy5MQUJFTF9QUkVGSVgsIGtleSwgbGFiZWxLZXlUeXBlXSk7XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBqb2luS2V5cyh2YWx1ZXM6IHN0cmluZ1tdKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdmFsdWVzLmpvaW4oJy4nKTtcbiAgfVxufVxuIl19