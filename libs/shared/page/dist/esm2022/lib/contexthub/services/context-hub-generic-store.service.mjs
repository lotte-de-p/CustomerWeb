var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { ReplaySubject } from 'rxjs';
import { ContexthubConstants } from '../constants/contexthub.constant';
import { Inject } from '@angular/core';
import { EventCategoryEnum, EventTypeEnum } from '@telenet/ng-lib-datalayer';
import { DirectCallLabelEnum } from 'udl';
let ContextHubGenericStoreService = class ContextHubGenericStoreService {
    _ngZone;
    window;
    dataLayerService;
    storeConfig;
    STORE_DATA_LOADED_CALL_LABEL = 'store_data_loaded';
    contextHubSubject = new ReplaySubject(1);
    isGetDataCallInvoked = false;
    constructor(_ngZone, window, dataLayerService, storeConfig) {
        this._ngZone = _ngZone;
        this.window = window;
        this.dataLayerService = dataLayerService;
        this.storeConfig = storeConfig;
        this.registerAngularService();
        this.registerStoreEventHook();
    }
    enrich(_data) {
        throw new Error('Method not Supported');
    }
    onLoadData(_data) {
        throw new Error('Method not Supported');
    }
    getStoreData() {
        const store = this.getStore();
        if (store) {
            const uniqueBindIdentifier = store.name + '_store_ready';
            const triggerForPastEvents = true;
            store.eventing.once(ContexthubConstants.EVENT_STORE_READY, () => {
                if (!this.isGetDataCallInvoked) {
                    this.isGetDataCallInvoked = true;
                    store.getData(true);
                }
            }, uniqueBindIdentifier, triggerForPastEvents);
        }
        return this.contextHubSubject;
    }
    updateStoreData(data, updateTimestamp = true) {
        const store = this.getStore();
        store?.updateStoreData(data, updateTimestamp);
    }
    onStoreDataLoaded(storeDataObj) {
        if (this.contextHubSubject) {
            storeDataObj = this.handleEnrich(storeDataObj);
            this.contextHubSubject.next(storeDataObj);
            this.contextHubSubject.complete();
            this.contextHubSubject = new ReplaySubject(1);
            this.isGetDataCallInvoked = false;
        }
    }
    registerAngularService() {
        if (!this.window[ContexthubConstants.ANGULAR_STORE_SERVICE_REF]) {
            this.window[ContexthubConstants.ANGULAR_STORE_SERVICE_REF] = {};
        }
        const angularStoreServiceRef = this.window[ContexthubConstants.ANGULAR_STORE_SERVICE_REF];
        if (angularStoreServiceRef) {
            angularStoreServiceRef[this.storeConfig.serviceName] = { service: this, zone: this._ngZone };
        }
    }
    getStore() {
        const contextHub = this.window[ContexthubConstants.CONTEXTHUB];
        if (contextHub === undefined || contextHub === null || contextHub?.getStore === null) {
            return null;
        }
        return contextHub.getStore?.(this.storeConfig.storeName);
    }
    handleEnrich(storeData) {
        try {
            return this.enrich(storeData);
        }
        catch (e) {
            if (this.storeConfig.storeModel?.enrich) {
                return this.storeConfig.storeModel.enrich(storeData);
            }
            return {};
        }
    }
    registerStoreEventHook() {
        const store = this.getStore();
        if (store === null) {
            return;
        }
        this.sendDataLayerEventOnStoreEvent(store, this.STORE_DATA_LOADED_CALL_LABEL, DirectCallLabelEnum.STORE_DATA_LOADED);
    }
    sendDataLayerEventOnStoreEvent(store, storeEvent, directCallLabel) {
        const triggerForPastEvents = true;
        store.eventing['once'](storeEvent + ':' + store.name, () => this.sendDataLayerStoreEvent('contexthub ' + storeEvent, directCallLabel, store), store.name + '_' + storeEvent, triggerForPastEvents);
    }
    sendDataLayerStoreEvent(eventName, directCallLabel, store) {
        const eventInfoData = this.dataLayerService.createEventInfo(eventName, EventTypeEnum.EVENT_TYPE_CH_STORE);
        const category = this.dataLayerService.createCategory(EventCategoryEnum.PRIMARY_CATEGORY_GENERAL);
        const attributes = {
            storeName: store.name,
        };
        this.dataLayerService.sendEvent({ eventInfo: eventInfoData, attributes, category, directCallLabel });
    }
};
ContextHubGenericStoreService = __decorate([
    __param(1, Inject('Window'))
], ContextHubGenericStoreService);
export { ContextHubGenericStoreService };
//# sourceMappingURL=data:application/json;base64,