import { Inject, Injectable } from '@angular/core';
import { CustomerCategoryEnum } from '../enums/customer-category.enum';
import { CustomerBrandEnum } from '../enums/customer-brand.enum';
import * as i0 from "@angular/core";
export class PathCategorisationService {
    window;
    constructor(window) {
        this.window = window;
    }
    getPostfixVariables() {
        return {
            BRAND_POSTFIX: this.getBrandPostfix(),
            CATEGORY_POSTFIX: this.getCategoryPostfix(),
            BRAND_CATEGORY_POSTFIX: this.getBrandPostfix() + this.getCategoryPostfix(),
        };
    }
    getBrandPostfix() {
        const brandSuffix = this.getBrandLabelSuffix();
        return brandSuffix ? `.${brandSuffix}` : '';
    }
    getCategoryPostfix() {
        const categoryLabelSuffix = this.getValueFromWindowByProperty('categoryLabelSuffix');
        if (categoryLabelSuffix) {
            return `.${categoryLabelSuffix}`;
        }
        if (window.location.pathname.indexOf('/business/') !== -1) {
            return '.tfb';
        }
        return '';
    }
    getBrandLabelSuffix() {
        return this.getValueFromWindowByProperty('brandLabelSuffix');
    }
    getValueFromWindowByProperty(property) {
        return this.window['TelenetGroup']?.pathCategorisation?.[property];
    }
    getLabelSuffix() {
        return this.getValueFromWindowByProperty('labelSuffix');
    }
    getCustomerBrand() {
        return this.getValueFromWindowByProperty('customerBrand');
    }
    getCustomerCategory() {
        return this.getValueFromWindowByProperty('customerCategory');
    }
    isCustomerOfBrandTypes(customerBrandEnums = []) {
        return customerBrandEnums.includes(this.getCustomerBrand());
    }
    isCustomerOfBrand(customerBrand) {
        return this.getCustomerBrand() === customerBrand;
    }
    isCustomerOfType(type) {
        return this.getCustomerCategory()?.toUpperCase() === type.toUpperCase();
    }
    isBrandBaseAndCategoryResidential() {
        return (this.getCustomerBrand() === CustomerBrandEnum.BRAND_BASE &&
            this.isCustomerOfType(CustomerCategoryEnum.RESIDENTIAL));
    }
    isBrandBaseAndCategoryBusiness() {
        return (this.getCustomerBrand() === CustomerBrandEnum.BRAND_BASE && this.isCustomerOfType(CustomerCategoryEnum.BUSINESS));
    }
    isBrandTelenetAndCategoryResidential() {
        return (this.getCustomerBrand() === CustomerBrandEnum.BRAND_TELENET &&
            this.isCustomerOfType(CustomerCategoryEnum.RESIDENTIAL));
    }
    isBrandTelenetAndCategoryBusiness() {
        return (this.getCustomerBrand() === CustomerBrandEnum.BRAND_TELENET &&
            this.isCustomerOfType(CustomerCategoryEnum.BUSINESS));
    }
    isBrandTelenetAndCategoryFleetPortal() {
        return (this.getCustomerBrand() === CustomerBrandEnum.BRAND_TELENET &&
            this.isCustomerOfType(CustomerCategoryEnum.FLEET_PORTAL));
    }
    isBrandTelenetAndCategoryResidentialOrFleet() {
        return this.isBrandTelenetAndCategoryResidential() || this.isBrandTelenetAndCategoryFleetPortal();
    }
    isBrandBaseAndCategoryResidentialOrBusiness() {
        return this.isBrandBaseAndCategoryResidential() || this.isBrandBaseAndCategoryBusiness();
    }
    static ɵfac = function PathCategorisationService_Factory(t) { return new (t || PathCategorisationService)(i0.ɵɵinject('Window')); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PathCategorisationService, factory: PathCategorisationService.ɵfac, providedIn: 'root' });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PathCategorisationService, [{
        type: Injectable,
        args: [{
                providedIn: 'root',
            }]
    }], () => [{ type: Window, decorators: [{
                type: Inject,
                args: ['Window']
            }] }], null); })();
//# sourceMappingURL=data:application/json;base64,