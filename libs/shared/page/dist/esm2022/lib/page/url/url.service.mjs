import { Inject, Injectable } from '@angular/core';
import { find, keyBy, map } from 'lodash-es';
import { QueryParamEnum } from '../enums/query-param.enum';
import { forkJoin, timeout } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@telenet/ng-lib-datalayer";
import * as i2 from "../client-browser-type/client-browser-type.service";
export class UrlService {
    window;
    dataLayerService;
    clientBrowserTypeService;
    constructor(window, dataLayerService, clientBrowserTypeService) {
        this.window = window;
        this.dataLayerService = dataLayerService;
        this.clientBrowserTypeService = clientBrowserTypeService;
    }
    getCurrentUrl() {
        if (this.window.location && this.window.location.href) {
            return this.window.location.href;
        }
        return '';
    }
    openWindow(url) {
        this.window.open(url, '_self');
    }
    openNewTab(url) {
        if (this.clientBrowserTypeService.isClientUsingSafari()) {
            this.openNewTabForSafari(url);
        }
        else {
            this.window.open(url, '_blank');
        }
    }
    reloadWindow() {
        this.window.location.reload();
    }
    getParameterByName(name) {
        const match = RegExp('[?&]' + name + '=([^&]*)').exec(this.window.location.search);
        return match && decodeURIComponent(match[1]);
    }
    getParamsValueFromUrl(url, paramKey) {
        const match = RegExp('[?&]' + paramKey + '=([^&]*)').exec(url);
        return match && decodeURIComponent(match[1]);
    }
    getUrlWithParams(url, params) {
        const keyValues = map(params, (param) => {
            return param.getKeyValue();
        });
        return url + '?' + keyValues.join('&');
    }
    redirectTo(url) {
        const promiseArray = this.dataLayerService.getAnalyticsPromises();
        if (promiseArray?.length === 0) {
            this.window.location.href = url;
        }
        else {
            forkJoin(promiseArray)
                .pipe(timeout(5000) // timeout after 5 seconds
            )
                .subscribe({
                next: () => {
                    this.window.location.href = url;
                },
                error: () => {
                    // This block will be executed if the timeout occurs, this way we can ensure that the user is redirected even if the analytics are not loaded
                    console.warn("Timeout: Datalayer promises couldn't be resolved. Redirecting to the url");
                    this.window.location.href = url;
                },
            });
        }
    }
    doHistoryBack() {
        if (this.window.history) {
            this.window.history.back();
        }
    }
    getRequestParametersAsString() {
        if (this.window.location && this.window.location.search) {
            return this.window.location.search;
        }
        return '';
    }
    getRequestParameters() {
        const obj = {};
        if (this.window.location && this.window.location.search) {
            const pairs = this.window.location.search.substring(1).split('&');
            let keyValue = [];
            pairs.forEach((pair) => {
                if (pair !== '') {
                    keyValue = pair.split('=');
                    obj[decodeURIComponent(keyValue[0])] = decodeURIComponent(keyValue[1]);
                }
            });
        }
        return obj;
    }
    getRequestParameterOrDefault(key, defaultValue) {
        return (find(this.getRequestParameters(), function (_paramValue, paramKey) {
            return paramKey.toLowerCase() === key.toLowerCase();
        }) || defaultValue);
    }
    getRequestParamValue(key, defaultValue) {
        return this.getRequestParameterOrDefault(key, defaultValue);
    }
    requestParamsContains(key) {
        return this.getRequestParameters()[key] !== undefined;
    }
    getHashParameter(key) {
        const hashParam = this.getHashParameters()[key];
        if (hashParam !== undefined) {
            return hashParam.value;
        }
        return null;
    }
    getUrlWithOnlyHashParam() {
        if (this.window && this.window.location && this.window.location.hash) {
            return this.window.location.hash;
        }
        return '';
    }
    removeURLParameters(removeParams) {
        const deleteRegex = new RegExp(removeParams.join('=|') + '=');
        const params = this.window.location.search.slice(1).split('&');
        const search = [];
        for (const value of params) {
            if (value.length > 0 && !deleteRegex.test(value)) {
                search.push(value);
            }
        }
        const path = this.window.location.pathname + (search.length ? '?' + search.join('&') : '') + this.window.location.hash;
        this.window.history.replaceState({}, this.window.document.title, path);
    }
    removeParametersFromUrl(url, parameters) {
        if (!Array.isArray(parameters)) {
            parameters = [parameters];
        }
        if (!url?.startsWith('http')) {
            return url;
        }
        const urlObject = new URL(url);
        const params = urlObject.searchParams;
        parameters.forEach((param) => {
            params.delete(param);
        });
        return urlObject.href;
    }
    replaceURLParameters(data) {
        const params = this.window.location.search.slice(1).split('&');
        const search = [];
        for (const value of params) {
            if (value.length > 0) {
                const split = value.split('=');
                const key = decodeURIComponent(split[0]);
                const newValue = data.find((d) => d.key === key)?.value ?? decodeURIComponent(split[1]);
                search.push(`${encodeURIComponent(key)}=${encodeURIComponent(newValue)}`);
            }
        }
        data
            .filter((d) => !params.find((p) => decodeURIComponent(p.split('=')[0]) === d.key))
            .forEach((d) => search.push(`${encodeURIComponent(d.key)}=${encodeURIComponent(d.value)}`));
        const path = this.window.location.pathname + (search.length ? '?' + search.join('&') : '') + this.window.location.hash;
        this.window.history.replaceState({}, this.window.document.title, path);
    }
    fromSource(value) {
        let source = this.getRequestParamValue(QueryParamEnum.SOURCE, '');
        source = source && source.toUpperCase();
        return source === value.toUpperCase();
    }
    getHashParameters() {
        if (this.window && this.window.location && this.window.location.hash) {
            const hash = this.window.location.hash.replace(/^#/, '');
            if (hash !== '') {
                const pairs = decodeURI(hash).split('/');
                return keyBy(map(pairs, (pair) => {
                    const keyValue = pair.split('=');
                    return {
                        key: keyValue[0],
                        value: keyValue[1],
                    };
                }), (p) => p.key);
            }
        }
        return [];
    }
    buildUrlWithParams(url, params) {
        const paramList = [];
        params.forEach((value, key) => {
            paramList.push(`${key}=${value}`);
        });
        return url + (paramList.length > 0 ? `?${paramList.join('&')}` : '');
    }
    buildUrlWithHashParams(url, params) {
        const paramList = [];
        params.forEach((value, key) => {
            paramList.push(`${key}=${value}`);
        });
        return url + (paramList.length > 0 ? '/#/' + `${paramList.join('/')}` : '');
    }
    getOrigin() {
        return this.window.location.origin;
    }
    getActionParametersRemovedURL() {
        const paramArray = [];
        const params = this.getCurrentUrl().split('&');
        for (const value of params) {
            if (value.length > 0 && value !== 'action=register') {
                paramArray.push(value);
            }
        }
        return paramArray.join('&');
    }
    getParameters(urlString) {
        const url = new URL(urlString);
        const paramMap = new Map();
        for (const [key, value] of url.searchParams.entries()) {
            paramMap.set(key, decodeURIComponent(value));
        }
        return paramMap;
    }
    openNewTabForSafari(url) {
        const anchorElement = this.window.document.createElement('a');
        anchorElement.target = '_blank';
        anchorElement.href = url;
        const event = new MouseEvent('click', {
            view: window,
            bubbles: true,
            cancelable: true,
            detail: 0,
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            ctrlKey: false,
            altKey: false,
            shiftKey: false,
            metaKey: false,
            button: 0,
            relatedTarget: null,
        });
        anchorElement.dispatchEvent(event);
    }
    static ɵfac = function UrlService_Factory(t) { return new (t || UrlService)(i0.ɵɵinject('Window'), i0.ɵɵinject(i1.DataLayerService), i0.ɵɵinject(i2.ClientBrowserTypeService)); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: UrlService, factory: UrlService.ɵfac, providedIn: 'root' });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(UrlService, [{
        type: Injectable,
        args: [{
                providedIn: 'root',
            }]
    }], () => [{ type: Window, decorators: [{
                type: Inject,
                args: ['Window']
            }] }, { type: i1.DataLayerService }, { type: i2.ClientBrowserTypeService }], null); })();
//# sourceMappingURL=data:application/json;base64,