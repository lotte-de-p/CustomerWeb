import { Injectable } from '@angular/core';
import { BrowserTypeEnum } from './browser-type.enum';
import * as i0 from "@angular/core";
export class ClientBrowserTypeService {
    static SUBSTRING_NOT_IN_STRING_DELIMETER = -1;
    clientBrowserType() {
        const agent = window.navigator.userAgent.toLowerCase();
        if (agent.indexOf('edge') > ClientBrowserTypeService.SUBSTRING_NOT_IN_STRING_DELIMETER) {
            return BrowserTypeEnum.EDGE;
        }
        else if (agent.indexOf('opr') > ClientBrowserTypeService.SUBSTRING_NOT_IN_STRING_DELIMETER && !!window['opr']) {
            return BrowserTypeEnum.OPERA;
        }
        else if (agent.indexOf('chrome') > ClientBrowserTypeService.SUBSTRING_NOT_IN_STRING_DELIMETER &&
            !!window['chrome']) {
            return BrowserTypeEnum.CHROME;
        }
        else if (agent.indexOf('trident') > ClientBrowserTypeService.SUBSTRING_NOT_IN_STRING_DELIMETER) {
            return BrowserTypeEnum.INTERNET_EXPLORER;
        }
        else if (agent.indexOf('firefox') > ClientBrowserTypeService.SUBSTRING_NOT_IN_STRING_DELIMETER) {
            return BrowserTypeEnum.FIREFOX;
        }
        else if (agent.indexOf('safari') > ClientBrowserTypeService.SUBSTRING_NOT_IN_STRING_DELIMETER) {
            return BrowserTypeEnum.SAFARI;
        }
        else {
            return BrowserTypeEnum.UNKNOWN;
        }
    }
    isClientUsingSafari() {
        return this.clientBrowserType() === BrowserTypeEnum.SAFARI;
    }
    static ɵfac = function ClientBrowserTypeService_Factory(t) { return new (t || ClientBrowserTypeService)(); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ClientBrowserTypeService, factory: ClientBrowserTypeService.ɵfac, providedIn: 'root' });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(ClientBrowserTypeService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], null, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50LWJyb3dzZXItdHlwZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9wYWdlL2NsaWVudC1icm93c2VyLXR5cGUvY2xpZW50LWJyb3dzZXItdHlwZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDOztBQUd0RCxNQUFNLE9BQU8sd0JBQXdCO0lBQzNCLE1BQU0sQ0FBVSxpQ0FBaUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUUvRCxpQkFBaUI7UUFDZixNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUV2RCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsd0JBQXdCLENBQUMsaUNBQWlDLEVBQUUsQ0FBQztZQUN2RixPQUFPLGVBQWUsQ0FBQyxJQUFJLENBQUM7UUFDOUIsQ0FBQzthQUFNLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyx3QkFBd0IsQ0FBQyxpQ0FBaUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7WUFDaEgsT0FBTyxlQUFlLENBQUMsS0FBSyxDQUFDO1FBQy9CLENBQUM7YUFBTSxJQUNMLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEdBQUcsd0JBQXdCLENBQUMsaUNBQWlDO1lBQ3BGLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQ2xCLENBQUM7WUFDRCxPQUFPLGVBQWUsQ0FBQyxNQUFNLENBQUM7UUFDaEMsQ0FBQzthQUFNLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyx3QkFBd0IsQ0FBQyxpQ0FBaUMsRUFBRSxDQUFDO1lBQ2pHLE9BQU8sZUFBZSxDQUFDLGlCQUFpQixDQUFDO1FBQzNDLENBQUM7YUFBTSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsd0JBQXdCLENBQUMsaUNBQWlDLEVBQUUsQ0FBQztZQUNqRyxPQUFPLGVBQWUsQ0FBQyxPQUFPLENBQUM7UUFDakMsQ0FBQzthQUFNLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyx3QkFBd0IsQ0FBQyxpQ0FBaUMsRUFBRSxDQUFDO1lBQ2hHLE9BQU8sZUFBZSxDQUFDLE1BQU0sQ0FBQztRQUNoQyxDQUFDO2FBQU0sQ0FBQztZQUNOLE9BQU8sZUFBZSxDQUFDLE9BQU8sQ0FBQztRQUNqQyxDQUFDO0lBQ0gsQ0FBQztJQUVELG1CQUFtQjtRQUNqQixPQUFPLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxLQUFLLGVBQWUsQ0FBQyxNQUFNLENBQUM7SUFDN0QsQ0FBQztrRkE1QlUsd0JBQXdCO2dFQUF4Qix3QkFBd0IsV0FBeEIsd0JBQXdCLG1CQURYLE1BQU07O2lGQUNuQix3QkFBd0I7Y0FEcEMsVUFBVTtlQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJyb3dzZXJUeXBlRW51bSB9IGZyb20gJy4vYnJvd3Nlci10eXBlLmVudW0nO1xuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIENsaWVudEJyb3dzZXJUeXBlU2VydmljZSB7XG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IFNVQlNUUklOR19OT1RfSU5fU1RSSU5HX0RFTElNRVRFUiA9IC0xO1xuXG4gIGNsaWVudEJyb3dzZXJUeXBlKCk6IEJyb3dzZXJUeXBlRW51bSB7XG4gICAgY29uc3QgYWdlbnQgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xuXG4gICAgaWYgKGFnZW50LmluZGV4T2YoJ2VkZ2UnKSA+IENsaWVudEJyb3dzZXJUeXBlU2VydmljZS5TVUJTVFJJTkdfTk9UX0lOX1NUUklOR19ERUxJTUVURVIpIHtcbiAgICAgIHJldHVybiBCcm93c2VyVHlwZUVudW0uRURHRTtcbiAgICB9IGVsc2UgaWYgKGFnZW50LmluZGV4T2YoJ29wcicpID4gQ2xpZW50QnJvd3NlclR5cGVTZXJ2aWNlLlNVQlNUUklOR19OT1RfSU5fU1RSSU5HX0RFTElNRVRFUiAmJiAhIXdpbmRvd1snb3ByJ10pIHtcbiAgICAgIHJldHVybiBCcm93c2VyVHlwZUVudW0uT1BFUkE7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIGFnZW50LmluZGV4T2YoJ2Nocm9tZScpID4gQ2xpZW50QnJvd3NlclR5cGVTZXJ2aWNlLlNVQlNUUklOR19OT1RfSU5fU1RSSU5HX0RFTElNRVRFUiAmJlxuICAgICAgISF3aW5kb3dbJ2Nocm9tZSddXG4gICAgKSB7XG4gICAgICByZXR1cm4gQnJvd3NlclR5cGVFbnVtLkNIUk9NRTtcbiAgICB9IGVsc2UgaWYgKGFnZW50LmluZGV4T2YoJ3RyaWRlbnQnKSA+IENsaWVudEJyb3dzZXJUeXBlU2VydmljZS5TVUJTVFJJTkdfTk9UX0lOX1NUUklOR19ERUxJTUVURVIpIHtcbiAgICAgIHJldHVybiBCcm93c2VyVHlwZUVudW0uSU5URVJORVRfRVhQTE9SRVI7XG4gICAgfSBlbHNlIGlmIChhZ2VudC5pbmRleE9mKCdmaXJlZm94JykgPiBDbGllbnRCcm93c2VyVHlwZVNlcnZpY2UuU1VCU1RSSU5HX05PVF9JTl9TVFJJTkdfREVMSU1FVEVSKSB7XG4gICAgICByZXR1cm4gQnJvd3NlclR5cGVFbnVtLkZJUkVGT1g7XG4gICAgfSBlbHNlIGlmIChhZ2VudC5pbmRleE9mKCdzYWZhcmknKSA+IENsaWVudEJyb3dzZXJUeXBlU2VydmljZS5TVUJTVFJJTkdfTk9UX0lOX1NUUklOR19ERUxJTUVURVIpIHtcbiAgICAgIHJldHVybiBCcm93c2VyVHlwZUVudW0uU0FGQVJJO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gQnJvd3NlclR5cGVFbnVtLlVOS05PV047XG4gICAgfVxuICB9XG5cbiAgaXNDbGllbnRVc2luZ1NhZmFyaSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5jbGllbnRCcm93c2VyVHlwZSgpID09PSBCcm93c2VyVHlwZUVudW0uU0FGQVJJO1xuICB9XG59XG4iXX0=