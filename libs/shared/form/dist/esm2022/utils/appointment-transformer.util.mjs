import { forEach } from 'lodash-es';
import { AppointmentTransformerModel, AppointmentTransformerSlot, NCTimeSlot, } from '../models';
import { AppointmentPickerConsumerTypeEnum, } from '../interfaces';
import { TimeslotUtil } from './timeslot.util';
export class AppointmentTransformerUtil {
    static doTransform(timeSlots, consumerType) {
        switch (consumerType) {
            case AppointmentPickerConsumerTypeEnum.CAFE:
                return this.doCafeTransform(timeSlots);
            case AppointmentPickerConsumerTypeEnum.NC:
                return this.doNCTransform(timeSlots);
        }
    }
    static doCafeTransform(cafeTimeSlots) {
        const appointmentTransformerModel = new AppointmentTransformerModel();
        appointmentTransformerModel.slots = [];
        forEach(cafeTimeSlots, (cafeTimeSlot) => {
            if (cafeTimeSlot) {
                appointmentTransformerModel.slots.push(this.getCafeTransformedAvailability(cafeTimeSlot));
            }
        });
        return appointmentTransformerModel;
    }
    static getCafeTransformedAvailability(timeSlot) {
        const appointmentTransformedSlot = new AppointmentTransformerSlot();
        appointmentTransformedSlot.timeSlots = [];
        const cafeTimeSlot = timeSlot;
        const isCustomMoment = cafeTimeSlot.isCustomMoment;
        if (cafeTimeSlot.date) {
            appointmentTransformedSlot.date = cafeTimeSlot.date;
        }
        if (cafeTimeSlot.moments) {
            forEach(cafeTimeSlot.moments, (availability) => {
                appointmentTransformedSlot.timeSlots.push(this.getCafeAvailability(false, availability));
            });
        }
        if (isCustomMoment && cafeTimeSlot.momentObjects) {
            appointmentTransformedSlot.isCustomMoment = true;
            appointmentTransformedSlot.timeSlots = cafeTimeSlot.momentObjects.map((timeslotMoment) => this.getCafeAvailability(true, timeslotMoment.key, timeslotMoment));
        }
        return appointmentTransformedSlot;
    }
    static getCafeAvailability(isCustomMoment, timeslotKey, timeslotMoment) {
        const timeslotMomentObj = isCustomMoment ? timeslotMoment : TimeslotUtil.enumToMomentObject(timeslotKey);
        return { code: timeslotKey, timeslotMoment: timeslotMomentObj };
    }
    static doNCTransform(timeSlots) {
        const transformerModel = new AppointmentTransformerModel();
        transformerModel.slots = [];
        forEach(timeSlots, (timeSlot) => {
            if (timeSlot && timeSlot instanceof NCTimeSlot) {
                transformerModel.slots.push(this.getNCTransformedAvailability(timeSlot));
            }
        });
        return transformerModel;
    }
    static getNCTransformedAvailability(timeSlot) {
        const appointmentTransformedSlot = new AppointmentTransformerSlot();
        appointmentTransformedSlot.timeSlots = [];
        if (timeSlot.date) {
            appointmentTransformedSlot.date = timeSlot.date;
        }
        if (timeSlot instanceof NCTimeSlot && timeSlot.timeSlots) {
            forEach(timeSlot.timeSlots, (nCTimeSlotAvailability) => {
                appointmentTransformedSlot.timeSlots.push(this.getNCAvailability(nCTimeSlotAvailability));
            });
        }
        return appointmentTransformedSlot;
    }
    static getNCAvailability(nCTimeSlotAvailability) {
        const transformedAvailability = {};
        transformedAvailability.specUrl = nCTimeSlotAvailability.specUrl;
        transformedAvailability.code = nCTimeSlotAvailability.code;
        transformedAvailability.availabiltyId = nCTimeSlotAvailability.availabilityId;
        transformedAvailability.timeFormat = nCTimeSlotAvailability.timeFormat;
        transformedAvailability.productInfo = nCTimeSlotAvailability.productInfo;
        return transformedAvailability;
    }
}
//# sourceMappingURL=data:application/json;base64,