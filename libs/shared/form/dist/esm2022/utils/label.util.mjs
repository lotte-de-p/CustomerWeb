import { LabelKeyType } from '@telenet/ng-lib-page';
export class LabelUtil {
    static LABEL_PREFIX = 'ng';
    static getLabelKeyWithTypeLabel(key) {
        return this.parseKey(key, LabelKeyType.LABEL);
    }
    static getLabelKeyWithTypeTitle(key) {
        return this.parseKey(key, LabelKeyType.TITLE);
    }
    static getLabelKeyWithTypePlaceholder(key) {
        return this.parseKey(key, LabelKeyType.PLACEHOLDER);
    }
    static getLabelKeyWithTypeText(key) {
        return this.parseKey(key, LabelKeyType.TXT);
    }
    static getLabelKeyWithTypeError(key) {
        return this.parseKey(key, LabelKeyType.ERROR);
    }
    static getLabelKeyWithTypeButton(key) {
        return this.parseKey(key, LabelKeyType.BUTTON);
    }
    static getLabelKeyWithTypeTooltip(key) {
        return this.parseKey(key, LabelKeyType.TOOLTIP);
    }
    static getLabelKeyByType(key, type) {
        return this.parseKey(key, type);
    }
    static normalizeKey(key) {
        return key
            .replace(/ /g, '-')
            .replace(/_/g, '-')
            .replace(/[^.0-9a-zA-Z_-]/g, '')
            .toLowerCase();
    }
    static parseKey(key, labelKeyType) {
        if (Array.isArray(key)) {
            return this.joinKeys([this.LABEL_PREFIX, this.joinKeys(key), labelKeyType]);
        }
        return this.joinKeys([this.LABEL_PREFIX, key, labelKeyType]);
    }
    static joinKeys(values) {
        return values.join('.');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFiZWwudXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9sYWJlbC51dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUVwRCxNQUFNLE9BQU8sU0FBUztJQUNwQixNQUFNLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztJQUUzQixNQUFNLENBQUMsd0JBQXdCLENBQUMsR0FBc0I7UUFDcEQsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVELE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxHQUFzQjtRQUNwRCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRUQsTUFBTSxDQUFDLDhCQUE4QixDQUFDLEdBQXNCO1FBQzFELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsWUFBWSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFRCxNQUFNLENBQUMsdUJBQXVCLENBQUMsR0FBc0I7UUFDbkQsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVELE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxHQUFzQjtRQUNwRCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRUQsTUFBTSxDQUFDLHlCQUF5QixDQUFDLEdBQXNCO1FBQ3JELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFRCxNQUFNLENBQUMsMEJBQTBCLENBQUMsR0FBc0I7UUFDdEQsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVELE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFzQixFQUFFLElBQWtCO1FBQ2pFLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVELE1BQU0sQ0FBQyxZQUFZLENBQUMsR0FBVztRQUM3QixPQUFPLEdBQUc7YUFDUCxPQUFPLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQzthQUNsQixPQUFPLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQzthQUNsQixPQUFPLENBQUMsa0JBQWtCLEVBQUUsRUFBRSxDQUFDO2FBQy9CLFdBQVcsRUFBRSxDQUFDO0lBQ25CLENBQUM7SUFFTyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQXNCLEVBQUUsWUFBMEI7UUFDeEUsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDdkIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUM7UUFDOUUsQ0FBQztRQUNELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsR0FBRyxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUM7SUFDL0QsQ0FBQztJQUVPLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBZ0I7UUFDdEMsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzFCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBMYWJlbEtleVR5cGUgfSBmcm9tICdAdGVsZW5ldC9uZy1saWItcGFnZSc7XG5cbmV4cG9ydCBjbGFzcyBMYWJlbFV0aWwge1xuICBzdGF0aWMgTEFCRUxfUFJFRklYID0gJ25nJztcblxuICBzdGF0aWMgZ2V0TGFiZWxLZXlXaXRoVHlwZUxhYmVsKGtleTogc3RyaW5nIHwgc3RyaW5nW10pOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnBhcnNlS2V5KGtleSwgTGFiZWxLZXlUeXBlLkxBQkVMKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRMYWJlbEtleVdpdGhUeXBlVGl0bGUoa2V5OiBzdHJpbmcgfCBzdHJpbmdbXSk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMucGFyc2VLZXkoa2V5LCBMYWJlbEtleVR5cGUuVElUTEUpO1xuICB9XG5cbiAgc3RhdGljIGdldExhYmVsS2V5V2l0aFR5cGVQbGFjZWhvbGRlcihrZXk6IHN0cmluZyB8IHN0cmluZ1tdKSB7XG4gICAgcmV0dXJuIHRoaXMucGFyc2VLZXkoa2V5LCBMYWJlbEtleVR5cGUuUExBQ0VIT0xERVIpO1xuICB9XG5cbiAgc3RhdGljIGdldExhYmVsS2V5V2l0aFR5cGVUZXh0KGtleTogc3RyaW5nIHwgc3RyaW5nW10pIHtcbiAgICByZXR1cm4gdGhpcy5wYXJzZUtleShrZXksIExhYmVsS2V5VHlwZS5UWFQpO1xuICB9XG5cbiAgc3RhdGljIGdldExhYmVsS2V5V2l0aFR5cGVFcnJvcihrZXk6IHN0cmluZyB8IHN0cmluZ1tdKSB7XG4gICAgcmV0dXJuIHRoaXMucGFyc2VLZXkoa2V5LCBMYWJlbEtleVR5cGUuRVJST1IpO1xuICB9XG5cbiAgc3RhdGljIGdldExhYmVsS2V5V2l0aFR5cGVCdXR0b24oa2V5OiBzdHJpbmcgfCBzdHJpbmdbXSkge1xuICAgIHJldHVybiB0aGlzLnBhcnNlS2V5KGtleSwgTGFiZWxLZXlUeXBlLkJVVFRPTik7XG4gIH1cblxuICBzdGF0aWMgZ2V0TGFiZWxLZXlXaXRoVHlwZVRvb2x0aXAoa2V5OiBzdHJpbmcgfCBzdHJpbmdbXSkge1xuICAgIHJldHVybiB0aGlzLnBhcnNlS2V5KGtleSwgTGFiZWxLZXlUeXBlLlRPT0xUSVApO1xuICB9XG5cbiAgc3RhdGljIGdldExhYmVsS2V5QnlUeXBlKGtleTogc3RyaW5nIHwgc3RyaW5nW10sIHR5cGU6IExhYmVsS2V5VHlwZSk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMucGFyc2VLZXkoa2V5LCB0eXBlKTtcbiAgfVxuXG4gIHN0YXRpYyBub3JtYWxpemVLZXkoa2V5OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBrZXlcbiAgICAgIC5yZXBsYWNlKC8gL2csICctJylcbiAgICAgIC5yZXBsYWNlKC9fL2csICctJylcbiAgICAgIC5yZXBsYWNlKC9bXi4wLTlhLXpBLVpfLV0vZywgJycpXG4gICAgICAudG9Mb3dlckNhc2UoKTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIHBhcnNlS2V5KGtleTogc3RyaW5nIHwgc3RyaW5nW10sIGxhYmVsS2V5VHlwZTogTGFiZWxLZXlUeXBlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoa2V5KSkge1xuICAgICAgcmV0dXJuIHRoaXMuam9pbktleXMoW3RoaXMuTEFCRUxfUFJFRklYLCB0aGlzLmpvaW5LZXlzKGtleSksIGxhYmVsS2V5VHlwZV0pO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5qb2luS2V5cyhbdGhpcy5MQUJFTF9QUkVGSVgsIGtleSwgbGFiZWxLZXlUeXBlXSk7XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBqb2luS2V5cyh2YWx1ZXM6IHN0cmluZ1tdKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdmFsdWVzLmpvaW4oJy4nKTtcbiAgfVxufVxuIl19