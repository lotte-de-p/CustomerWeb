import { Validators } from '@angular/forms';
import { RegexConstants } from '../constants/regex.constant';
export class NetworkNameValidator extends Validators {
    static validNetworkName(forbiddenNames, forbiddenWords) {
        return (control) => {
            const value = control.value;
            const pattern = RegexConstants.NETWORK_NAME.test(value);
            const notStartingWithSpace = this.notStartingWithSpace(value);
            const hasForbiiddenSSIDs = this.hasForbiiddenSSIDs(forbiddenNames, forbiddenWords, value);
            if (pattern || notStartingWithSpace || hasForbiiddenSSIDs) {
                return {
                    pattern: pattern,
                    notStartingWithSpace: notStartingWithSpace,
                    hasForbiiddenSSIDs: hasForbiiddenSSIDs,
                };
            }
            else {
                return null;
            }
        };
    }
    static notStartingWithSpace(value) {
        return RegexConstants.NO_START_SPACE_REGEX.test(value);
    }
    static hasForbiiddenSSIDs(forbiddenNames, forbiddenWords, value) {
        const startWithTelent = forbiddenWords.map((name) => 'telenet' + name);
        const endWithTelent = forbiddenWords.map((name) => name + 'telenet');
        const startWithTelenetWithSpace = forbiddenWords.map((name) => 'telenet ' + name);
        const endWithTelentWithSpace = forbiddenWords.map((name) => name + ' telenet');
        const wordsArrayNotAllowed = forbiddenNames.concat(startWithTelent, endWithTelent, startWithTelenetWithSpace, endWithTelentWithSpace);
        return value && wordsArrayNotAllowed.includes(value.toLowerCase());
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmV0d29yay1uYW1lLnZhbGlkYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy92YWxpZGF0b3JzL25ldHdvcmstbmFtZS52YWxpZGF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFrRCxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM1RixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFFN0QsTUFBTSxPQUFPLG9CQUFxQixTQUFRLFVBQVU7SUFDbEQsTUFBTSxDQUFDLGdCQUFnQixDQUFDLGNBQXdCLEVBQUUsY0FBd0I7UUFDeEUsT0FBTyxDQUFDLE9BQXdCLEVBQTJCLEVBQUU7WUFDM0QsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQztZQUM1QixNQUFNLE9BQU8sR0FBRyxjQUFjLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN4RCxNQUFNLG9CQUFvQixHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM5RCxNQUFNLGtCQUFrQixHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxjQUFjLEVBQUUsY0FBYyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBRTFGLElBQUksT0FBTyxJQUFJLG9CQUFvQixJQUFJLGtCQUFrQixFQUFFLENBQUM7Z0JBQzFELE9BQU87b0JBQ0wsT0FBTyxFQUFFLE9BQU87b0JBQ2hCLG9CQUFvQixFQUFFLG9CQUFvQjtvQkFDMUMsa0JBQWtCLEVBQUUsa0JBQWtCO2lCQUN2QyxDQUFDO1lBQ0osQ0FBQztpQkFBTSxDQUFDO2dCQUNOLE9BQU8sSUFBSSxDQUFDO1lBQ2QsQ0FBQztRQUNILENBQUMsQ0FBQztJQUNKLENBQUM7SUFFTyxNQUFNLENBQUMsb0JBQW9CLENBQUMsS0FBYTtRQUMvQyxPQUFPLGNBQWMsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDekQsQ0FBQztJQUVPLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxjQUF3QixFQUFFLGNBQXdCLEVBQUUsS0FBYTtRQUNqRyxNQUFNLGVBQWUsR0FBRyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDdkUsTUFBTSxhQUFhLEdBQUcsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQyxDQUFDO1FBQ3JFLE1BQU0seUJBQXlCLEdBQUcsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQ2xGLE1BQU0sc0JBQXNCLEdBQUcsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBQyxDQUFDO1FBRS9FLE1BQU0sb0JBQW9CLEdBQUcsY0FBYyxDQUFDLE1BQU0sQ0FDaEQsZUFBZSxFQUNmLGFBQWEsRUFDYix5QkFBeUIsRUFDekIsc0JBQXNCLENBQ3ZCLENBQUM7UUFFRixPQUFPLEtBQUssSUFBSSxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7SUFDckUsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWJzdHJhY3RDb250cm9sLCBWYWxpZGF0aW9uRXJyb3JzLCBWYWxpZGF0b3JGbiwgVmFsaWRhdG9ycyB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IFJlZ2V4Q29uc3RhbnRzIH0gZnJvbSAnLi4vY29uc3RhbnRzL3JlZ2V4LmNvbnN0YW50JztcblxuZXhwb3J0IGNsYXNzIE5ldHdvcmtOYW1lVmFsaWRhdG9yIGV4dGVuZHMgVmFsaWRhdG9ycyB7XG4gIHN0YXRpYyB2YWxpZE5ldHdvcmtOYW1lKGZvcmJpZGRlbk5hbWVzOiBzdHJpbmdbXSwgZm9yYmlkZGVuV29yZHM6IHN0cmluZ1tdKTogVmFsaWRhdG9yRm4ge1xuICAgIHJldHVybiAoY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogVmFsaWRhdGlvbkVycm9ycyB8IG51bGwgPT4ge1xuICAgICAgY29uc3QgdmFsdWUgPSBjb250cm9sLnZhbHVlO1xuICAgICAgY29uc3QgcGF0dGVybiA9IFJlZ2V4Q29uc3RhbnRzLk5FVFdPUktfTkFNRS50ZXN0KHZhbHVlKTtcbiAgICAgIGNvbnN0IG5vdFN0YXJ0aW5nV2l0aFNwYWNlID0gdGhpcy5ub3RTdGFydGluZ1dpdGhTcGFjZSh2YWx1ZSk7XG4gICAgICBjb25zdCBoYXNGb3JiaWlkZGVuU1NJRHMgPSB0aGlzLmhhc0ZvcmJpaWRkZW5TU0lEcyhmb3JiaWRkZW5OYW1lcywgZm9yYmlkZGVuV29yZHMsIHZhbHVlKTtcblxuICAgICAgaWYgKHBhdHRlcm4gfHwgbm90U3RhcnRpbmdXaXRoU3BhY2UgfHwgaGFzRm9yYmlpZGRlblNTSURzKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcGF0dGVybjogcGF0dGVybixcbiAgICAgICAgICBub3RTdGFydGluZ1dpdGhTcGFjZTogbm90U3RhcnRpbmdXaXRoU3BhY2UsXG4gICAgICAgICAgaGFzRm9yYmlpZGRlblNTSURzOiBoYXNGb3JiaWlkZGVuU1NJRHMsXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgbm90U3RhcnRpbmdXaXRoU3BhY2UodmFsdWU6IHN0cmluZykge1xuICAgIHJldHVybiBSZWdleENvbnN0YW50cy5OT19TVEFSVF9TUEFDRV9SRUdFWC50ZXN0KHZhbHVlKTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIGhhc0ZvcmJpaWRkZW5TU0lEcyhmb3JiaWRkZW5OYW1lczogc3RyaW5nW10sIGZvcmJpZGRlbldvcmRzOiBzdHJpbmdbXSwgdmFsdWU6IHN0cmluZykge1xuICAgIGNvbnN0IHN0YXJ0V2l0aFRlbGVudCA9IGZvcmJpZGRlbldvcmRzLm1hcCgobmFtZSkgPT4gJ3RlbGVuZXQnICsgbmFtZSk7XG4gICAgY29uc3QgZW5kV2l0aFRlbGVudCA9IGZvcmJpZGRlbldvcmRzLm1hcCgobmFtZSkgPT4gbmFtZSArICd0ZWxlbmV0Jyk7XG4gICAgY29uc3Qgc3RhcnRXaXRoVGVsZW5ldFdpdGhTcGFjZSA9IGZvcmJpZGRlbldvcmRzLm1hcCgobmFtZSkgPT4gJ3RlbGVuZXQgJyArIG5hbWUpO1xuICAgIGNvbnN0IGVuZFdpdGhUZWxlbnRXaXRoU3BhY2UgPSBmb3JiaWRkZW5Xb3Jkcy5tYXAoKG5hbWUpID0+IG5hbWUgKyAnIHRlbGVuZXQnKTtcblxuICAgIGNvbnN0IHdvcmRzQXJyYXlOb3RBbGxvd2VkID0gZm9yYmlkZGVuTmFtZXMuY29uY2F0KFxuICAgICAgc3RhcnRXaXRoVGVsZW50LFxuICAgICAgZW5kV2l0aFRlbGVudCxcbiAgICAgIHN0YXJ0V2l0aFRlbGVuZXRXaXRoU3BhY2UsXG4gICAgICBlbmRXaXRoVGVsZW50V2l0aFNwYWNlXG4gICAgKTtcblxuICAgIHJldHVybiB2YWx1ZSAmJiB3b3Jkc0FycmF5Tm90QWxsb3dlZC5pbmNsdWRlcyh2YWx1ZS50b0xvd2VyQ2FzZSgpKTtcbiAgfVxufVxuIl19