import { Validators } from '@angular/forms';
import { isEmpty } from 'lodash-es';
import { RegexConstants } from '../constants';
export class BelgianEidValidator extends Validators {
    static isNumberValid(control) {
        const value = isEmpty(control.value) ? '' : control.value;
        const isValidFormat = RegexConstants.BELGIAN_EID_NUMBER.test(value);
        if (!isValidFormat && !isEmpty(value)) {
            return { invalidEid: true };
        }
        if (isValidFormat) {
            return BelgianEidValidator.isValidEid(value)
                ? null
                : {
                    invalidEid: true,
                };
        }
        return null;
    }
    static isValidEid(value) {
        // '592-8470056-97'
        const eidNo = isNaN(parseInt(value.substring(0, 3), 10))
            ? parseInt(value.substring(4, 11), 10)
            : parseInt(value.substring(0, 3) + value.substring(4, 11), 10);
        const lastTwoDigit = value.substring(value.length - 2, value.length);
        let checkSum = eidNo % 97;
        if (checkSum === 0) {
            checkSum = 97;
        }
        const checkSumString = checkSum.toString();
        return parseInt(checkSumString, 10) === parseInt(lastTwoDigit, 10);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVsZ2lhbi1laWQtdmFsaWRhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3ZhbGlkYXRvcnMvYmVsZ2lhbi1laWQtdmFsaWRhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBbUIsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0QsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNwQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRTlDLE1BQU0sT0FBTyxtQkFBb0IsU0FBUSxVQUFVO0lBQ2pELE1BQU0sQ0FBQyxhQUFhLENBQUMsT0FBd0I7UUFDM0MsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLGNBQWMsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDcEUsSUFBSSxDQUFDLGFBQWEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQ3RDLE9BQU8sRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLENBQUM7UUFDOUIsQ0FBQztRQUNELElBQUksYUFBYSxFQUFFLENBQUM7WUFDbEIsT0FBTyxtQkFBbUIsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDO2dCQUMxQyxDQUFDLENBQUMsSUFBSTtnQkFDTixDQUFDLENBQUM7b0JBQ0UsVUFBVSxFQUFFLElBQUk7aUJBQ2pCLENBQUM7UUFDUixDQUFDO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU8sTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFhO1FBQ3JDLG1CQUFtQjtRQUNuQixNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ3RELENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQ3RDLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDakUsTUFBTSxZQUFZLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDckUsSUFBSSxRQUFRLEdBQUcsS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUMxQixJQUFJLFFBQVEsS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUNuQixRQUFRLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLENBQUM7UUFDRCxNQUFNLGNBQWMsR0FBRyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDM0MsT0FBTyxRQUFRLENBQUMsY0FBYyxFQUFFLEVBQUUsQ0FBQyxLQUFLLFFBQVEsQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDckUsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWJzdHJhY3RDb250cm9sLCBWYWxpZGF0b3JzIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgaXNFbXB0eSB9IGZyb20gJ2xvZGFzaC1lcyc7XG5pbXBvcnQgeyBSZWdleENvbnN0YW50cyB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5cbmV4cG9ydCBjbGFzcyBCZWxnaWFuRWlkVmFsaWRhdG9yIGV4dGVuZHMgVmFsaWRhdG9ycyB7XG4gIHN0YXRpYyBpc051bWJlclZhbGlkKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCkge1xuICAgIGNvbnN0IHZhbHVlID0gaXNFbXB0eShjb250cm9sLnZhbHVlKSA/ICcnIDogY29udHJvbC52YWx1ZTtcbiAgICBjb25zdCBpc1ZhbGlkRm9ybWF0ID0gUmVnZXhDb25zdGFudHMuQkVMR0lBTl9FSURfTlVNQkVSLnRlc3QodmFsdWUpO1xuICAgIGlmICghaXNWYWxpZEZvcm1hdCAmJiAhaXNFbXB0eSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB7IGludmFsaWRFaWQ6IHRydWUgfTtcbiAgICB9XG4gICAgaWYgKGlzVmFsaWRGb3JtYXQpIHtcbiAgICAgIHJldHVybiBCZWxnaWFuRWlkVmFsaWRhdG9yLmlzVmFsaWRFaWQodmFsdWUpXG4gICAgICAgID8gbnVsbFxuICAgICAgICA6IHtcbiAgICAgICAgICAgIGludmFsaWRFaWQ6IHRydWUsXG4gICAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBpc1ZhbGlkRWlkKHZhbHVlOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAvLyAnNTkyLTg0NzAwNTYtOTcnXG4gICAgY29uc3QgZWlkTm8gPSBpc05hTihwYXJzZUludCh2YWx1ZS5zdWJzdHJpbmcoMCwgMyksIDEwKSlcbiAgICAgID8gcGFyc2VJbnQodmFsdWUuc3Vic3RyaW5nKDQsIDExKSwgMTApXG4gICAgICA6IHBhcnNlSW50KHZhbHVlLnN1YnN0cmluZygwLCAzKSArIHZhbHVlLnN1YnN0cmluZyg0LCAxMSksIDEwKTtcbiAgICBjb25zdCBsYXN0VHdvRGlnaXQgPSB2YWx1ZS5zdWJzdHJpbmcodmFsdWUubGVuZ3RoIC0gMiwgdmFsdWUubGVuZ3RoKTtcbiAgICBsZXQgY2hlY2tTdW0gPSBlaWRObyAlIDk3O1xuICAgIGlmIChjaGVja1N1bSA9PT0gMCkge1xuICAgICAgY2hlY2tTdW0gPSA5NztcbiAgICB9XG4gICAgY29uc3QgY2hlY2tTdW1TdHJpbmcgPSBjaGVja1N1bS50b1N0cmluZygpO1xuICAgIHJldHVybiBwYXJzZUludChjaGVja1N1bVN0cmluZywgMTApID09PSBwYXJzZUludChsYXN0VHdvRGlnaXQsIDEwKTtcbiAgfVxufVxuIl19