import { Validators } from '@angular/forms';
import { isEmpty } from 'lodash-es';
import { RegexConstants } from '../constants';
export class NationalRegistryNumberValidator extends Validators {
    static isNumberValid(control) {
        const value = isEmpty(control.value) ? '' : control.value;
        const isValidFormat = RegexConstants.NATIONAL_REGISTRY_NUMBER.test(value);
        if (!isValidFormat && !isEmpty(value)) {
            return { invalidNrn: true };
        }
        if (isValidFormat) {
            return NationalRegistryNumberValidator.isValidNrn(value)
                ? null
                : {
                    invalidNrn: true,
                };
        }
        return null;
    }
    static isValidNrn(value) {
        let mod97Value;
        value = value.replace(/[^0-9a-z]/gi, '');
        const YY = value.substring(0, 2);
        const MM = value.substring(2, 4);
        const DD = value.substring(4, 6);
        const SEQ = value.substring(6, 9);
        const checksum = parseInt(value.substring(9, 11), 10);
        const currentYear = parseInt(new Date().getFullYear().toString().substring(2), 10);
        const concatedPosValue = '' + 2 + YY + MM + DD + SEQ;
        const concatedNegValue = '' + YY + MM + DD + SEQ;
        const concatedPosValueInt = parseInt(concatedPosValue, 10);
        const concatedNegValueInt = parseInt(concatedNegValue, 10);
        if (currentYear - parseInt(YY, 10) >= 0) {
            mod97Value = 97 - (concatedPosValueInt % 97);
        }
        else {
            mod97Value = 97 - (concatedNegValueInt % 97);
        }
        return mod97Value === checksum;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF0aW9uYWwtcmVnaXN0cnktbnVtYmVyLnZhbGlkYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy92YWxpZGF0b3JzL25hdGlvbmFsLXJlZ2lzdHJ5LW51bWJlci52YWxpZGF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFtQixVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3RCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFOUMsTUFBTSxPQUFPLCtCQUFnQyxTQUFRLFVBQVU7SUFDN0QsTUFBTSxDQUFDLGFBQWEsQ0FBQyxPQUF3QjtRQUMzQyxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7UUFDMUQsTUFBTSxhQUFhLEdBQUcsY0FBYyxDQUFDLHdCQUF3QixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMxRSxJQUFJLENBQUMsYUFBYSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7WUFDdEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsQ0FBQztRQUM5QixDQUFDO1FBQ0QsSUFBSSxhQUFhLEVBQUUsQ0FBQztZQUNsQixPQUFPLCtCQUErQixDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUM7Z0JBQ3RELENBQUMsQ0FBQyxJQUFJO2dCQUNOLENBQUMsQ0FBQztvQkFDRSxVQUFVLEVBQUUsSUFBSTtpQkFDakIsQ0FBQztRQUNSLENBQUM7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQWE7UUFDN0IsSUFBSSxVQUFVLENBQUM7UUFDZixLQUFLLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDekMsTUFBTSxFQUFFLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDakMsTUFBTSxFQUFFLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDakMsTUFBTSxFQUFFLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDakMsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDbEMsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3RELE1BQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNuRixNQUFNLGdCQUFnQixHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsR0FBRyxDQUFDO1FBQ3JELE1BQU0sZ0JBQWdCLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEdBQUcsQ0FBQztRQUNqRCxNQUFNLG1CQUFtQixHQUFHLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUMzRCxNQUFNLG1CQUFtQixHQUFHLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUMzRCxJQUFJLFdBQVcsR0FBRyxRQUFRLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1lBQ3hDLFVBQVUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxtQkFBbUIsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUMvQyxDQUFDO2FBQU0sQ0FBQztZQUNOLFVBQVUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxtQkFBbUIsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUMvQyxDQUFDO1FBQ0QsT0FBTyxVQUFVLEtBQUssUUFBUSxDQUFDO0lBQ2pDLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFic3RyYWN0Q29udHJvbCwgVmFsaWRhdG9ycyB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IGlzRW1wdHkgfSBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHsgUmVnZXhDb25zdGFudHMgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuXG5leHBvcnQgY2xhc3MgTmF0aW9uYWxSZWdpc3RyeU51bWJlclZhbGlkYXRvciBleHRlbmRzIFZhbGlkYXRvcnMge1xuICBzdGF0aWMgaXNOdW1iZXJWYWxpZChjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpIHtcbiAgICBjb25zdCB2YWx1ZSA9IGlzRW1wdHkoY29udHJvbC52YWx1ZSkgPyAnJyA6IGNvbnRyb2wudmFsdWU7XG4gICAgY29uc3QgaXNWYWxpZEZvcm1hdCA9IFJlZ2V4Q29uc3RhbnRzLk5BVElPTkFMX1JFR0lTVFJZX05VTUJFUi50ZXN0KHZhbHVlKTtcbiAgICBpZiAoIWlzVmFsaWRGb3JtYXQgJiYgIWlzRW1wdHkodmFsdWUpKSB7XG4gICAgICByZXR1cm4geyBpbnZhbGlkTnJuOiB0cnVlIH07XG4gICAgfVxuICAgIGlmIChpc1ZhbGlkRm9ybWF0KSB7XG4gICAgICByZXR1cm4gTmF0aW9uYWxSZWdpc3RyeU51bWJlclZhbGlkYXRvci5pc1ZhbGlkTnJuKHZhbHVlKVxuICAgICAgICA/IG51bGxcbiAgICAgICAgOiB7XG4gICAgICAgICAgICBpbnZhbGlkTnJuOiB0cnVlLFxuICAgICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgc3RhdGljIGlzVmFsaWROcm4odmFsdWU6IHN0cmluZykge1xuICAgIGxldCBtb2Q5N1ZhbHVlO1xuICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvW14wLTlhLXpdL2dpLCAnJyk7XG4gICAgY29uc3QgWVkgPSB2YWx1ZS5zdWJzdHJpbmcoMCwgMik7XG4gICAgY29uc3QgTU0gPSB2YWx1ZS5zdWJzdHJpbmcoMiwgNCk7XG4gICAgY29uc3QgREQgPSB2YWx1ZS5zdWJzdHJpbmcoNCwgNik7XG4gICAgY29uc3QgU0VRID0gdmFsdWUuc3Vic3RyaW5nKDYsIDkpO1xuICAgIGNvbnN0IGNoZWNrc3VtID0gcGFyc2VJbnQodmFsdWUuc3Vic3RyaW5nKDksIDExKSwgMTApO1xuICAgIGNvbnN0IGN1cnJlbnRZZWFyID0gcGFyc2VJbnQobmV3IERhdGUoKS5nZXRGdWxsWWVhcigpLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDIpLCAxMCk7XG4gICAgY29uc3QgY29uY2F0ZWRQb3NWYWx1ZSA9ICcnICsgMiArIFlZICsgTU0gKyBERCArIFNFUTtcbiAgICBjb25zdCBjb25jYXRlZE5lZ1ZhbHVlID0gJycgKyBZWSArIE1NICsgREQgKyBTRVE7XG4gICAgY29uc3QgY29uY2F0ZWRQb3NWYWx1ZUludCA9IHBhcnNlSW50KGNvbmNhdGVkUG9zVmFsdWUsIDEwKTtcbiAgICBjb25zdCBjb25jYXRlZE5lZ1ZhbHVlSW50ID0gcGFyc2VJbnQoY29uY2F0ZWROZWdWYWx1ZSwgMTApO1xuICAgIGlmIChjdXJyZW50WWVhciAtIHBhcnNlSW50KFlZLCAxMCkgPj0gMCkge1xuICAgICAgbW9kOTdWYWx1ZSA9IDk3IC0gKGNvbmNhdGVkUG9zVmFsdWVJbnQgJSA5Nyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1vZDk3VmFsdWUgPSA5NyAtIChjb25jYXRlZE5lZ1ZhbHVlSW50ICUgOTcpO1xuICAgIH1cbiAgICByZXR1cm4gbW9kOTdWYWx1ZSA9PT0gY2hlY2tzdW07XG4gIH1cbn1cbiJdfQ==