import { Injectable } from '@angular/core';
import { CafeTimeSlot, CafeTimeSlotList } from '../models';
import { TimeslotUtil } from '../utils';
import { TimeslotMomentEnum } from '../enums';
import * as i0 from "@angular/core";
export class CafeTimeSlotMapper {
    toModel(rawCafeTimeSlot) {
        const cafeTimeSlotList = new CafeTimeSlotList();
        cafeTimeSlotList.firstAvailableSlotMonth = rawCafeTimeSlot.firstAvailableSlotMonth;
        cafeTimeSlotList.firstDays = this.createFirstDays(rawCafeTimeSlot.firstDays);
        cafeTimeSlotList.timeslots = this.createTimeSlots(rawCafeTimeSlot.slots);
        return cafeTimeSlotList;
    }
    createFirstDays(firstDays) {
        return Object.keys(firstDays).map((key) => {
            return new Date(firstDays[key]);
        });
    }
    createTimeSlots(slots) {
        const timeslots = [];
        Object.keys(slots).forEach((monthKey) => {
            const slotsPerMonth = slots[monthKey];
            Object.keys(slotsPerMonth).forEach((dayKey) => {
                if (slotsPerMonth[dayKey]) {
                    timeslots.push(this.createTimeSlot(slotsPerMonth[dayKey]));
                }
            });
        });
        return timeslots.sort((a, b) => (a.date > b.date ? 1 : -1));
    }
    createTimeSlot(slot) {
        const cafeTimeSlot = new CafeTimeSlot();
        cafeTimeSlot.date = new Date(slot.date);
        cafeTimeSlot.moments = slot.timing.map((timing) => {
            return TimeslotUtil.stringToEnum(timing) || TimeslotMomentEnum.DAY;
        });
        return cafeTimeSlot;
    }
    static ɵfac = function CafeTimeSlotMapper_Factory(t) { return new (t || CafeTimeSlotMapper)(); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: CafeTimeSlotMapper, factory: CafeTimeSlotMapper.ɵfac, providedIn: 'root' });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(CafeTimeSlotMapper, [{
        type: Injectable,
        args: [{
                providedIn: 'root',
            }]
    }], null, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZXNsb3QubWFwcGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL21hcHBlcnMvdGltZXNsb3QubWFwcGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLFlBQVksRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUMzRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRXhDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLFVBQVUsQ0FBQzs7QUFLOUMsTUFBTSxPQUFPLGtCQUFrQjtJQUM3QixPQUFPLENBQUMsZUFBNkM7UUFDbkQsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLGdCQUFnQixFQUFFLENBQUM7UUFDaEQsZ0JBQWdCLENBQUMsdUJBQXVCLEdBQUcsZUFBZSxDQUFDLHVCQUF1QixDQUFDO1FBQ25GLGdCQUFnQixDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM3RSxnQkFBZ0IsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDekUsT0FBTyxnQkFBZ0IsQ0FBQztJQUMxQixDQUFDO0lBRU8sZUFBZSxDQUFDLFNBQWlDO1FBQ3ZELE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtZQUN4QyxPQUFPLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ2xDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVPLGVBQWUsQ0FBQyxLQUFtQztRQUN6RCxNQUFNLFNBQVMsR0FBbUIsRUFBRSxDQUFDO1FBQ3JDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUU7WUFDdEMsTUFBTSxhQUFhLEdBQUcsS0FBSyxDQUFDLFFBQXlCLENBQUMsQ0FBQztZQUN2RCxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFO2dCQUM1QyxJQUFJLGFBQWEsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO29CQUMxQixTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDN0QsQ0FBQztZQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDOUQsQ0FBQztJQUVPLGNBQWMsQ0FBQyxJQUE4QjtRQUNuRCxNQUFNLFlBQVksR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ3hDLFlBQVksQ0FBQyxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hDLFlBQVksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUNoRCxPQUFPLFlBQVksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLElBQUksa0JBQWtCLENBQUMsR0FBRyxDQUFDO1FBQ3JFLENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxZQUFZLENBQUM7SUFDdEIsQ0FBQzs0RUFuQ1Usa0JBQWtCO2dFQUFsQixrQkFBa0IsV0FBbEIsa0JBQWtCLG1CQUZqQixNQUFNOztpRkFFUCxrQkFBa0I7Y0FIOUIsVUFBVTtlQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUmF3Q2FmZVRpbWVTbG90SW50ZXJmYWNlLCBSYXdDYWZlVGltZXNsb3RMaXN0SW50ZXJmYWNlLCBSYXdDYWZlVGltZXNsb3RNb250SW50ZXJmYWNlIH0gZnJvbSAnLi4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBDYWZlVGltZVNsb3QsIENhZmVUaW1lU2xvdExpc3QgfSBmcm9tICcuLi9tb2RlbHMnO1xuaW1wb3J0IHsgVGltZXNsb3RVdGlsIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgTWFwcGVySW50ZXJmYWNlIH0gZnJvbSAnQHRlbGVuZXQvbmctbGliLXNoYXJlZCc7XG5pbXBvcnQgeyBUaW1lc2xvdE1vbWVudEVudW0gfSBmcm9tICcuLi9lbnVtcyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBDYWZlVGltZVNsb3RNYXBwZXIgaW1wbGVtZW50cyBNYXBwZXJJbnRlcmZhY2U8UmF3Q2FmZVRpbWVzbG90TGlzdEludGVyZmFjZSwgQ2FmZVRpbWVTbG90TGlzdD4ge1xuICB0b01vZGVsKHJhd0NhZmVUaW1lU2xvdDogUmF3Q2FmZVRpbWVzbG90TGlzdEludGVyZmFjZSkge1xuICAgIGNvbnN0IGNhZmVUaW1lU2xvdExpc3QgPSBuZXcgQ2FmZVRpbWVTbG90TGlzdCgpO1xuICAgIGNhZmVUaW1lU2xvdExpc3QuZmlyc3RBdmFpbGFibGVTbG90TW9udGggPSByYXdDYWZlVGltZVNsb3QuZmlyc3RBdmFpbGFibGVTbG90TW9udGg7XG4gICAgY2FmZVRpbWVTbG90TGlzdC5maXJzdERheXMgPSB0aGlzLmNyZWF0ZUZpcnN0RGF5cyhyYXdDYWZlVGltZVNsb3QuZmlyc3REYXlzKTtcbiAgICBjYWZlVGltZVNsb3RMaXN0LnRpbWVzbG90cyA9IHRoaXMuY3JlYXRlVGltZVNsb3RzKHJhd0NhZmVUaW1lU2xvdC5zbG90cyk7XG4gICAgcmV0dXJuIGNhZmVUaW1lU2xvdExpc3Q7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZUZpcnN0RGF5cyhmaXJzdERheXM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4pOiBEYXRlW10ge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhmaXJzdERheXMpLm1hcCgoa2V5KSA9PiB7XG4gICAgICByZXR1cm4gbmV3IERhdGUoZmlyc3REYXlzW2tleV0pO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVUaW1lU2xvdHMoc2xvdHM6IFJhd0NhZmVUaW1lc2xvdE1vbnRJbnRlcmZhY2UpOiBDYWZlVGltZVNsb3RbXSB7XG4gICAgY29uc3QgdGltZXNsb3RzOiBDYWZlVGltZVNsb3RbXSA9IFtdO1xuICAgIE9iamVjdC5rZXlzKHNsb3RzKS5mb3JFYWNoKChtb250aEtleSkgPT4ge1xuICAgICAgY29uc3Qgc2xvdHNQZXJNb250aCA9IHNsb3RzW21vbnRoS2V5IGFzIGtleW9mIHVua25vd25dO1xuICAgICAgT2JqZWN0LmtleXMoc2xvdHNQZXJNb250aCkuZm9yRWFjaCgoZGF5S2V5KSA9PiB7XG4gICAgICAgIGlmIChzbG90c1Blck1vbnRoW2RheUtleV0pIHtcbiAgICAgICAgICB0aW1lc2xvdHMucHVzaCh0aGlzLmNyZWF0ZVRpbWVTbG90KHNsb3RzUGVyTW9udGhbZGF5S2V5XSkpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGltZXNsb3RzLnNvcnQoKGEsIGIpID0+IChhLmRhdGUgPiBiLmRhdGUgPyAxIDogLTEpKTtcbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlVGltZVNsb3Qoc2xvdDogUmF3Q2FmZVRpbWVTbG90SW50ZXJmYWNlKTogQ2FmZVRpbWVTbG90IHtcbiAgICBjb25zdCBjYWZlVGltZVNsb3QgPSBuZXcgQ2FmZVRpbWVTbG90KCk7XG4gICAgY2FmZVRpbWVTbG90LmRhdGUgPSBuZXcgRGF0ZShzbG90LmRhdGUpO1xuICAgIGNhZmVUaW1lU2xvdC5tb21lbnRzID0gc2xvdC50aW1pbmcubWFwKCh0aW1pbmcpID0+IHtcbiAgICAgIHJldHVybiBUaW1lc2xvdFV0aWwuc3RyaW5nVG9FbnVtKHRpbWluZykgfHwgVGltZXNsb3RNb21lbnRFbnVtLkRBWTtcbiAgICB9KTtcbiAgICByZXR1cm4gY2FmZVRpbWVTbG90O1xuICB9XG59XG4iXX0=