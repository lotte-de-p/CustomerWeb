import { ComponentRef, ElementRef, EventEmitter, Injector, OnChanges, OnInit, SimpleChanges, ViewContainerRef } from '@angular/core';
import { ValidationErrors } from '@angular/forms';
import { LanguageService } from '@telenet/ng-lib-page';
import { FormErrorService, MessageGroupDirective } from '../../../errors';
import { AppointmentTransformerSlot } from '../../../models';
import { InputAbstractComponent } from '../../input-abstract.component';
import { AppointmentPickerTypeEnum } from '../appointment-picker-type.enum';
import { AppointmentSlotOption } from '../appointment-slot-option.model';
import * as i0 from "@angular/core";
export declare class InputAppointmentPickerComponent extends InputAbstractComponent implements OnInit, OnChanges {
    private readonly viewContainerRef;
    messageGroupDirective: MessageGroupDirective;
    languageService: LanguageService;
    private readonly formErrorService;
    injector: Injector;
    startDate: Date;
    endDate: Date;
    timeslots: AppointmentTransformerSlot[];
    slidesToScroll: number;
    slidesToShow: number;
    appointmentPickerType: AppointmentPickerTypeEnum;
    updateSlots: AppointmentTransformerSlot[];
    showLoadMore: boolean;
    consumerType: string;
    disableLoadMore: boolean;
    error: ValidationErrors;
    isDeviceLandscape: boolean;
    reset: boolean;
    enableAppointmentsUI: boolean;
    loadMore: EventEmitter<any>;
    scrollTo: EventEmitter<any>;
    sendAnalytics: EventEmitter<any>;
    appointmentPickerComponent: ElementRef;
    componentRef: ComponentRef<unknown>;
    selectedAppointmentSlotOption: AppointmentSlotOption;
    constructor(viewContainerRef: ViewContainerRef, messageGroupDirective: MessageGroupDirective, languageService: LanguageService, formErrorService: FormErrorService, injector: Injector);
    onChange: (_: AppointmentSlotOption) => void;
    onTouched: () => void;
    ngOnInit(): void;
    setError(value?: unknown): void;
    ngOnChanges(changes: SimpleChanges): void;
    registerOnChange(fn: VoidFunction): void;
    registerOnTouched(fn: VoidFunction): void;
    setDisabledState(_: boolean): void;
    writeValue(appointmentSlotOption: AppointmentSlotOption | null): void;
    private loadAppointmentPickerComponent;
    private setSelectedAppointment;
    static ɵfac: i0.ɵɵFactoryDeclaration<InputAppointmentPickerComponent, [null, { optional: true; }, null, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<InputAppointmentPickerComponent, "app-form-appointment-picker", never, { "startDate": { "alias": "startDate"; "required": false; }; "endDate": { "alias": "endDate"; "required": false; }; "timeslots": { "alias": "timeslots"; "required": false; }; "slidesToScroll": { "alias": "slidesToScroll"; "required": false; }; "slidesToShow": { "alias": "slidesToShow"; "required": false; }; "appointmentPickerType": { "alias": "appointmentPickerType"; "required": false; }; "updateSlots": { "alias": "updateSlots"; "required": false; }; "showLoadMore": { "alias": "showLoadMore"; "required": false; }; "consumerType": { "alias": "consumerType"; "required": false; }; "disableLoadMore": { "alias": "disableLoadMore"; "required": false; }; "error": { "alias": "error"; "required": false; }; "isDeviceLandscape": { "alias": "isDeviceLandscape"; "required": false; }; "reset": { "alias": "reset"; "required": false; }; "enableAppointmentsUI": { "alias": "enableAppointmentsUI"; "required": false; }; }, { "loadMore": "loadMore"; "scrollTo": "scrollTo"; "sendAnalytics": "sendAnalytics"; }, never, never, false, never>;
}
//# sourceMappingURL=input-appointment-picker.component.d.ts.map