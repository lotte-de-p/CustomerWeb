import { ChangeDetectorRef, EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { LanguageService } from '@telenet/ng-lib-page';
import { AppointmentPickerTypeEnum } from '../appointment-picker-type.enum';
import { AppointmentTransformerSlot } from '../../../models';
import { TimeslotMomentEnum } from '../../../enums';
import { AppointmentPickerConsumerTypeEnum } from '../../../interfaces';
import { Observable } from 'rxjs';
import { SlickCarouselComponent } from 'ngx-slick-carousel';
import * as i0 from "@angular/core";
export declare class InputAppointmentDatePickerComponent implements OnInit, OnChanges {
    readonly languageService: LanguageService;
    private readonly cdr;
    messageGroup: string;
    startDate: Date;
    endDate: Date;
    timeslots: AppointmentTransformerSlot[];
    selectedTimeslot?: AppointmentTransformerSlot;
    momentFilter: TimeslotMomentEnum;
    initialSlide: number;
    slidesToScroll: number;
    slidesToShow: number;
    updateSlots: AppointmentTransformerSlot[];
    showLoadMore: boolean;
    consumerType: string;
    disableLoadMore: boolean;
    enableAppointmentsUI: boolean;
    appointmentPickerType: AppointmentPickerTypeEnum;
    isDeviceLandscape: boolean;
    datePickerLabel: string;
    appointmentSelected: EventEmitter<any>;
    loadMore: EventEmitter<any>;
    scrollTo: EventEmitter<AppointmentPickerTypeEnum>;
    slickModal: SlickCarouselComponent;
    appointmentsAvailable$: Observable<boolean>;
    currentSlots: AppointmentTransformerSlot[];
    reRender: boolean;
    noOfAppointmentSlotsPerPage: number;
    appointmentMomentEnum: typeof TimeslotMomentEnum;
    disablePrevious: boolean;
    disableNext: boolean;
    startDateToDisableNext: Date;
    currentDate: Date;
    consumerTypeEnum: typeof AppointmentPickerConsumerTypeEnum;
    slideConfig: {
        infinite: boolean;
        initialSlide: number;
        mobileFirst: boolean;
        arrows: boolean;
        nextArrow: string;
        prevArrow: string;
        slidesToScroll: number;
        slidesToShow: number;
        variableWidth: boolean;
        responsive: {
            breakpoint: number;
            settings: {
                slidesToScroll: number;
                slidesToShow: number;
            };
        }[];
    };
    constructor(languageService: LanguageService, cdr: ChangeDetectorRef);
    selectInstallSlotDay(appointmentSlot: AppointmentTransformerSlot): void;
    isDisabled(appointmentSlot: AppointmentTransformerSlot): boolean;
    ngOnInit(): void;
    private scrollToSelectedSlides;
    private findInitialSlideForNC;
    shouldRenderMoment(): boolean;
    getSlideUpAnimationStyling(index: number): string;
    ngOnChanges(changes: SimpleChanges): void;
    private handleUpdateTimeSlots;
    private configSlideConfig;
    loadMoreSlots(): void;
    private handleNextButtonDisable;
    loadPreviousSlots(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<InputAppointmentDatePickerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<InputAppointmentDatePickerComponent, "app-form-appointment-date-picker", never, { "messageGroup": { "alias": "messageGroup"; "required": false; }; "startDate": { "alias": "startDate"; "required": false; }; "endDate": { "alias": "endDate"; "required": false; }; "timeslots": { "alias": "timeslots"; "required": false; }; "selectedTimeslot": { "alias": "selectedTimeslot"; "required": false; }; "momentFilter": { "alias": "momentFilter"; "required": false; }; "initialSlide": { "alias": "initialSlide"; "required": false; }; "slidesToScroll": { "alias": "slidesToScroll"; "required": false; }; "slidesToShow": { "alias": "slidesToShow"; "required": false; }; "updateSlots": { "alias": "updateSlots"; "required": false; }; "showLoadMore": { "alias": "showLoadMore"; "required": false; }; "consumerType": { "alias": "consumerType"; "required": false; }; "disableLoadMore": { "alias": "disableLoadMore"; "required": false; }; "enableAppointmentsUI": { "alias": "enableAppointmentsUI"; "required": false; }; "appointmentPickerType": { "alias": "appointmentPickerType"; "required": false; }; "isDeviceLandscape": { "alias": "isDeviceLandscape"; "required": false; }; "datePickerLabel": { "alias": "datePickerLabel"; "required": false; }; }, { "appointmentSelected": "appointmentSelected"; "loadMore": "loadMore"; "scrollTo": "scrollTo"; }, never, never, false, never>;
}
//# sourceMappingURL=input-appointment-date-picker.component.d.ts.map