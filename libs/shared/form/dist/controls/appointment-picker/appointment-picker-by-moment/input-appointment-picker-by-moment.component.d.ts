import { EventEmitter } from '@angular/core';
import { AppointmentPickerTypeEnum } from '../appointment-picker-type.enum';
import { AppointmentPickerComponentInterface } from '../appointment-picker-component.interface';
import { AppointmentTransformerSlot } from '../../../models';
import { AppointmentSlotOption } from '../appointment-slot-option.model';
import { TimeslotMomentEnum } from '../../../enums';
import { AppointmentPickerConsumerTypeEnum } from '../../../interfaces';
import { AppointmentPickerByTemporalComponentInterface } from '../appointment-picker-by-temporal-component.interface';
import { AbstractAppointmentPickerByTemporalComponent } from '../abstract-appointment-picker-by-temporal.component';
import * as i0 from "@angular/core";
export declare class InputAppointmentPickerByMomentComponent extends AbstractAppointmentPickerByTemporalComponent<InputAppointmentPickerByMomentComponent> implements AppointmentPickerComponentInterface, AppointmentPickerByTemporalComponentInterface {
    messageGroup: string;
    error: unknown;
    startDate: Date;
    endDate: Date;
    timeslots: AppointmentTransformerSlot[];
    slidesToScroll: number;
    initialSlide: number;
    initialised: boolean;
    labelKeys: string[];
    updateSlots: AppointmentTransformerSlot[];
    showLoadMore: boolean;
    consumerType: string;
    disableLoadMore: boolean;
    enableAppointmentsUI: boolean;
    slidesToShow: number;
    appointmentPickerType: AppointmentPickerTypeEnum;
    isDeviceLandscape: boolean;
    loadMore: EventEmitter<any>;
    appointmentSlotSelected: EventEmitter<AppointmentSlotOption>;
    scrollTo: EventEmitter<AppointmentPickerTypeEnum>;
    datePickerLabel: string;
    momentPickerLabel: string;
    datePickerErrorLabel: string;
    momentPickerErrorLabel: string;
    selectedAppointmentSlot?: AppointmentTransformerSlot;
    selectedAppointmentMoment?: TimeslotMomentEnum;
    moments: TimeslotMomentEnum[];
    consumerTypeEnum: typeof AppointmentPickerConsumerTypeEnum;
    constructor();
    setSelectedAppointment(appointmentSlotOption: AppointmentSlotOption): void;
    setSelectedAppointmentSlot(appointmentSlot: AppointmentTransformerSlot): void;
    private static isSelectedSlotsAvailable;
    getSelectedAppointment(): AppointmentSlotOption;
    private generateMoments;
    getComponent(): InputAppointmentPickerByMomentComponent;
    scrollSectionTo($event: AppointmentPickerTypeEnum): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<InputAppointmentPickerByMomentComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<InputAppointmentPickerByMomentComponent, "app-form-appointment-picker-by-date", never, { "startDate": { "alias": "startDate"; "required": false; }; "endDate": { "alias": "endDate"; "required": false; }; "timeslots": { "alias": "timeslots"; "required": false; }; "slidesToScroll": { "alias": "slidesToScroll"; "required": false; }; "initialSlide": { "alias": "initialSlide"; "required": false; }; "initialised": { "alias": "initialised"; "required": false; }; "labelKeys": { "alias": "labelKeys"; "required": false; }; "updateSlots": { "alias": "updateSlots"; "required": false; }; "showLoadMore": { "alias": "showLoadMore"; "required": false; }; "consumerType": { "alias": "consumerType"; "required": false; }; "disableLoadMore": { "alias": "disableLoadMore"; "required": false; }; "enableAppointmentsUI": { "alias": "enableAppointmentsUI"; "required": false; }; "slidesToShow": { "alias": "slidesToShow"; "required": false; }; "appointmentPickerType": { "alias": "appointmentPickerType"; "required": false; }; "isDeviceLandscape": { "alias": "isDeviceLandscape"; "required": false; }; }, { "loadMore": "loadMore"; "appointmentSlotSelected": "appointmentSlotSelected"; "scrollTo": "scrollTo"; }, never, never, false, never>;
}
//# sourceMappingURL=input-appointment-picker-by-moment.component.d.ts.map