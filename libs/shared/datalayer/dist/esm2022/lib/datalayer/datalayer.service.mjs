import { Inject, Injectable } from '@angular/core';
import * as udl from 'udl';
import { EventTypeEnum } from './enums/event-type.enum';
import { EventNameEnum } from './enums/event-name.enum';
import { EventStatusEnum } from './enums/event-status.enum';
import { mergeMap, tap } from 'rxjs/operators';
import { forkJoin, timer } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@telenet/ng-lib-message";
export class DataLayerService {
    messageService;
    window;
    dataLayer;
    constructor(messageService, window) {
        this.messageService = messageService;
        this.window = window;
    }
    init() {
        const udlObjectName = this.window['udlObjectName'];
        this.dataLayer = udl.DataLayer.create();
        if (this.window[udlObjectName] && udlObjectName) {
            let componentList = this.dataLayer.getComponents();
            if (componentList && componentList.length > 0) {
                componentList = componentList.map(function (componentItem) {
                    return new udl.Component(componentItem);
                });
            }
            this.dataLayer.setComponents(componentList);
        }
        return true;
    }
    getDataLayer() {
        return this.dataLayer;
    }
    setPage(page) {
        if (this.dataLayer) {
            return this.dataLayer.setPage(page);
        }
        return new Promise(() => false);
    }
    getCategory(componentInstanceId) {
        if (this.dataLayer) {
            return this.dataLayer.getCategory(componentInstanceId);
        }
        return null;
    }
    createCategory(primaryCategory = '', subCategory1) {
        const category = new udl.Category();
        category.setPrimaryCategory(primaryCategory);
        if (subCategory1) {
            category.setSubCategory1(subCategory1);
        }
        return category;
    }
    addPageEvent(pageId, attributes) {
        const pageInfoObject = new udl.PageInfo();
        pageInfoObject.setPageID(pageId);
        pageInfoObject.setPageName(pageId);
        pageInfoObject.setLanguage(this.dataLayer.getPage().getPageInfo().getLanguage());
        const page = new udl.Page({ pageInfo: pageInfoObject });
        if (attributes) {
            Object.keys(attributes).forEach((key) => page.addAttribute(key, attributes[key]));
        }
        this.setPage(page).then();
    }
    addStepViewEvent(attributes) {
        const event = new udl.Event();
        const eventInfo = this.createEventInfo(EventNameEnum.EVENT_NAME_VIEW_STEP);
        event.setEventInfo(eventInfo);
        event.setAttributes(attributes);
        if (this.dataLayer) {
            return this.dataLayer.addStepViewEvent(event);
        }
        return new Promise(() => false);
    }
    createEvent(eventProperties) {
        const { eventInfo, attributes, strategy, category, directCallLabel } = eventProperties;
        const event = new udl.Event();
        event.setEventInfo(eventInfo);
        event.setAttributes(attributes);
        if (strategy) {
            event.setStrategy(strategy);
        }
        if (category) {
            event.setCategory(category);
        }
        if (directCallLabel) {
            event.setDirectCallLabel(directCallLabel);
        }
        return event;
    }
    sendEvent(eventProperties) {
        const event = this.createEvent(eventProperties);
        if (this.dataLayer) {
            return this.dataLayer.addEvent(event);
        }
        return new Promise(() => false);
    }
    addEvent(eventInfo, attributes, category, directCallLabel) {
        const event = new udl.Event();
        event.setEventInfo(eventInfo);
        event.setAttributes(attributes);
        if (category) {
            event.setCategory(category);
        }
        if (directCallLabel) {
            event.setDirectCallLabel(directCallLabel);
        }
        if (this.dataLayer) {
            return this.dataLayer.addEvent(event);
        }
        return new Promise(() => false);
    }
    addStepLoadTimeEvent(attributes) {
        const eventInfo = this.createEventInfo(EventNameEnum.EVENT_NAME_STEP_LOAD_TIME, EventTypeEnum.EVENT_TYPE_STEP_LOAD_TIME);
        return this.addEvent(eventInfo, attributes);
    }
    setCart(cart) {
        if (this.dataLayer) {
            return this.dataLayer.setCart(cart);
        }
        return new Promise(() => false);
    }
    getCart() {
        if (this.dataLayer) {
            return this.dataLayer.getCart();
        }
        return null;
    }
    createEventInfo(eventName, eventType, messageGroups) {
        const eventInfo = new udl.EventInfo();
        eventInfo.setEventName(eventName);
        eventInfo.setType(eventType ?? '');
        eventInfo.setEventStatus(this.getStatus(messageGroups?.length ? messageGroups : []));
        eventInfo.setEventStatusMessage(this.getStatusMessage(messageGroups?.length ? messageGroups : []));
        return eventInfo;
    }
    createCart(cartId, price) {
        const cart = new udl.Cart();
        cart.setCartID(cartId);
        cart.setPrice(price ?? new udl.Price());
        return cart;
    }
    createTransaction(transactionId, price) {
        const transaction = new udl.Transaction();
        transaction.setTransactionID(transactionId);
        transaction.setPrice(price);
        return transaction;
    }
    setTransaction(transaction) {
        if (this.dataLayer) {
            return this.dataLayer.setTransaction(transaction);
        }
        return new Promise(() => false);
    }
    createPrice(oneTimePrice, recurringPrice, basePrice, totalPrice, discountedPrice) {
        const price = new udl.Price();
        price.setOnetimePrice(oneTimePrice ?? 0);
        price.setRecurringPrice(recurringPrice ?? 0);
        price.setBasePrice(basePrice ?? new udl.Price());
        price.setTotalPrice(totalPrice ?? new udl.Price());
        price.setDiscountedPrice(discountedPrice ?? new udl.Price());
        return price;
    }
    createProductInfo(productId, productName, productType, productStatus) {
        const product = new udl.Product();
        product.setProductID(productId);
        product.setProductName(productName ?? '');
        product.setProductType(productType ?? '');
        product.setProductStatus(productStatus ?? '');
        return product;
    }
    createItem(productInfo, price, quantity) {
        const item = new udl.Item();
        item.setProductInfo(productInfo);
        item.setPrice(price ?? new udl.Price());
        item.setQuantity(quantity ?? 0);
        return item;
    }
    getStatus(messageGroups) {
        if (messageGroups?.length) {
            for (const messageGroup of messageGroups) {
                if (this.messageService.hasErrorMessages(messageGroup)) {
                    return EventStatusEnum.EVENT_STATUS_FAILED;
                }
            }
            return EventStatusEnum.EVENT_STATUS_SUCCESS;
        }
        return EventStatusEnum.EVENT_STATUS_MESSAGE_EMPTY;
    }
    getStatusMessage(messageGroups) {
        let statusMessages = '';
        let messagesFromMessageService = [];
        if (messageGroups?.length) {
            for (const messageGroup of messageGroups) {
                if (this.messageService.hasErrorMessages(messageGroup)) {
                    messagesFromMessageService = messagesFromMessageService.concat(this.messageService.getErrorMessages(messageGroup));
                }
            }
            messagesFromMessageService = messagesFromMessageService.filter((msg) => msg.type !== 'success');
            statusMessages = messagesFromMessageService.map((msg) => msg['_key']).join(',');
        }
        return statusMessages;
    }
    getAnalyticsPromises() {
        if (this.dataLayer) {
            return this.dataLayer.getAnalyticsPromises();
        }
        return [];
    }
    rollbackStepIdToParent(stepId) {
        timer(100)
            .pipe(mergeMap(() => {
            const analyticsPromises = this.getAnalyticsPromises();
            return forkJoin(analyticsPromises);
        }), tap(() => this.getDataLayer().getPage().getPageInfo().setStepId(stepId)))
            .subscribe();
    }
    static ɵfac = function DataLayerService_Factory(t) { return new (t || DataLayerService)(i0.ɵɵinject(i1.MessageService), i0.ɵɵinject('Window')); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: DataLayerService, factory: DataLayerService.ɵfac, providedIn: 'root' });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(DataLayerService, [{
        type: Injectable,
        args: [{
                providedIn: 'root',
            }]
    }], () => [{ type: i1.MessageService }, { type: undefined, decorators: [{
                type: Inject,
                args: ['Window']
            }] }], null); })();
//# sourceMappingURL=data:application/json;base64,