import { filter, isNil, map } from 'lodash-es';
import { SalesData, SalesDataOptinType, SalesDataOptionType, SalesDataProductType, } from '../../../../sales';
export class NBA {
    rank;
    group;
    issue;
    name;
    treatment;
    campaignId;
    productType;
    sellingArguments;
    sdata;
    constructor(nba) {
        if (nba) {
            Object.assign(this, nba);
            this.sdata = new SalesData(nba.sdata);
        }
    }
    hasTreatment() {
        return this.treatment ? this.treatment.length > 0 : false;
    }
    hasProductType() {
        return this.productType ? this.productType.length > 0 : false;
    }
    isSalesDataEmpty() {
        return !this.sdata || !this.sdata.hasOffers();
    }
    getRawSalesData() {
        if (this.isSalesDataEmpty()) {
            return {
                products: [],
                options: [],
                optins: [],
            };
        }
        const offers = this.sdata.flatten().getOffers();
        return {
            products: this.extractProductIds(offers),
            options: this.extractOptionIds(offers),
            optins: this.extractOptinIds(offers),
        };
    }
    extractProductIds(offers) {
        return [...this.extractFlatOmapiIdList(this.getNBOElementByType(offers, Object.values(SalesDataProductType)))];
    }
    extractOptionIds(offers) {
        return [...this.extractFlatOmapiIdList(this.getNBOElementByType(offers, Object.values(SalesDataOptionType)))];
    }
    extractOptinIds(offers) {
        return [...this.extractFlatOmapiIdList(this.getNBOElementByType(offers, Object.values(SalesDataOptinType)))];
    }
    getNBOElementByType(products, types) {
        return products.filter((product) => product && types.includes(product.type));
    }
    extractFlatOmapiIdList(products) {
        return map(filter(products, (p) => !isNil(p)), (o) => o.id);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmJhLm1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL3BlZ2EvbmJhL3YxL21vZGVscy9uYmEubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQy9DLE9BQU8sRUFFTCxTQUFTLEVBRVQsa0JBQWtCLEVBQ2xCLG1CQUFtQixFQUNuQixvQkFBb0IsR0FDckIsTUFBTSxtQkFBbUIsQ0FBQztBQUUzQixNQUFNLE9BQU8sR0FBRztJQUNFLElBQUksQ0FBUztJQUNiLEtBQUssQ0FBUztJQUNkLEtBQUssQ0FBUztJQUNkLElBQUksQ0FBUztJQUNiLFNBQVMsQ0FBUztJQUNsQixVQUFVLENBQVM7SUFDbkIsV0FBVyxDQUFTO0lBQ3BCLGdCQUFnQixDQUE2QjtJQUM3QyxLQUFLLENBQVk7SUFFakMsWUFBWSxHQUFTO1FBQ25CLElBQUksR0FBRyxFQUFFLENBQUM7WUFDUixNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztZQUN6QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN4QyxDQUFDO0lBQ0gsQ0FBQztJQUVELFlBQVk7UUFDVixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQzVELENBQUM7SUFFRCxjQUFjO1FBQ1osT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUNoRSxDQUFDO0lBRUQsZ0JBQWdCO1FBQ2QsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ2hELENBQUM7SUFFRCxlQUFlO1FBQ2IsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxDQUFDO1lBQzVCLE9BQU87Z0JBQ0wsUUFBUSxFQUFFLEVBQUU7Z0JBQ1osT0FBTyxFQUFFLEVBQUU7Z0JBQ1gsTUFBTSxFQUFFLEVBQUU7YUFDWCxDQUFDO1FBQ0osQ0FBQztRQUVELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUM7UUFFaEQsT0FBTztZQUNMLFFBQVEsRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDO1lBQ3hDLE9BQU8sRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDO1lBQ3RDLE1BQU0sRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQztTQUNyQyxDQUFDO0lBQ0osQ0FBQztJQUVPLGlCQUFpQixDQUFDLE1BQXdCO1FBQ2hELE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqSCxDQUFDO0lBRU8sZ0JBQWdCLENBQUMsTUFBd0I7UUFDL0MsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2hILENBQUM7SUFFTyxlQUFlLENBQUMsTUFBd0I7UUFDOUMsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9HLENBQUM7SUFFTyxtQkFBbUIsQ0FBQyxRQUEwQixFQUFFLEtBQWU7UUFDckUsT0FBTyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxPQUFPLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUMvRSxDQUFDO0lBRU8sc0JBQXNCLENBQUMsUUFBMEI7UUFDdkQsT0FBTyxHQUFHLENBQ1IsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDbEMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQ1osQ0FBQztJQUNKLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNlbGxpbmdBcmd1bWVudCB9IGZyb20gJy4vc2VsbGluZy1hcmd1bWVudC5tb2RlbCc7XG5pbXBvcnQgeyBmaWx0ZXIsIGlzTmlsLCBtYXAgfSBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHtcbiAgUmF3U2FsZXNEYXRhLFxuICBTYWxlc0RhdGEsXG4gIFNhbGVzRGF0YU9mZmVyLFxuICBTYWxlc0RhdGFPcHRpblR5cGUsXG4gIFNhbGVzRGF0YU9wdGlvblR5cGUsXG4gIFNhbGVzRGF0YVByb2R1Y3RUeXBlLFxufSBmcm9tICcuLi8uLi8uLi8uLi9zYWxlcyc7XG5cbmV4cG9ydCBjbGFzcyBOQkEge1xuICBwdWJsaWMgcmVhZG9ubHkgcmFuazogc3RyaW5nO1xuICBwdWJsaWMgcmVhZG9ubHkgZ3JvdXA6IHN0cmluZztcbiAgcHVibGljIHJlYWRvbmx5IGlzc3VlOiBzdHJpbmc7XG4gIHB1YmxpYyByZWFkb25seSBuYW1lOiBzdHJpbmc7XG4gIHB1YmxpYyByZWFkb25seSB0cmVhdG1lbnQ6IHN0cmluZztcbiAgcHVibGljIHJlYWRvbmx5IGNhbXBhaWduSWQ6IHN0cmluZztcbiAgcHVibGljIHJlYWRvbmx5IHByb2R1Y3RUeXBlOiBzdHJpbmc7XG4gIHB1YmxpYyByZWFkb25seSBzZWxsaW5nQXJndW1lbnRzOiByZWFkb25seSBTZWxsaW5nQXJndW1lbnRbXTtcbiAgcHVibGljIHJlYWRvbmx5IHNkYXRhOiBTYWxlc0RhdGE7XG5cbiAgY29uc3RydWN0b3IobmJhPzogTkJBKSB7XG4gICAgaWYgKG5iYSkge1xuICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBuYmEpO1xuICAgICAgdGhpcy5zZGF0YSA9IG5ldyBTYWxlc0RhdGEobmJhLnNkYXRhKTtcbiAgICB9XG4gIH1cblxuICBoYXNUcmVhdG1lbnQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMudHJlYXRtZW50ID8gdGhpcy50cmVhdG1lbnQubGVuZ3RoID4gMCA6IGZhbHNlO1xuICB9XG5cbiAgaGFzUHJvZHVjdFR5cGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMucHJvZHVjdFR5cGUgPyB0aGlzLnByb2R1Y3RUeXBlLmxlbmd0aCA+IDAgOiBmYWxzZTtcbiAgfVxuXG4gIGlzU2FsZXNEYXRhRW1wdHkoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICF0aGlzLnNkYXRhIHx8ICF0aGlzLnNkYXRhLmhhc09mZmVycygpO1xuICB9XG5cbiAgZ2V0UmF3U2FsZXNEYXRhKCk6IFJhd1NhbGVzRGF0YSB7XG4gICAgaWYgKHRoaXMuaXNTYWxlc0RhdGFFbXB0eSgpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwcm9kdWN0czogW10sXG4gICAgICAgIG9wdGlvbnM6IFtdLFxuICAgICAgICBvcHRpbnM6IFtdLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBjb25zdCBvZmZlcnMgPSB0aGlzLnNkYXRhLmZsYXR0ZW4oKS5nZXRPZmZlcnMoKTtcblxuICAgIHJldHVybiB7XG4gICAgICBwcm9kdWN0czogdGhpcy5leHRyYWN0UHJvZHVjdElkcyhvZmZlcnMpLFxuICAgICAgb3B0aW9uczogdGhpcy5leHRyYWN0T3B0aW9uSWRzKG9mZmVycyksXG4gICAgICBvcHRpbnM6IHRoaXMuZXh0cmFjdE9wdGluSWRzKG9mZmVycyksXG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgZXh0cmFjdFByb2R1Y3RJZHMob2ZmZXJzOiBTYWxlc0RhdGFPZmZlcltdKTogc3RyaW5nW10ge1xuICAgIHJldHVybiBbLi4udGhpcy5leHRyYWN0RmxhdE9tYXBpSWRMaXN0KHRoaXMuZ2V0TkJPRWxlbWVudEJ5VHlwZShvZmZlcnMsIE9iamVjdC52YWx1ZXMoU2FsZXNEYXRhUHJvZHVjdFR5cGUpKSldO1xuICB9XG5cbiAgcHJpdmF0ZSBleHRyYWN0T3B0aW9uSWRzKG9mZmVyczogU2FsZXNEYXRhT2ZmZXJbXSk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gWy4uLnRoaXMuZXh0cmFjdEZsYXRPbWFwaUlkTGlzdCh0aGlzLmdldE5CT0VsZW1lbnRCeVR5cGUob2ZmZXJzLCBPYmplY3QudmFsdWVzKFNhbGVzRGF0YU9wdGlvblR5cGUpKSldO1xuICB9XG5cbiAgcHJpdmF0ZSBleHRyYWN0T3B0aW5JZHMob2ZmZXJzOiBTYWxlc0RhdGFPZmZlcltdKTogc3RyaW5nW10ge1xuICAgIHJldHVybiBbLi4udGhpcy5leHRyYWN0RmxhdE9tYXBpSWRMaXN0KHRoaXMuZ2V0TkJPRWxlbWVudEJ5VHlwZShvZmZlcnMsIE9iamVjdC52YWx1ZXMoU2FsZXNEYXRhT3B0aW5UeXBlKSkpXTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0TkJPRWxlbWVudEJ5VHlwZShwcm9kdWN0czogU2FsZXNEYXRhT2ZmZXJbXSwgdHlwZXM6IHN0cmluZ1tdKTogU2FsZXNEYXRhT2ZmZXJbXSB7XG4gICAgcmV0dXJuIHByb2R1Y3RzLmZpbHRlcigocHJvZHVjdCkgPT4gcHJvZHVjdCAmJiB0eXBlcy5pbmNsdWRlcyhwcm9kdWN0LnR5cGUpKTtcbiAgfVxuXG4gIHByaXZhdGUgZXh0cmFjdEZsYXRPbWFwaUlkTGlzdChwcm9kdWN0czogU2FsZXNEYXRhT2ZmZXJbXSk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gbWFwKFxuICAgICAgZmlsdGVyKHByb2R1Y3RzLCAocCkgPT4gIWlzTmlsKHApKSxcbiAgICAgIChvKSA9PiBvLmlkXG4gICAgKTtcbiAgfVxufVxuIl19