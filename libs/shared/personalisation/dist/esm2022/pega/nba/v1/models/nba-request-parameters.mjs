import { forkJoin, of } from 'rxjs';
import { map } from 'rxjs/operators';
import { Param, RequestParam } from '../interfaces/request-param';
import { Injectable } from '@angular/core';
import { NBAList } from './nba-list.model';
import { NBA } from './nba.model';
import { SellingArgument } from './selling-argument.model';
import { Builder } from '@telenet/ng-lib-shared';
import * as i0 from "@angular/core";
import * as i1 from "../../../../sales/service/sales-data.service";
import * as i2 from "@telenet/ng-lib-page";
export class NBARequestParameters {
    salesDataService;
    jsonUrlService;
    nbaRequestParameters;
    requestObservables;
    constructor(salesDataService, jsonUrlService) {
        this.salesDataService = salesDataService;
        this.jsonUrlService = jsonUrlService;
        const url = window.location.href;
        this.nbaRequestParameters = Object.keys(Param)
            .map((param) => {
            const value = new URL(url).searchParams.get(param);
            return value ? new RequestParam(param, value) : undefined;
        })
            .filter((el) => el !== undefined);
    }
    toNBAList() {
        if (this.getRequestParamValue(Param.t) !== 'nbo') {
            return of(new NBAList());
        }
        else {
            this.requestObservables = [];
            this.requestObservables.push(this.salesDataService.getDecompressedSalesData(this.getRequestParamValue(Param.sdata)));
            if (this.getRequestParamValue(Param.tid)) {
                this.requestObservables.push(this.deCompressRequestParamValue(this.getRequestParamValue(Param.tid)).pipe(map((treatmentId) => treatmentId)));
            }
            if (this.getRequestParamValue(Param.pt)) {
                this.requestObservables.push(this.deCompressRequestParamValue(this.getRequestParamValue(Param.pt)).pipe(map((productType) => productType)));
            }
            if (this.getRequestParamValue(Param.aid)) {
                this.requestObservables.push(this.deCompressRequestParamValue(this.getRequestParamValue(Param.aid)).pipe(map((name) => name)));
            }
            return this.constructNbaListFromRequestParam();
        }
    }
    constructNbaListFromRequestParam() {
        return forkJoin(this.requestObservables).pipe(map(([salesDataDecompressed, treatmentId, productType, name]) => {
            const nba = Builder(NBA)
                // @ts-ignore
                .sdata(salesDataDecompressed)
                .sellingArguments(this.createSellingArguments(this.getRequestParamValueAsArray(Param.sa)))
                .campaignId(this.getRequestParamValue(Param.cid))
                .treatment(treatmentId ? treatmentId['tid'] : '')
                .productType(productType ? productType['pt'] : '')
                .name(name ? name['aid'] : '')
                .build();
            return (Builder(NBAList)
                // @ts-ignore
                .actions([nba])
                .channel(this.getRequestParamValue(Param.src))
                .interactionId(this.getRequestParamValue(Param.did))
                .v(this.getRequestParamValue(Param.v))
                .isSuccess(true)
                .build());
        }));
    }
    getRequestParam(key) {
        return this.nbaRequestParameters.find((param) => param.key === key);
    }
    getRequestParamValue(key) {
        const requestParam = this.getRequestParam(key);
        return requestParam ? requestParam.value : '';
    }
    getRequestParamValueAsArray(key) {
        const requestParam = this.getRequestParam(key);
        return requestParam ? requestParam.value.split(',') : [];
    }
    createSellingArguments(sa) {
        let rank = 1;
        const sellingArguments = [];
        sa.forEach((saParam) => sellingArguments.push(new SellingArgument(saParam, rank++)));
        return sellingArguments;
    }
    deCompressRequestParamValue(paramValue) {
        return this.jsonUrlService.decompress(paramValue);
    }
    static ɵfac = function NBARequestParameters_Factory(t) { return new (t || NBARequestParameters)(i0.ɵɵinject(i1.SalesDataService), i0.ɵɵinject(i2.JsonUrlService)); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: NBARequestParameters, factory: NBARequestParameters.ɵfac, providedIn: 'root' });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(NBARequestParameters, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], () => [{ type: i1.SalesDataService }, { type: i2.JsonUrlService }], null); })();
//# sourceMappingURL=data:application/json;base64,