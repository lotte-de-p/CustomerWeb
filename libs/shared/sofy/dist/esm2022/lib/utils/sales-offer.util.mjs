import { SalesOfferProductUtil } from './sales-offer-product.util';
import { SAFE_SPOT_PRO } from '../constants/sofy.constants';
import { SalesOfferProductType, } from '../models/response';
import { concat, filter, flatMap, flatten, groupBy, isUndefined, map, min, minBy, sum, sumBy, uniqBy } from 'lodash-es';
import { SalesOfferPromoUtil } from './sales-offer-promo.util';
export class SalesOfferUtil {
    static getTotalMonthlyPrice(offer, exclusiveVat) {
        return sum([
            SalesOfferUtil.getMonthlyPriceForProducts(offer, exclusiveVat),
            SalesOfferUtil.getMonthlyPriceForSelectedProductOptions(offer, exclusiveVat),
            SalesOfferUtil.getMonthlyPriceForStandaloneOptions(offer, exclusiveVat),
        ]);
    }
    static getTotalMonthlyPriceInclPromos(offer, exclusiveVat) {
        return sum([this.getTotalMonthlyPrice(offer, exclusiveVat), this.getTotalMonthlyPromoPrice(offer, exclusiveVat)]);
    }
    static getSafeSpotProOption(offer) {
        const allSelectedProductOptions = SalesOfferUtil.getAllSelectedProductOptions(offer);
        return allSelectedProductOptions.find((option) => option.omapiid === SAFE_SPOT_PRO);
    }
    static getAllSelectedProductOptions(offer) {
        return filter(this.getAllProductOptions(offer), (o) => o.selected);
    }
    static getAllProductOptions(offer) {
        if (offer === undefined) {
            return [];
        }
        return SalesOfferUtil.getAllProductItemsByType(offer, SalesOfferProductType.OPTIONS);
    }
    static getAllSelectedProductStreamingServices(offer) {
        return filter(this.getAllProductStreamingServices(offer), (o) => o.selected);
    }
    static getAllProductStreamingServices(offer) {
        if (offer === undefined) {
            return [];
        }
        return SalesOfferUtil.getAllProductItemsByType(offer, SalesOfferProductType.STREAMING_SERVICES);
    }
    static getAllSelectedProductOptins(offer) {
        return filter(this.getAllProductOptins(offer), (o) => o.selected);
    }
    static getAllProductOptins(offer) {
        if (offer === undefined) {
            return [];
        }
        return SalesOfferUtil.getAllProductItemsByType(offer, SalesOfferProductType.OPTINS);
    }
    static getAllProductItemsByType(offer, type) {
        return uniqBy(flatten(map(offer.products, (product) => product[type])), (o) => o.omapiid);
    }
    static getMonthlyPriceForSelectedProductOptions(offer, exclusiveVat) {
        const allSelectedProductOptions = SalesOfferUtil.getAllSelectedProductOptions(offer);
        return (SalesOfferUtil.getMonthlyPriceForItems(allSelectedProductOptions, !!exclusiveVat) +
            SalesOfferUtil.getMonthlyPermanentPromoDiscountForItems(allSelectedProductOptions, !!exclusiveVat));
    }
    static getMonthlyPriceForProducts(offer, exclusiveVat) {
        return (SalesOfferUtil.getMonthlyPriceForItems(offer.products, !!exclusiveVat) +
            SalesOfferUtil.getMonthlyPermanentPromoDiscountForItems(offer.products, !!exclusiveVat));
    }
    static getMonthlyPriceForStandaloneOptions(offer, exclusiveVat) {
        return (SalesOfferUtil.getMonthlyPriceForItems(offer.standaloneoptions, !!exclusiveVat) +
            SalesOfferUtil.getMonthlyPermanentPromoDiscountForItems(offer.standaloneoptions, !!exclusiveVat));
    }
    static getMonthlyPromosForSelectedProductOptions(offer, exclusiveVat) {
        return sum(map(SalesOfferUtil.getMonthlyPromotions(SalesOfferUtil.getAllSelectedProductOptions(offer)), (p) => (exclusiveVat ? p.priceexclvat : p.price)));
    }
    static getMonthlyPromosForProducts(offer, exclusiveVat) {
        return sum(map(SalesOfferUtil.getMonthlyPromotions(offer.products), (p) => exclusiveVat ? p.priceexclvat : p.price));
    }
    static getMonthlyPromosForStandaloneOptions(offer, exclusiveVat) {
        return sum(map(SalesOfferUtil.getMonthlyPromotions(offer.standaloneoptions), (p) => exclusiveVat ? p.priceexclvat : p.price));
    }
    static getMonthlyPromos(offer) {
        return flatMap(offer.products, (product) => SalesOfferUtil.getMonthlyProductPromos(product));
    }
    static getAllPromos(offer) {
        return concat(SalesOfferUtil.getMonthlyPromos(offer), flatMap(offer.products, (product) => SalesOfferUtil.getCostPromos(product)), flatMap(offer.products, (product) => SalesOfferUtil.getInstallPromos(product)));
    }
    static findProduct(offer, omapiId) {
        return offer && offer.products ? offer.products.find((product) => product.omapiid === omapiId) : undefined;
    }
    static getCostPromos(product) {
        return flatMap(product.costs, (cost) => cost.promotions);
    }
    static getInstallPromos(product) {
        return flatMap(product.installtypes.filter((installType) => installType.selected), (installType) => installType.promos);
    }
    static getMonthlyProductPromos(product) {
        return concat(product.promos, flatMap(product.optinproducts, (optin) => optin.promos), flatMap(product.options.filter((option) => option.selected), (option) => option.promos));
    }
    static getMonthlyPromosGroupedByDuration(offer) {
        return map(groupBy(SalesOfferUtil.getMonthlyPromos(offer).filter((promo) => promo.duration > 0), (promo) => promo.duration), (promos, key) => {
            return {
                duration: Number(key),
                promos: promos,
            };
        });
    }
    static getPromoDurationGroupsTotal(salesOfferPromoGroups, exclusiveVat) {
        return sum(map(flatMap(salesOfferPromoGroups, (group) => group.promos), (promo) => (exclusiveVat ? promo.priceexclvat : promo.price)));
    }
    static getBundle(offer) {
        const bundle = offer.products.find((product) => {
            return product.productInfo && product.productInfo.isBundle();
        });
        if (!bundle) {
            throw new Error('Salesoffer does not contain a bundle');
        }
        return bundle;
    }
    static containsResidentialProduct(offer) {
        return offer.products.some((product) => SalesOfferProductUtil.isResidentialProduct(product));
    }
    static containsSohoProduct(offer) {
        return offer.products.some((product) => SalesOfferProductUtil.isSohoProduct(product));
    }
    static containsPromoTag(offer, tag) {
        return SalesOfferPromoUtil.containsTag(offer.promos, tag);
    }
    static getMonthlyPriceForItems(items, exclusiveVat) {
        return sum(map(items, (p) => (exclusiveVat ? p.priceexclvat : p.price)));
    }
    static getMonthlyPermanentPromoDiscountForItems(items, exclusiveVat) {
        return SalesOfferUtil.getPermanentPromotions(items)
            .map((promo) => SalesOfferUtil.getPrice(promo, exclusiveVat))
            .reduce((curr, previous) => curr + previous, 0);
    }
    static getPermanentPromotions(items) {
        return SalesOfferUtil.getPromotionsWithDuration(items, (promo) => promo?.duration === 0);
    }
    static getMonthlyPromotions(items) {
        return SalesOfferUtil.getPromotionsWithDuration(items, (promo) => promo?.duration > 0);
    }
    static getPromotionsWithDuration(items, durationFilter) {
        return (items || [])
            .map((item) => item.promos)
            .reduce((accumulator, value) => accumulator.concat(value), [])
            .filter(durationFilter);
    }
    static getShortestDurationOfAllPromos(salesOffer) {
        return min([
            this.getShortestPromoDurationOfProducts(salesOffer),
            this.getShortestPromoDurationOfProductOptions(salesOffer),
            this.getShortestPromoDurationOfStandaloneOptions(salesOffer),
        ]);
    }
    static getPriceInclPromo(salesOfferProduct, business) {
        return this.getPrice(salesOfferProduct, business) + sumBy(salesOfferProduct.promos, this.getPriceTag(business));
    }
    static getTotalTemporaryDiscount(salesOfferProduct, business) {
        const temporaryPromos = salesOfferProduct.promos.filter((promo) => promo.duration !== 0);
        return sumBy(temporaryPromos, this.getPriceTag(business));
    }
    static getShortestPromoDuration(salesOfferProduct) {
        return this.calculateShortestPromoDuration(salesOfferProduct.promos);
    }
    static getTotalMonthlyPromoPrice(offer, exclusiveVat) {
        return sum([
            SalesOfferUtil.getMonthlyPromosForProducts(offer, exclusiveVat),
            SalesOfferUtil.getMonthlyPromosForSelectedProductOptions(offer, exclusiveVat),
            SalesOfferUtil.getMonthlyPromosForStandaloneOptions(offer, exclusiveVat),
        ]);
    }
    static getPrice(salesOfferProduct, business) {
        return business ? salesOfferProduct.priceexclvat : salesOfferProduct.price;
    }
    static getPriceTag(business) {
        return business ? 'priceexclvat' : 'price';
    }
    static calculateShortestPromoDuration(salesOfferPromos) {
        const shortestDurationPromo = minBy(salesOfferPromos, 'duration');
        return !isUndefined(shortestDurationPromo) ? shortestDurationPromo.duration : 0;
    }
    static getShortestPromoDurationOfProducts(salesOffer) {
        return min(map(SalesOfferUtil.getMonthlyPromotions(salesOffer.products), (promo) => promo.duration));
    }
    static getShortestPromoDurationOfStandaloneOptions(salesOffer) {
        return min(map(SalesOfferUtil.getMonthlyPromotions(salesOffer.standaloneoptions), (promo) => promo.duration));
    }
    static getShortestPromoDurationOfProductOptions(salesOffer) {
        return min(map(SalesOfferUtil.getMonthlyPromotions(this.getAllSelectedProductOptions(salesOffer)), (promo) => promo.duration));
    }
    static getCosts(salesOffer, nameFilter = null) {
        const flat = (someFunction, arr) => arr.reduce((salesOfferCosts, salesOfferProduct) => [
            ...salesOfferCosts,
            ...someFunction(salesOfferProduct),
        ], []);
        const costs = flat((product) => {
            if (product.costs) {
                return product.costs;
            }
            else {
                return [];
            }
        }, salesOffer.products);
        if (nameFilter) {
            return costs.filter((cost) => cost.name === nameFilter);
        }
        return costs;
    }
    static getInstallTypes(salesOffer) {
        return flatMap(salesOffer.products, (product) => product.installtypes);
    }
    static isOrderingHighTier(salesOffer) {
        return salesOffer.products.some((product) => {
            return product.productInfo && product.productInfo.isHighTier();
        });
    }
    static containsAll(offer, omapiIds) {
        return omapiIds.every((omapiId) => this.contains(offer, omapiId));
    }
    static containsAny(offer, omapiIds) {
        return omapiIds.some((omapiId) => this.contains(offer, omapiId));
    }
    static contains(offer, omapiId) {
        return offer.products.some((product) => product.omapiid === omapiId);
    }
}
//# sourceMappingURL=data:application/json;base64,