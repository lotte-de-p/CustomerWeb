import { Injectable } from '@angular/core';
import { SofyCustomerProductHoldingProduct } from '../models/sofy-customer-product-holding-product';
import { map } from 'lodash-es';
import * as i0 from "@angular/core";
export class SofyCustomerProductHoldingProductMapper {
    mapToSofyCustomerProductHoldingProduct(rawProductHoldings) {
        return map(rawProductHoldings, (rawProductHolding) => {
            const sofyCustomerProductHoldingProduct = new SofyCustomerProductHoldingProduct();
            sofyCustomerProductHoldingProduct.identifier = rawProductHolding.identifier;
            sofyCustomerProductHoldingProduct.specurl = rawProductHolding.specurl;
            sofyCustomerProductHoldingProduct.address = rawProductHolding.address;
            sofyCustomerProductHoldingProduct.products = this.mapToSofyCustomerProductHoldingProduct(rawProductHolding.products);
            sofyCustomerProductHoldingProduct.options = this.mapOptions(rawProductHolding.options);
            return sofyCustomerProductHoldingProduct;
        });
    }
    mapOptions(options) {
        return map(options, (rawProductHoldingOption) => {
            const sofyCustomerProductHoldingOption = new SofyCustomerProductHoldingProduct();
            sofyCustomerProductHoldingOption.specurl = rawProductHoldingOption.specurl;
            return sofyCustomerProductHoldingOption;
        });
    }
    static ɵfac = function SofyCustomerProductHoldingProductMapper_Factory(t) { return new (t || SofyCustomerProductHoldingProductMapper)(); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: SofyCustomerProductHoldingProductMapper, factory: SofyCustomerProductHoldingProductMapper.ɵfac, providedIn: 'root' });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(SofyCustomerProductHoldingProductMapper, [{
        type: Injectable,
        args: [{
                providedIn: 'root',
            }]
    }], null, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29meS1jdXN0b21lci1wcm9kdWN0LWhvbGRpbmctcHJvZHVjdC5tYXBwZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL21hcHBlcnMvc29meS1jdXN0b21lci1wcm9kdWN0LWhvbGRpbmctcHJvZHVjdC5tYXBwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsaUNBQWlDLEVBQUUsTUFBTSxpREFBaUQsQ0FBQztBQUVwRyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sV0FBVyxDQUFDOztBQU9oQyxNQUFNLE9BQU8sdUNBQXVDO0lBQzNDLHNDQUFzQyxDQUMzQyxrQkFBd0Q7UUFFeEQsT0FBTyxHQUFHLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxFQUFFO1lBQ25ELE1BQU0saUNBQWlDLEdBQUcsSUFBSSxpQ0FBaUMsRUFBRSxDQUFDO1lBQ2xGLGlDQUFpQyxDQUFDLFVBQVUsR0FBRyxpQkFBaUIsQ0FBQyxVQUFVLENBQUM7WUFDNUUsaUNBQWlDLENBQUMsT0FBTyxHQUFHLGlCQUFpQixDQUFDLE9BQU8sQ0FBQztZQUN0RSxpQ0FBaUMsQ0FBQyxPQUFPLEdBQUcsaUJBQWlCLENBQUMsT0FBc0IsQ0FBQztZQUNyRixpQ0FBaUMsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLHNDQUFzQyxDQUN0RixpQkFBaUIsQ0FBQyxRQUFRLENBQzNCLENBQUM7WUFDRixpQ0FBaUMsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUV2RixPQUFPLGlDQUFpQyxDQUFDO1FBQzNDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVPLFVBQVUsQ0FBQyxPQUFtRDtRQUNwRSxPQUFPLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyx1QkFBdUIsRUFBRSxFQUFFO1lBQzlDLE1BQU0sZ0NBQWdDLEdBQUcsSUFBSSxpQ0FBaUMsRUFBRSxDQUFDO1lBQ2pGLGdDQUFnQyxDQUFDLE9BQU8sR0FBRyx1QkFBdUIsQ0FBQyxPQUFPLENBQUM7WUFDM0UsT0FBTyxnQ0FBZ0MsQ0FBQztRQUMxQyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7aUdBeEJVLHVDQUF1QztnRUFBdkMsdUNBQXVDLFdBQXZDLHVDQUF1QyxtQkFGdEMsTUFBTTs7aUZBRVAsdUNBQXVDO2NBSG5ELFVBQVU7ZUFBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFNvZnlDdXN0b21lclByb2R1Y3RIb2xkaW5nUHJvZHVjdCB9IGZyb20gJy4uL21vZGVscy9zb2Z5LWN1c3RvbWVyLXByb2R1Y3QtaG9sZGluZy1wcm9kdWN0JztcbmltcG9ydCB7IENhZmVSYXdDdXN0b21lcnByb2R1Y3Rob2xkaW5nTW9kZWwgfSBmcm9tICcuLi9tb2RlbHMvY2FmZS1yYXctY3VzdG9tZXJwcm9kdWN0aG9sZGluZy5tb2RlbCc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHsgQ2FmZVJhd0N1c3RvbWVycHJvZHVjdGhvbGRpbmdPcHRpb25Nb2RlbCB9IGZyb20gJy4uL21vZGVscy9jYWZlLXJhdy1jdXN0b21lcnByb2R1Y3Rob2xkaW5nLW9wdGlvbi5tb2RlbCc7XG5pbXBvcnQgeyBTb2Z5QWRkcmVzcyB9IGZyb20gJy4uL21vZGVscy9zb2Z5LWFkZHJlc3MnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgU29meUN1c3RvbWVyUHJvZHVjdEhvbGRpbmdQcm9kdWN0TWFwcGVyIHtcbiAgcHVibGljIG1hcFRvU29meUN1c3RvbWVyUHJvZHVjdEhvbGRpbmdQcm9kdWN0KFxuICAgIHJhd1Byb2R1Y3RIb2xkaW5nczogQ2FmZVJhd0N1c3RvbWVycHJvZHVjdGhvbGRpbmdNb2RlbFtdXG4gICk6IFNvZnlDdXN0b21lclByb2R1Y3RIb2xkaW5nUHJvZHVjdFtdIHtcbiAgICByZXR1cm4gbWFwKHJhd1Byb2R1Y3RIb2xkaW5ncywgKHJhd1Byb2R1Y3RIb2xkaW5nKSA9PiB7XG4gICAgICBjb25zdCBzb2Z5Q3VzdG9tZXJQcm9kdWN0SG9sZGluZ1Byb2R1Y3QgPSBuZXcgU29meUN1c3RvbWVyUHJvZHVjdEhvbGRpbmdQcm9kdWN0KCk7XG4gICAgICBzb2Z5Q3VzdG9tZXJQcm9kdWN0SG9sZGluZ1Byb2R1Y3QuaWRlbnRpZmllciA9IHJhd1Byb2R1Y3RIb2xkaW5nLmlkZW50aWZpZXI7XG4gICAgICBzb2Z5Q3VzdG9tZXJQcm9kdWN0SG9sZGluZ1Byb2R1Y3Quc3BlY3VybCA9IHJhd1Byb2R1Y3RIb2xkaW5nLnNwZWN1cmw7XG4gICAgICBzb2Z5Q3VzdG9tZXJQcm9kdWN0SG9sZGluZ1Byb2R1Y3QuYWRkcmVzcyA9IHJhd1Byb2R1Y3RIb2xkaW5nLmFkZHJlc3MgYXMgU29meUFkZHJlc3M7XG4gICAgICBzb2Z5Q3VzdG9tZXJQcm9kdWN0SG9sZGluZ1Byb2R1Y3QucHJvZHVjdHMgPSB0aGlzLm1hcFRvU29meUN1c3RvbWVyUHJvZHVjdEhvbGRpbmdQcm9kdWN0KFxuICAgICAgICByYXdQcm9kdWN0SG9sZGluZy5wcm9kdWN0c1xuICAgICAgKTtcbiAgICAgIHNvZnlDdXN0b21lclByb2R1Y3RIb2xkaW5nUHJvZHVjdC5vcHRpb25zID0gdGhpcy5tYXBPcHRpb25zKHJhd1Byb2R1Y3RIb2xkaW5nLm9wdGlvbnMpO1xuXG4gICAgICByZXR1cm4gc29meUN1c3RvbWVyUHJvZHVjdEhvbGRpbmdQcm9kdWN0O1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBtYXBPcHRpb25zKG9wdGlvbnM6IENhZmVSYXdDdXN0b21lcnByb2R1Y3Rob2xkaW5nT3B0aW9uTW9kZWxbXSk6IFNvZnlDdXN0b21lclByb2R1Y3RIb2xkaW5nUHJvZHVjdFtdIHtcbiAgICByZXR1cm4gbWFwKG9wdGlvbnMsIChyYXdQcm9kdWN0SG9sZGluZ09wdGlvbikgPT4ge1xuICAgICAgY29uc3Qgc29meUN1c3RvbWVyUHJvZHVjdEhvbGRpbmdPcHRpb24gPSBuZXcgU29meUN1c3RvbWVyUHJvZHVjdEhvbGRpbmdQcm9kdWN0KCk7XG4gICAgICBzb2Z5Q3VzdG9tZXJQcm9kdWN0SG9sZGluZ09wdGlvbi5zcGVjdXJsID0gcmF3UHJvZHVjdEhvbGRpbmdPcHRpb24uc3BlY3VybDtcbiAgICAgIHJldHVybiBzb2Z5Q3VzdG9tZXJQcm9kdWN0SG9sZGluZ09wdGlvbjtcbiAgICB9KTtcbiAgfVxufVxuIl19