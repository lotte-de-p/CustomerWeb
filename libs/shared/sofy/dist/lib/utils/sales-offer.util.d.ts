import { SalesOffer, SalesOfferProduct, SalesOfferProductInstallType, SalesOfferProductOptin, SalesOfferProductOption, SalesOfferPromo, SalesOfferPromoDurationGroup } from '../models/response';
import { SalesOfferCost } from '../models/salesOfferCost';
import { SalesOfferProductStreamingService } from '../models/response/sales-offer-product-streaming-service.model';
export declare class SalesOfferUtil {
    static getTotalMonthlyPrice(offer: SalesOffer, exclusiveVat?: boolean): number;
    static getTotalMonthlyPriceInclPromos(offer: SalesOffer, exclusiveVat?: boolean): number;
    static getSafeSpotProOption(offer: SalesOffer): SalesOfferProductOption | undefined;
    static getAllSelectedProductOptions(offer?: SalesOffer): SalesOfferProductOption[];
    static getAllProductOptions(offer?: SalesOffer): SalesOfferProductOption[];
    static getAllSelectedProductStreamingServices(offer?: SalesOffer): SalesOfferProductStreamingService[];
    static getAllProductStreamingServices(offer?: SalesOffer): SalesOfferProductStreamingService[];
    static getAllSelectedProductOptins(offer?: SalesOffer): SalesOfferProductOptin[];
    static getAllProductOptins(offer?: SalesOffer): SalesOfferProductOptin[];
    private static getAllProductItemsByType;
    static getMonthlyPriceForSelectedProductOptions(offer: SalesOffer, exclusiveVat?: boolean): number;
    static getMonthlyPriceForProducts(offer: SalesOffer, exclusiveVat?: boolean): number;
    static getMonthlyPriceForStandaloneOptions(offer: SalesOffer, exclusiveVat?: boolean): number;
    static getMonthlyPromosForSelectedProductOptions(offer: SalesOffer, exclusiveVat?: boolean): number;
    static getMonthlyPromosForProducts(offer: SalesOffer, exclusiveVat?: boolean): number;
    static getMonthlyPromosForStandaloneOptions(offer: SalesOffer, exclusiveVat?: boolean): number;
    static getMonthlyPromos(offer: SalesOffer): SalesOfferPromo[];
    static getAllPromos(offer: SalesOffer): SalesOfferPromo[];
    static findProduct(offer: SalesOffer, omapiId: string): SalesOfferProduct | undefined;
    private static getCostPromos;
    private static getInstallPromos;
    private static getMonthlyProductPromos;
    static getMonthlyPromosGroupedByDuration(offer: SalesOffer): SalesOfferPromoDurationGroup[];
    static getPromoDurationGroupsTotal(salesOfferPromoGroups: SalesOfferPromoDurationGroup[], exclusiveVat?: boolean): number;
    static getBundle(offer: SalesOffer): SalesOfferProduct;
    static containsResidentialProduct(offer: SalesOffer): boolean;
    static containsSohoProduct(offer: SalesOffer): boolean;
    static containsPromoTag(offer: SalesOfferProduct, tag: string): boolean;
    private static getMonthlyPriceForItems;
    private static getMonthlyPermanentPromoDiscountForItems;
    private static getPermanentPromotions;
    private static getMonthlyPromotions;
    private static getPromotionsWithDuration;
    static getShortestDurationOfAllPromos(salesOffer: SalesOffer): number;
    static getPriceInclPromo(salesOfferProduct: SalesOfferProduct | SalesOfferProductOption | SalesOfferProductOptin, business: boolean): number;
    static getTotalTemporaryDiscount(salesOfferProduct: SalesOfferProduct, business: boolean): number;
    static getShortestPromoDuration(salesOfferProduct: SalesOfferProduct | SalesOfferProductOption | SalesOfferProductOptin): number;
    private static getTotalMonthlyPromoPrice;
    static getPrice(salesOfferProduct: SalesOfferProduct | SalesOfferProductOption | SalesOfferProductOptin | SalesOfferPromo, business: boolean): number;
    private static getPriceTag;
    private static calculateShortestPromoDuration;
    private static getShortestPromoDurationOfProducts;
    private static getShortestPromoDurationOfStandaloneOptions;
    private static getShortestPromoDurationOfProductOptions;
    static getCosts(salesOffer: SalesOffer, nameFilter?: string | null): SalesOfferCost[];
    static getInstallTypes(salesOffer: SalesOffer): SalesOfferProductInstallType[];
    static isOrderingHighTier(salesOffer: SalesOffer): boolean;
    static containsAll(offer: SalesOffer, omapiIds: string[]): boolean;
    static containsAny(offer: SalesOffer, omapiIds: string[]): boolean;
    static contains(offer: SalesOffer, omapiId: string): boolean;
}
//# sourceMappingURL=sales-offer.util.d.ts.map