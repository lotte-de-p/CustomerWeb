import { Injectable } from '@angular/core';
import { isEmpty, isNil } from 'lodash-es';
import * as i0 from "@angular/core";
export class OmapiQueryProductMapper {
    toModel(rawOmapiQueryProduct) {
        return this.createOmapiQueryProduct(rawOmapiQueryProduct);
    }
    createOmapiQueryProduct(rawOmapiQueryProduct) {
        const omapiQueryProduct = {};
        omapiQueryProduct.products = this.createQueryProducts(rawOmapiQueryProduct.products);
        return omapiQueryProduct;
    }
    createQueryProducts(rawQueryProducts) {
        return (rawQueryProducts &&
            rawQueryProducts.map((rawQueryProduct) => {
                return this.createQueryProductData(rawQueryProduct);
            }));
    }
    createQueryProductData(rawQueryProduct) {
        const queryProduct = {};
        queryProduct.labelKey = rawQueryProduct.labelKey;
        queryProduct.productFamily = rawQueryProduct.productFamily;
        queryProduct.variants = this.createVariants(rawQueryProduct.variants);
        return queryProduct;
    }
    createLocalizedContents(rawLocalizedContents) {
        return (rawLocalizedContents &&
            rawLocalizedContents.map((rawLocalizedContent) => {
                return OmapiQueryProductMapper.createLocalizedContent(rawLocalizedContent);
            }));
    }
    static createLocalizedContent(rawLocalizedContent) {
        const localizedContent = {};
        localizedContent.locale = rawLocalizedContent.locale;
        localizedContent.key = rawLocalizedContent.key;
        localizedContent.data = rawLocalizedContent.data;
        localizedContent.value = OmapiQueryProductMapper.createLocalizedContentValue(rawLocalizedContent.value ? rawLocalizedContent.value : []);
        return localizedContent;
    }
    static createLocalizedContentValue(rawLocalizedContentValue) {
        return (rawLocalizedContentValue &&
            rawLocalizedContentValue.map((value) => {
                return value;
            }));
    }
    createVariants(rawVariants) {
        return (rawVariants &&
            rawVariants.map((rawVariant) => {
                return this.createVariant(rawVariant);
            }));
    }
    createVariant(rawVariant) {
        const variant = {};
        variant.productId = rawVariant.productId;
        if (!isNil(rawVariant.extraAtHomeDelivery)) {
            variant.extraAtHomeDelivery = rawVariant.extraAtHomeDelivery;
        }
        variant.prices = OmapiQueryProductMapper.createPrices(rawVariant.prices);
        variant.images = this.createImages(rawVariant.images);
        const shortDescription = this.createShortDescription(rawVariant.shortDescription);
        if (shortDescription) {
            variant.shortDescription = shortDescription;
        }
        variant.brand = this.createBrand(rawVariant.manBrand);
        return variant;
    }
    static createPrices(rawPrices) {
        const prices = {};
        prices.priceType = rawPrices.priceType;
        return prices;
    }
    createImages(rawImages) {
        return (rawImages &&
            rawImages.map((rawImage) => {
                return this.createImage(rawImage);
            }));
    }
    createImage(rawImage) {
        const image = {};
        image.attributeKey = rawImage.attributeKey;
        image.value = rawImage.value;
        image.localizedContent = this.createLocalizedContents(rawImage.localizedContent);
        return image;
    }
    createShortDescription(rawShortDescription) {
        if (!isEmpty(rawShortDescription) && !isEmpty(rawShortDescription.localizedContent)) {
            const shortDescription = {};
            shortDescription.localizedContent = this.createLocalizedContents(rawShortDescription.localizedContent);
            return shortDescription;
        }
        return {};
    }
    createBrand(rawBrand) {
        if (!isEmpty(rawBrand) && !isEmpty(rawBrand.localizedContent)) {
            const brand = {};
            brand.localizedContent = this.createLocalizedContents(rawBrand.localizedContent);
            return brand;
        }
        return {};
    }
    static ɵfac = function OmapiQueryProductMapper_Factory(t) { return new (t || OmapiQueryProductMapper)(); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: OmapiQueryProductMapper, factory: OmapiQueryProductMapper.ɵfac, providedIn: 'root' });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(OmapiQueryProductMapper, [{
        type: Injectable,
        args: [{
                providedIn: 'root',
            }]
    }], null, null); })();
//# sourceMappingURL=data:application/json;base64,