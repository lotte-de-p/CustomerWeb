{"version":3,"file":"telenet-ng-lib-ocapi.mjs","sources":["../../src/lib/enums/http-types.enum.ts","../../src/lib/enums/login-status.enum.ts","../../src/lib/constants/login-details.constant.ts","../../src/lib/constants/sales.constant.ts","../../src/lib/models/login-details.model.ts","../../src/lib/models/login-details.testfactory.ts","../../src/lib/models/logout-details.model.ts","../../src/lib/models/ocapi-call.model.ts","../../src/lib/utils/ocapi.helper.ts","../../src/lib/services/authentication/providers/authentication.provider.ts","../../src/lib/services/authentication/providers/ocapi-authentication.provider.ts","../../src/lib/services/authentication/providers/openid-authentication.provider.ts","../../src/lib/mappers/login-customer-name.mapper.ts","../../src/lib/mappers/login-details.mapper.ts","../../src/lib/mappers/logout.mapper.ts","../../src/lib/services/error-report.service.ts","../../src/lib/services/user-details.service.ts","../../src/lib/services/authentication/state/authentication.state.ts","../../src/lib/services/authentication/services/authentication.service.ts","../../src/lib/services/authentication/services/jwt-authentication.service.ts","../../src/lib/services/authentication/models/authentication.parameters.ts","../../src/lib/services/authentication/services/transparent-authentication.service.ts","../../src/lib/services/authentication/factory/authentication.factory.ts","../../src/lib/services/authentication/tokens/authentication-service.token.ts","../../src/lib/services/authentication/tokens/authentication-provider.token.ts","../../src/lib/services/ocapi.service.ts","../../src/lib/services/login.service.ts","../../src/lib/services/ocapi-socket.service.ts","../../src/lib/services/cache/cache.service.ts","../../src/lib/components/login.component.html","../../src/lib/components/login.component.ts","../../src/lib/interfaces/raw-login-details.interface.testfactory.ts","../../src/lib/login-module.ts","../../src/telenet-ng-lib-ocapi.ts"],"sourcesContent":["export enum HttpTypesEnum {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  PATCH = 'PATCH',\n  DELETE = 'DELETE',\n  HEAD = 'HEAD',\n}\n","export enum LoginStatusEnum {\n  LOGGED_IN = 'LOGGED_IN',\n  NOT_LOGGED_IN = 'NOT_LOGGED_IN',\n  INSUFFICIENT_PERMISSIONS = 'INSUFFICIENT_PERMISSIONS',\n  NARROWED = 'NARROWED',\n  UNKNOWN = 'UNKNOWN',\n}\n","export class LoginDetailsConstants {\n  static EMPTY = '';\n  static MASTER_ROLES = ['MASTER_USER', 'PREPAID_MASTER_USER', 'MANAGER'];\n  static CHILD_ROLES = ['CHILD_USER', 'PREPAID_CHILD_USER'];\n  static FLEET_MANAGER_ROLE = 'FLEET MANAGER';\n  static FLEET_USER_ROLE = 'FLEET USER';\n  static MEMBER_ROLE = 'MEMBER';\n  static MANAGER_ROLE = 'MANAGER';\n  static ORPHAN_ROLE = 'ORPHAN';\n  static INTERNET_MASTER_ROLE = 'INTERNET_MASTER';\n  static CUSTOMER_ADMIN_ROLE = 'CUSTOMER_ADMIN';\n  static CONTRACT_HOLDER_ROLE = 'CONTRACT_HOLDER';\n  static MANAGER_ROLES = [\n    LoginDetailsConstants.MANAGER_ROLE,\n    LoginDetailsConstants.INTERNET_MASTER_ROLE,\n    LoginDetailsConstants.CUSTOMER_ADMIN_ROLE,\n    LoginDetailsConstants.CONTRACT_HOLDER_ROLE,\n  ];\n  static CHARACTER_LIMIT = 39;\n  static SUFFIX = '...';\n  static BSS_SYSTEM_BASE_LEGACY = 'BASE_LEGACY';\n  static BSS_SYSTEM_TELENET_LEGACY = 'TELENET_LEGACY';\n  static BSS_SYSTEM_NETCRACKER = 'NETCRACKER';\n  static STYLE_HINT = 'care';\n  static PROMPT_NONE = 'none';\n  static PROMPT_LOGIN = 'login';\n  static CODE = 'code';\n  static CLAIMS = '{\"id_token\":{\"http://telenet.be/claims/roles\":null,\"http://telenet.be/claims/licenses\":null}}';\n  static CLIENT_ID_OCAPI_BASE = 'ocapi_base';\n  static SOURCE_EMAIL = 'EMAIL';\n  static CUSTOMER_REGISTRATION_URL = 'customer_registration_url';\n  static COOKIE_KEYS = 'cookie_keys';\n  static PARAM_CHANNEL = 'channel';\n  static PARAM_IDP = 'idp';\n  static PARAM_FLOW = 'flow';\n  static PARAM_SDATA = 'sdata';\n  static PARAM_REFERRER_URL = 'referrer_url';\n  static ITS_ME_REGISTER_ENDPOINT = '/itsme/register';\n  static STEP_ID_LOGIN_REGISTER = 'login-register';\n  static LOGIN = 'LOGIN';\n  static LOGIN_STATUS_COOKIENAME = 'loginStatus';\n}\n","export class SalesConstants {\n  static QUERY_URL = 'queryurl';\n  static SPEC_URL = 'specurl';\n}\n","import { ContextHubModelInterface } from '@telenet/ng-lib-page';\nimport { includes, some, isEmpty, merge } from 'lodash-es';\nimport { LoginDetailsConstants } from '../constants';\n\nexport class LoginDetails implements ContextHubModelInterface<LoginDetails> {\n  state: string;\n  nonce: string;\n  status: string;\n  narrowed = false;\n  httpStatus: number;\n  scopes: string[];\n  bssSystem: string;\n  customerNumber: string;\n  identityId: string;\n  username: string;\n  firstName: string;\n  lastName: string;\n  narrowedScope: boolean;\n  authAge: number;\n  isPid: boolean;\n  bssSytem: string;\n  isImpersonated: boolean;\n  role: string;\n  isExplicitLogin: boolean;\n  isTelenetLogin: boolean;\n  isSubLogin: boolean;\n  loginAlias: string;\n  identityRequestId?: string;\n  pegaServiceCaseId?: string;\n  contactNumber?: string;\n  advisorId?: string;\n\n  msisdn?: string;\n\n  constructor(httpStatus: number) {\n    this.httpStatus = httpStatus;\n  }\n\n  isLoggedIn(): boolean {\n    return this.httpStatus === 200;\n  }\n\n  isNarrowed(): boolean {\n    return this.isLoggedIn() && this.narrowedScope;\n  }\n\n  invalidResponse(): boolean {\n    return this.httpStatus === 0;\n  }\n\n  isAuthenticated(): boolean {\n    return this.isLoggedIn() && !this.isNarrowed() && !this.invalidResponse();\n  }\n\n  isMaster(): boolean {\n    return !isEmpty(this.role) && includes(LoginDetailsConstants.MASTER_ROLES, this.role);\n  }\n\n  isChild(): boolean {\n    return !isEmpty(this.role) && includes(LoginDetailsConstants.CHILD_ROLES, this.role);\n  }\n\n  isMember(): boolean {\n    return !isEmpty(this.role) && this.role.toUpperCase().includes(LoginDetailsConstants.MEMBER_ROLE);\n  }\n\n  isContractHolder(): boolean {\n    return !isEmpty(this.role) && this.role.toUpperCase().includes(LoginDetailsConstants.CONTRACT_HOLDER_ROLE);\n  }\n\n  isOrphan(): boolean {\n    return !isEmpty(this.role) && this.role.toUpperCase().includes(LoginDetailsConstants.ORPHAN_ROLE);\n  }\n\n  isNewlyRegisteredUser(): boolean {\n    return !!isEmpty(this.role) && !isEmpty(this.firstName);\n  }\n\n  getName(): string {\n    return this.firstName.concat(LoginDetailsConstants.EMPTY).concat(this.lastName);\n  }\n\n  getShortenedName(): string {\n    return this.getName().length <= LoginDetailsConstants.CHARACTER_LIMIT\n      ? this.getName()\n      : this.getName()\n          .substring(0, LoginDetailsConstants.CHARACTER_LIMIT - LoginDetailsConstants.SUFFIX.length)\n          .concat(LoginDetailsConstants.SUFFIX);\n  }\n\n  isCafeUser(): boolean {\n    return this.bssSystem === LoginDetailsConstants.BSS_SYSTEM_TELENET_LEGACY;\n  }\n\n  isBaseLegacyCustomer(): boolean {\n    return this.bssSystem === LoginDetailsConstants.BSS_SYSTEM_BASE_LEGACY;\n  }\n\n  isBssSystemNetcracker(): boolean {\n    return this.bssSystem === LoginDetailsConstants.BSS_SYSTEM_NETCRACKER;\n  }\n\n  hasScope(scopeName: string): boolean {\n    return some(this.scopes, function (scope) {\n      return scope.toUpperCase() === scopeName.toUpperCase();\n    });\n  }\n\n  isFleetManager(): boolean {\n    return !isEmpty(this.role) && this.role === LoginDetailsConstants.FLEET_MANAGER_ROLE;\n  }\n\n  isFleetUser(): boolean {\n    return !isEmpty(this.role) && this.role === LoginDetailsConstants.FLEET_USER_ROLE;\n  }\n\n  isManager(): boolean {\n    return !isEmpty(this.role) && this.role === LoginDetailsConstants.MANAGER_ROLE;\n  }\n\n  hasManagerRole(): boolean {\n    return !isEmpty(this.role) && LoginDetailsConstants.MANAGER_ROLES.includes(this.role);\n  }\n\n  enrich(loginDetailsJSON: unknown): LoginDetails {\n    let enrichedLoginDetails = new LoginDetails(401);\n    if (!isEmpty(loginDetailsJSON)) {\n      enrichedLoginDetails = merge(enrichedLoginDetails, loginDetailsJSON);\n    }\n    return enrichedLoginDetails;\n  }\n\n  isNotLoggedInOrDoesNotHaveScope(scope: string) {\n    return !this.isLoggedIn() || !this.hasScope(scope);\n  }\n\n  get isSuccess(): boolean {\n    return this.httpStatus === 200;\n  }\n\n  // useless setter but needed to avoid 'cannot set property on [object Object] which only has getter\n  set isSuccess(success: boolean) {\n    if (success) {\n      this.httpStatus = 200;\n    }\n  }\n}\n","import { LoginDetails } from './login-details.model';\n\nexport class LoginDetailsTestfactory {\n  static build(properties?: unknown): LoginDetails {\n    const loginDetails = new LoginDetails(200);\n    loginDetails.customerNumber = '12345';\n    loginDetails.state = 'test_state';\n    loginDetails.nonce = 'test_nonce';\n    loginDetails.status = 'test_status';\n    loginDetails.scopes = [];\n    loginDetails.bssSystem = 'test_bss_system';\n    loginDetails.identityId = '';\n    loginDetails.username = 'test_user';\n    loginDetails.firstName = 'test_firstname';\n    loginDetails.lastName = 'test_lastname';\n    loginDetails.narrowed = false;\n    loginDetails.authAge = 18;\n    loginDetails.isPid = false;\n    loginDetails.bssSytem = 'test_bssSytem';\n    loginDetails.isImpersonated = false;\n    loginDetails.role = '';\n    loginDetails.isExplicitLogin = false;\n    loginDetails.isTelenetLogin = true;\n    loginDetails.isSubLogin = false;\n    loginDetails.loginAlias = 'test_login_alias';\n    loginDetails.advisorId = 'adminfmc';\n\n    if (properties) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      Object.keys(properties).forEach((key) => {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        loginDetails[key] = properties[key];\n      });\n    }\n    return loginDetails;\n  }\n}\n","export class LogoutDetails {\n  logout_redirect_uri?: string;\n}\n","import { MapperInterface } from '@telenet/ng-lib-shared';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { HttpTypesEnum } from '../enums';\n\nexport class OcapiCallConfig<T, G> {\n  messageGroupName: string;\n  endpoint: string;\n  mapper?: MapperInterface<T, G>;\n  data: unknown;\n  withCredentials = true;\n  withDefaultContentType = true;\n  errorHandler: (errorHandler: HttpErrorResponse, config: OcapiCallConfig<T, G>) => Observable<unknown>;\n  httpType: HttpTypesEnum;\n  customHeaders: Record<string, string | string[]>;\n  observeAsResponse?: boolean;\n  responseType?: string;\n  useAdaptorEndpoint?: boolean;\n  silentlyHandleError: boolean;\n  authNeeded = true;\n\n  constructor(\n    messageGroupName: string,\n    endpoint: string,\n    mapper?: MapperInterface<T, G>,\n    data?: unknown,\n    customHeaders: Record<string, string | string[]> = {},\n    observeAsResponse?: boolean,\n    responseType?: string,\n    useAdaptorEndpoint?: boolean,\n    silentlyHandleError = false\n  ) {\n    this.messageGroupName = messageGroupName;\n    this.endpoint = endpoint;\n    this.mapper = mapper;\n    this.data = data;\n    this.customHeaders = customHeaders;\n    this.observeAsResponse = observeAsResponse;\n    this.responseType = responseType;\n    this.useAdaptorEndpoint = useAdaptorEndpoint;\n    this.silentlyHandleError = silentlyHandleError;\n  }\n\n  getEndpoint(): string {\n    return this.useAdaptorEndpoint ? this.endpoint.replace('/public', '-adaptor/public') : this.endpoint;\n  }\n}\n","import { HttpContext, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { OcapiCallConfig } from '../models';\nimport { UrlService } from '@telenet/ng-lib-page';\nimport { CookieService } from 'ngx-cookie-service';\nimport { isEmpty } from 'lodash-es';\nimport { ConfigConstants, ConfigService } from '@telenet/ng-lib-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OcapiHelper {\n  constructor(\n    private readonly urlService: UrlService,\n    private readonly cookieService: CookieService,\n    private readonly configService: ConfigService\n  ) {}\n\n  getHttpHeaders<T, G>(ocapiConfig?: OcapiCallConfig<T, G>): HttpHeaders {\n    return this.createHttpHeaders(ocapiConfig);\n  }\n\n  createHttpHeaders<T, G>(ocapiConfig?: OcapiCallConfig<T, G>): HttpHeaders {\n    let httpHeaders = new HttpHeaders();\n    const accessToken = sessionStorage.getItem('TOKEN-ACCESS');\n\n    httpHeaders = httpHeaders.set('x-alt-referer', this.urlService.getCurrentUrl());\n    httpHeaders = httpHeaders.set('X-Requested-With', 'XMLHttpRequest');\n\n    if (ocapiConfig?.withDefaultContentType) {\n      httpHeaders = httpHeaders.set('Content-Type', 'application/json;charset=UTF-8');\n    }\n\n    if (accessToken) {\n      httpHeaders = httpHeaders.set('Authorization', this.getAccessToken(accessToken));\n    } else {\n      const TOKEN_XSRF = this.cookieService.get('TOKEN-XSRF');\n\n      if (!isEmpty(TOKEN_XSRF)) {\n        httpHeaders = httpHeaders.set('X-TOKEN-XSRF', TOKEN_XSRF);\n      }\n    }\n\n    if (ocapiConfig && ocapiConfig.customHeaders) {\n      for (const [key, value] of Object.entries(ocapiConfig.customHeaders)) {\n        httpHeaders = httpHeaders.set(key, value);\n      }\n    }\n    const oauthClientId = this.configService.getConfig(ConfigConstants.OPENID_CLIENT_ID);\n    if (oauthClientId === 'fleet_portal' || oauthClientId === 'tip_portal') {\n      httpHeaders = httpHeaders.set('X-Client-Id', oauthClientId);\n    }\n    return httpHeaders;\n  }\n\n  getHttpOptions<T, G>(ocapiConfig: OcapiCallConfig<T, G>) {\n    const httpOptions: {\n      headers: HttpHeaders;\n      context?: HttpContext;\n      observe?: 'body' | 'response';\n      params?: HttpParams | Record<string, string | number | boolean | readonly (string | number | boolean)[]>;\n      reportProgress?: boolean;\n      responseType?: string;\n      withCredentials?: boolean;\n    } = {\n      withCredentials: ocapiConfig.withCredentials,\n      headers: this.getHttpHeaders(ocapiConfig),\n    };\n\n    if (ocapiConfig.observeAsResponse) {\n      httpOptions.observe = 'response';\n    }\n    if (ocapiConfig.responseType) {\n      httpOptions.responseType = ocapiConfig.responseType;\n    }\n\n    return httpOptions;\n  }\n\n  private getAccessToken(accessToken: string): string {\n    return `Bearer ${accessToken}`;\n  }\n}\n","import { ConfigService } from '@telenet/ng-lib-config';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { LanguageService, UrlService } from '@telenet/ng-lib-page';\nimport { Observable } from 'rxjs';\nimport { OcapiHelper } from '../../../utils';\nimport { LoginDetailsConstants } from '../../../constants';\nimport { AuthenticationParameters } from '../models';\nimport { inject } from '@angular/core';\n\nexport abstract class AuthenticationProvider {\n  protected readonly configService = inject(ConfigService);\n  protected readonly languageService = inject(LanguageService);\n  protected readonly urlService = inject(UrlService);\n  protected readonly httpClient = inject(HttpClient);\n  protected readonly ocapiHelper = inject(OcapiHelper);\n\n  abstract getAuthenticationUrl(): string | null;\n\n  abstract getType(): string;\n\n  public getParameters(authenticationParameters: AuthenticationParameters): HttpParams {\n    const { styleHint = LoginDetailsConstants.STYLE_HINT, prompt } = authenticationParameters;\n    let httpParams = new HttpParams().set('lang', this.languageService.getLanguage()).set('style_hint', styleHint);\n\n    if (prompt) {\n      httpParams = httpParams.append('prompt', prompt);\n    }\n    return httpParams;\n  }\n\n  abstract sendAuthCall(params: HttpParams): Observable<{ data: string }>;\n}\n","import { ConfigConstants } from '@telenet/ng-lib-config';\nimport { HttpErrorResponse, HttpParams } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { AuthenticationProvider } from './authentication.provider';\nimport { AuthenticationParameters } from '../models';\nimport { Log, LogFactory } from '@telenet/ng-lib-shared';\n\nexport class OcapiAuthenticationProvider extends AuthenticationProvider {\n  public static PROVIDER_TYPE = 'ocapi';\n\n  private static readonly LOG: Log = LogFactory.createLogger(OcapiAuthenticationProvider);\n\n  constructor() {\n    super();\n    OcapiAuthenticationProvider.LOG.logDebug('Use OcapiAuthenticationProvider for authentication');\n  }\n\n  public getType(): string {\n    return OcapiAuthenticationProvider.PROVIDER_TYPE;\n  }\n\n  public getAuthenticationUrl(): string | null {\n    const ocapiUrl = this.configService.getConfig(ConfigConstants.OCAPI_URl);\n    const clientId = this.configService.getConfig(ConfigConstants.OCAPI_CLIENT_ID);\n\n    if (!ocapiUrl || !clientId) {\n      OcapiAuthenticationProvider.LOG.logError('OCAPI_URL or OCAPI_CLIENT_ID has no been configured');\n      return null;\n    }\n    return ocapiUrl + '/login/authorization/' + clientId;\n  }\n\n  public override getParameters(authenticationParameters: AuthenticationParameters): HttpParams {\n    const { referrerUrl } = authenticationParameters;\n\n    let httpParams = super.getParameters(authenticationParameters);\n    httpParams = httpParams.appendAll({\n      targetUrl: (referrerUrl || undefined) ?? this.urlService.getCurrentUrl(),\n    });\n    return httpParams;\n  }\n\n  public sendAuthCall(params: HttpParams): Observable<{ data: string }> {\n    OcapiAuthenticationProvider.LOG.logDebug(\n      `Sending jsonp request without prompt to ocapi authentication endpoint: ${this.getAuthenticationUrl()}, with parameters ${params.toString()}`\n    );\n    const authUrl = this.getAuthenticationUrl();\n    if (!authUrl) {\n      return throwError(\n        () => new HttpErrorResponse({ error: { text: 'Authentication url of ocapi provider could not be determined' } })\n      );\n    }\n\n    const url = `${authUrl}?${params.toString()}`;\n    return this.httpClient.jsonp(url, 'callback') as Observable<{ data: string }>;\n  }\n}\n","import { ConfigConstants } from '@telenet/ng-lib-config';\nimport { HttpErrorResponse, HttpParams } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { AuthenticationProvider } from './authentication.provider';\nimport { AuthenticationParameters } from '../models';\nimport { LoginDetailsConstants } from '../../../constants';\nimport { Log, LogFactory } from '@telenet/ng-lib-shared';\n\nexport class OpenidAuthenticationProvider extends AuthenticationProvider {\n  private static readonly LOG: Log = LogFactory.createLogger(OpenidAuthenticationProvider);\n\n  public static PROVIDER_TYPE = 'openid';\n\n  constructor() {\n    super();\n    OpenidAuthenticationProvider.LOG.logDebug('Use OpenidAuthenticationProvider for authentication');\n  }\n\n  public getType(): string {\n    return OpenidAuthenticationProvider.PROVIDER_TYPE;\n  }\n\n  public getAuthenticationUrl(): string | null {\n    if (!this.configService.getConfig(ConfigConstants.OPENID_AUTH_URL)) {\n      OpenidAuthenticationProvider.LOG.logError('OPENID_AUTH_URL has not been configured');\n      return null;\n    }\n    return this.configService.getConfig(ConfigConstants.OPENID_AUTH_URL);\n  }\n\n  public override getParameters(authenticationParameters: AuthenticationParameters): HttpParams {\n    const { referrerUrl, state, nonce } = authenticationParameters;\n\n    let httpParams = super.getParameters(authenticationParameters);\n    httpParams = httpParams.appendAll({\n      client_id: this.configService.getConfig(ConfigConstants.OPENID_CLIENT_ID),\n      response_type: LoginDetailsConstants.CODE,\n      claims: LoginDetailsConstants.CLAIMS,\n    });\n\n    if (state && nonce) {\n      httpParams = httpParams.appendAll({\n        state,\n        nonce,\n      });\n    }\n\n    if (referrerUrl) {\n      httpParams = httpParams.append('referrer_url', referrerUrl);\n    }\n\n    if (this.configService.getConfig(ConfigConstants.OAUTH_CALLBACK_URL)) {\n      httpParams = httpParams.append('redirect_uri', this.configService.getConfig(ConfigConstants.OAUTH_CALLBACK_URL));\n    }\n\n    return httpParams;\n  }\n\n  public sendAuthCall(params: HttpParams): Observable<{ data: string }> {\n    OpenidAuthenticationProvider.LOG.logDebug(\n      `Sending GET request without prompt to openid authentication endpoint: ${this.getAuthenticationUrl()}, with parameters ${params.toString()}`\n    );\n\n    const authUrl = this.getAuthenticationUrl();\n    if (!authUrl) {\n      return throwError(\n        () =>\n          new HttpErrorResponse({ error: { text: 'Authentication url of openid provider could not be determined' } })\n      );\n    }\n\n    const url = `${authUrl}?${params.toString()}`;\n    const options = {\n      withCredentials: true,\n      headers: this.ocapiHelper.getHttpHeaders(),\n    };\n    return this.httpClient.get(url, options) as Observable<{ data: string }>;\n  }\n}\n","import { MapperInterface } from '@telenet/ng-lib-shared';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LoginCustomerNameMapper implements MapperInterface<null, null> {\n  toModel() {\n    return null;\n  }\n}\n","// @ts-nocheck\nimport { Injectable } from '@angular/core';\nimport { LoginDetails } from '../models/login-details.model';\nimport { RawLoginDetailsInterface } from '../interfaces/raw-login-details.interface';\nimport { MapperInterface } from '@telenet/ng-lib-shared';\nimport { map } from 'lodash-es';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LoginDetailsMapper implements MapperInterface<unknown, LoginDetails> {\n  toModel(rawResponse: Record<string, unknown>): LoginDetails {\n    if (rawResponse.status && rawResponse.status === 401) {\n      return this.getLoginDetails(rawResponse.data as Record<string, unknown>, rawResponse.status);\n    } else {\n      return this.getLoginDetails(rawResponse, 200);\n    }\n  }\n\n  private getLoginDetails(rawResponse: Record<string, unknown>, status: number): LoginDetails {\n    const loginDetails = new LoginDetails(status);\n    if (loginDetails.isLoggedIn()) {\n      this.createLoginDetails(rawResponse as RawLoginDetailsInterface, loginDetails);\n    } else {\n      this.createStatAndNonce(rawResponse as string, loginDetails);\n    }\n    return loginDetails;\n  }\n\n  private createStatAndNonce(rawResponse: string, loginDetails: LoginDetails) {\n    loginDetails.state = rawResponse?.split?.(',')?.[0];\n    loginDetails.nonce = rawResponse?.split?.(',')?.[1];\n  }\n\n  private createLoginDetails(rawResponse: RawLoginDetailsInterface, loginDetails: LoginDetails) {\n    const rawLoginDetails: RawLoginDetailsInterface = rawResponse;\n    loginDetails.customerNumber = rawLoginDetails.customer_number;\n    loginDetails.identityId = rawLoginDetails.identity_id;\n    loginDetails.username = rawLoginDetails.username;\n    loginDetails.firstName = rawLoginDetails.first_name;\n    loginDetails.lastName = rawLoginDetails.last_name;\n    loginDetails.narrowedScope = rawLoginDetails.narrowed_scope;\n    loginDetails.scopes = this.createScopes(rawLoginDetails.scopes ? rawLoginDetails.scopes : []);\n    loginDetails.authAge = rawLoginDetails.auth_age;\n    loginDetails.isPid = rawLoginDetails.is_pid;\n    loginDetails.bssSystem = rawLoginDetails.bss_system;\n    loginDetails.isImpersonated = rawLoginDetails.impersonated;\n    loginDetails.role = rawLoginDetails.role;\n    loginDetails.isExplicitLogin = rawLoginDetails.explicit_login;\n    loginDetails.isTelenetLogin = rawLoginDetails.is_telenet_login;\n    loginDetails.isSubLogin = rawLoginDetails.is_sub_login;\n    loginDetails.loginAlias = rawLoginDetails.login_alias;\n    loginDetails.status = rawLoginDetails.status;\n    loginDetails.identityRequestId = rawLoginDetails.identity_request_id;\n    loginDetails.pegaServiceCaseId = rawLoginDetails.pega_service_case_id;\n    loginDetails.contactNumber = rawLoginDetails.contact_number;\n    loginDetails.advisorId = rawLoginDetails.advisorId || '';\n  }\n\n  private createScopes(rawScopes: string[]): string[] {\n    return map(rawScopes, this.createScope);\n  }\n\n  private createScope(rawScope: string): string {\n    return rawScope.split(':')[0];\n  }\n}\n","import { MapperInterface } from '@telenet/ng-lib-shared';\nimport { Injectable } from '@angular/core';\nimport { LogoutDetails } from '../models';\nimport { RawLogOutDetailsInterface } from '../interfaces';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogoutMapper implements MapperInterface<RawLogOutDetailsInterface, LogoutDetails> {\n  toModel(rawLogoutResponse: RawLogOutDetailsInterface): LogoutDetails {\n    const logoutDetails: LogoutDetails = new LogoutDetails();\n\n    logoutDetails.logout_redirect_uri = rawLogoutResponse.logout_redirect_uri;\n    return logoutDetails;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  DataLayerService,\n  DataLayerAttributes,\n  EventNameEnum,\n  EventTypeEnum,\n  EventStatusEnum,\n} from '@telenet/ng-lib-datalayer';\nimport { OcapiCallConfig } from '../models';\nimport { QueryParamEnum, UrlService } from '@telenet/ng-lib-page';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ErrorReportService {\n  constructor(\n    private readonly dataLayerService: DataLayerService,\n    private readonly urlService: UrlService\n  ) {}\n\n  sendErrorEventToAnalytics<T, G>(ocapiCall: OcapiCallConfig<T, G>, errorResponse?: unknown, errorCode?: string): void {\n    const eventInfo = this.dataLayerService.createEventInfo(\n      EventNameEnum.EVENT_NAME_ERROR_OCCURRED,\n      EventTypeEnum.EVENT_TYPE_ERROR\n    );\n    eventInfo.setEventStatus(EventStatusEnum.EVENT_STATUS_FAILED);\n    let errorMessage: string | undefined = errorCode;\n    if (errorResponse && errorResponse['errorDetails'] && errorResponse['errorDetails'].length) {\n      errorMessage =\n        errorMessage +\n        '|' +\n        errorResponse['errorDetails'][0].errorDetailCode +\n        '|' +\n        errorResponse['errorDetails'][0].message;\n    }\n\n    if (errorMessage) {\n      eventInfo.setEventStatusMessage(errorMessage);\n    }\n\n    const attributes: DataLayerAttributes = {\n      itemName: ocapiCall.messageGroupName,\n      itemData: ocapiCall.httpType + ' ' + ocapiCall.endpoint,\n      itemGroup: errorResponse ? errorResponse['cause'] : '',\n      itemIdentifier: errorResponse ? errorResponse['correlationId'] : '',\n    };\n\n    const flow = this.urlService.getRequestParamValue(QueryParamEnum.FLOW, '');\n    const sData = this.urlService.getRequestParamValue(QueryParamEnum.SDATA, '');\n    const sId = this.urlService.getRequestParamValue(QueryParamEnum.SALES_ORDER_ID, '');\n    if (!flow || (!sData && !sId)) {\n      this.dataLayerService.sendEvent({ eventInfo, attributes });\n    }\n  }\n}\n","import { inject, Injectable } from '@angular/core';\nimport { catchError, finalize, map, shareReplay, take } from 'rxjs/operators';\nimport { HttpClient, HttpContext, HttpErrorResponse, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Observable, of, ReplaySubject, throwError } from 'rxjs';\nimport { ErrorMessage, MessageService } from '@telenet/ng-lib-message';\nimport { LoginDetails, OcapiCallConfig } from '../models';\nimport { LoginDetailsMapper } from '../mappers';\nimport { ConfigConstants, ConfigService } from '@telenet/ng-lib-config';\nimport { OcapiHelper } from '../utils';\nimport { ErrorReportService } from './error-report.service';\nimport { QueryParamEnum, UrlService } from '@telenet/ng-lib-page';\nimport { Log, LogFactory } from '@telenet/ng-lib-shared';\n\ninterface UserDetailsOptions {\n  withCredentials?: boolean;\n  jwtToken?: string;\n  referrerUrl?: string;\n  errorHandler?: (\n    errorHandler: HttpErrorResponse,\n    config: OcapiCallConfig<Record<string, unknown>, LoginDetails>\n  ) => Observable<unknown>;\n  forceUpdate?: boolean;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserDetailsService {\n  private static readonly LOG: Log = LogFactory.createLogger(UserDetailsService);\n\n  private readonly endpoint = '/oauth/userdetails';\n\n  private readonly cache: Map<string, ReplaySubject<LoginDetails>> = new Map<string, ReplaySubject<LoginDetails>>();\n\n  private readonly loginDetailsMapper: LoginDetailsMapper = inject(LoginDetailsMapper);\n  private readonly messageService: MessageService = inject(MessageService);\n  private readonly ocapiHelper: OcapiHelper = inject(OcapiHelper);\n  private readonly configService: ConfigService = inject(ConfigService);\n  private readonly http = inject(HttpClient);\n  private readonly errorReportService = inject(ErrorReportService);\n  private readonly urlService = inject(UrlService);\n\n  reset() {\n    this.cache.clear();\n  }\n\n  getUserDetails(options: UserDetailsOptions = {}) {\n    const { withCredentials = true, referrerUrl, jwtToken } = options;\n\n    let endpointWithParameters = this.endpoint;\n    const jwt = jwtToken ? jwtToken : this.extractJwtFromUrl();\n\n    if (jwt) {\n      endpointWithParameters = `${endpointWithParameters}?jwt=${jwt}`;\n    }\n    const ocapiConfig = new OcapiCallConfig('', endpointWithParameters, this.loginDetailsMapper);\n    ocapiConfig.withCredentials = withCredentials;\n    ocapiConfig.authNeeded = false;\n\n    if (referrerUrl && referrerUrl.length > 0) {\n      ocapiConfig.customHeaders = { ...(ocapiConfig.customHeaders || {}), 'x-alt-referer': referrerUrl };\n    }\n    return this.getUserDetailsForConfig(ocapiConfig).pipe(\n      shareReplay({ bufferSize: 1, refCount: false }),\n      catchError((error: HttpErrorResponse) => {\n        if (error.status !== 401) {\n          return throwError(() => error);\n        }\n        const { status, error: errorMessage } = error;\n        const [state, nonce] = String(errorMessage).split(',');\n        const loginDetails = new LoginDetails(status);\n        loginDetails.state = state;\n        loginDetails.nonce = nonce;\n\n        return of(loginDetails);\n      })\n    );\n  }\n\n  private extractJwtFromUrl(): string | null {\n    const jwtToken = this.urlService.getRequestParamValue(QueryParamEnum.JWT_TOKEN, '');\n    return jwtToken ? jwtToken : this.urlService.getHashParameter(QueryParamEnum.JWT_TOKEN);\n  }\n\n  private createHashKey(ocapiCall: OcapiCallConfig<Record<string, unknown>, LoginDetails>) {\n    const { errorHandler: _, endpoint: __, ...otherProps } = ocapiCall;\n    return btoa(JSON.stringify(otherProps));\n  }\n\n  private hasJwtParameter(endpoint: string) {\n    return !!endpoint && endpoint.includes('jwt');\n  }\n\n  private getUserDetailsForConfig(\n    config: OcapiCallConfig<Record<string, unknown>, LoginDetails>\n  ): Observable<LoginDetails> {\n    const cacheKey = this.createHashKey(config);\n\n    if (!this.hasJwtParameter(config.endpoint) && this.cache.has(cacheKey)) {\n      const replaySubject$ = this.cache.get(cacheKey);\n      if (replaySubject$) {\n        return replaySubject$.asObservable();\n      }\n    }\n    return this.getCacheableUserDetailsObservable(cacheKey, config);\n  }\n\n  private getCacheableUserDetailsObservable(\n    cacheKey: string,\n    config: OcapiCallConfig<Record<string, unknown>, LoginDetails>\n  ) {\n    const freshReplaySubject$ = new ReplaySubject<LoginDetails>(1);\n    this.cache.set(cacheKey, freshReplaySubject$);\n    this.doResolve(config)\n      .pipe(\n        take(1),\n        finalize(() => {\n          freshReplaySubject$.complete();\n        })\n      )\n      .subscribe({\n        next: (loginDetails: LoginDetails | unknown) => {\n          if (loginDetails instanceof LoginDetails) {\n            freshReplaySubject$.next(loginDetails);\n          }\n        },\n        error: (error) => freshReplaySubject$.error(error),\n      });\n    return freshReplaySubject$.asObservable();\n  }\n\n  private handleError(ocapiCallConfig: { messageGroupName: string }) {\n    return (error: HttpErrorResponse) => {\n      if (error.status !== 401) {\n        this.messageService.addMessage(new ErrorMessage(ocapiCallConfig.messageGroupName, 'ocapi.' + error.status));\n        UserDetailsService.LOG.logDebug(\n          `An error occurred while trying to fetch ${ocapiCallConfig.messageGroupName}`,\n          error\n        );\n        return throwError(() => 'An error occured while trying to fetch ' + ocapiCallConfig.messageGroupName);\n      }\n      return throwError(() => error);\n    };\n  }\n\n  private doResolve<LoginDetails>(\n    ocapiCallConfig: OcapiCallConfig<unknown, LoginDetails>\n  ): Observable<LoginDetails | unknown> {\n    try {\n      const options = this.getHttpOptions(ocapiCallConfig);\n      return this.http\n        .get(this.configService.getConfig(ConfigConstants.OCAPI_URl) + ocapiCallConfig.getEndpoint(), options)\n        .pipe(\n          map((ocapiResponse: unknown) => {\n            return ocapiCallConfig.mapper?.toModel(ocapiResponse) || ocapiResponse;\n          }),\n          catchError(this.handleError(ocapiCallConfig))\n        );\n    } catch (e) {\n      this.errorReportService.sendErrorEventToAnalytics(ocapiCallConfig);\n      this.messageService.addMessage(\n        new ErrorMessage(\n          ocapiCallConfig.messageGroupName,\n          'Ocapi call failed:' + ocapiCallConfig.endpoint + 'with data ' + JSON.stringify(ocapiCallConfig.data)\n        )\n      );\n      return throwError(() => new Error('An error occured while trying to fetch ' + ocapiCallConfig.endpoint));\n    }\n  }\n\n  private getHttpOptions<LoginDetails>(ocapiConfig: OcapiCallConfig<unknown, LoginDetails>) {\n    const httpOptions: {\n      headers: HttpHeaders;\n      context?: HttpContext;\n      observe?: 'body';\n      params?: HttpParams | Record<string, string | number | boolean | readonly (string | number | boolean)[]>;\n      reportProgress?: boolean;\n      responseType: 'json' | undefined;\n      withCredentials?: boolean;\n    } = {\n      withCredentials: ocapiConfig.withCredentials,\n      headers: this.ocapiHelper.getHttpHeaders(ocapiConfig),\n      responseType: 'json',\n    };\n\n    return httpOptions;\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { AUTH_SERVICE } from '../tokens';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthenticationState {\n  private readonly authenticatedSubject = new ReplaySubject<boolean>(1);\n\n  private isStatusKnown = false;\n\n  constructor(private readonly injector: Injector) {}\n\n  setAuthenticated(authenticated: boolean): void {\n    this.authenticatedSubject.next(authenticated);\n    this.isStatusKnown = true;\n  }\n\n  getAuthenticated(): Observable<boolean> {\n    if (!this.isStatusKnown) {\n      const authenticationService = this.injector.get(AUTH_SERVICE);\n      return authenticationService.getAuthenticationStatus();\n    }\n    return this.authenticatedSubject.pipe(take(1));\n  }\n}\n","import { UserDetailsService } from '../../user-details.service';\nimport { inject } from '@angular/core';\nimport { UrlService } from '@telenet/ng-lib-page';\nimport { AuthenticationState } from '../state/authentication.state';\nimport { LoginDetailsConstants } from '../../../constants';\nimport { LoginStatusEnum } from '../../../enums';\nimport { CookieService } from 'ngx-cookie-service';\nimport { Observable, of } from 'rxjs';\nimport { AuthenticationParameters, AuthenticationService } from '../models';\nimport { catchError, shareReplay, take, tap } from 'rxjs/operators';\nimport { Log } from '@telenet/ng-lib-shared';\nimport { AUTH_PROVIDER } from '../tokens';\n\nexport abstract class AbstractAuthenticationService implements AuthenticationService {\n  protected readonly userDetailsService = inject(UserDetailsService);\n  protected readonly cookieService = inject(CookieService);\n  protected readonly urlService = inject(UrlService);\n  protected readonly authenticationState = inject(AuthenticationState);\n  protected readonly authenticationProvider = inject(AUTH_PROVIDER);\n\n  private authenticationStatus: Observable<boolean>;\n\n  protected constructor() {\n    this.getLog().logDebug(`Authenticate on load using service: ${this.constructor.name}`);\n  }\n\n  public authenticate(authenticationParameters: AuthenticationParameters) {\n    const authUrl = this.getAuthenticationUrl(authenticationParameters);\n    if (authUrl) {\n      this.urlService.openWindow(authUrl);\n    }\n  }\n\n  private getRootDomain(): string {\n    return location.hostname.split('.').reverse().splice(0, 2).reverse().join('.');\n  }\n\n  public setAuthenticatedStatus(isAuthenticated: boolean) {\n    if (!this.cookieService.check(LoginDetailsConstants.LOGIN_STATUS_COOKIENAME)) {\n      this.cookieService.set(\n        LoginDetailsConstants.LOGIN_STATUS_COOKIENAME,\n        isAuthenticated ? LoginStatusEnum.LOGGED_IN.toString() : LoginStatusEnum.NOT_LOGGED_IN.toString(),\n        {\n          path: '/',\n          sameSite: 'Lax',\n          domain: `.${this.getRootDomain()}`,\n        }\n      );\n    }\n\n    this.authenticationState.setAuthenticated(isAuthenticated);\n  }\n\n  public getAuthenticationUrl(authenticationParameters: AuthenticationParameters) {\n    const parameters = this.authenticationProvider.getParameters(authenticationParameters);\n    const url = this.authenticationProvider.getAuthenticationUrl();\n    if (!url) {\n      return null;\n    }\n    return `${url}?${parameters.toString()}`;\n  }\n\n  public getAuthenticationStatus(): Observable<boolean> {\n    if (!this.authenticationStatus) {\n      this.authenticationStatus = this.isAuthenticated().pipe(\n        take(1),\n        shareReplay({ bufferSize: 1, refCount: false }),\n        tap((isAuthenticated) => this.setAuthenticatedStatus(isAuthenticated)),\n        catchError((error) => {\n          this.getLog().logError(`Failed to retrieve authentication status`, error);\n          return of(false);\n        })\n      );\n    }\n    return this.authenticationStatus;\n  }\n\n  protected abstract isAuthenticated(): Observable<boolean>;\n\n  protected abstract getLog(): Log;\n}\n","import { AbstractAuthenticationService } from './authentication.service';\nimport { catchError, map } from 'rxjs/operators';\nimport { Observable, of } from 'rxjs';\nimport { Log, LogFactory } from '@telenet/ng-lib-shared';\nimport { AuthenticationService } from '../models';\n\nexport class JWTAuthenticationService extends AbstractAuthenticationService implements AuthenticationService {\n  private static readonly LOG: Log = LogFactory.createLogger(JWTAuthenticationService);\n\n  constructor() {\n    super();\n  }\n\n  protected override isAuthenticated(): Observable<boolean> {\n    return this.userDetailsService.getUserDetails().pipe(\n      map((loginDetails) => {\n        const isLoggedIn = loginDetails.isLoggedIn();\n        JWTAuthenticationService.LOG.logDebug(`Authentication: ${loginDetails}`);\n        return isLoggedIn;\n      }),\n      catchError((_e: unknown) => {\n        JWTAuthenticationService.LOG.logDebug(`Authentication: false}`);\n        return of(false);\n      })\n    );\n  }\n\n  protected getLog(): Log {\n    return JWTAuthenticationService.LOG;\n  }\n}\n","export interface AuthenticationParameters {\n  prompt?: AuthenticationPrompt;\n  state?: string;\n  nonce?: string;\n  styleHint?: string;\n  referrerUrl?: string;\n}\n\nexport enum AuthenticationPrompt {\n  NONE = 'none',\n  LOGIN = 'login',\n}\n","import { AbstractAuthenticationService } from './authentication.service';\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError, concatMap, map, switchMap } from 'rxjs/operators';\nimport { inject } from '@angular/core';\nimport { AuthenticationPrompt, AuthenticationService } from '../models';\nimport { Log, LogFactory } from '@telenet/ng-lib-shared';\nimport { OcapiAuthenticationProvider } from '../providers';\n\nexport class TransparentAuthenticationService extends AbstractAuthenticationService implements AuthenticationService {\n  private static readonly LOG: Log = LogFactory.createLogger(TransparentAuthenticationService);\n\n  protected readonly httpClient = inject(HttpClient);\n\n  constructor() {\n    super();\n  }\n\n  protected override isAuthenticated(): Observable<boolean> {\n    return this.userDetailsService.getUserDetails().pipe(\n      switchMap((loginDetails) => {\n        if (loginDetails.isLoggedIn()) {\n          return of(loginDetails.isLoggedIn());\n        }\n\n        return this.attemptAuthenticate(loginDetails.state, loginDetails.nonce).pipe(\n          switchMap(() => {\n            this.userDetailsService.reset();\n            return this.userDetailsService.getUserDetails().pipe(map((loginDetails) => loginDetails.isLoggedIn()));\n          }),\n          catchError((error) => {\n            this.getLog().logError('Failed to authenticate', error);\n            return of(false);\n          })\n        );\n      })\n    );\n  }\n\n  protected override getLog(): Log {\n    return TransparentAuthenticationService.LOG;\n  }\n\n  private attemptAuthenticate(state: string, nonce: string): Observable<unknown> {\n    let params = this.authenticationProvider.getParameters({ prompt: AuthenticationPrompt.NONE });\n\n    if (state && nonce) {\n      params = params.append('state', state).append('nonce', nonce);\n    }\n\n    this.getLog().logDebug(`Trying authenticate with provider ${this.authenticationProvider.getType()}`);\n\n    if (!this.authenticationProvider.getAuthenticationUrl()) {\n      return throwError(() => new Error('Authentication url is not defined, not trying to authenticate'));\n    }\n\n    return this.authenticationProvider.sendAuthCall(params).pipe(\n      catchError((error: HttpErrorResponse) => {\n        if (error?.error?.text?.includes('callback')) {\n          TransparentAuthenticationService.LOG.logDebug(\n            `Error during attempt to authenticate, with callback: ${error.error.text}`\n          );\n          return of({ data: error.error.text });\n        } else {\n          TransparentAuthenticationService.LOG.logDebug(\n            `Error during attempt to authenticate, rethrowing: ${error?.error?.text}`\n          );\n          return of({ data: error.error.text });\n        }\n      }),\n      concatMap((res: { data: string }) => {\n        TransparentAuthenticationService.LOG.logDebug(`Executing callback: ${res.data}`);\n        if (this.authenticationProvider.getType() === OcapiAuthenticationProvider.PROVIDER_TYPE) {\n          // For ocapi we don't want to manually get a callback, this already happened via jsonp\n          return of(undefined);\n        }\n        return this.httpClient.get(res.data, this.getCallBackOptions());\n      })\n    );\n  }\n\n  private getCallBackOptions(): Record<string, unknown> {\n    return {\n      withCredentials: true,\n      headers: new HttpHeaders({\n        'X-Requested-With': 'XMLHttpRequest',\n        Accept: 'text/plain',\n        'Content-Type': 'text/plain;charset=UTF-8',\n      }),\n      responseType: 'text',\n    };\n  }\n}\n","import { ConfigConstants, ConfigService } from '@telenet/ng-lib-config';\nimport { AuthenticationProvider, OcapiAuthenticationProvider, OpenidAuthenticationProvider } from '../providers';\nimport { UrlService } from '@telenet/ng-lib-page';\nimport { JWTAuthenticationService, TransparentAuthenticationService } from '../services';\nimport { AuthenticationService } from '../models';\n\nconst extractJwtParameter = (urlService: UrlService): string => {\n  return urlService.getHashParameter('jwt') || urlService.getRequestParamValue('jwt', '');\n};\n\nexport const authenticationProviderFactory = (\n  urlService: UrlService,\n  configService: ConfigService\n): AuthenticationProvider => {\n  const jwtParameter = extractJwtParameter(urlService);\n  if (\n    (configService.getConfig(ConfigConstants.AUTH_PROVIDER) === OcapiAuthenticationProvider.PROVIDER_TYPE ||\n      urlService.getRequestParamValue('loginFlow', '') === 'oktaLogin') &&\n    !jwtParameter\n  ) {\n    return new OcapiAuthenticationProvider();\n  }\n  return new OpenidAuthenticationProvider();\n};\n\nexport const authenticationServiceFactory = (urlService: UrlService): AuthenticationService => {\n  const jwtParameter = extractJwtParameter(urlService);\n\n  if (jwtParameter) {\n    return new JWTAuthenticationService();\n  } else {\n    return new TransparentAuthenticationService();\n  }\n};\n","import { inject, InjectionToken } from '@angular/core';\nimport { UrlService } from '@telenet/ng-lib-page';\nimport { authenticationServiceFactory } from '../factory';\nimport { AuthenticationService } from '../models';\n\nexport const AUTH_SERVICE = new InjectionToken<AuthenticationService>('AuthService', {\n  providedIn: 'root',\n  factory: () => {\n    const urlService = inject(UrlService);\n    return authenticationServiceFactory(urlService);\n  },\n});\n","import { inject, InjectionToken } from '@angular/core';\nimport { AuthenticationProvider } from '../providers';\nimport { authenticationProviderFactory } from '../factory';\nimport { UrlService } from '@telenet/ng-lib-page';\nimport { ConfigService } from '@telenet/ng-lib-config';\n\nexport const AUTH_PROVIDER = new InjectionToken<AuthenticationProvider>('AuthProvider', {\n  providedIn: 'root',\n  factory: () => {\n    const urlService = inject(UrlService);\n    const configService = inject(ConfigService);\n    return authenticationProviderFactory(urlService, configService);\n  },\n});\n","// @ts-nocheck\nimport { isEmpty, forEach } from 'lodash-es';\nimport { Observable, of, throwError } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { ConfigConstants, ConfigService } from '@telenet/ng-lib-config';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { ErrorMessage, MessageService } from '@telenet/ng-lib-message';\nimport { catchError, concatMap, map, mergeMap, take, tap } from 'rxjs/operators';\n\nimport { OmapiProductService, RawOmapiProductInterface } from '@telenet/ng-lib-omapi';\nimport { DataLayerService } from '@telenet/ng-lib-datalayer';\nimport { UrlService } from '@telenet/ng-lib-page';\nimport { OcapiHelper } from '../utils';\nimport { OcapiCallConfig } from '../models';\nimport { HttpTypesEnum } from '../enums';\nimport { OmapiQueryProductService, RawOmapiQueryProductInterface } from '@telenet/ng-lib-omapi-query';\nimport { SalesConstants } from '../constants';\nimport { AuthenticationState } from './authentication/state/authentication.state';\nimport { Log, LogFactory } from '@telenet/ng-lib-shared';\nimport { ErrorReportService } from './error-report.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OcapiService {\n  private static readonly LOG: Log = LogFactory.createLogger(OcapiService);\n\n  constructor(\n    private readonly http: HttpClient,\n    private readonly configService: ConfigService,\n    private readonly messageService: MessageService,\n    private readonly omapiProductService: OmapiProductService,\n    private readonly omapiQueryProductService: OmapiQueryProductService,\n    private readonly ocapiHelper: OcapiHelper,\n    private readonly dataLayerService: DataLayerService,\n    private readonly urlService: UrlService,\n    private readonly authenticationState: AuthenticationState,\n    private readonly errorReportService: ErrorReportService\n  ) {}\n\n  public doGet<T, G>(ocapiCallConfig: OcapiCallConfig<T, G>): Observable<G> {\n    return this.doResolve(HttpTypesEnum.GET, ocapiCallConfig);\n  }\n\n  public doPost<T, G>(ocapiCallConfig: OcapiCallConfig<T, G>): Observable<G> {\n    return this.doResolve(HttpTypesEnum.POST, ocapiCallConfig);\n  }\n\n  public doPut<T, G>(ocapiCallConfig: OcapiCallConfig<T, G>): Observable<G> {\n    return this.doResolve(HttpTypesEnum.PUT, ocapiCallConfig);\n  }\n\n  public doRestHead<T, G>(ocapiCallConfig: OcapiCallConfig<T, G>): Observable<G> {\n    return this.doResolve(HttpTypesEnum.HEAD, ocapiCallConfig);\n  }\n\n  public doPatch<T, G>(ocapiCallConfig: OcapiCallConfig<T, G>): Observable<G> {\n    return this.doResolve(HttpTypesEnum.PATCH, ocapiCallConfig);\n  }\n\n  public doDelete<T, G>(ocapiCallConfig: OcapiCallConfig<T, G>): Observable<G> {\n    return this.doResolve(HttpTypesEnum.DELETE, ocapiCallConfig);\n  }\n\n  private doResolve<T, G>(httpType: HttpTypesEnum, ocapiCallConfig: OcapiCallConfig<T, G>): Observable<G> {\n    ocapiCallConfig.httpType = httpType;\n    try {\n      return this.doRequest(ocapiCallConfig).pipe(\n        mergeMap((ocapiResponse: T) => {\n          return this.ocapiResponseEnrichedWithOmapiData$<T>(\n            ocapiCallConfig.messageGroupName,\n            ocapiResponse,\n            ocapiCallConfig.observeAsResponse,\n            ocapiCallConfig.silentlyHandleError\n          );\n        }),\n        mergeMap((ocapiResponse: T) => {\n          return this.ocapiResponseEnrichedWithOmapiQueryData$<T>(\n            ocapiCallConfig.messageGroupName,\n            ocapiResponse,\n            ocapiCallConfig.observeAsResponse\n          );\n        }),\n        map((ocapiResponseEnrichedWithOmapiData: T) => {\n          return (\n            ocapiCallConfig.mapper?.toModel(ocapiResponseEnrichedWithOmapiData) || ocapiResponseEnrichedWithOmapiData\n          );\n        })\n      );\n    } catch (e) {\n      this.errorReportService.sendErrorEventToAnalytics(ocapiCallConfig);\n      this.messageService.addMessage(\n        new ErrorMessage(\n          ocapiCallConfig.messageGroupName,\n          'Ocapi call failed:' + ocapiCallConfig.endpoint + 'with data ' + JSON.stringify(ocapiCallConfig.data)\n        )\n      );\n    }\n  }\n\n  private ocapiResponseEnrichedWithOmapiQueryData$<T>(\n    messageGroup: string,\n    ocapiResponse: T,\n    isResponseObservable: boolean | undefined\n  ): Observable<T> {\n    const queryUrls = this.recursiveUrls(ocapiResponse, SalesConstants.QUERY_URL);\n    let responseBody = ocapiResponse;\n    if (isResponseObservable) {\n      responseBody = ocapiResponse['body'];\n    }\n    if (!isEmpty(queryUrls)) {\n      return this.omapiQueryProductService.rawQueryProductsFromEndpoints$(messageGroup, queryUrls).pipe(\n        tap((omapiQueryResponses: RawOmapiQueryProductInterface[]) => {\n          forEach(omapiQueryResponses, (omapiQueryResponse: RawOmapiQueryProductInterface) =>\n            this.recursiveAddDataToOcapiResponse(responseBody, omapiQueryResponse, SalesConstants.QUERY_URL)\n          );\n        }),\n        map(() => {\n          return ocapiResponse;\n        })\n      );\n    } else {\n      return of(ocapiResponse);\n    }\n  }\n\n  private ocapiResponseEnrichedWithOmapiData$<T>(\n    messageGroup: string,\n    ocapiResponse: T,\n    isResponseObservable: boolean | undefined,\n    silentlyHandleError: boolean\n  ): Observable<T> {\n    const specUrls = this.recursiveUrls(ocapiResponse, SalesConstants.SPEC_URL);\n    let responseBody = ocapiResponse;\n    if (isResponseObservable) {\n      responseBody = ocapiResponse['body'];\n    }\n    if (!isEmpty(specUrls)) {\n      return this.omapiProductService.rawProductsFromEndpoints$(messageGroup, specUrls, silentlyHandleError).pipe(\n        tap((omapiResponses: RawOmapiProductInterface[]) => {\n          forEach(omapiResponses, (omapiResponse: RawOmapiProductInterface) =>\n            this.recursiveAddDataToOcapiResponse(responseBody, omapiResponse, SalesConstants.SPEC_URL)\n          );\n        }),\n        map(() => {\n          return ocapiResponse;\n        })\n      );\n    } else {\n      return of(ocapiResponse);\n    }\n  }\n\n  private doRequest<T, G>(ocapiCall: OcapiCallConfig<T, G>): Observable<unknown> {\n    const options = this.ocapiHelper.getHttpOptions(ocapiCall);\n\n    switch (ocapiCall.httpType) {\n      case HttpTypesEnum.GET: {\n        const request$ = this.http\n          .get(this.configService.getConfig(ConfigConstants.OCAPI_URl) + ocapiCall.getEndpoint(), options)\n          .pipe(catchError((error: unknown) => this.handleError(error as HttpErrorResponse, ocapiCall)));\n\n        if (ocapiCall.authNeeded) {\n          OcapiService.LOG.logDebug(`Auth is needed for request: ${ocapiCall.getEndpoint()}`);\n          return this.authenticationState.getAuthenticated().pipe(\n            concatMap(() => {\n              return request$;\n            })\n          );\n        }\n        OcapiService.LOG.logDebug(`Auth is not needed for request: ${ocapiCall.getEndpoint()}`);\n        return request$;\n      }\n      case HttpTypesEnum.POST:\n        return this.http\n          .post(this.configService.getConfig(ConfigConstants.OCAPI_URl) + ocapiCall.endpoint, ocapiCall.data, options)\n          .pipe(\n            take(1),\n            catchError((error: unknown) => this.handleError(error as HttpErrorResponse, ocapiCall))\n          );\n\n      case HttpTypesEnum.PUT:\n        return this.http\n          .put(this.configService.getConfig(ConfigConstants.OCAPI_URl) + ocapiCall.endpoint, ocapiCall.data, options)\n          .pipe(\n            take(1),\n            catchError((error: unknown) => this.handleError(error as HttpErrorResponse, ocapiCall))\n          );\n\n      case HttpTypesEnum.PATCH:\n        return this.http\n          .patch(this.configService.getConfig(ConfigConstants.OCAPI_URl) + ocapiCall.endpoint, ocapiCall.data, options)\n          .pipe(\n            take(1),\n            catchError((error: unknown) => this.handleError(error as HttpErrorResponse, ocapiCall))\n          );\n\n      case HttpTypesEnum.HEAD:\n        return this.http\n          .head(this.configService.getConfig(ConfigConstants.OCAPI_URl) + ocapiCall.endpoint, options)\n          .pipe(\n            take(1),\n            catchError((error: unknown) => this.handleError(error as HttpErrorResponse, ocapiCall))\n          );\n\n      case HttpTypesEnum.DELETE:\n        return this.http\n          .delete(this.configService.getConfig(ConfigConstants.OCAPI_URl) + ocapiCall.endpoint, options)\n          .pipe(\n            take(1),\n            catchError((error: unknown) => {\n              return this.handleError(error as HttpErrorResponse, ocapiCall);\n            })\n          );\n    }\n  }\n\n  private recursiveAddDataToOcapiResponse(data: unknown, omapiorOmapiQueryResponse: unknown, type: string) {\n    if (data) {\n      Object.entries(data).forEach(([key, value]) => {\n        if (key === SalesConstants.SPEC_URL && type === SalesConstants.SPEC_URL) {\n          this.isSpecUrl(value, data, omapiorOmapiQueryResponse);\n        } else if (key === SalesConstants.QUERY_URL && type === SalesConstants.QUERY_URL) {\n          this.isQueryUrl(value, data, omapiorOmapiQueryResponse);\n        }\n        if (typeof value === 'object') {\n          this.recursiveAddDataToOcapiResponse(value, omapiorOmapiQueryResponse, type);\n        }\n      });\n    }\n    return data;\n  }\n\n  private isQueryUrl(value, data, omapiorOmapiQueryResponse) {\n    const itemCodeFromQueryUrl: string = this.urlService.getParamsValueFromUrl(value.toString(), 'itemcodes');\n    const itemCodeFromOmapiQuery = this.getProductIdFromOmapiResponse(omapiorOmapiQueryResponse, itemCodeFromQueryUrl);\n    if (\n      (itemCodeFromQueryUrl && itemCodeFromQueryUrl.toString()) ===\n        (itemCodeFromOmapiQuery && itemCodeFromOmapiQuery.toString()) ||\n      isEmpty(omapiorOmapiQueryResponse.products)\n    ) {\n      data['rawOmapiQuery'] = omapiorOmapiQueryResponse;\n    }\n  }\n\n  private isSpecUrl(value, data, omapiorOmapiQueryResponse) {\n    const epcFromSpecUrl = value.toString() && value.toString().split('/').pop();\n    const epcFromOmapi = omapiorOmapiQueryResponse.product && omapiorOmapiQueryResponse.product.productid;\n    if ((epcFromSpecUrl && epcFromSpecUrl.toString()) === (epcFromOmapi && epcFromOmapi.toString())) {\n      data['rawOmapi'] = omapiorOmapiQueryResponse;\n    }\n  }\n\n  private getProductIdFromOmapiResponse(omapiQueryResponse: unknown, itemCode: string): string {\n    if (!isEmpty(omapiQueryResponse.products) && !isEmpty(omapiQueryResponse.products[0].variants)) {\n      const filteredVariant = omapiQueryResponse.products[0].variants.find((varaint) => {\n        return varaint.productId === itemCode;\n      });\n      return !isEmpty(filteredVariant) ? filteredVariant.productId : '';\n    } else {\n      return '';\n    }\n  }\n\n  private recursiveUrls(data, type: string, urls = []) {\n    if (data) {\n      Object.entries(data).forEach(([key, value]) => {\n        if (key === type && value !== null) {\n          urls.push(value.toString());\n        }\n        if (value !== null && typeof value === 'object') {\n          this.recursiveUrls(value, type, urls);\n        }\n      });\n    }\n    return urls;\n  }\n\n  private handleError<T, G>(error: HttpErrorResponse, ocapiCall: OcapiCallConfig<T, G>) {\n    if (ocapiCall.errorHandler !== undefined) {\n      this.sendErrorEventToAnalyticsForCustomError(error, ocapiCall);\n      return ocapiCall.errorHandler(error, ocapiCall);\n    }\n\n    let errorCode = 'ocapi.'.concat(error.status.toString());\n    switch (error.status) {\n      case 401:\n        break;\n      case 400:\n      case 500:\n        this.messageService.addMessage(new ErrorMessage(ocapiCall.messageGroupName, errorCode));\n        this.errorReportService.sendErrorEventToAnalytics(ocapiCall, error.error, errorCode);\n        break;\n      default:\n        errorCode = this.getDetailedErrorCode(error, errorCode);\n        if (errorCode !== 'ocapi.422-OCAPI-ERR-ODSO156') {\n          this.messageService.addMessage(new ErrorMessage(ocapiCall.messageGroupName, errorCode));\n        }\n        this.errorReportService.sendErrorEventToAnalytics(ocapiCall, error.error, errorCode);\n        break;\n    }\n    const errorDetails = 'An error occured while trying to fetch ' + ocapiCall.messageGroupName + ' | ' + errorCode;\n    const throwErrorDetails =\n      errorCode && errorCode.includes('VM000061') ? errorDetails + ' | ' + error.error.cause : errorDetails;\n    return throwError(() => throwErrorDetails);\n  }\n\n  private sendErrorEventToAnalyticsForCustomError<T, G>(error: HttpErrorResponse, ocapiCall: OcapiCallConfig<T, G>) {\n    if (error && error.status !== 401) {\n      let errorCode = 'ocapi.'.concat(error.status.toString());\n      errorCode = this.getDetailedErrorCode(error, errorCode);\n      this.errorReportService.sendErrorEventToAnalytics(ocapiCall, error.error, errorCode);\n    }\n  }\n\n  private getDetailedErrorCode(error: HttpErrorResponse, errorCode: string) {\n    if (error.error && error.error.code) {\n      return errorCode.concat('-').concat(error.error.code);\n    }\n    return errorCode;\n  }\n}\n","import { Observable, of, throwError } from 'rxjs';\nimport { Inject, Injectable, NgZone } from '@angular/core';\nimport { map, tap } from 'rxjs/operators';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { UrlService } from '@telenet/ng-lib-page';\nimport { ErrorMessage, MessageService } from '@telenet/ng-lib-message';\nimport { LoginCustomerNameMapper, LogoutMapper } from '../mappers';\nimport { OcapiService } from './ocapi.service';\nimport { LoginDetails, LogoutDetails, OcapiCallConfig } from '../models';\nimport { UserDetailsService } from './user-details.service';\nimport { AUTH_SERVICE, AuthenticationPrompt, AuthenticationService } from './authentication';\n\ntype Window = Record<string, object>;\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LoginService {\n  constructor(\n    protected _ngZone: NgZone,\n    @Inject('Window') protected window: Window,\n    @Inject(AUTH_SERVICE) private readonly authenticationService: AuthenticationService,\n    private readonly ocapiService: OcapiService,\n    private readonly urlService: UrlService,\n    private readonly messageService: MessageService,\n    private readonly loginCustomerNameMapper: LoginCustomerNameMapper,\n    private readonly logoutMapper: LogoutMapper,\n    private readonly userDetailsService: UserDetailsService\n  ) {}\n\n  /**\n   * @deprecated This function is deprecated, please use getUserDetails from UserDetailsService instead.\n   */\n  getLoginDetails(withCredentials = true, referrerUrl?: string, _isRoleRequired = true): Observable<LoginDetails> {\n    return this.userDetailsService.getUserDetails({\n      withCredentials,\n      referrerUrl,\n    });\n  }\n\n  login(referrerUrl?: string, styleHint?: string): void {\n    this.getStateAndNonce(referrerUrl).subscribe((loginDetails) => {\n      const authParameters = {\n        state: loginDetails.state,\n        nonce: loginDetails.nonce,\n        referrerUrl,\n        styleHint,\n      };\n      this.authenticationService.authenticate(authParameters);\n    });\n  }\n\n  loginWithPrompt(referrerUrl?: string, styleHint?: string): void {\n    this.getStateAndNonce(referrerUrl).subscribe((loginDetails) => {\n      const authParameters = {\n        state: loginDetails.state,\n        nonce: loginDetails.nonce,\n        referrerUrl,\n        styleHint,\n        prompt: AuthenticationPrompt.LOGIN,\n      };\n      this.authenticationService.authenticate(authParameters);\n    });\n  }\n\n  logout(messageGroupName: string, logoutPath: string): Observable<LogoutDetails> {\n    const endpoint = '/logout?targetUrl=' + encodeURIComponent(this.getLogoutRedirectUrl(logoutPath));\n\n    const ocapiConfig = new OcapiCallConfig(messageGroupName, endpoint, this.logoutMapper, {});\n    ocapiConfig.errorHandler = this.handleErrorResponse.bind(this);\n\n    return this.ocapiService.doGet(ocapiConfig).pipe(\n      map((response) => {\n        this.authenticationService.setAuthenticatedStatus(false);\n        if (response && response.logout_redirect_uri) {\n          this.urlService.redirectTo(response.logout_redirect_uri);\n          return {};\n        }\n        return response;\n      })\n    );\n  }\n\n  getLogoutRedirectUrl(logoutPath: string) {\n    let logoutRedirectUrl = this.urlService.getCurrentUrl();\n    if (logoutPath) {\n      logoutRedirectUrl = logoutPath.startsWith('https://')\n        ? logoutPath\n        : location.protocol + '//' + location.host + logoutPath;\n    }\n    return this.urlService.removeParametersFromUrl(logoutRedirectUrl, 'jwt');\n  }\n\n  private getStateAndNonce(refererUrl?: string): Observable<LoginDetails> {\n    return this.userDetailsService.getUserDetails({\n      withCredentials: false,\n      referrerUrl: refererUrl,\n    });\n  }\n\n  loginWithCustomerNumber(\n    messageGroupName: string,\n    _customerNumber: string,\n    key: string,\n    value: string,\n    mobileNumber: string\n  ) {\n    const endpoint = '/oauth/login?' + key + '=' + value + '&mobilenumber=' + mobileNumber;\n    const ocapiConfig = new OcapiCallConfig(messageGroupName, endpoint, this.loginCustomerNameMapper, {});\n    ocapiConfig.errorHandler = this.handleErrorResponse.bind(this);\n\n    return this.ocapiService.doPost(ocapiConfig).pipe(\n      tap(() => {\n        this.authenticationService.setAuthenticatedStatus(true);\n        this.userDetailsService.reset();\n      }),\n      map((response) => response)\n    );\n  }\n\n  private handleErrorResponse<T, G>(error: HttpErrorResponse, ocapiCall: OcapiCallConfig<T, G>) {\n    if (error.status === 401) {\n      return of({ data: error.error, status: error.status });\n    } else if (error.status === 400 && error.error && error.error.code) {\n      const errorCode = error.status.toString().concat('-').concat(error.error.code);\n      this.messageService.addMessage(new ErrorMessage(ocapiCall.messageGroupName, 'ocapi.' + errorCode));\n    } else {\n      this.messageService.addMessage(new ErrorMessage(ocapiCall.messageGroupName, 'ocapi.' + error.status));\n    }\n    return throwError(() => 'An error occured while trying to fetch ' + ocapiCall.messageGroupName);\n  }\n\n  public getAuthenticationStatus(): Observable<boolean> {\n    return this.authenticationService.getAuthenticationStatus();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport SockJS from 'sockjs-client';\nimport { ConfigConstants, ConfigService } from '@telenet/ng-lib-config';\nimport { Observable } from 'rxjs';\nimport { RxStomp, RxStompConfig } from '@stomp/rx-stomp';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OcapiSocketService {\n  baseUrl: string;\n  isAnonymous = false;\n  TOPIC_PREFIX: string;\n  ANONYMOUS_TOPIC_PREFIX: string;\n  stompClient: RxStomp;\n  private isInitialised: boolean;\n\n  constructor(readonly configService: ConfigService) {\n    this.TOPIC_PREFIX = '/user/topic/';\n    this.ANONYMOUS_TOPIC_PREFIX = '/topic/action/';\n    this.baseUrl = configService.getConfig(ConfigConstants.OCAPI_URl) + '/notify/';\n    this.isInitialised = false;\n  }\n\n  init(): void {\n    this.initializeWebSocketConnection();\n    this.isInitialised = true;\n  }\n\n  setAnonymous(anonymous: boolean) {\n    this.isAnonymous = anonymous;\n  }\n\n  getTopicPrefix(): string {\n    return this.isAnonymous ? this.ANONYMOUS_TOPIC_PREFIX : this.TOPIC_PREFIX;\n  }\n\n  initializeWebSocketConnection(): void {\n    this.stompClient = new RxStomp();\n\n    const stompConfig: RxStompConfig = {\n      webSocketFactory: () => {\n        return new SockJS(this.baseUrl);\n      },\n    };\n\n    this.stompClient.configure(stompConfig);\n    this.stompClient.activate();\n  }\n\n  watchStompClientOnTopic(topic: string): Observable<unknown> {\n    if (!this.isInitialised) {\n      this.init();\n    }\n\n    return this.stompClient.watch(this.getTopicPrefix() + topic);\n  }\n}\n","import { shareReplay } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CacheService {\n  private cache: Record<string, Observable<unknown>> = {};\n\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  add(key: string, response$: Observable<unknown | Object>): void {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    this.cache[key] = response$.pipe(shareReplay({ bufferSize: 1 }));\n  }\n\n  get(key: string): Observable<unknown> {\n    return this.cache[key];\n  }\n\n  remove(key: string): void {\n    delete this.cache[key];\n  }\n}\n","<ng-container *ngIf=\"show\">\n  <ng-container *ngIf=\"isLoggedIn()\">\n    <ng-content></ng-content>\n  </ng-container>\n\n  <div *ngIf=\"!isLoggedIn()\">\n    <div *ngIf=\"mode === 'overlay'; else noOverlay\">\n      <ng-container [ngTemplateOutlet]=\"overlay\"> </ng-container>\n    </div>\n  </div>\n</ng-container>\n<ng-template #noOverlay>\n  <ng-container [ngSwitch]=\"getLoginStatus()\">\n    <ng-container *ngSwitchCase=\"loginEnum.NOT_LOGGED_IN\">\n      <div class=\"notification notification--warning\">\n        <span class=\"icon icon-error-shape warn\">{{ 'ng.general-login.lbl.not-logged-in' | translate }}</span>\n        <a (click)=\"login()\" class=\"button button--primary cta-secondary\" [attr.data-cy]=\"'login-button-link'\">{{\n          'ng.general-login.btn.not-logged-in' | translate\n        }}</a>\n      </div>\n    </ng-container>\n\n    <div *ngSwitchCase=\"loginEnum.NARROWED\" class=\"notification notification--warning\">\n      <span class=\"icon icon-error-shape warn\">{{ 'ng.general.login.lbl.narrowed' | translate }}</span>\n      <div (click)=\"login(true)\" class=\"button button--primary cta-secondary\">\n        {{ 'ng.general.login.btn.narrowed' | translate }}\n      </div>\n    </div>\n\n    <div *ngSwitchCase=\"loginEnum.INSUFFICIENT_PERMISSIONS\" class=\"notification notification--warning\">\n      <span class=\"icon icon-alert-shape warn\">{{ 'ng.general-login.insufficient-rights-link.text' | translate }}</span>\n      <div (click)=\"login(true)\" class=\"button button--primary cta-secondary button--width-auto\">\n        {{ 'ng.general-login.insufficient-rights-link' | translate }}\n      </div>\n    </div>\n  </ng-container>\n</ng-template>\n\n<ng-template #overlay>\n  <ng-container [ngTemplateOutlet]=\"headerTitleAndSubtitle\"> </ng-container>\n  <div class=\"end-journey__section__content__action\">\n    <div\n      class=\"login-sales-journey row align-items--stretch justify-content--center col-lg-6 col-md-10 col-12 m--auto mb--g\">\n      <ng-container [ngSwitch]=\"getLoginStatus()\">\n        <ng-container *ngSwitchCase=\"loginEnum.NOT_LOGGED_IN\">\n          <ng-container [ngTemplateOutlet]=\"loginOrRegister\"> </ng-container>\n        </ng-container>\n\n        <ng-container *ngSwitchCase=\"loginEnum.NARROWED\">\n          <ng-container [ngTemplateOutlet]=\"loginOrRegister\"> </ng-container>\n        </ng-container>\n\n        <ng-container *ngSwitchCase=\"loginEnum.INSUFFICIENT_PERMISSIONS\">\n          <ng-container [ngTemplateOutlet]=\"onlyLogin\"> </ng-container>\n        </ng-container>\n      </ng-container>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #headerTitleAndSubtitle>\n  <div class=\"login-sales-journey-title px--xm px--n--md col-lg-5 col-md-7 col-12 m--auto\">\n    <div\n      *ngIf=\"getLoginStatus() === loginEnum.INSUFFICIENT_PERMISSIONS; else otherThanInsufficientRights\"\n      class=\"display--flex flex-direction--column\">\n      <h3>\n        {{ 'general.lbl.overlay-login-title-insufficient-rights' | translate }}\n      </h3>\n      <p class=\"font--body-regular pb--s\">\n        {{ 'general.lbl.overlay-login-sub-title-insufficient-rights' | translate }}\n      </p>\n    </div>\n    <ng-template #otherThanInsufficientRights>\n      <div *ngIf=\"getLoginStatus() !== loginEnum.INSUFFICIENT_PERMISSIONS\">\n        <div *ngIf=\"source === 'EMAIL'\" class=\"display--flex flex-direction--column\">\n          <h3>\n            {{ 'general.lbl.overlay-login-title-abandon-cart' | translate }}\n          </h3>\n          <p class=\"font--body-regular pb--s\">\n            {{ 'general.lbl.overlay-login-sub-title-abandon-cart' | translate }}\n          </p>\n        </div>\n        <div *ngIf=\"source !== 'EMAIL'\" class=\"display--flex flex-direction--column\">\n          <h3>\n            {{ 'general.lbl.overlay-login-title' | translate }}\n          </h3>\n          <p class=\"font--body-regular pb--s\">\n            {{ 'general.lbl.overlay-login-sub-title' | translate }}\n          </p>\n        </div>\n      </div>\n    </ng-template>\n  </div>\n</ng-template>\n<ng-template #onlyRegister>\n  <div\n    class=\"display--flex flex-direction--column justify-content--between background-white col-lg-5 col-md-4 col-12 px--xl pb--xl pt--xxs\">\n    <div class=\"text-align--center\">\n      <h5 class=\"heading--5\">\n        {{ 'general.lbl.not-a-customer' | translate: { brand: brand } }}\n      </h5>\n    </div>\n    <div *ngIf=\"brand !== 'BASE'\">\n      <div class=\"display--block\" *ngIf=\"styleHint === 'sales'\">\n        <div>\n          <div class=\"display--block\">\n            <div\n              ng-class=\"showItsMeRegistrationOption ? 'mb--xxl' : 'mt--xxxl mb--xs'\"\n              class=\"pb--xs text-align--center\">\n              <span class=\"font--caption\" [innerHtml]=\"'general.lbl.need-more-info' | translate\"> </span>\n            </div>\n            <div *ngIf=\"showItsMeRegistrationOption\" class=\"width--full\">\n              <div class=\"font--caption text-align--center pb--xs\">\n                {{ 'general.lbl.register-with-itsme-help' | translate }}\n              </div>\n              <button\n                class=\"button button--secondary button--fullwidth register-with-itsme\"\n                (click)=\"register('itsme')\">\n                <span>\n                  {{ 'general.lbl.register-with-itsme' | translate }}\n                </span>\n              </button>\n              <div class=\"divider--xxs__mid-grey my--xl\"></div>\n            </div>\n            <button class=\"button button--secondary button--fullwidth\" (click)=\"register('internal')\">\n              {{ 'general.lbl.register' | translate }}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div *ngIf=\"brand === 'BASE'\">\n      <div class=\"display--block\" *ngIf=\"styleHint === 'sales'\">\n        <div>\n          <div class=\"display--block mt--xs\">\n            <div *ngIf=\"showItsMeRegistrationOption\" class=\"width--full mb--xs\">\n              <div class=\"font--caption pb--xs text-align--center\">\n                {{ 'general.lbl.register-with-itsme-help' | translate }}\n              </div>\n              <button\n                class=\"button button--secondary button--fullwidth button__icon--position-left register-with-itsme pt--m pb--m\"\n                (click)=\"register('itsme')\">\n                <span class=\"ml--s--md\">\n                  {{ 'general.lbl.register-with-itsme' | translate }}\n                </span>\n              </button>\n              <div class=\"divider--xxs__mid-grey my--xl\"></div>\n            </div>\n            <button\n              class=\"button button--secondary button--fullwidth button__icon--position-left pt-10 pb-10\"\n              (click)=\"register('internal')\">\n              {{ 'general.lbl.register' | translate }}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</ng-template>\n<ng-template #onlyLogin>\n  <div\n    class=\"display--flex flex-direction--column justify-content--between background-white col-lg-5 col-md-4 col-12 px--xl pb--xl pt--xxs mr--xm--md mr--n mb--n--md mb--m\">\n    <div class=\"text-align--center\">\n      <h5 class=\"heading--5\" *ngIf=\"getLoginStatus() === loginEnum.INSUFFICIENT_PERMISSIONS\">\n        {{ 'general.lbl.login-again-insufficient-rights' | translate }}\n      </h5>\n      <div *ngIf=\"getLoginStatus() !== loginEnum.INSUFFICIENT_PERMISSIONS\">\n        <h5 class=\"heading--5\" *ngIf=\"source === 'EMAIL'\">\n          {{ 'general.lbl.login-again-abandon-cart' | translate }}\n        </h5>\n        <h5 class=\"heading--5\" *ngIf=\"source !== 'EMAIL'\">\n          {{ 'general.lbl.already-a-customer' | translate: { brand: brand } }}\n        </h5>\n      </div>\n    </div>\n    <div class=\"m--auto\">\n      <img\n        class=\"hide-until-md\"\n        src=\"/etc/designs/aff-telenetgroup/atomic/clientlibs/clientlib-atomic/graphics/base-login-desktop.svg\"\n        alt=\"login\"\n        *ngIf=\"brand === 'BASE'\" />\n      <img\n        class=\"hide-from-md\"\n        src=\"/etc/designs/aff-telenetgroup/atomic/clientlibs/clientlib-atomic/graphics/base-login-mobile.svg\"\n        alt=\"login\"\n        *ngIf=\"brand === 'BASE'\" />\n      <img\n        class=\"hide-until-md\"\n        src=\"/etc/designs/aff-telenetgroup/atomic/clientlibs/clientlib-atomic/graphics/telenet-login-desktop.svg\"\n        alt=\"login\"\n        *ngIf=\"brand !== 'BASE'\" />\n      <img\n        class=\"hide-from-md\"\n        src=\"/etc/designs/aff-telenetgroup/atomic/clientlibs/clientlib-atomic/graphics/telenet-login-mobile.svg\"\n        alt=\"login\"\n        *ngIf=\"brand !== 'BASE'\" />\n    </div>\n    <button\n      class=\"button button--primary button--fullwidth\"\n      *ngIf=\"getLoginStatus() === loginEnum.INSUFFICIENT_PERMISSIONS\"\n      (click)=\"login(true)\">\n      {{ 'general.login-link' | translate }}\n    </button>\n    <button\n      class=\"button button--primary button--fullwidth\"\n      *ngIf=\"getLoginStatus() !== loginEnum.INSUFFICIENT_PERMISSIONS\"\n      (click)=\"login()\">\n      {{ 'general.login-link' | translate }}\n    </button>\n  </div>\n</ng-template>\n<ng-template #loginOrRegister>\n  <ng-container [ngTemplateOutlet]=\"onlyLogin\"> </ng-container>\n  <ng-container *ngIf=\"showRegistrationOptions()\" [ngTemplateOutlet]=\"onlyRegister\"> </ng-container>\n</ng-template>\n","import { Component, EventEmitter, Inject, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { LoginDetails } from '../models';\nimport { LoginStatusEnum } from '../enums';\nimport { LoginService, UserDetailsService } from '../services';\nimport { ConfigConstants, ConfigService } from '@telenet/ng-lib-config';\nimport {\n  CustomerBrandEnum,\n  LanguageService,\n  PathCategorisationService,\n  QueryParamEnum,\n  UrlService,\n} from '@telenet/ng-lib-page';\nimport { each, isEmpty, some } from 'lodash-es';\nimport { LoginDetailsConstants } from '../constants';\nimport {\n  DataLayerAttributes,\n  DataLayerService,\n  EventNameEnum,\n  EventStatusEnum,\n  EventTypeEnum,\n} from '@telenet/ng-lib-datalayer';\nimport { CookieService } from 'ngx-cookie-service';\nimport { switchMap, takeLast, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\n@Component({\n  selector: 'tg-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit, OnDestroy {\n  @Input() scopes: string[] = [];\n  @Input() messageGroupName: string;\n  @Input() autoRedirect = false;\n  @Input() styleHint: string = LoginDetailsConstants.STYLE_HINT;\n  @Input() mode: string;\n  @Input() registrationUrl: string;\n  @Input() showItsMeRegistrationOption: boolean;\n  @Input() hasInstallableProductType: boolean;\n  @Input() renderOnlyForOriginCustomer = false;\n  @Output() componentCanRender = new EventEmitter<LoginDetails>();\n  loginDetails: LoginDetails;\n  show = false;\n  loginEnum = LoginStatusEnum;\n  brand: string;\n  source: string;\n  action: string;\n\n  private readonly destroy$ = new Subject<void>();\n\n  constructor(\n    @Inject('Window') readonly window: Window,\n    private readonly loginService: LoginService,\n    private readonly userDetailsService: UserDetailsService,\n    private readonly configService: ConfigService,\n    private readonly urlService: UrlService,\n    private readonly pathCategorisationService: PathCategorisationService,\n    private readonly languageService: LanguageService,\n    private readonly dataLayerService: DataLayerService,\n    private readonly cookieService: CookieService\n  ) {}\n\n  ngOnInit(): void {\n    this.action = this.urlService.getRequestParamValue(QueryParamEnum.ACTION, '');\n    this.registerBasedOnAction();\n    this.brand = this.pathCategorisationService.getCustomerBrand();\n    this.initSource();\n    this.loginService\n      .getAuthenticationStatus()\n      .pipe(\n        switchMap((_) => this.userDetailsService.getUserDetails().pipe(takeLast(1))),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((loginDetails) => {\n        this.loginDetails = loginDetails;\n\n        if (this.isLoggedIn() && this.canRenderComponentForLoggedInUser()) {\n          this.show = true;\n          this.componentCanRender.emit(loginDetails);\n        } else if (this.autoRedirect && this.configService.getConfig(ConfigConstants.IS_AUTHOR_MODE) !== 'true') {\n          this.forceRedirect();\n        } else {\n          this.show = true;\n          if (this.mode === 'overlay') {\n            this.sendPageStepData();\n          }\n        }\n      });\n  }\n\n  isLoggedIn(): boolean {\n    return this.getLoginStatus() === LoginStatusEnum.LOGGED_IN;\n  }\n\n  private canRenderComponentForLoggedInUser() {\n    if (this.renderOnlyForOriginCustomer) {\n      return this.loginDetails.isBssSystemNetcracker();\n    }\n    return true;\n  }\n  getLoginStatus(): LoginStatusEnum {\n    if (!this.loginDetails?.isLoggedIn()) {\n      this.window['telenetgroupLoader']?.hideMask();\n      return LoginStatusEnum.NOT_LOGGED_IN;\n    }\n\n    if (this.isNarrowed()) {\n      return LoginStatusEnum.NARROWED;\n    }\n    if (\n      !this.hasRequiredScopes() ||\n      (this.brand === CustomerBrandEnum.BRAND_BASE && this.hasInstallableProductType && this.loginDetails?.isChild())\n    ) {\n      this.window['telenetgroupLoader']?.hideMask();\n      return LoginStatusEnum.INSUFFICIENT_PERMISSIONS;\n    }\n\n    return LoginStatusEnum.LOGGED_IN;\n  }\n\n  login(force: boolean = false): void {\n    this.pushEventDataToAnalytics(EventNameEnum.EVENT_NAME_LOGIN);\n    const referrerUrl = this.urlService.getCurrentUrl();\n    if (!force) {\n      this.loginService.login(referrerUrl, this.styleHint);\n      return;\n    }\n    this.loginService.loginWithPrompt(referrerUrl, this.styleHint);\n  }\n\n  isNarrowed(): boolean {\n    return this.loginDetails.isNarrowed();\n  }\n\n  showRegistrationOptions(): boolean {\n    return (\n      this.source !== LoginDetailsConstants.SOURCE_EMAIL &&\n      this.getLoginStatus() !== LoginStatusEnum.INSUFFICIENT_PERMISSIONS &&\n      !isEmpty(this.styleHint)\n    );\n  }\n\n  register(idp: string): void {\n    const eventName = EventNameEnum.EVENT_NAME_REGISTER + '-' + idp;\n    this.pushEventDataToAnalytics(eventName);\n    this.redirectToRegistrationURL(idp);\n  }\n\n  private initSource(): void {\n    this.source = this.urlService.getRequestParamValue(QueryParamEnum.SOURCE, '');\n    this.source = this.source && this.source.toUpperCase();\n  }\n\n  private hasRequiredScopes(): boolean {\n    if (this.scopes && !this.scopes.length) {\n      return true;\n    }\n    return some(this.scopes, (scope: string) => {\n      return this.loginDetails.hasScope(scope);\n    });\n  }\n\n  private forceRedirect() {\n    const loginStatus = this.getLoginStatus();\n    const force = loginStatus !== LoginStatusEnum.NOT_LOGGED_IN;\n    this.login(force);\n  }\n\n  private redirectToRegistrationURL(idp: string): void {\n    this.cleanCookies();\n\n    if (idp === 'internal') {\n      this.redirectToInternalRegistrationURL(this.styleHint);\n    } else {\n      this.redirectToItsMePortal(this.styleHint);\n    }\n  }\n\n  private cleanCookies(): void {\n    const sessionKeys = this.getCookie(LoginDetailsConstants.COOKIE_KEYS);\n    if (sessionKeys) {\n      const keys = sessionKeys.split(',');\n      for (let i = 0; i <= keys.length; i++) {\n        this.cookieService.delete(keys[i], '/');\n      }\n      this.cookieService.delete(LoginDetailsConstants.COOKIE_KEYS, '/');\n    }\n  }\n\n  private initCookies(channel: string, idp: string): void {\n    const requestParameters = this.urlService.getRequestParameters();\n    each(requestParameters, (item: string, key: string) => {\n      this.addCookie(key, item);\n    });\n\n    this.addCookie(LoginDetailsConstants.CUSTOMER_REGISTRATION_URL, this.getCustomerRegistrationURL());\n    this.addCookie(LoginDetailsConstants.PARAM_CHANNEL, channel);\n    this.addCookie(LoginDetailsConstants.PARAM_IDP, idp);\n    this.addCookie(LoginDetailsConstants.PARAM_REFERRER_URL, this.urlService.getCurrentUrl());\n  }\n\n  private addCookie(key: string, value: string): void {\n    this.cookieService.set(key, value, { path: '/' });\n    let sessionKeys = this.getCookie(LoginDetailsConstants.COOKIE_KEYS);\n    sessionKeys = sessionKeys ? sessionKeys.concat(',', key) : key;\n    this.cookieService.set(LoginDetailsConstants.COOKIE_KEYS, sessionKeys, { path: '/' });\n  }\n\n  private getCookie(key: string): string {\n    return this.cookieService.get(key);\n  }\n\n  private redirectToInternalRegistrationURL(channel: string): void {\n    let referrer_url;\n    let registrationUrl = this.registrationUrl + '?channel=' + channel + '&idp=' + 'internal';\n    const sdata = this.urlService.getRequestParamValue(LoginDetailsConstants.PARAM_SDATA, '');\n    if (sdata) {\n      registrationUrl += '&sdata=' + sdata;\n    }\n    if (this.action === 'register') {\n      const newUrl = this.urlService.getActionParametersRemovedURL();\n      referrer_url = encodeURIComponent(newUrl);\n    } else {\n      referrer_url = encodeURIComponent(this.urlService.getCurrentUrl());\n    }\n    registrationUrl += '&referrer_url=' + referrer_url;\n    this.urlService.redirectTo(registrationUrl);\n  }\n\n  private redirectToItsMePortal(channel: string): void {\n    this.initCookies(channel, 'itsme');\n    const redirectURI = this.getRedirectURI();\n\n    const params = {\n      redirect_uri: redirectURI,\n      language: this.languageService.getLanguage(),\n    };\n\n    const itsMePortalUrl =\n      this.getItsMeRegisterUrl() +\n      '?language=' +\n      params.language +\n      '&redirect_uri=' +\n      redirectURI +\n      '&brand=' +\n      this.brand;\n\n    this.urlService.redirectTo(itsMePortalUrl);\n  }\n\n  private getItsMeRegisterUrl(): string {\n    return this.configService.getConfig(ConfigConstants.OCAPI_URl) + LoginDetailsConstants.ITS_ME_REGISTER_ENDPOINT;\n  }\n\n  private getRedirectURI(): string {\n    const redirect_uri = this.getCookie(LoginDetailsConstants.CUSTOMER_REGISTRATION_URL);\n    return encodeURIComponent(redirect_uri);\n  }\n\n  private getCustomerRegistrationURL(): string {\n    return this.urlService.getOrigin().concat(this.registrationUrl);\n  }\n\n  private pushEventDataToAnalytics(eventName: string): void {\n    const eventInfoData = this.dataLayerService.createEventInfo(eventName, EventTypeEnum.EVENT_TYPE_CLICK);\n    eventInfoData.setEventStatus(EventStatusEnum.EVENT_STATUS_SUCCESS);\n    const attributes = this.buildCommonEventAttributes();\n    this.dataLayerService.sendEvent({ eventInfo: eventInfoData, attributes });\n  }\n\n  private buildCommonEventAttributes(): DataLayerAttributes {\n    const styleHint = this.styleHint ? this.styleHint : 'care';\n    const flowType = this.urlService.getRequestParamValue(LoginDetailsConstants.PARAM_FLOW, '') || styleHint;\n    return { flowType: flowType } as DataLayerAttributes;\n  }\n\n  private sendPageStepData(): void {\n    const attributes = this.buildCommonEventAttributes();\n    attributes.stepId = LoginDetailsConstants.STEP_ID_LOGIN_REGISTER;\n    this.dataLayerService.addStepViewEvent(attributes);\n  }\n\n  private registerBasedOnAction(): void {\n    if (this.action === 'register') {\n      return this.register('internal');\n    } else if (this.action === 'register-via-itsme') {\n      return this.register('external');\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n","import { makeFactory } from 'factory.ts';\n\nexport interface RawLoginDetailsInterface {\n  customer_number: string;\n  identity_id: string;\n  username: string;\n  first_name: string;\n  last_name: string;\n  is_telenet_login?: boolean;\n  is_sub_login?: boolean;\n  scopes?: string[];\n  explicit_login: boolean;\n  narrowed_scope?: boolean;\n  auth_age: number;\n  is_pid?: boolean;\n  bss_system?: string;\n  role: string;\n  impersonated?: boolean;\n  login_alias: string;\n  status: string;\n  identity_request_id?: string;\n  pega_service_case_id?: string;\n  contact_number?: string;\n  advisorId?: string;\n}\n\nexport const rawLoginDetailsInterfaceFactory = makeFactory<RawLoginDetailsInterface>({\n  status: 'active',\n  customer_number: '1208338235',\n  identity_id: '817624297',\n  username: 'kolatest@gmail.com',\n  login_alias: '0625ad87-0a2e-4e02-9b5a-28c71c70f63c',\n  first_name: 'kola',\n  last_name: 'psc1',\n  scopes: ['groupbundles', 'acceptoffer', 'D_manageusers'],\n  explicit_login: true,\n  narrowed_scope: false,\n  bss_system: 'NETCRACKER',\n  auth_age: 18,\n  role: 'CONTRACT_HOLDER',\n});\n\nexport const rawFormerLoginDetailsInterfaceFactory = makeFactory<RawLoginDetailsInterface>({\n  status: 'Former',\n  customer_number: '1208338235',\n  identity_id: '817624297',\n  username: 'kolatest@gmail.com',\n  login_alias: '0625ad87-0a2e-4e02-9b5a-28c71c70f63c',\n  first_name: 'kola',\n  last_name: 'psc1',\n  scopes: ['groupbundles', 'acceptoffer', 'D_manageusers'],\n  explicit_login: true,\n  narrowed_scope: false,\n  bss_system: 'NETCRACKER',\n  auth_age: 18,\n  role: 'CONTRACT_HOLDER',\n});\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { LoginComponent } from './components';\n\n@NgModule({\n  imports: [CommonModule, TranslateModule],\n  declarations: [LoginComponent],\n  exports: [LoginComponent],\n})\nexport class LoginModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["i1","i3","i2","map","i6.OcapiHelper","i7","i8","i9.AuthenticationState","i10.ErrorReportService","i1.OcapiService","i4.LoginCustomerNameMapper","i4.LogoutMapper","i5.UserDetailsService","i1.LoginService","i1.UserDetailsService","i4","i5"],"mappings":"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"}