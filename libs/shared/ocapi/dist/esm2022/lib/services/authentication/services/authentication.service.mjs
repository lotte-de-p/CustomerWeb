import { UserDetailsService } from '../../user-details.service';
import { inject } from '@angular/core';
import { UrlService } from '@telenet/ng-lib-page';
import { AuthenticationState } from '../state/authentication.state';
import { LoginDetailsConstants } from '../../../constants';
import { LoginStatusEnum } from '../../../enums';
import { CookieService } from 'ngx-cookie-service';
import { of } from 'rxjs';
import { catchError, shareReplay, take, tap } from 'rxjs/operators';
import { AUTH_PROVIDER } from '../tokens';
export class AbstractAuthenticationService {
    userDetailsService = inject(UserDetailsService);
    cookieService = inject(CookieService);
    urlService = inject(UrlService);
    authenticationState = inject(AuthenticationState);
    authenticationProvider = inject(AUTH_PROVIDER);
    authenticationStatus;
    constructor() {
        this.getLog().logDebug(`Authenticate on load using service: ${this.constructor.name}`);
    }
    authenticate(authenticationParameters) {
        const authUrl = this.getAuthenticationUrl(authenticationParameters);
        if (authUrl) {
            this.urlService.openWindow(authUrl);
        }
    }
    getRootDomain() {
        return location.hostname.split('.').reverse().splice(0, 2).reverse().join('.');
    }
    setAuthenticatedStatus(isAuthenticated) {
        if (!this.cookieService.check(LoginDetailsConstants.LOGIN_STATUS_COOKIENAME)) {
            this.cookieService.set(LoginDetailsConstants.LOGIN_STATUS_COOKIENAME, isAuthenticated ? LoginStatusEnum.LOGGED_IN.toString() : LoginStatusEnum.NOT_LOGGED_IN.toString(), {
                path: '/',
                sameSite: 'Lax',
                domain: `.${this.getRootDomain()}`,
            });
        }
        this.authenticationState.setAuthenticated(isAuthenticated);
    }
    getAuthenticationUrl(authenticationParameters) {
        const parameters = this.authenticationProvider.getParameters(authenticationParameters);
        const url = this.authenticationProvider.getAuthenticationUrl();
        if (!url) {
            return null;
        }
        return `${url}?${parameters.toString()}`;
    }
    getAuthenticationStatus() {
        if (!this.authenticationStatus) {
            this.authenticationStatus = this.isAuthenticated().pipe(take(1), shareReplay({ bufferSize: 1, refCount: false }), tap((isAuthenticated) => this.setAuthenticatedStatus(isAuthenticated)), catchError((error) => {
                this.getLog().logError(`Failed to retrieve authentication status`, error);
                return of(false);
            }));
        }
        return this.authenticationStatus;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aGVudGljYXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvc2VydmljZXMvYXV0aGVudGljYXRpb24vc2VydmljZXMvYXV0aGVudGljYXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUNwRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUMzRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDakQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ25ELE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFdEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXBFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFMUMsTUFBTSxPQUFnQiw2QkFBNkI7SUFDOUIsa0JBQWtCLEdBQUcsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFDaEQsYUFBYSxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUN0QyxVQUFVLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ2hDLG1CQUFtQixHQUFHLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQ2xELHNCQUFzQixHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUUxRCxvQkFBb0IsQ0FBc0I7SUFFbEQ7UUFDRSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDLHVDQUF1QyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7SUFDekYsQ0FBQztJQUVNLFlBQVksQ0FBQyx3QkFBa0Q7UUFDcEUsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLHdCQUF3QixDQUFDLENBQUM7UUFDcEUsSUFBSSxPQUFPLEVBQUUsQ0FBQztZQUNaLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3RDLENBQUM7SUFDSCxDQUFDO0lBRU8sYUFBYTtRQUNuQixPQUFPLFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2pGLENBQUM7SUFFTSxzQkFBc0IsQ0FBQyxlQUF3QjtRQUNwRCxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMscUJBQXFCLENBQUMsdUJBQXVCLENBQUMsRUFBRSxDQUFDO1lBQzdFLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUNwQixxQkFBcUIsQ0FBQyx1QkFBdUIsRUFDN0MsZUFBZSxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsYUFBYSxDQUFDLFFBQVEsRUFBRSxFQUNqRztnQkFDRSxJQUFJLEVBQUUsR0FBRztnQkFDVCxRQUFRLEVBQUUsS0FBSztnQkFDZixNQUFNLEVBQUUsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFLEVBQUU7YUFDbkMsQ0FDRixDQUFDO1FBQ0osQ0FBQztRQUVELElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxnQkFBZ0IsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBRU0sb0JBQW9CLENBQUMsd0JBQWtEO1FBQzVFLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxhQUFhLENBQUMsd0JBQXdCLENBQUMsQ0FBQztRQUN2RixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsc0JBQXNCLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztRQUMvRCxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDVCxPQUFPLElBQUksQ0FBQztRQUNkLENBQUM7UUFDRCxPQUFPLEdBQUcsR0FBRyxJQUFJLFVBQVUsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDO0lBQzNDLENBQUM7SUFFTSx1QkFBdUI7UUFDNUIsSUFBSSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO1lBQy9CLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUMsSUFBSSxDQUNyRCxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQ1AsV0FBVyxDQUFDLEVBQUUsVUFBVSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFDL0MsR0FBRyxDQUFDLENBQUMsZUFBZSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsZUFBZSxDQUFDLENBQUMsRUFDdEUsVUFBVSxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7Z0JBQ25CLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLENBQUMsMENBQTBDLEVBQUUsS0FBSyxDQUFDLENBQUM7Z0JBQzFFLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ25CLENBQUMsQ0FBQyxDQUNILENBQUM7UUFDSixDQUFDO1FBQ0QsT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUM7SUFDbkMsQ0FBQztDQUtGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVXNlckRldGFpbHNTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vdXNlci1kZXRhaWxzLnNlcnZpY2UnO1xuaW1wb3J0IHsgaW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBVcmxTZXJ2aWNlIH0gZnJvbSAnQHRlbGVuZXQvbmctbGliLXBhZ2UnO1xuaW1wb3J0IHsgQXV0aGVudGljYXRpb25TdGF0ZSB9IGZyb20gJy4uL3N0YXRlL2F1dGhlbnRpY2F0aW9uLnN0YXRlJztcbmltcG9ydCB7IExvZ2luRGV0YWlsc0NvbnN0YW50cyB9IGZyb20gJy4uLy4uLy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBMb2dpblN0YXR1c0VudW0gfSBmcm9tICcuLi8uLi8uLi9lbnVtcyc7XG5pbXBvcnQgeyBDb29raWVTZXJ2aWNlIH0gZnJvbSAnbmd4LWNvb2tpZS1zZXJ2aWNlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBBdXRoZW50aWNhdGlvblBhcmFtZXRlcnMsIEF1dGhlbnRpY2F0aW9uU2VydmljZSB9IGZyb20gJy4uL21vZGVscyc7XG5pbXBvcnQgeyBjYXRjaEVycm9yLCBzaGFyZVJlcGxheSwgdGFrZSwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgTG9nIH0gZnJvbSAnQHRlbGVuZXQvbmctbGliLXNoYXJlZCc7XG5pbXBvcnQgeyBBVVRIX1BST1ZJREVSIH0gZnJvbSAnLi4vdG9rZW5zJztcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFic3RyYWN0QXV0aGVudGljYXRpb25TZXJ2aWNlIGltcGxlbWVudHMgQXV0aGVudGljYXRpb25TZXJ2aWNlIHtcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IHVzZXJEZXRhaWxzU2VydmljZSA9IGluamVjdChVc2VyRGV0YWlsc1NlcnZpY2UpO1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgY29va2llU2VydmljZSA9IGluamVjdChDb29raWVTZXJ2aWNlKTtcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IHVybFNlcnZpY2UgPSBpbmplY3QoVXJsU2VydmljZSk7XG4gIHByb3RlY3RlZCByZWFkb25seSBhdXRoZW50aWNhdGlvblN0YXRlID0gaW5qZWN0KEF1dGhlbnRpY2F0aW9uU3RhdGUpO1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgYXV0aGVudGljYXRpb25Qcm92aWRlciA9IGluamVjdChBVVRIX1BST1ZJREVSKTtcblxuICBwcml2YXRlIGF1dGhlbnRpY2F0aW9uU3RhdHVzOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuXG4gIHByb3RlY3RlZCBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmdldExvZygpLmxvZ0RlYnVnKGBBdXRoZW50aWNhdGUgb24gbG9hZCB1c2luZyBzZXJ2aWNlOiAke3RoaXMuY29uc3RydWN0b3IubmFtZX1gKTtcbiAgfVxuXG4gIHB1YmxpYyBhdXRoZW50aWNhdGUoYXV0aGVudGljYXRpb25QYXJhbWV0ZXJzOiBBdXRoZW50aWNhdGlvblBhcmFtZXRlcnMpIHtcbiAgICBjb25zdCBhdXRoVXJsID0gdGhpcy5nZXRBdXRoZW50aWNhdGlvblVybChhdXRoZW50aWNhdGlvblBhcmFtZXRlcnMpO1xuICAgIGlmIChhdXRoVXJsKSB7XG4gICAgICB0aGlzLnVybFNlcnZpY2Uub3BlbldpbmRvdyhhdXRoVXJsKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldFJvb3REb21haW4oKTogc3RyaW5nIHtcbiAgICByZXR1cm4gbG9jYXRpb24uaG9zdG5hbWUuc3BsaXQoJy4nKS5yZXZlcnNlKCkuc3BsaWNlKDAsIDIpLnJldmVyc2UoKS5qb2luKCcuJyk7XG4gIH1cblxuICBwdWJsaWMgc2V0QXV0aGVudGljYXRlZFN0YXR1cyhpc0F1dGhlbnRpY2F0ZWQ6IGJvb2xlYW4pIHtcbiAgICBpZiAoIXRoaXMuY29va2llU2VydmljZS5jaGVjayhMb2dpbkRldGFpbHNDb25zdGFudHMuTE9HSU5fU1RBVFVTX0NPT0tJRU5BTUUpKSB7XG4gICAgICB0aGlzLmNvb2tpZVNlcnZpY2Uuc2V0KFxuICAgICAgICBMb2dpbkRldGFpbHNDb25zdGFudHMuTE9HSU5fU1RBVFVTX0NPT0tJRU5BTUUsXG4gICAgICAgIGlzQXV0aGVudGljYXRlZCA/IExvZ2luU3RhdHVzRW51bS5MT0dHRURfSU4udG9TdHJpbmcoKSA6IExvZ2luU3RhdHVzRW51bS5OT1RfTE9HR0VEX0lOLnRvU3RyaW5nKCksXG4gICAgICAgIHtcbiAgICAgICAgICBwYXRoOiAnLycsXG4gICAgICAgICAgc2FtZVNpdGU6ICdMYXgnLFxuICAgICAgICAgIGRvbWFpbjogYC4ke3RoaXMuZ2V0Um9vdERvbWFpbigpfWAsXG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgdGhpcy5hdXRoZW50aWNhdGlvblN0YXRlLnNldEF1dGhlbnRpY2F0ZWQoaXNBdXRoZW50aWNhdGVkKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRBdXRoZW50aWNhdGlvblVybChhdXRoZW50aWNhdGlvblBhcmFtZXRlcnM6IEF1dGhlbnRpY2F0aW9uUGFyYW1ldGVycykge1xuICAgIGNvbnN0IHBhcmFtZXRlcnMgPSB0aGlzLmF1dGhlbnRpY2F0aW9uUHJvdmlkZXIuZ2V0UGFyYW1ldGVycyhhdXRoZW50aWNhdGlvblBhcmFtZXRlcnMpO1xuICAgIGNvbnN0IHVybCA9IHRoaXMuYXV0aGVudGljYXRpb25Qcm92aWRlci5nZXRBdXRoZW50aWNhdGlvblVybCgpO1xuICAgIGlmICghdXJsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGAke3VybH0/JHtwYXJhbWV0ZXJzLnRvU3RyaW5nKCl9YDtcbiAgfVxuXG4gIHB1YmxpYyBnZXRBdXRoZW50aWNhdGlvblN0YXR1cygpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICBpZiAoIXRoaXMuYXV0aGVudGljYXRpb25TdGF0dXMpIHtcbiAgICAgIHRoaXMuYXV0aGVudGljYXRpb25TdGF0dXMgPSB0aGlzLmlzQXV0aGVudGljYXRlZCgpLnBpcGUoXG4gICAgICAgIHRha2UoMSksXG4gICAgICAgIHNoYXJlUmVwbGF5KHsgYnVmZmVyU2l6ZTogMSwgcmVmQ291bnQ6IGZhbHNlIH0pLFxuICAgICAgICB0YXAoKGlzQXV0aGVudGljYXRlZCkgPT4gdGhpcy5zZXRBdXRoZW50aWNhdGVkU3RhdHVzKGlzQXV0aGVudGljYXRlZCkpLFxuICAgICAgICBjYXRjaEVycm9yKChlcnJvcikgPT4ge1xuICAgICAgICAgIHRoaXMuZ2V0TG9nKCkubG9nRXJyb3IoYEZhaWxlZCB0byByZXRyaWV2ZSBhdXRoZW50aWNhdGlvbiBzdGF0dXNgLCBlcnJvcik7XG4gICAgICAgICAgcmV0dXJuIG9mKGZhbHNlKTtcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmF1dGhlbnRpY2F0aW9uU3RhdHVzO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFic3RyYWN0IGlzQXV0aGVudGljYXRlZCgpOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBnZXRMb2coKTogTG9nO1xufVxuIl19