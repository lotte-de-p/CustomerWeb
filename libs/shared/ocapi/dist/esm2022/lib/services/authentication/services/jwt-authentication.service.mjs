import { AbstractAuthenticationService } from './authentication.service';
import { catchError, map } from 'rxjs/operators';
import { of } from 'rxjs';
import { LogFactory } from '@telenet/ng-lib-shared';
export class JWTAuthenticationService extends AbstractAuthenticationService {
    static LOG = LogFactory.createLogger(JWTAuthenticationService);
    constructor() {
        super();
    }
    isAuthenticated() {
        return this.userDetailsService.getUserDetails().pipe(map((loginDetails) => {
            const isLoggedIn = loginDetails.isLoggedIn();
            JWTAuthenticationService.LOG.logDebug(`Authentication: ${loginDetails}`);
            return isLoggedIn;
        }), catchError((_e) => {
            JWTAuthenticationService.LOG.logDebug(`Authentication: false}`);
            return of(false);
        }));
    }
    getLog() {
        return JWTAuthenticationService.LOG;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiand0LWF1dGhlbnRpY2F0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL3NlcnZpY2VzL2F1dGhlbnRpY2F0aW9uL3NlcnZpY2VzL2p3dC1hdXRoZW50aWNhdGlvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3pFLE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDakQsT0FBTyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQU8sVUFBVSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFHekQsTUFBTSxPQUFPLHdCQUF5QixTQUFRLDZCQUE2QjtJQUNqRSxNQUFNLENBQVUsR0FBRyxHQUFRLFVBQVUsQ0FBQyxZQUFZLENBQUMsd0JBQXdCLENBQUMsQ0FBQztJQUVyRjtRQUNFLEtBQUssRUFBRSxDQUFDO0lBQ1YsQ0FBQztJQUVrQixlQUFlO1FBQ2hDLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLGNBQWMsRUFBRSxDQUFDLElBQUksQ0FDbEQsR0FBRyxDQUFDLENBQUMsWUFBWSxFQUFFLEVBQUU7WUFDbkIsTUFBTSxVQUFVLEdBQUcsWUFBWSxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBQzdDLHdCQUF3QixDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsbUJBQW1CLFlBQVksRUFBRSxDQUFDLENBQUM7WUFDekUsT0FBTyxVQUFVLENBQUM7UUFDcEIsQ0FBQyxDQUFDLEVBQ0YsVUFBVSxDQUFDLENBQUMsRUFBVyxFQUFFLEVBQUU7WUFDekIsd0JBQXdCLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1lBQ2hFLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ25CLENBQUMsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDO0lBRVMsTUFBTTtRQUNkLE9BQU8sd0JBQXdCLENBQUMsR0FBRyxDQUFDO0lBQ3RDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBYnN0cmFjdEF1dGhlbnRpY2F0aW9uU2VydmljZSB9IGZyb20gJy4vYXV0aGVudGljYXRpb24uc2VydmljZSc7XG5pbXBvcnQgeyBjYXRjaEVycm9yLCBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTG9nLCBMb2dGYWN0b3J5IH0gZnJvbSAnQHRlbGVuZXQvbmctbGliLXNoYXJlZCc7XG5pbXBvcnQgeyBBdXRoZW50aWNhdGlvblNlcnZpY2UgfSBmcm9tICcuLi9tb2RlbHMnO1xuXG5leHBvcnQgY2xhc3MgSldUQXV0aGVudGljYXRpb25TZXJ2aWNlIGV4dGVuZHMgQWJzdHJhY3RBdXRoZW50aWNhdGlvblNlcnZpY2UgaW1wbGVtZW50cyBBdXRoZW50aWNhdGlvblNlcnZpY2Uge1xuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBMT0c6IExvZyA9IExvZ0ZhY3RvcnkuY3JlYXRlTG9nZ2VyKEpXVEF1dGhlbnRpY2F0aW9uU2VydmljZSk7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBvdmVycmlkZSBpc0F1dGhlbnRpY2F0ZWQoKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIHRoaXMudXNlckRldGFpbHNTZXJ2aWNlLmdldFVzZXJEZXRhaWxzKCkucGlwZShcbiAgICAgIG1hcCgobG9naW5EZXRhaWxzKSA9PiB7XG4gICAgICAgIGNvbnN0IGlzTG9nZ2VkSW4gPSBsb2dpbkRldGFpbHMuaXNMb2dnZWRJbigpO1xuICAgICAgICBKV1RBdXRoZW50aWNhdGlvblNlcnZpY2UuTE9HLmxvZ0RlYnVnKGBBdXRoZW50aWNhdGlvbjogJHtsb2dpbkRldGFpbHN9YCk7XG4gICAgICAgIHJldHVybiBpc0xvZ2dlZEluO1xuICAgICAgfSksXG4gICAgICBjYXRjaEVycm9yKChfZTogdW5rbm93bikgPT4ge1xuICAgICAgICBKV1RBdXRoZW50aWNhdGlvblNlcnZpY2UuTE9HLmxvZ0RlYnVnKGBBdXRoZW50aWNhdGlvbjogZmFsc2V9YCk7XG4gICAgICAgIHJldHVybiBvZihmYWxzZSk7XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0TG9nKCk6IExvZyB7XG4gICAgcmV0dXJuIEpXVEF1dGhlbnRpY2F0aW9uU2VydmljZS5MT0c7XG4gIH1cbn1cbiJdfQ==