import { ConfigConstants } from '@telenet/ng-lib-config';
import { HttpErrorResponse } from '@angular/common/http';
import { throwError } from 'rxjs';
import { AuthenticationProvider } from './authentication.provider';
import { LoginDetailsConstants } from '../../../constants';
import { LogFactory } from '@telenet/ng-lib-shared';
export class OpenidAuthenticationProvider extends AuthenticationProvider {
    static LOG = LogFactory.createLogger(OpenidAuthenticationProvider);
    static PROVIDER_TYPE = 'openid';
    constructor() {
        super();
        OpenidAuthenticationProvider.LOG.logDebug('Use OpenidAuthenticationProvider for authentication');
    }
    getType() {
        return OpenidAuthenticationProvider.PROVIDER_TYPE;
    }
    getAuthenticationUrl() {
        if (!this.configService.getConfig(ConfigConstants.OPENID_AUTH_URL)) {
            OpenidAuthenticationProvider.LOG.logError('OPENID_AUTH_URL has not been configured');
            return null;
        }
        return this.configService.getConfig(ConfigConstants.OPENID_AUTH_URL);
    }
    getParameters(authenticationParameters) {
        const { referrerUrl, state, nonce } = authenticationParameters;
        let httpParams = super.getParameters(authenticationParameters);
        httpParams = httpParams.appendAll({
            client_id: this.configService.getConfig(ConfigConstants.OPENID_CLIENT_ID),
            response_type: LoginDetailsConstants.CODE,
            claims: LoginDetailsConstants.CLAIMS,
        });
        if (state && nonce) {
            httpParams = httpParams.appendAll({
                state,
                nonce,
            });
        }
        if (referrerUrl) {
            httpParams = httpParams.append('referrer_url', referrerUrl);
        }
        if (this.configService.getConfig(ConfigConstants.OAUTH_CALLBACK_URL)) {
            httpParams = httpParams.append('redirect_uri', this.configService.getConfig(ConfigConstants.OAUTH_CALLBACK_URL));
        }
        return httpParams;
    }
    sendAuthCall(params) {
        OpenidAuthenticationProvider.LOG.logDebug(`Sending GET request without prompt to openid authentication endpoint: ${this.getAuthenticationUrl()}, with parameters ${params.toString()}`);
        const authUrl = this.getAuthenticationUrl();
        if (!authUrl) {
            return throwError(() => new HttpErrorResponse({ error: { text: 'Authentication url of openid provider could not be determined' } }));
        }
        const url = `${authUrl}?${params.toString()}`;
        const options = {
            withCredentials: true,
            headers: this.ocapiHelper.getHttpHeaders(),
        };
        return this.httpClient.get(url, options);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BlbmlkLWF1dGhlbnRpY2F0aW9uLnByb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9zZXJ2aWNlcy9hdXRoZW50aWNhdGlvbi9wcm92aWRlcnMvb3BlbmlkLWF1dGhlbnRpY2F0aW9uLnByb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsaUJBQWlCLEVBQWMsTUFBTSxzQkFBc0IsQ0FBQztBQUNyRSxPQUFPLEVBQWMsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzlDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRW5FLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzNELE9BQU8sRUFBTyxVQUFVLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUV6RCxNQUFNLE9BQU8sNEJBQTZCLFNBQVEsc0JBQXNCO0lBQzlELE1BQU0sQ0FBVSxHQUFHLEdBQVEsVUFBVSxDQUFDLFlBQVksQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0lBRWxGLE1BQU0sQ0FBQyxhQUFhLEdBQUcsUUFBUSxDQUFDO0lBRXZDO1FBQ0UsS0FBSyxFQUFFLENBQUM7UUFDUiw0QkFBNEIsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLHFEQUFxRCxDQUFDLENBQUM7SUFDbkcsQ0FBQztJQUVNLE9BQU87UUFDWixPQUFPLDRCQUE0QixDQUFDLGFBQWEsQ0FBQztJQUNwRCxDQUFDO0lBRU0sb0JBQW9CO1FBQ3pCLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQztZQUNuRSw0QkFBNEIsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLHlDQUF5QyxDQUFDLENBQUM7WUFDckYsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDO1FBQ0QsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDdkUsQ0FBQztJQUVlLGFBQWEsQ0FBQyx3QkFBa0Q7UUFDOUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsd0JBQXdCLENBQUM7UUFFL0QsSUFBSSxVQUFVLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1FBQy9ELFVBQVUsR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDO1lBQ2hDLFNBQVMsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsZ0JBQWdCLENBQUM7WUFDekUsYUFBYSxFQUFFLHFCQUFxQixDQUFDLElBQUk7WUFDekMsTUFBTSxFQUFFLHFCQUFxQixDQUFDLE1BQU07U0FDckMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxLQUFLLElBQUksS0FBSyxFQUFFLENBQUM7WUFDbkIsVUFBVSxHQUFHLFVBQVUsQ0FBQyxTQUFTLENBQUM7Z0JBQ2hDLEtBQUs7Z0JBQ0wsS0FBSzthQUNOLENBQUMsQ0FBQztRQUNMLENBQUM7UUFFRCxJQUFJLFdBQVcsRUFBRSxDQUFDO1lBQ2hCLFVBQVUsR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUM5RCxDQUFDO1FBRUQsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsa0JBQWtCLENBQUMsRUFBRSxDQUFDO1lBQ3JFLFVBQVUsR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDO1FBQ25ILENBQUM7UUFFRCxPQUFPLFVBQVUsQ0FBQztJQUNwQixDQUFDO0lBRU0sWUFBWSxDQUFDLE1BQWtCO1FBQ3BDLDRCQUE0QixDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQ3ZDLHlFQUF5RSxJQUFJLENBQUMsb0JBQW9CLEVBQUUscUJBQXFCLE1BQU0sQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUM3SSxDQUFDO1FBRUYsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7UUFDNUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ2IsT0FBTyxVQUFVLENBQ2YsR0FBRyxFQUFFLENBQ0gsSUFBSSxpQkFBaUIsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSwrREFBK0QsRUFBRSxFQUFFLENBQUMsQ0FDOUcsQ0FBQztRQUNKLENBQUM7UUFFRCxNQUFNLEdBQUcsR0FBRyxHQUFHLE9BQU8sSUFBSSxNQUFNLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQztRQUM5QyxNQUFNLE9BQU8sR0FBRztZQUNkLGVBQWUsRUFBRSxJQUFJO1lBQ3JCLE9BQU8sRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWMsRUFBRTtTQUMzQyxDQUFDO1FBQ0YsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFpQyxDQUFDO0lBQzNFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25maWdDb25zdGFudHMgfSBmcm9tICdAdGVsZW5ldC9uZy1saWItY29uZmlnJztcbmltcG9ydCB7IEh0dHBFcnJvclJlc3BvbnNlLCBIdHRwUGFyYW1zIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgdGhyb3dFcnJvciB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQXV0aGVudGljYXRpb25Qcm92aWRlciB9IGZyb20gJy4vYXV0aGVudGljYXRpb24ucHJvdmlkZXInO1xuaW1wb3J0IHsgQXV0aGVudGljYXRpb25QYXJhbWV0ZXJzIH0gZnJvbSAnLi4vbW9kZWxzJztcbmltcG9ydCB7IExvZ2luRGV0YWlsc0NvbnN0YW50cyB9IGZyb20gJy4uLy4uLy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBMb2csIExvZ0ZhY3RvcnkgfSBmcm9tICdAdGVsZW5ldC9uZy1saWItc2hhcmVkJztcblxuZXhwb3J0IGNsYXNzIE9wZW5pZEF1dGhlbnRpY2F0aW9uUHJvdmlkZXIgZXh0ZW5kcyBBdXRoZW50aWNhdGlvblByb3ZpZGVyIHtcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgTE9HOiBMb2cgPSBMb2dGYWN0b3J5LmNyZWF0ZUxvZ2dlcihPcGVuaWRBdXRoZW50aWNhdGlvblByb3ZpZGVyKTtcblxuICBwdWJsaWMgc3RhdGljIFBST1ZJREVSX1RZUEUgPSAnb3BlbmlkJztcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIE9wZW5pZEF1dGhlbnRpY2F0aW9uUHJvdmlkZXIuTE9HLmxvZ0RlYnVnKCdVc2UgT3BlbmlkQXV0aGVudGljYXRpb25Qcm92aWRlciBmb3IgYXV0aGVudGljYXRpb24nKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRUeXBlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIE9wZW5pZEF1dGhlbnRpY2F0aW9uUHJvdmlkZXIuUFJPVklERVJfVFlQRTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRBdXRoZW50aWNhdGlvblVybCgpOiBzdHJpbmcgfCBudWxsIHtcbiAgICBpZiAoIXRoaXMuY29uZmlnU2VydmljZS5nZXRDb25maWcoQ29uZmlnQ29uc3RhbnRzLk9QRU5JRF9BVVRIX1VSTCkpIHtcbiAgICAgIE9wZW5pZEF1dGhlbnRpY2F0aW9uUHJvdmlkZXIuTE9HLmxvZ0Vycm9yKCdPUEVOSURfQVVUSF9VUkwgaGFzIG5vdCBiZWVuIGNvbmZpZ3VyZWQnKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jb25maWdTZXJ2aWNlLmdldENvbmZpZyhDb25maWdDb25zdGFudHMuT1BFTklEX0FVVEhfVVJMKTtcbiAgfVxuXG4gIHB1YmxpYyBvdmVycmlkZSBnZXRQYXJhbWV0ZXJzKGF1dGhlbnRpY2F0aW9uUGFyYW1ldGVyczogQXV0aGVudGljYXRpb25QYXJhbWV0ZXJzKTogSHR0cFBhcmFtcyB7XG4gICAgY29uc3QgeyByZWZlcnJlclVybCwgc3RhdGUsIG5vbmNlIH0gPSBhdXRoZW50aWNhdGlvblBhcmFtZXRlcnM7XG5cbiAgICBsZXQgaHR0cFBhcmFtcyA9IHN1cGVyLmdldFBhcmFtZXRlcnMoYXV0aGVudGljYXRpb25QYXJhbWV0ZXJzKTtcbiAgICBodHRwUGFyYW1zID0gaHR0cFBhcmFtcy5hcHBlbmRBbGwoe1xuICAgICAgY2xpZW50X2lkOiB0aGlzLmNvbmZpZ1NlcnZpY2UuZ2V0Q29uZmlnKENvbmZpZ0NvbnN0YW50cy5PUEVOSURfQ0xJRU5UX0lEKSxcbiAgICAgIHJlc3BvbnNlX3R5cGU6IExvZ2luRGV0YWlsc0NvbnN0YW50cy5DT0RFLFxuICAgICAgY2xhaW1zOiBMb2dpbkRldGFpbHNDb25zdGFudHMuQ0xBSU1TLFxuICAgIH0pO1xuXG4gICAgaWYgKHN0YXRlICYmIG5vbmNlKSB7XG4gICAgICBodHRwUGFyYW1zID0gaHR0cFBhcmFtcy5hcHBlbmRBbGwoe1xuICAgICAgICBzdGF0ZSxcbiAgICAgICAgbm9uY2UsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAocmVmZXJyZXJVcmwpIHtcbiAgICAgIGh0dHBQYXJhbXMgPSBodHRwUGFyYW1zLmFwcGVuZCgncmVmZXJyZXJfdXJsJywgcmVmZXJyZXJVcmwpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmNvbmZpZ1NlcnZpY2UuZ2V0Q29uZmlnKENvbmZpZ0NvbnN0YW50cy5PQVVUSF9DQUxMQkFDS19VUkwpKSB7XG4gICAgICBodHRwUGFyYW1zID0gaHR0cFBhcmFtcy5hcHBlbmQoJ3JlZGlyZWN0X3VyaScsIHRoaXMuY29uZmlnU2VydmljZS5nZXRDb25maWcoQ29uZmlnQ29uc3RhbnRzLk9BVVRIX0NBTExCQUNLX1VSTCkpO1xuICAgIH1cblxuICAgIHJldHVybiBodHRwUGFyYW1zO1xuICB9XG5cbiAgcHVibGljIHNlbmRBdXRoQ2FsbChwYXJhbXM6IEh0dHBQYXJhbXMpOiBPYnNlcnZhYmxlPHsgZGF0YTogc3RyaW5nIH0+IHtcbiAgICBPcGVuaWRBdXRoZW50aWNhdGlvblByb3ZpZGVyLkxPRy5sb2dEZWJ1ZyhcbiAgICAgIGBTZW5kaW5nIEdFVCByZXF1ZXN0IHdpdGhvdXQgcHJvbXB0IHRvIG9wZW5pZCBhdXRoZW50aWNhdGlvbiBlbmRwb2ludDogJHt0aGlzLmdldEF1dGhlbnRpY2F0aW9uVXJsKCl9LCB3aXRoIHBhcmFtZXRlcnMgJHtwYXJhbXMudG9TdHJpbmcoKX1gXG4gICAgKTtcblxuICAgIGNvbnN0IGF1dGhVcmwgPSB0aGlzLmdldEF1dGhlbnRpY2F0aW9uVXJsKCk7XG4gICAgaWYgKCFhdXRoVXJsKSB7XG4gICAgICByZXR1cm4gdGhyb3dFcnJvcihcbiAgICAgICAgKCkgPT5cbiAgICAgICAgICBuZXcgSHR0cEVycm9yUmVzcG9uc2UoeyBlcnJvcjogeyB0ZXh0OiAnQXV0aGVudGljYXRpb24gdXJsIG9mIG9wZW5pZCBwcm92aWRlciBjb3VsZCBub3QgYmUgZGV0ZXJtaW5lZCcgfSB9KVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCB1cmwgPSBgJHthdXRoVXJsfT8ke3BhcmFtcy50b1N0cmluZygpfWA7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIHdpdGhDcmVkZW50aWFsczogdHJ1ZSxcbiAgICAgIGhlYWRlcnM6IHRoaXMub2NhcGlIZWxwZXIuZ2V0SHR0cEhlYWRlcnMoKSxcbiAgICB9O1xuICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuZ2V0KHVybCwgb3B0aW9ucykgYXMgT2JzZXJ2YWJsZTx7IGRhdGE6IHN0cmluZyB9PjtcbiAgfVxufVxuIl19