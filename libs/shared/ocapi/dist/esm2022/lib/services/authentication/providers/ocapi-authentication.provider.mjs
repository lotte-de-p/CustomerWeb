import { ConfigConstants } from '@telenet/ng-lib-config';
import { HttpErrorResponse } from '@angular/common/http';
import { throwError } from 'rxjs';
import { AuthenticationProvider } from './authentication.provider';
import { LogFactory } from '@telenet/ng-lib-shared';
export class OcapiAuthenticationProvider extends AuthenticationProvider {
    static PROVIDER_TYPE = 'ocapi';
    static LOG = LogFactory.createLogger(OcapiAuthenticationProvider);
    constructor() {
        super();
        OcapiAuthenticationProvider.LOG.logDebug('Use OcapiAuthenticationProvider for authentication');
    }
    getType() {
        return OcapiAuthenticationProvider.PROVIDER_TYPE;
    }
    getAuthenticationUrl() {
        const ocapiUrl = this.configService.getConfig(ConfigConstants.OCAPI_URl);
        const clientId = this.configService.getConfig(ConfigConstants.OCAPI_CLIENT_ID);
        if (!ocapiUrl || !clientId) {
            OcapiAuthenticationProvider.LOG.logError('OCAPI_URL or OCAPI_CLIENT_ID has no been configured');
            return null;
        }
        return ocapiUrl + '/login/authorization/' + clientId;
    }
    getParameters(authenticationParameters) {
        const { referrerUrl } = authenticationParameters;
        let httpParams = super.getParameters(authenticationParameters);
        httpParams = httpParams.appendAll({
            targetUrl: (referrerUrl || undefined) ?? this.urlService.getCurrentUrl(),
        });
        return httpParams;
    }
    sendAuthCall(params) {
        OcapiAuthenticationProvider.LOG.logDebug(`Sending jsonp request without prompt to ocapi authentication endpoint: ${this.getAuthenticationUrl()}, with parameters ${params.toString()}`);
        const authUrl = this.getAuthenticationUrl();
        if (!authUrl) {
            return throwError(() => new HttpErrorResponse({ error: { text: 'Authentication url of ocapi provider could not be determined' } }));
        }
        const url = `${authUrl}?${params.toString()}`;
        return this.httpClient.jsonp(url, 'callback');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2NhcGktYXV0aGVudGljYXRpb24ucHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL3NlcnZpY2VzL2F1dGhlbnRpY2F0aW9uL3Byb3ZpZGVycy9vY2FwaS1hdXRoZW50aWNhdGlvbi5wcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDekQsT0FBTyxFQUFFLGlCQUFpQixFQUFjLE1BQU0sc0JBQXNCLENBQUM7QUFDckUsT0FBTyxFQUFjLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM5QyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUVuRSxPQUFPLEVBQU8sVUFBVSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFekQsTUFBTSxPQUFPLDJCQUE0QixTQUFRLHNCQUFzQjtJQUM5RCxNQUFNLENBQUMsYUFBYSxHQUFHLE9BQU8sQ0FBQztJQUU5QixNQUFNLENBQVUsR0FBRyxHQUFRLFVBQVUsQ0FBQyxZQUFZLENBQUMsMkJBQTJCLENBQUMsQ0FBQztJQUV4RjtRQUNFLEtBQUssRUFBRSxDQUFDO1FBQ1IsMkJBQTJCLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxvREFBb0QsQ0FBQyxDQUFDO0lBQ2pHLENBQUM7SUFFTSxPQUFPO1FBQ1osT0FBTywyQkFBMkIsQ0FBQyxhQUFhLENBQUM7SUFDbkQsQ0FBQztJQUVNLG9CQUFvQjtRQUN6QixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDekUsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBRS9FLElBQUksQ0FBQyxRQUFRLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUMzQiwyQkFBMkIsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLHFEQUFxRCxDQUFDLENBQUM7WUFDaEcsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDO1FBQ0QsT0FBTyxRQUFRLEdBQUcsdUJBQXVCLEdBQUcsUUFBUSxDQUFDO0lBQ3ZELENBQUM7SUFFZSxhQUFhLENBQUMsd0JBQWtEO1FBQzlFLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyx3QkFBd0IsQ0FBQztRQUVqRCxJQUFJLFVBQVUsR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDLHdCQUF3QixDQUFDLENBQUM7UUFDL0QsVUFBVSxHQUFHLFVBQVUsQ0FBQyxTQUFTLENBQUM7WUFDaEMsU0FBUyxFQUFFLENBQUMsV0FBVyxJQUFJLFNBQVMsQ0FBQyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFO1NBQ3pFLENBQUMsQ0FBQztRQUNILE9BQU8sVUFBVSxDQUFDO0lBQ3BCLENBQUM7SUFFTSxZQUFZLENBQUMsTUFBa0I7UUFDcEMsMkJBQTJCLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FDdEMsMEVBQTBFLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxxQkFBcUIsTUFBTSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQzlJLENBQUM7UUFDRixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztRQUM1QyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDYixPQUFPLFVBQVUsQ0FDZixHQUFHLEVBQUUsQ0FBQyxJQUFJLGlCQUFpQixDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLDhEQUE4RCxFQUFFLEVBQUUsQ0FBQyxDQUNqSCxDQUFDO1FBQ0osQ0FBQztRQUVELE1BQU0sR0FBRyxHQUFHLEdBQUcsT0FBTyxJQUFJLE1BQU0sQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDO1FBQzlDLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLFVBQVUsQ0FBaUMsQ0FBQztJQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uZmlnQ29uc3RhbnRzIH0gZnJvbSAnQHRlbGVuZXQvbmctbGliLWNvbmZpZyc7XG5pbXBvcnQgeyBIdHRwRXJyb3JSZXNwb25zZSwgSHR0cFBhcmFtcyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IE9ic2VydmFibGUsIHRocm93RXJyb3IgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEF1dGhlbnRpY2F0aW9uUHJvdmlkZXIgfSBmcm9tICcuL2F1dGhlbnRpY2F0aW9uLnByb3ZpZGVyJztcbmltcG9ydCB7IEF1dGhlbnRpY2F0aW9uUGFyYW1ldGVycyB9IGZyb20gJy4uL21vZGVscyc7XG5pbXBvcnQgeyBMb2csIExvZ0ZhY3RvcnkgfSBmcm9tICdAdGVsZW5ldC9uZy1saWItc2hhcmVkJztcblxuZXhwb3J0IGNsYXNzIE9jYXBpQXV0aGVudGljYXRpb25Qcm92aWRlciBleHRlbmRzIEF1dGhlbnRpY2F0aW9uUHJvdmlkZXIge1xuICBwdWJsaWMgc3RhdGljIFBST1ZJREVSX1RZUEUgPSAnb2NhcGknO1xuXG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IExPRzogTG9nID0gTG9nRmFjdG9yeS5jcmVhdGVMb2dnZXIoT2NhcGlBdXRoZW50aWNhdGlvblByb3ZpZGVyKTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIE9jYXBpQXV0aGVudGljYXRpb25Qcm92aWRlci5MT0cubG9nRGVidWcoJ1VzZSBPY2FwaUF1dGhlbnRpY2F0aW9uUHJvdmlkZXIgZm9yIGF1dGhlbnRpY2F0aW9uJyk7XG4gIH1cblxuICBwdWJsaWMgZ2V0VHlwZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiBPY2FwaUF1dGhlbnRpY2F0aW9uUHJvdmlkZXIuUFJPVklERVJfVFlQRTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRBdXRoZW50aWNhdGlvblVybCgpOiBzdHJpbmcgfCBudWxsIHtcbiAgICBjb25zdCBvY2FwaVVybCA9IHRoaXMuY29uZmlnU2VydmljZS5nZXRDb25maWcoQ29uZmlnQ29uc3RhbnRzLk9DQVBJX1VSbCk7XG4gICAgY29uc3QgY2xpZW50SWQgPSB0aGlzLmNvbmZpZ1NlcnZpY2UuZ2V0Q29uZmlnKENvbmZpZ0NvbnN0YW50cy5PQ0FQSV9DTElFTlRfSUQpO1xuXG4gICAgaWYgKCFvY2FwaVVybCB8fCAhY2xpZW50SWQpIHtcbiAgICAgIE9jYXBpQXV0aGVudGljYXRpb25Qcm92aWRlci5MT0cubG9nRXJyb3IoJ09DQVBJX1VSTCBvciBPQ0FQSV9DTElFTlRfSUQgaGFzIG5vIGJlZW4gY29uZmlndXJlZCcpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBvY2FwaVVybCArICcvbG9naW4vYXV0aG9yaXphdGlvbi8nICsgY2xpZW50SWQ7XG4gIH1cblxuICBwdWJsaWMgb3ZlcnJpZGUgZ2V0UGFyYW1ldGVycyhhdXRoZW50aWNhdGlvblBhcmFtZXRlcnM6IEF1dGhlbnRpY2F0aW9uUGFyYW1ldGVycyk6IEh0dHBQYXJhbXMge1xuICAgIGNvbnN0IHsgcmVmZXJyZXJVcmwgfSA9IGF1dGhlbnRpY2F0aW9uUGFyYW1ldGVycztcblxuICAgIGxldCBodHRwUGFyYW1zID0gc3VwZXIuZ2V0UGFyYW1ldGVycyhhdXRoZW50aWNhdGlvblBhcmFtZXRlcnMpO1xuICAgIGh0dHBQYXJhbXMgPSBodHRwUGFyYW1zLmFwcGVuZEFsbCh7XG4gICAgICB0YXJnZXRVcmw6IChyZWZlcnJlclVybCB8fCB1bmRlZmluZWQpID8/IHRoaXMudXJsU2VydmljZS5nZXRDdXJyZW50VXJsKCksXG4gICAgfSk7XG4gICAgcmV0dXJuIGh0dHBQYXJhbXM7XG4gIH1cblxuICBwdWJsaWMgc2VuZEF1dGhDYWxsKHBhcmFtczogSHR0cFBhcmFtcyk6IE9ic2VydmFibGU8eyBkYXRhOiBzdHJpbmcgfT4ge1xuICAgIE9jYXBpQXV0aGVudGljYXRpb25Qcm92aWRlci5MT0cubG9nRGVidWcoXG4gICAgICBgU2VuZGluZyBqc29ucCByZXF1ZXN0IHdpdGhvdXQgcHJvbXB0IHRvIG9jYXBpIGF1dGhlbnRpY2F0aW9uIGVuZHBvaW50OiAke3RoaXMuZ2V0QXV0aGVudGljYXRpb25VcmwoKX0sIHdpdGggcGFyYW1ldGVycyAke3BhcmFtcy50b1N0cmluZygpfWBcbiAgICApO1xuICAgIGNvbnN0IGF1dGhVcmwgPSB0aGlzLmdldEF1dGhlbnRpY2F0aW9uVXJsKCk7XG4gICAgaWYgKCFhdXRoVXJsKSB7XG4gICAgICByZXR1cm4gdGhyb3dFcnJvcihcbiAgICAgICAgKCkgPT4gbmV3IEh0dHBFcnJvclJlc3BvbnNlKHsgZXJyb3I6IHsgdGV4dDogJ0F1dGhlbnRpY2F0aW9uIHVybCBvZiBvY2FwaSBwcm92aWRlciBjb3VsZCBub3QgYmUgZGV0ZXJtaW5lZCcgfSB9KVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCB1cmwgPSBgJHthdXRoVXJsfT8ke3BhcmFtcy50b1N0cmluZygpfWA7XG4gICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5qc29ucCh1cmwsICdjYWxsYmFjaycpIGFzIE9ic2VydmFibGU8eyBkYXRhOiBzdHJpbmcgfT47XG4gIH1cbn1cbiJdfQ==