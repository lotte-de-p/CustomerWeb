import { inject, Injectable } from '@angular/core';
import { catchError, finalize, map, shareReplay, take } from 'rxjs/operators';
import { HttpClient } from '@angular/common/http';
import { of, ReplaySubject, throwError } from 'rxjs';
import { ErrorMessage, MessageService } from '@telenet/ng-lib-message';
import { LoginDetails, OcapiCallConfig } from '../models';
import { LoginDetailsMapper } from '../mappers';
import { ConfigConstants, ConfigService } from '@telenet/ng-lib-config';
import { OcapiHelper } from '../utils';
import { ErrorReportService } from './error-report.service';
import { QueryParamEnum, UrlService } from '@telenet/ng-lib-page';
import { LogFactory } from '@telenet/ng-lib-shared';
import * as i0 from "@angular/core";
export class UserDetailsService {
    static LOG = LogFactory.createLogger(UserDetailsService);
    endpoint = '/oauth/userdetails';
    cache = new Map();
    loginDetailsMapper = inject(LoginDetailsMapper);
    messageService = inject(MessageService);
    ocapiHelper = inject(OcapiHelper);
    configService = inject(ConfigService);
    http = inject(HttpClient);
    errorReportService = inject(ErrorReportService);
    urlService = inject(UrlService);
    reset() {
        this.cache.clear();
    }
    getUserDetails(options = {}) {
        const { withCredentials = true, referrerUrl, jwtToken } = options;
        let endpointWithParameters = this.endpoint;
        const jwt = jwtToken ? jwtToken : this.extractJwtFromUrl();
        if (jwt) {
            endpointWithParameters = `${endpointWithParameters}?jwt=${jwt}`;
        }
        const ocapiConfig = new OcapiCallConfig('', endpointWithParameters, this.loginDetailsMapper);
        ocapiConfig.withCredentials = withCredentials;
        ocapiConfig.authNeeded = false;
        if (referrerUrl && referrerUrl.length > 0) {
            ocapiConfig.customHeaders = { ...(ocapiConfig.customHeaders || {}), 'x-alt-referer': referrerUrl };
        }
        return this.getUserDetailsForConfig(ocapiConfig).pipe(shareReplay({ bufferSize: 1, refCount: false }), catchError((error) => {
            if (error.status !== 401) {
                return throwError(() => error);
            }
            const { status, error: errorMessage } = error;
            const [state, nonce] = String(errorMessage).split(',');
            const loginDetails = new LoginDetails(status);
            loginDetails.state = state;
            loginDetails.nonce = nonce;
            return of(loginDetails);
        }));
    }
    extractJwtFromUrl() {
        const jwtToken = this.urlService.getRequestParamValue(QueryParamEnum.JWT_TOKEN, '');
        return jwtToken ? jwtToken : this.urlService.getHashParameter(QueryParamEnum.JWT_TOKEN);
    }
    createHashKey(ocapiCall) {
        const { errorHandler: _, endpoint: __, ...otherProps } = ocapiCall;
        return btoa(JSON.stringify(otherProps));
    }
    hasJwtParameter(endpoint) {
        return !!endpoint && endpoint.includes('jwt');
    }
    getUserDetailsForConfig(config) {
        const cacheKey = this.createHashKey(config);
        if (!this.hasJwtParameter(config.endpoint) && this.cache.has(cacheKey)) {
            const replaySubject$ = this.cache.get(cacheKey);
            if (replaySubject$) {
                return replaySubject$.asObservable();
            }
        }
        return this.getCacheableUserDetailsObservable(cacheKey, config);
    }
    getCacheableUserDetailsObservable(cacheKey, config) {
        const freshReplaySubject$ = new ReplaySubject(1);
        this.cache.set(cacheKey, freshReplaySubject$);
        this.doResolve(config)
            .pipe(take(1), finalize(() => {
            freshReplaySubject$.complete();
        }))
            .subscribe({
            next: (loginDetails) => {
                if (loginDetails instanceof LoginDetails) {
                    freshReplaySubject$.next(loginDetails);
                }
            },
            error: (error) => freshReplaySubject$.error(error),
        });
        return freshReplaySubject$.asObservable();
    }
    handleError(ocapiCallConfig) {
        return (error) => {
            if (error.status !== 401) {
                this.messageService.addMessage(new ErrorMessage(ocapiCallConfig.messageGroupName, 'ocapi.' + error.status));
                UserDetailsService.LOG.logDebug(`An error occurred while trying to fetch ${ocapiCallConfig.messageGroupName}`, error);
                return throwError(() => 'An error occured while trying to fetch ' + ocapiCallConfig.messageGroupName);
            }
            return throwError(() => error);
        };
    }
    doResolve(ocapiCallConfig) {
        try {
            const options = this.getHttpOptions(ocapiCallConfig);
            return this.http
                .get(this.configService.getConfig(ConfigConstants.OCAPI_URl) + ocapiCallConfig.getEndpoint(), options)
                .pipe(map((ocapiResponse) => {
                return ocapiCallConfig.mapper?.toModel(ocapiResponse) || ocapiResponse;
            }), catchError(this.handleError(ocapiCallConfig)));
        }
        catch (e) {
            this.errorReportService.sendErrorEventToAnalytics(ocapiCallConfig);
            this.messageService.addMessage(new ErrorMessage(ocapiCallConfig.messageGroupName, 'Ocapi call failed:' + ocapiCallConfig.endpoint + 'with data ' + JSON.stringify(ocapiCallConfig.data)));
            return throwError(() => new Error('An error occured while trying to fetch ' + ocapiCallConfig.endpoint));
        }
    }
    getHttpOptions(ocapiConfig) {
        const httpOptions = {
            withCredentials: ocapiConfig.withCredentials,
            headers: this.ocapiHelper.getHttpHeaders(ocapiConfig),
            responseType: 'json',
        };
        return httpOptions;
    }
    static ɵfac = function UserDetailsService_Factory(t) { return new (t || UserDetailsService)(); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: UserDetailsService, factory: UserDetailsService.ɵfac, providedIn: 'root' });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(UserDetailsService, [{
        type: Injectable,
        args: [{
                providedIn: 'root',
            }]
    }], null, null); })();
//# sourceMappingURL=data:application/json;base64,