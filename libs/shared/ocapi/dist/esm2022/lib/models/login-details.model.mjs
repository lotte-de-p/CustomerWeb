import { includes, some, isEmpty, merge } from 'lodash-es';
import { LoginDetailsConstants } from '../constants';
export class LoginDetails {
    state;
    nonce;
    status;
    narrowed = false;
    httpStatus;
    scopes;
    bssSystem;
    customerNumber;
    identityId;
    username;
    firstName;
    lastName;
    narrowedScope;
    authAge;
    isPid;
    bssSytem;
    isImpersonated;
    role;
    isExplicitLogin;
    isTelenetLogin;
    isSubLogin;
    loginAlias;
    identityRequestId;
    pegaServiceCaseId;
    contactNumber;
    advisorId;
    msisdn;
    constructor(httpStatus) {
        this.httpStatus = httpStatus;
    }
    isLoggedIn() {
        return this.httpStatus === 200;
    }
    isNarrowed() {
        return this.isLoggedIn() && this.narrowedScope;
    }
    invalidResponse() {
        return this.httpStatus === 0;
    }
    isAuthenticated() {
        return this.isLoggedIn() && !this.isNarrowed() && !this.invalidResponse();
    }
    isMaster() {
        return !isEmpty(this.role) && includes(LoginDetailsConstants.MASTER_ROLES, this.role);
    }
    isChild() {
        return !isEmpty(this.role) && includes(LoginDetailsConstants.CHILD_ROLES, this.role);
    }
    isMember() {
        return !isEmpty(this.role) && this.role.toUpperCase().includes(LoginDetailsConstants.MEMBER_ROLE);
    }
    isContractHolder() {
        return !isEmpty(this.role) && this.role.toUpperCase().includes(LoginDetailsConstants.CONTRACT_HOLDER_ROLE);
    }
    isOrphan() {
        return !isEmpty(this.role) && this.role.toUpperCase().includes(LoginDetailsConstants.ORPHAN_ROLE);
    }
    isNewlyRegisteredUser() {
        return !!isEmpty(this.role) && !isEmpty(this.firstName);
    }
    getName() {
        return this.firstName.concat(LoginDetailsConstants.EMPTY).concat(this.lastName);
    }
    getShortenedName() {
        return this.getName().length <= LoginDetailsConstants.CHARACTER_LIMIT
            ? this.getName()
            : this.getName()
                .substring(0, LoginDetailsConstants.CHARACTER_LIMIT - LoginDetailsConstants.SUFFIX.length)
                .concat(LoginDetailsConstants.SUFFIX);
    }
    isCafeUser() {
        return this.bssSystem === LoginDetailsConstants.BSS_SYSTEM_TELENET_LEGACY;
    }
    isBaseLegacyCustomer() {
        return this.bssSystem === LoginDetailsConstants.BSS_SYSTEM_BASE_LEGACY;
    }
    isBssSystemNetcracker() {
        return this.bssSystem === LoginDetailsConstants.BSS_SYSTEM_NETCRACKER;
    }
    hasScope(scopeName) {
        return some(this.scopes, function (scope) {
            return scope.toUpperCase() === scopeName.toUpperCase();
        });
    }
    isFleetManager() {
        return !isEmpty(this.role) && this.role === LoginDetailsConstants.FLEET_MANAGER_ROLE;
    }
    isFleetUser() {
        return !isEmpty(this.role) && this.role === LoginDetailsConstants.FLEET_USER_ROLE;
    }
    isManager() {
        return !isEmpty(this.role) && this.role === LoginDetailsConstants.MANAGER_ROLE;
    }
    hasManagerRole() {
        return !isEmpty(this.role) && LoginDetailsConstants.MANAGER_ROLES.includes(this.role);
    }
    enrich(loginDetailsJSON) {
        let enrichedLoginDetails = new LoginDetails(401);
        if (!isEmpty(loginDetailsJSON)) {
            enrichedLoginDetails = merge(enrichedLoginDetails, loginDetailsJSON);
        }
        return enrichedLoginDetails;
    }
    isNotLoggedInOrDoesNotHaveScope(scope) {
        return !this.isLoggedIn() || !this.hasScope(scope);
    }
    get isSuccess() {
        return this.httpStatus === 200;
    }
    // useless setter but needed to avoid 'cannot set property on [object Object] which only has getter
    set isSuccess(success) {
        if (success) {
            this.httpStatus = 200;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,