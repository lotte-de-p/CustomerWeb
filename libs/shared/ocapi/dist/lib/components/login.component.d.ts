import { EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { LoginDetails } from '../models';
import { LoginStatusEnum } from '../enums';
import { LoginService, UserDetailsService } from '../services';
import { ConfigService } from '@telenet/ng-lib-config';
import { LanguageService, PathCategorisationService, UrlService } from '@telenet/ng-lib-page';
import { DataLayerService } from '@telenet/ng-lib-datalayer';
import { CookieService } from 'ngx-cookie-service';
import * as i0 from "@angular/core";
export declare class LoginComponent implements OnInit, OnDestroy {
    readonly window: Window;
    private readonly loginService;
    private readonly userDetailsService;
    private readonly configService;
    private readonly urlService;
    private readonly pathCategorisationService;
    private readonly languageService;
    private readonly dataLayerService;
    private readonly cookieService;
    scopes: string[];
    messageGroupName: string;
    autoRedirect: boolean;
    styleHint: string;
    mode: string;
    registrationUrl: string;
    showItsMeRegistrationOption: boolean;
    hasInstallableProductType: boolean;
    renderOnlyForOriginCustomer: boolean;
    componentCanRender: EventEmitter<LoginDetails>;
    loginDetails: LoginDetails;
    show: boolean;
    loginEnum: typeof LoginStatusEnum;
    brand: string;
    source: string;
    action: string;
    private readonly destroy$;
    constructor(window: Window, loginService: LoginService, userDetailsService: UserDetailsService, configService: ConfigService, urlService: UrlService, pathCategorisationService: PathCategorisationService, languageService: LanguageService, dataLayerService: DataLayerService, cookieService: CookieService);
    ngOnInit(): void;
    isLoggedIn(): boolean;
    private canRenderComponentForLoggedInUser;
    getLoginStatus(): LoginStatusEnum;
    login(force?: boolean): void;
    isNarrowed(): boolean;
    showRegistrationOptions(): boolean;
    register(idp: string): void;
    private initSource;
    private hasRequiredScopes;
    private forceRedirect;
    private redirectToRegistrationURL;
    private cleanCookies;
    private initCookies;
    private addCookie;
    private getCookie;
    private redirectToInternalRegistrationURL;
    private redirectToItsMePortal;
    private getItsMeRegisterUrl;
    private getRedirectURI;
    private getCustomerRegistrationURL;
    private pushEventDataToAnalytics;
    private buildCommonEventAttributes;
    private sendPageStepData;
    private registerBasedOnAction;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<LoginComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<LoginComponent, "tg-login", never, { "scopes": { "alias": "scopes"; "required": false; }; "messageGroupName": { "alias": "messageGroupName"; "required": false; }; "autoRedirect": { "alias": "autoRedirect"; "required": false; }; "styleHint": { "alias": "styleHint"; "required": false; }; "mode": { "alias": "mode"; "required": false; }; "registrationUrl": { "alias": "registrationUrl"; "required": false; }; "showItsMeRegistrationOption": { "alias": "showItsMeRegistrationOption"; "required": false; }; "hasInstallableProductType": { "alias": "hasInstallableProductType"; "required": false; }; "renderOnlyForOriginCustomer": { "alias": "renderOnlyForOriginCustomer"; "required": false; }; }, { "componentCanRender": "componentCanRender"; }, never, ["*"], false, never>;
}
//# sourceMappingURL=login.component.d.ts.map