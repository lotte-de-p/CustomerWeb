{"version":3,"names":["SLIDER_TYPES","single","range","SLIDER_DIRECTIONS","from","to","rangeSliderBaseCss","WinkRangeSliderBaseStyle0","rangeSliderTelenetCss","WinkRangeSliderTelenetStyle0","RangeSlider","internals","showFromValue","this","bottomValue","showToValue","value","getDragValue","componentWillRender","checkForErrors","handleValueChanged","event","slider","parseFloat","detail","updateValue","handleValueSlider","inputElement","target","minValue","maxValue","invertValues","tempValue","calculateTooltipPosition","newValue","Number","newPosition","calculateBackground","lowTopValue","highTopValue","lowValue","highValue","sliderLength","toPercentage","Math","round","step","sliderType","fromPercentage","renderSpecific","fromValueProps","bottomValueError","error","toValueProps","topValueError","h","class","type","inputId","sliderId","name","label","toString","isRequired","onValueChanged","errorMessage","undefined","render","key","helper","showValues","showInput","style","left","background","min","max","onInput","message"],"sources":["../core/src/components/_form-components/range-slider/models/range-slider.types.tsx","../core/src/components/_form-components/range-slider/styles/brands/range-slider.base.scss?tag=wink-range-slider&mode=base&encapsulation=scoped","../core/src/components/_form-components/range-slider/styles/brands/range-slider.telenet.scss?tag=wink-range-slider&mode=telenet&encapsulation=scoped","../core/src/components/_form-components/range-slider/range-slider.tsx"],"sourcesContent":["export const SLIDER_TYPES = {\n  single: 'single',\n  range: 'range',\n} as const;\nexport type SliderType = (typeof SLIDER_TYPES)[keyof typeof SLIDER_TYPES];\n\nexport const SLIDER_DIRECTIONS = {\n  from: 'from',\n  to: 'to',\n} as const;\nexport type SliderDirections = (typeof SLIDER_DIRECTIONS)[keyof typeof SLIDER_DIRECTIONS];\n","@import '../vars/vars.base';\n@import '../range-slider.default';\n","@import '../vars/vars.telenet';\n@import '../range-slider.default';\n","import { AttachInternals, Component, h, Method, Prop, State } from '@stencil/core';\nimport { SliderType, SLIDER_TYPES, SliderDirections, SLIDER_DIRECTIONS } from './models/range-slider.types';\n\n@Component({\n  tag: 'wink-range-slider',\n  styleUrls: {\n    telenet: 'styles/brands/range-slider.telenet.scss',\n    base: 'styles/brands/range-slider.base.scss',\n  },\n  scoped: true,\n})\nexport class RangeSlider {\n  @AttachInternals() internals!: ElementInternals;\n\n  @Prop() sliderId = '';\n  @Prop() label = '';\n  @Prop() helper = '';\n  @Prop() minValue = 0;\n  @Prop() maxValue = 100;\n  @Prop() step = 1;\n  @Prop() showValues = false;\n  @Prop() showInput = false;\n  @Prop() errorMessage = '';\n  @Prop() sliderType: SliderType = SLIDER_TYPES.range;\n  @Prop({ mutable: true, reflect: true }) bottomValue = 0;\n  @Prop({ mutable: true, reflect: true }) value = 100;\n\n  @State() topValueError?: string;\n  @State() bottomValueError?: string;\n\n  @Method()\n  async showFromValue() {\n    return this.bottomValue;\n  }\n\n  @Method()\n  async showToValue() {\n    return this.value;\n  }\n\n  @Method()\n  async getDragValue() {\n    return this.value;\n  }\n\n  componentWillRender() {\n    this.checkForErrors();\n  }\n\n  private handleValueChanged(event: CustomEvent<string>, slider: SliderDirections) {\n    const value = parseFloat(event.detail);\n    this.updateValue(value, slider);\n  }\n\n  private handleValueSlider(event: Event, slider: SliderDirections) {\n    const inputElement = event.target as HTMLInputElement;\n    if (inputElement) {\n      const value = parseFloat(inputElement.value);\n      this.updateValue(value, slider);\n    }\n  }\n\n  private updateValue(value: number, slider: SliderDirections) {\n    if (slider === SLIDER_DIRECTIONS.from) {\n      this.bottomValue = value;\n    }\n\n    if (slider === SLIDER_DIRECTIONS.to) {\n      this.value = value;\n    }\n\n    if (value < this.minValue) {\n      slider === SLIDER_DIRECTIONS.from ? (this.bottomValue = this.minValue) : (this.value = this.minValue);\n    }\n\n    if (value > this.maxValue) {\n      this.value = this.maxValue;\n    }\n\n    if (this.bottomValue > this.value) {\n      this.invertValues();\n    }\n  }\n\n  private invertValues() {\n    const tempValue = this.bottomValue;\n    this.bottomValue = this.value;\n    this.value = tempValue;\n  }\n\n  private calculateTooltipPosition(value: number) {\n    const newValue = Number(((value - this.minValue) * 100) / (this.maxValue - this.minValue));\n    const newPosition = 10 - newValue * 0.2;\n\n    if (newValue < 0) {\n      return '3%';\n    }\n\n    if (newValue > 100) {\n      return '97%';\n    }\n\n    return `calc(${newValue}% + (${newPosition}px))`;\n  }\n\n  private calculateBackground() {\n    const lowTopValue = this.minValue || 0;\n    const highTopValue = this.maxValue || 100;\n    const lowValue = this.bottomValue || lowTopValue;\n    const highValue = this.value || highTopValue;\n\n    const sliderLength = highTopValue - lowTopValue;\n    const toPercentage = Math.round((((highValue - lowTopValue) / sliderLength) * 100) / this.step) * this.step;\n\n    if (this.sliderType === SLIDER_TYPES.single) {\n      return `linear-gradient(to right, var(--semantic-color-background-surface-action-default) ${toPercentage}%, var(--semantic-color-background-surface-bold-hovered) ${toPercentage}%)`;\n    }\n\n    const fromPercentage = Math.round((((lowValue - lowTopValue) / sliderLength) * 100) / this.step) * this.step;\n    return `linear-gradient(to right, var(--semantic-color-background-surface-bold-hovered) ${fromPercentage}% , var(--semantic-color-background-surface-action-default) ${fromPercentage}% , var(--semantic-color-background-surface-action-default) ${toPercentage}%, var(--semantic-color-background-surface-bold-hovered) ${toPercentage}%)`;\n  }\n\n  private renderSpecific() {\n    const fromValueProps = this.bottomValueError ? { error: this.bottomValueError } : {};\n    const toValueProps =\n      this.topValueError && this.sliderType === SLIDER_TYPES.range ? { error: this.topValueError } : {};\n\n    return (\n      <div class=\"slider-specific\">\n        {this.sliderType === SLIDER_TYPES.range && (\n          <wink-input\n            class=\"slider-specific-from\"\n            type=\"number\"\n            inputId={this.sliderId + 'from-value'}\n            name=\"fromValue\"\n            label=\"From\"\n            value={this.bottomValue.toString()}\n            min-value={this.minValue}\n            max-value={this.maxValue}\n            step={this.step}\n            isRequired\n            {...fromValueProps}\n            onValueChanged={(event) => this.handleValueChanged(event, SLIDER_DIRECTIONS.from)}></wink-input>\n        )}\n        <wink-input\n          class=\"slider-specific-to\"\n          type=\"number\"\n          inputId={this.sliderId + 'to-value'}\n          name=\"toValue\"\n          label={this.sliderType === SLIDER_TYPES.range ? 'To' : ''}\n          value={this.value.toString()}\n          min-value={this.minValue}\n          max-value={this.maxValue}\n          step={this.step}\n          isRequired\n          {...toValueProps}\n          onValueChanged={(event) => this.handleValueChanged(event, SLIDER_DIRECTIONS.to)}></wink-input>\n      </div>\n    );\n  }\n\n  private checkForErrors() {\n    if ((!this.bottomValue && this.bottomValue !== 0) || this.bottomValue % this.step !== 0) {\n      this.bottomValueError = this.errorMessage;\n    } else {\n      this.bottomValueError = undefined;\n    }\n    if ((!this.value && this.value !== 0) || this.value % this.step !== 0) {\n      this.topValueError = this.errorMessage;\n    } else {\n      this.topValueError = undefined;\n    }\n  }\n\n  render() {\n    return (\n      <label class={`slider-container slider-container-${this.sliderType}`}>\n        <wink-form-label label={this.label} helper={this.helper}></wink-form-label>\n        <div class=\"slider-wrapper\">\n          {this.showValues && <span>{this.minValue}</span>}\n          <div class=\"slider-controls\">\n            <div class={`slider-tooltip-wrapper ${!this.showInput ? 'slider-tooltip-shown' : ''}`}>\n              {this.sliderType === SLIDER_TYPES.range && (\n                <div style={{ left: this.calculateTooltipPosition(this.bottomValue) }} class=\"slider-tooltip\">\n                  {this.bottomValue}\n                </div>\n              )}\n              <div style={{ left: this.calculateTooltipPosition(this.value) }} class=\"slider-tooltip\">\n                {this.value}\n              </div>\n            </div>\n            <div style={{ background: this.calculateBackground() }} class=\"slider-track\"></div>\n            {this.sliderType === SLIDER_TYPES.range && (\n              <input\n                class=\"slider slider-from\"\n                type=\"range\"\n                value={this.bottomValue}\n                min={this.minValue}\n                max={this.maxValue}\n                step={this.step}\n                onInput={(event: Event) => this.handleValueSlider(event, SLIDER_DIRECTIONS.from)}\n              />\n            )}\n            <input\n              class=\"slider slider-to\"\n              type=\"range\"\n              value={this.value}\n              min={this.minValue}\n              max={this.maxValue}\n              step={this.step}\n              onInput={(event: Event) => this.handleValueSlider(event, SLIDER_DIRECTIONS.to)}\n            />\n          </div>\n          {this.showValues && <span>{this.maxValue}</span>}\n          {this.sliderType === SLIDER_TYPES.single && this.showInput && this.renderSpecific()}\n        </div>\n        {this.sliderType === SLIDER_TYPES.range && this.showInput && this.renderSpecific()}\n        {this.topValueError && this.sliderType === SLIDER_TYPES.single && (\n          <wink-validation-message message={this.topValueError} type=\"error\" />\n        )}\n      </label>\n    );\n  }\n}\n"],"mappings":"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"}