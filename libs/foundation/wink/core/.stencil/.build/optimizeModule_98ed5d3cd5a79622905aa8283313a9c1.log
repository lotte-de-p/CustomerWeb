let t;const o=new Uint8Array(16);function r(){if(!t){t=typeof crypto!=="undefined"&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto);if(!t){throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported")}}return t(o)}const n=[];for(let t=0;t<256;++t){n.push((t+256).toString(16).slice(1))}function e(t,o=0){return n[t[o+0]]+n[t[o+1]]+n[t[o+2]]+n[t[o+3]]+"-"+n[t[o+4]]+n[t[o+5]]+"-"+n[t[o+6]]+n[t[o+7]]+"-"+n[t[o+8]]+n[t[o+9]]+"-"+n[t[o+10]]+n[t[o+11]]+n[t[o+12]]+n[t[o+13]]+n[t[o+14]]+n[t[o+15]]}const c=typeof crypto!=="undefined"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto);const u={randomUUID:c};function p(t,o,n){if(u.randomUUID&&!o&&!t){return u.randomUUID()}t=t||{};const c=t.random||(t.rng||r)();c[6]=c[6]&15|64;c[8]=c[8]&63|128;if(o){n=n||0;for(let t=0;t<16;++t){o[n+t]=c[t]}return o}return e(c)}const f=()=>p();export{f as U};