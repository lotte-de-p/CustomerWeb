@mixin spacing-iconButton {
  display: flex;
  align-items: center;
  gap: var-rem(--semantic-spacing-xs);
}
:host {
  display: inline-block;

  .button,
  a.button,
  button.button,
  input.button {
    @include user-select-none;
    display: inline-flex;
    justify-content: center;
    align-items: center;
    vertical-align: middle;
    text-decoration: none;
    text-align: center;
    white-space: nowrap;
    box-sizing: border-box;
    border: 0 solid transparent;
    &:hover {
      cursor: pointer;
      text-decoration: none;
    }

    &:focus {
      text-decoration: none;
    }
    wink-icon,
    ::part(icon) {
      font-weight: normal;
      line-height: unset;
      padding: 0;
    }

    &.primary {
      color: var(--semantic-color-text-on-action);
      background-color: var(--semantic-color-background-surface-action-default);
      padding: var-rem(--semantic-spacing-sm) var-rem(--semantic-spacing-lg);
      border-radius: var-rem(--semantic-radius-sm);
      ::part(icon) {
        color: var(--semantic-color-icon-on-brand);
      }
      &:hover {
        color: var(--semantic-color-text-on-action);
        background-color: var(--semantic-color-background-surface-action-hover);
      }

      &:active {
        color: var(--semantic-color-text-on-action);
        background-color: var(--semantic-color-background-surface-action-active);
      }

      &:focus,
      &:focus-visible {
        @include state-focus-outline;
      }
    }

    &.secondary {
      color: var(--semantic-color-text-default);
      background-color: transparent;
      padding: var-rem(--semantic-spacing-sm) var-rem(--semantic-spacing-lg);
      border-radius: var-rem(--semantic-radius-sm);
      box-shadow: inset 0 0 0 rem(0.2) var(--semantic-color-border-button-default);
      ::part(icon) i {
        color: var(--semantic-color-icon-default);
      }
      &:hover {
        color: var(--semantic-color-text-default);
        background-color: transparent;
        box-shadow: inset 0 0 0 rem(0.3) var(--semantic-color-border-highlight);
      }

      &:active {
        color: var(--semantic-color-text-default);
        background-color: transparent;
        box-shadow: inset 0 0 0 rem(0.1) var(--semantic-color-border-highlight);
      }
      &:focus,
      &:focus-visible {
        @include state-focus-outline;
      }
    }
    $button-icon-size: rem(3.2);
    $button-icon-size-sm: rem(2.8);

    --wink-icon-button-padding: var(--semantic-spacing-sm);
    --wink-icon-button-padding-sm: var(--semantic-spacing-xs);

    @include media('from-lg') {
      --wink-icon-button-padding: 1.4;
      --wink-icon-button-padding-sm: 1;
    }

    &.tertiary {
      position: relative;
      left: 0;
      color: var(--semantic-color-text-default);
      background-color: transparent;
      padding: 0 0 var-rem(--semantic-spacing-3xs);
      border-radius: var-rem(--semantic-radius-sm);
      ::part(icon) i {
        color: var(--semantic-color-icon-default);
      }
      &::before,
      &::after {
        content: ' ';
        display: inline-block;
        height: rem(0.2);
        position: absolute;
        left: 0;
        bottom: 0;
      }
      &::before {
        background-color: var(--semantic-color-border-button-underline);
        width: 100%;
      }
      &::after {
        background-color: var(--semantic-color-border-highlight);
        width: 0;
        transition: all 500ms cubic-bezier(0.23, 1, 0.32, 1);
      }
      &.icon-left::before,
      &.icon-left::after {
        left: $button-icon-size;
      }
      &.icon-right::before,
      &.icon-left::before {
        width: calc(100% - $button-icon-size);
      }
      &:hover {
        &::after {
          width: 100%;
        }
        &.icon-right::after,
        &.icon-left::after {
          width: calc(100% - $button-icon-size);
        }
      }

      &:active {
        color: var(--semantic-color-text-subtlest);
        &::after {
          background-color: var(--semantic-color-text-subtlest);
        }
        ::part(icon) {
          color: var(--semantic-color-text-subtlest);
        }
      }
      &:focus,
      &:focus-visible {
        @include state-focus-outline;
      }
    }

    &.icon-button {
      padding: var-rem(--wink-icon-button-padding);
      &.tertiary::before,
      &.tertiary:hover::after {
        width: 0;
      }
      &.tertiary:hover {
        ::part(icon)::before {
          position: relative;
          top: rem(-0.1);
        }
      }
    }

    &.size-sm {
      &.primary {
        padding: var-rem(--semantic-spacing-2xs) var-rem(--semantic-spacing-sm);
      }

      &.secondary {
        padding: var-rem(--semantic-spacing-2xs) var-rem(--semantic-spacing-sm);
      }

      &.tertiary {
        &.icon-left::before,
        &.icon-left::after {
          left: $button-icon-size-sm;
        }
        &.icon-right::before,
        &.icon-left::before {
          width: calc(100% - $button-icon-size-sm);
        }
        &.icon-button::before {
          width: 0;
        }
        &:hover {
          &.icon-right.size-sm::after,
          &.icon-left.size-sm::after {
            width: calc(100% - $button-icon-size-sm);
          }
          &.icon-button.size-sm::after {
            width: 0;
          }
        }
      }
      &.icon-button {
        padding: var-rem(--wink-icon-button-padding-sm);
        ::part(icon)::before {
          position: relative;
          top: rem(-0.2);
        }
        &.tertiary {
          &:hover {
            ::part(icon)::before {
              top: rem(-0.5);
            }
          }
        }
      }
    }

    &.state-disable,
    &:disabled {
      opacity: 0.4;
      pointer-events: none;
    }

    &.state-loading {
      @include spacing-iconButton;
      pointer-events: none;
      opacity: 0.4;

      .animation {
        height: var-rem(--semantic-icon-md);
        width: var-rem(--semantic-icon-md);
      }

      &.size-sm .animation {
        height: var-rem(--semantic-icon-sm);
        width: var-rem(--semantic-icon-sm);
      }

      &.tertiary::before,
      &.tertiary::after {
        content: unset;
      }
    }

    &.icon-left,
    &.icon-right {
      @include spacing-iconButton;
    }

    &.icon-right {
      flex-direction: row-reverse;
    }
  }
}

:host([status='loading']) {
  cursor: not-allowed;
}
:host([status='disable']) {
  cursor: not-allowed;
}

:host([width='full']) {
  display: block;
  width: 100%;

  .button {
    width: 100%;
  }
}
