{"version":3,"file":"animation.stories.js","sourceRoot":"","sources":["../../../../../../../../src/components/animation/animation.stories.tsx"],"names":[],"mappings":"AACA,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,UAAU,CAAC;AACzC,OAAO,EAAE,MAAM,EAAE,MAAM,cAAc,CAAC;AAEtC,eAAe;IACb,KAAK,EAAE,sBAAsB;IAC7B,SAAS,EAAE,WAAW;IACtB,UAAU,EAAE;QACV,MAAM,EAAE,CAAC,MAAM,CAAC,UAAU,CAAC;KAC5B;IACD,QAAQ,EAAE;QACR,GAAG,EAAE;YACH,WAAW,EAAE,iEAAiE;YAC9E,IAAI,EAAE;gBACJ,IAAI,EAAE,QAAQ;gBACd,QAAQ,EAAE,IAAI;aACf;SACF;QACD,KAAK,EAAE;YACL,OAAO,EAAE;gBACP,IAAI,EAAE,QAAQ;gBACd,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,GAAG;gBACR,IAAI,EAAE,CAAC;aACR;YACD,WAAW,EACT,oIAAoI;SACvI;QACD,QAAQ,EAAE;YACR,OAAO,EAAE,SAAS;YAClB,WAAW,EAAE,kGAAkG;SAChH;QACD,QAAQ,EAAE;YACR,OAAO,EAAE,SAAS;YAClB,WAAW,EACT,4IAA4I;SAC/I;QACD,WAAW,EAAE;YACX,OAAO,EAAE,SAAS;YAClB,WAAW,EAAE,oFAAoF;SAClG;KACF;IACD,IAAI,EAAE;QACJ,GAAG,EAAE,0CAA0C;QAC/C,KAAK,EAAE,CAAC;QACR,QAAQ,EAAE,IAAI;QACd,QAAQ,EAAE,IAAI;QACd,WAAW,EAAE,KAAK;KACnB;IACD,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE,CACf,IAAI,CAAA;;aAEK,IAAI,CAAC,GAAG;eACN,IAAI,CAAC,KAAK,IAAI,OAAO;mBACjB,IAAI,CAAC,QAAQ;mBACb,IAAI,CAAC,QAAQ;wBACR,IAAI,CAAC,WAAW;sBAClB;CACb,CAAC;AAEV,MAAM,CAAC,MAAM,OAAO,GAAG,EAAE,CAAC","sourcesContent":["import { Meta } from '@storybook/web-components';\nimport { html, nothing } from 'lit-html';\nimport { BADGES } from '../../models';\n\nexport default {\n  title: 'COMPONENTS/Animation',\n  component: 'Animation',\n  parameters: {\n    badges: [BADGES.inProgress],\n  },\n  argTypes: {\n    src: {\n      description: 'The src attribute selects the lottie json file to be displayed.',\n      type: {\n        name: 'string',\n        required: true,\n      },\n    },\n    count: {\n      control: {\n        type: 'number',\n        min: 0,\n        max: 100,\n        step: 1,\n      },\n      description:\n        'The count property specifies the number of times the animation will loop, if this value is 0 the animation will loop indefinitely.',\n    },\n    controls: {\n      control: 'boolean',\n      description: 'The controls property specifies if the controls to play and pause the animation should be shown.',\n    },\n    autoplay: {\n      control: 'boolean',\n      description:\n        'The autoplay property specifies if the animation should start automatically, this will always be set to true when the controls are hidden.',\n    },\n    clickToPlay: {\n      control: 'boolean',\n      description: 'The clickToPlay property specifies if the animation should be played when clicked.',\n    },\n  },\n  args: {\n    src: '/assets/shared/animations/wink-logo.json',\n    count: 0,\n    controls: true,\n    autoplay: true,\n    clickToPlay: false,\n  },\n  render: (args) =>\n    html`<wink-animation\n      style=\"width: 40rem; height: 40rem\"\n      src=\"${args.src}\"\n      count=\"${args.count || nothing}\"\n      ?controls=\"${args.controls}\"\n      ?autoplay=\"${args.autoplay}\"\n      ?click-to-play=\"${args.clickToPlay}\">\n    </wink-animation>`,\n} as Meta;\n\nexport const Default = {};\n"]}