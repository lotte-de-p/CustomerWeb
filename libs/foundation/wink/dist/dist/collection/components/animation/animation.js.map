{"version":3,"file":"animation.js","sourceRoot":"","sources":["../../../../../../../../src/components/animation/animation.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, h, Host, Prop, State, Element, Watch, Method } from '@stencil/core';\nimport { ANIMATION_STATES } from './models/animation.types';\nimport lottie, { AnimationItem } from 'lottie-web';\n\n@Component({\n  tag: 'wink-animation',\n  styleUrls: {\n    telenet: 'styles/brands/animation.telenet.scss',\n    base: 'styles/brands/animation.base.scss',\n  },\n  shadow: true,\n})\nexport class Animation {\n  @Element() host!: HTMLWinkAnimationElement;\n\n  @Prop() src = '';\n  @Prop() count = 0;\n  @Prop({ reflect: true, mutable: true }) autoplay = false;\n  @Prop({ reflect: true }) controls = false;\n  @Prop() clickToPlay = false;\n\n  @State() lottie: AnimationItem = {} as AnimationItem;\n  @State() status: string = ANIMATION_STATES.play;\n  @State() loaded = false;\n\n  @Watch('src')\n  @Watch('count')\n  @Watch('autoplay')\n  @Watch('controls')\n  watchPropHandler(newValue: boolean, oldValue: boolean) {\n    if (newValue !== oldValue && this.loaded) {\n      this.loadAnimation();\n    }\n  }\n\n  @Method()\n  async toggleAnimation() {\n    if (this.status === ANIMATION_STATES.stop || this.status === ANIMATION_STATES.pauze) {\n      this.play();\n      this.autoplay = true;\n    } else {\n      this.pause();\n    }\n  }\n\n  componentDidLoad() {\n    this.loadAnimation();\n\n    if (!this.autoplay) {\n      this.pause();\n    }\n  }\n\n  private loadAnimation() {\n    const container = this.host.shadowRoot?.querySelector('.animation-wrapper');\n    if (container) {\n      if (this.lottie.isLoaded) {\n        this.lottie?.destroy();\n      }\n      container.innerHTML = '';\n\n      this.lottie = lottie.loadAnimation({\n        container: container,\n        renderer: 'svg',\n        loop: this.count > 0 ? this.count : true,\n        autoplay: this.autoplay,\n        path: this.src,\n      });\n\n      this.loaded = true;\n    }\n\n    if (this.autoplay) {\n      this.play();\n      this.status = ANIMATION_STATES.play;\n    }\n\n    this.lottie.addEventListener('complete', () => {\n      this.status = ANIMATION_STATES.stop;\n    });\n  }\n\n  private play() {\n    if (this.status === ANIMATION_STATES.stop) {\n      this.lottie.goToAndPlay(0);\n    } else {\n      this.lottie.play();\n    }\n\n    this.status = ANIMATION_STATES.play;\n  }\n\n  private pause() {\n    this.status = ANIMATION_STATES.pauze;\n    this.lottie.pause();\n  }\n\n  private stop() {\n    this.status = ANIMATION_STATES.stop;\n    this.lottie.stop();\n  }\n\n  private toggleAnimationOnClick() {\n    if (!this.clickToPlay) return;\n    if (this.status === ANIMATION_STATES.stop || this.status === ANIMATION_STATES.pauze) {\n      this.play();\n    } else {\n      this.pause();\n    }\n  }\n\n  private renderControls() {\n    return (\n      <div class=\"controls\">\n        {this.lottie.isPaused ? (\n          <wink-button\n            element=\"button\"\n            type=\"button\"\n            appearance=\"primary\"\n            size=\"sm\"\n            icon=\"play\"\n            onClick={this.play.bind(this)}></wink-button>\n        ) : (\n          <wink-button\n            element=\"button\"\n            type=\"button\"\n            appearance=\"primary\"\n            size=\"sm\"\n            icon=\"pause\"\n            onClick={this.pause.bind(this)}></wink-button>\n        )}\n\n        <wink-button\n          element=\"button\"\n          type=\"button\"\n          appearance=\"primary\"\n          size=\"sm\"\n          icon=\"stop\"\n          onClick={this.stop.bind(this)}></wink-button>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <Host>\n        <div onClick={() => this.toggleAnimationOnClick()} class=\"animation-wrapper\" data-status={this.status}></div>\n        {this.lottie && this.controls && this.renderControls()}\n      </Host>\n    );\n  }\n}\n"]}