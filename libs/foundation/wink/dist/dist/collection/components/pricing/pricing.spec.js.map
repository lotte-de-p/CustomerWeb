{"version":3,"file":"pricing.spec.js","sourceRoot":"","sources":["../../../../../../../../src/components/pricing/pricing.spec.tsx"],"names":[],"mappings":"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","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { Pricing } from './pricing';\n\ndescribe('wink-pricing', () => {\n  it('should render the no price element wink-pricing', async () => {\n    const page = await newSpecPage({\n      components: [Pricing],\n      html: `<wink-pricing></wink-pricing>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <wink-pricing  type=\"product price\">\n        <mock:shadow-root>\n        </mock:shadow-root>\n      </wink-pricing>\n    `);\n  });\n\n  it('should render the no price element wink-pricing if value is set to empty string', async () => {\n    const page = await newSpecPage({\n      components: [Pricing],\n      html: `<wink-pricing price=\"\"></wink-pricing>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <wink-pricing price=\"\"  type=\"product price\">\n        <mock:shadow-root>\n        </mock:shadow-root>\n      </wink-pricing>\n    `);\n  });\n\n  it('should render the element wink-pricing with a decimal-price ', async () => {\n    const page = await newSpecPage({\n      components: [Pricing],\n      html: `<wink-pricing appearance=\"text\" price=\"65.95\"></wink-pricing>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n         <wink-pricing type=\"product price\" price=\"65.95\" appearance=\"text\"  >\n            <mock:shadow-root>\n            <div class=\"pricing__current-price-wrapper\">\n               <div class=\"pricing__price-value-wrapper\">\n                  <span class=\"sr-only\">\n                     Huidige prijs\n                  </span>\n                  <i class=\"price__price-currency\">€</i>\n                  <span class=\"price__price-value\">65\n                     <span class=\"price__price-decimal\">,95</span>\n                  </span>\n               </div>\n            </div>\n            </mock:shadow-root>\n         </wink-pricing>\n    `);\n  });\n\n  it('should render the element wink-pricing without a decimal-price if no decimal given', async () => {\n    const page = await newSpecPage({\n      components: [Pricing],\n      html: `<wink-pricing appearance=\"text\" price=\"65\"></wink-pricing>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n         <wink-pricing type=\"product price\" price=\"65\" appearance=\"text\"  >\n            <mock:shadow-root>\n            <div class=\"pricing__current-price-wrapper\">\n               <div class=\"pricing__price-value-wrapper\">\n                  <span class=\"sr-only\">\n                     Huidige prijs\n                  </span>\n                  <i class=\"price__price-currency\">€</i>\n                  <span class=\"price__price-value\">65</span>\n               </div>\n            </div>\n            </mock:shadow-root>\n         </wink-pricing>\n    `);\n  });\n  it('should render the element wink-pricing correct based on annotation fr', async () => {\n    const page = await newSpecPage({\n      components: [Pricing],\n      html: `<wink-pricing appearance=\"text\" price=\"65.95\" annotation=\"FR\"></wink-pricing>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n         <wink-pricing type=\"product price\" price=\"65.95\" appearance=\"text\" annotation=\"FR\" >\n            <mock:shadow-root>\n            <div class=\"pricing__current-price-wrapper\">\n               <div class=\"pricing__price-value-wrapper currency-after\">\n                  <span class=\"sr-only\">\n                     Prix Maintenant\n                  </span>\n                  <i class=\"price__price-currency\">€</i>\n                  <span class=\"price__price-value\">65\n                     <span class=\"price__price-decimal\">,95</span>\n                  </span>\n               </div>\n            </div>\n            </mock:shadow-root>\n         </wink-pricing>\n    `);\n  });\n\n  it('should render the element wink-pricing correct based on annotation en', async () => {\n    const page = await newSpecPage({\n      components: [Pricing],\n      html: `<wink-pricing appearance=\"text\" price=\"65,95\" annotation=\"EN\"></wink-pricing>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n         <wink-pricing type=\"product price\" price=\"65,95\" appearance=\"text\" annotation=\"EN\" >\n            <mock:shadow-root>\n            <div class=\"pricing__current-price-wrapper\">\n               <div class=\"pricing__price-value-wrapper\">\n                  <span class=\"sr-only\">\n                     Current price\n                  </span>\n                  <i class=\"price__price-currency\">€</i>\n                  <span class=\"price__price-value\">65\n                     <span class=\"price__price-decimal\">.95</span>\n                  </span>\n               </div>\n            </div>\n            </mock:shadow-root>\n         </wink-pricing>\n    `);\n  });\n\n  it('should render the promoprice when set', async () => {\n    const page = await newSpecPage({\n      components: [Pricing],\n      html: `<wink-pricing appearance=\"text\" price=\"65,95\" annotation=\"EN\" price-strikethrough=\"59,99\"></wink-pricing>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n         <wink-pricing type=\"product price\" price=\"65,95\" appearance=\"text\" annotation=\"EN\" price-strikethrough=\"59,99\">\n            <mock:shadow-root>\n            <div class=\"pricing__header\">\n            <div class=\"pricing__promo-price\">\n               <span class=\"sr-only\">\n                  Normal price\n               </span>\n               <i class=\"price__price-currency\">€</i>\n               <span class=\"price__price-value\">\n                  59<span class=\"price__price-decimal\"> .99</span>\n               </span>\n            </div>\n            </div>\n            <div class=\"pricing__current-price-wrapper\">\n               <div class=\"pricing__price-value-wrapper\">\n                  <span class=\"sr-only\">\n                     Current price\n                  </span>\n                  <i class=\"price__price-currency\">€</i>\n                  <span class=\"price__price-value\">65\n                     <span class=\"price__price-decimal\">.95</span>\n                  </span>\n               </div>\n            </div>\n            </mock:shadow-root>\n         </wink-pricing>\n    `);\n  });\n\n  it('should render the startlabel when set', async () => {\n    const page = await newSpecPage({\n      components: [Pricing],\n      html: `<wink-pricing appearance=\"text\" price=\"65,95\" starting-from=\"From\"></wink-pricing>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n         <wink-pricing type=\"product price\" price=\"65,95\" appearance=\"text\"  starting-from=\"From\">\n            <mock:shadow-root>\n            <div class=\"pricing__header\">\n               <div class=\"pricing__starting-from\">From</div>\n            </div>\n            <div class=\"pricing__current-price-wrapper\">\n               <div class=\"pricing__price-value-wrapper\">\n                  <span class=\"sr-only\">\n                     Huidige prijs\n                  </span>\n                  <i class=\"price__price-currency\">€</i>\n                  <span class=\"price__price-value\">65\n                     <span class=\"price__price-decimal\">,95</span>\n                  </span>\n               </div>\n            </div>\n            </mock:shadow-root>\n         </wink-pricing>\n    `);\n  });\n\n  it('should render the frequencylabel when set', async () => {\n    const page = await newSpecPage({\n      components: [Pricing],\n      html: `<wink-pricing appearance=\"text\" price=\"65,95\" frequency=\"per month\"></wink-pricing>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n         <wink-pricing type=\"product price\" price=\"65,95\" appearance=\"text\" frequency=\"per month\">\n            <mock:shadow-root>\n            <div class=\"pricing__current-price-wrapper\">\n               <div class=\"pricing__price-value-wrapper\">\n                  <span class=\"sr-only\">\n                     Huidige prijs\n                  </span>\n                  <i class=\"price__price-currency\">€</i>\n                  <span class=\"price__price-value\">65\n                     <span class=\"price__price-decimal\">,95</span>\n                  </span>\n               </div>\n               <div class=\"pricing__price-frequency\">per month</div>\n            </div>\n            </mock:shadow-root>\n         </wink-pricing>\n    `);\n  });\n\n  it('should render the frequencylabel when set', async () => {\n    const page = await newSpecPage({\n      components: [Pricing],\n      html: `<wink-pricing duration=\"During three months\"></wink-pricing>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n         <wink-pricing type=\"product price\" duration=\"During three months\">\n            <mock:shadow-root>\n            <div class=\"pricing__footer\">\n               <div class=\"pricing__price-promo-duration\">During three months</div>\n            </div>\n            </mock:shadow-root>\n         </wink-pricing>\n    `);\n  });\n\n  it('should render the the alignement correct when set', async () => {\n    const page = await newSpecPage({\n      components: [Pricing],\n      html: `<wink-pricing  price=\"65.95\" starting-from=\"From\" alignment=\"center\"></wink-pricing>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n         <wink-pricing type=\"product price\" price=\"65.95\" starting-from=\"From\" alignment=\"center\">\n            <mock:shadow-root>\n            <div class=\"pricing__header price-align__center\">\n               <div class=\"pricing__starting-from\">From</div>\n            </div>\n            <div class=\"pricing__current-price-wrapper price-align__center\">\n               <div class=\"pricing__price-value-wrapper\">\n                  <span class=\"sr-only\">\n                     Huidige prijs\n                  </span>\n                  <i class=\"price__price-currency\">€</i>\n                  <span class=\"price__price-value\">65<span class=\"price__price-decimal\">,95</span></span>\n               </div>\n            </div>\n            </mock:shadow-root>\n         </wink-pricing>\n    `);\n  });\n\n  it('should render the the center align even if left if set on component but type is patch', async () => {\n    const page = await newSpecPage({\n      components: [Pricing],\n      html: `<wink-pricing appearance=\"patch\" price=\"64.95\" starting-from=\"From\" price-strikethrough=\"129,99\" annotation=\"NL\" frequency=\"per month\" duration=\"During three months\" alignment=\"left\"></wink-pricing>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n         <wink-pricing appearance=\"patch\" price=\"64.95\" starting-from=\"From\" price-strikethrough=\"129,99\" annotation=\"NL\" frequency=\"per month\" duration=\"During three months\" alignment=\"left\" type=\"product price\">\n            <mock:shadow-root>\n            <div class=\"pricing__header price-align__center\"><div class=\"pricing__starting-from\">From</div><div class=\"pricing__promo-price\"><span class=\"sr-only\">Normale prijs</span><i class=\"price__price-currency\">€</i><span class=\"price__price-value\">129<span class=\"price__price-decimal\">,99</span></span></div></div>\n            <div class=\"pricing__current-price-wrapper price-align__center\"><div class=\"pricing__price-value-wrapper\"><span class=\"sr-only\">Huidige prijs</span><i class=\"price__price-currency\">€</i><span class=\"price__price-value\">64<span class=\"price__price-decimal\">,95</span></span></div><div class=\"pricing__price-frequency\">per month</div></div>\n            <div class=\"pricing__footer price-align__center\"><div class=\"pricing__price-promo-duration\">During three months</div></div>\n            </mock:shadow-root>\n         </wink-pricing>\n    `);\n  });\n});\n\nit('should render the element wink-pricing without trailing 00', async () => {\n  const page = await newSpecPage({\n    components: [Pricing],\n    html: `<wink-pricing appearance=\"text\" price=\"65,00\"></wink-pricing>`,\n  });\n\n  expect(page.root).toEqualHtml(`\n        <wink-pricing type=\"product price\" price=\"65,00\" appearance=\"text\"  >\n           <mock:shadow-root>\n           <div class=\"pricing__current-price-wrapper\">\n              <div class=\"pricing__price-value-wrapper\">\n                  <span class=\"sr-only\">\n                     Huidige prijs\n                  </span>\n                  <i class=\"price__price-currency\">€</i>\n                  <span class=\"price__price-value\">65</span>\n              </div>\n           </div>\n           </mock:shadow-root>\n        </wink-pricing>\n   `);\n});\n"]}