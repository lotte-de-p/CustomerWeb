{"version":3,"file":"toast.stories.js","sourceRoot":"","sources":["../../../../../../../../../../src/components/toaster/_sub-comps/toast/toast.stories.tsx"],"names":[],"mappings":"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","sourcesContent":["import { html } from 'lit-html';\nimport { BADGES } from '../../../../models';\nimport { ToastType, TOAST_TYPES } from './models/toast.types';\nimport { Target } from '../../../../models/targets.types';\n\nimport * as LinkStory from '../../../link/link.stories';\nconst toastText = 'Toast feedback';\nconst feedback = 'feedback';\n\nexport default {\n  title: 'COMPONENTS/Toast/ToastElement',\n  component: 'Toast',\n  tags: ['hidden'],\n  parameters: {\n    badges: [BADGES.new],\n    layout: 'fullscreen',\n  },\n  argTypes: {\n    text: {\n      control: 'text',\n      description: 'The text property specifies the textual content to be displayed in the toast.',\n      table: {\n        defaultValue: { summary: toastText },\n      },\n      type: { name: 'string', required: true },\n    },\n    appearance: {\n      control: 'inline-radio',\n      options: [TOAST_TYPES.actionable, feedback],\n      description:\n        'The appearance property allows selection from predefined types of toast to display within the user interface.',\n      table: {\n        defaultValue: { summary: TOAST_TYPES.actionable },\n      },\n    },\n    appearanceFeedback: {\n      control: 'inline-radio',\n      options: [TOAST_TYPES.positive, TOAST_TYPES.negative],\n      description:\n        'The appearance property allows selection from predefined types of toast to display within the user interface.',\n      if: { arg: 'appearance', eq: feedback },\n      table: {\n        defaultValue: { summary: TOAST_TYPES.positive },\n      },\n    },\n    duration: {\n      control: {\n        type: 'number',\n        min: 0,\n        max: 12000,\n        step: 100,\n      },\n      description:\n        'The duration property specifies the length of time that the toast should be displayed within the user interface. When setting the duration as 0 the toast will stay open until explicitly closed by the user. This will also not work for the actionable toast type as these should never be auto-dismissed.',\n      if: { arg: 'appearance', eq: feedback },\n      table: {\n        defaultValue: { summary: 6000 },\n      },\n    },\n    href: {\n      ...LinkStory.default.argTypes.href,\n      if: { arg: 'appearance', eq: TOAST_TYPES.actionable },\n    },\n    target: {\n      ...LinkStory.default.argTypes.target,\n      if: { arg: 'appearance', eq: TOAST_TYPES.actionable },\n    },\n    linkText: {\n      ...LinkStory.default.argTypes.slot,\n      if: { arg: 'appearance', eq: TOAST_TYPES.actionable },\n    },\n    isOpen: {\n      control: 'boolean',\n      description: 'The isOpen property, when set to true, indicates that the toast message is visible to the user.',\n      table: {\n        defaultValue: { summary: 'true' },\n      },\n    },\n  },\n  args: {\n    isOpen: true,\n    appearance: TOAST_TYPES.actionable,\n    text: 'Set title/heading text.',\n    linkText: 'Set link text.',\n    href: 'Set link destination.',\n    target: '_self',\n    duration: '0',\n  },\n\n  render: (args: Args, { globals: { brand, theme } }: { globals: { brand: string; theme: string } }) => {\n    if (args.appearance === feedback) {\n      return html`<wink-toast\n        theme=\"${theme}-theme\"\n        current-theme=\"${theme}-theme\"\n        brand=\"${brand}\"\n        is-open\n        appearance=\"${args.appearanceFeedback}\"\n        text=\"${args.text}\"\n        duration=\"${args.duration}\">\n      </wink-toast>`;\n    }\n\n    return html`<wink-toast\n      theme=\"${theme}-theme\"\n      current-theme=\"${theme}-theme\"\n      brand=\"${brand}\"\n      is-open\n      appearance=\"${args.appearance}\"\n      text=\"${args.text}\"\n      href=\"${args.href}\"\n      target=\"${args.target}\"\n      link-text=\"${args.linkText}\">\n    </wink-toast>`;\n  },\n};\n\ntype Args = {\n  isOpen: boolean;\n  appearance: ToastType;\n  appearanceFeedback: ToastType;\n  text: string;\n  duration: number;\n  href: string;\n  target: Target;\n  linkText: string;\n  brand: string;\n};\n\nexport const Default = {\n  args: {\n    isOpen: true,\n    appearance: TOAST_TYPES.actionable,\n    appearanceFeedback: TOAST_TYPES.positive,\n    text: toastText,\n    href: '#',\n    duration: '0',\n    linkText: 'Open Link',\n  },\n};\n\nexport const positive = {\n  args: {\n    isOpen: true,\n    appearance: feedback,\n    appearanceFeedback: TOAST_TYPES.positive,\n    text: toastText,\n    href: '#',\n    duration: 0,\n    linkText: 'Open Link',\n  },\n};\n\nexport const negative = {\n  args: {\n    isOpen: true,\n    appearance: feedback,\n    appearanceFeedback: TOAST_TYPES.positive,\n    text: toastText,\n    href: '#',\n    duration: 0,\n    linkText: 'Open Link',\n  },\n};\n"]}