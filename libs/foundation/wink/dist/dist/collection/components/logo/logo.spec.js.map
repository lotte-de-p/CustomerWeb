{"version":3,"file":"logo.spec.js","sourceRoot":"","sources":["../../../../../../../../src/components/logo/logo.spec.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AACpD,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAE9B,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;IACzB,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;QACpD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,IAAI,CAAC;YAClB,IAAI,EAAE,cAAc;SACrB,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;KAQ7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;QACtE,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,IAAI,CAAC;YAClB,IAAI,EAAE,gCAAgC;SACvC,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;KAO7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2FAA2F,EAAE,KAAK,IAAI,EAAE;QACzG,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,IAAI,CAAC;YAClB,IAAI,EAAE,+DAA+D;SACtE,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;KAO7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qDAAqD,EAAE,KAAK,IAAI,EAAE;QACnE,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,IAAI,CAAC;YAClB,IAAI,EAAE,+EAA+E;SACtF,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;OAS3B,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yFAAyF,EAAE,KAAK,IAAI,EAAE;QACvG,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,IAAI,CAAC;YAClB,IAAI,EAAE,+EAA+E;SACtF,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;OAS3B,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { Logo } from './logo';\n\ndescribe('wink-logo', () => {\n  it('render logo tags with no attributes ', async () => {\n    const page = await newSpecPage({\n      components: [Logo],\n      html: `<wink-logo/>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n        <wink-logo>\n         <mock:shadow-root>\n           <picture>\n               <source media=\"(max-width: 576px)\" srcset=\"/assets/shared/logos/telenet/telenet-yellow.svg\">\n               <img alt=\"logo telenet\" src=\"/assets/shared/logos/telenet/telenet-yellow.svg\">\n           </picture>\n        </mock:shadow-root>\n    `);\n  });\n\n  it('will render another logo based on the appearance prop ', async () => {\n    const page = await newSpecPage({\n      components: [Logo],\n      html: `<wink-logo appearance=\"base\"/>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <wink-logo appearance=\"base\">\n       <mock:shadow-root>\n         <picture>\n             <img alt=\"logo base\" src=\"/assets/shared/logos/base/base.svg\">\n         </picture>\n      </mock:shadow-root>\n    `);\n  });\n\n  it(\"will render the default alt tag when it get 'Inspect element to check' value on alt prop \", async () => {\n    const page = await newSpecPage({\n      components: [Logo],\n      html: `<wink-logo appearance=\"base\" alt=\"Inspect element to check\"/>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <wink-logo appearance=\"base\" alt=\"Inspect element to check\" >\n       <mock:shadow-root>\n         <picture>\n             <img alt=\"logo base\" src=\"/assets/shared/logos/base/base.svg\">\n         </picture>\n      </mock:shadow-root>\n    `);\n  });\n\n  it('will render a clickable logo based on the href prop', async () => {\n    const page = await newSpecPage({\n      components: [Logo],\n      html: `<wink-logo href=\"https://www2.telenet.be/residential/nl\" appearance=\"base\" />`,\n    });\n\n    expect(page.root).toEqualHtml(`\n          <wink-logo href=\"https://www2.telenet.be/residential/nl\" appearance=\"base\" >\n           <mock:shadow-root>\n           <a href=\"https://www2.telenet.be/residential/nl\"  target=\"_self\" >\n              <picture>\n                  <img alt=\"logo base\" src=\"/assets/shared/logos/base/base.svg\">\n              </picture>\n             </a>\n          </mock:shadow-root>\n      `);\n  });\n\n  it('will change the target of link (if the href prop is not empty) based on the target prop', async () => {\n    const page = await newSpecPage({\n      components: [Logo],\n      html: `<wink-logo href=\"https://www2.telenet.be/residential/nl\" appearance=\"base\" />`,\n    });\n\n    expect(page.root).toEqualHtml(`\n          <wink-logo href=\"https://www2.telenet.be/residential/nl\" appearance=\"base\" >\n           <mock:shadow-root>\n           <a href=\"https://www2.telenet.be/residential/nl\"  target=\"_self\" >\n              <picture>\n                  <img alt=\"logo base\" src=\"/assets/shared/logos/base/base.svg\">\n              </picture>\n             </a>\n          </mock:shadow-root>\n      `);\n  });\n});\n"]}