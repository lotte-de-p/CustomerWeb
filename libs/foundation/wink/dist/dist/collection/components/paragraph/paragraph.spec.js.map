{"version":3,"file":"paragraph.spec.js","sourceRoot":"","sources":["../../../../../../../../src/components/paragraph/paragraph.spec.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AACpD,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AAExC,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAC9B,EAAE,CAAC,6CAA6C,EAAE,GAAG,EAAE;QACrD,MAAM,IAAI,GAAG,IAAI,SAAS,EAAE,CAAC;QAE7B,MAAM,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;QACxD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,SAAS,CAAC;YACvB,IAAI,EAAE,mCAAmC;SAC1C,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;KAM7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gEAAgE,EAAE,KAAK,IAAI,EAAE;QAC9E,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,SAAS,CAAC;YACvB,IAAI,EAAE,wDAAwD;SAC/D,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;KAM7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8EAA8E,EAAE,KAAK,IAAI,EAAE;QAC5F,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,SAAS,CAAC;YACvB,IAAI,EAAE,oEAAoE;SAC3E,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;KAM7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { Paragraph } from './paragraph';\n\ndescribe('wink-paragraph', () => {\n  it('Should create an instance of Paragraph comp', () => {\n    const comp = new Paragraph();\n\n    expect(comp).toBeInstanceOf(Paragraph);\n  });\n\n  it('should render the element wink-paragraph', async () => {\n    const page = await newSpecPage({\n      components: [Paragraph],\n      html: `<wink-paragraph></wink-paragraph>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <wink-paragraph class=\"font--body-regular\">\n        <mock:shadow-root>\n        <slot></slot>\n        </mock:shadow-root>\n      </wink-paragraph>\n    `);\n  });\n\n  it('should render the element wink-paragraph of appearance caption', async () => {\n    const page = await newSpecPage({\n      components: [Paragraph],\n      html: `<wink-paragraph appearance=\"caption\"></wink-paragraph>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n    <wink-paragraph class=\"font--caption-regular\" appearance=\"caption\">\n        <mock:shadow-root>\n        <slot></slot>\n        </mock:shadow-root>\n      </wink-paragraph>\n    `);\n  });\n\n  it('should render the element wink-paragraph of appearance caption and size bold', async () => {\n    const page = await newSpecPage({\n      components: [Paragraph],\n      html: `<wink-paragraph appearance=\"caption\" size=\"bold\"></wink-paragraph>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n    <wink-paragraph class=\"font--caption-bold\" appearance=\"caption\" size=\"bold\">\n        <mock:shadow-root>\n        <slot></slot>\n        </mock:shadow-root>\n      </wink-paragraph>\n    `);\n  });\n});\n"]}