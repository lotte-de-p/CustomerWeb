{"version":3,"file":"notification.spec.js","sourceRoot":"","sources":["../../../../../../../../src/components/notification/notification.spec.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AACpD,OAAO,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAC;AAE9C,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;IACjC,IAAI,IAAkB,CAAC;IAEvB,UAAU,CAAC,GAAG,EAAE;QACd,IAAI,GAAG,IAAI,YAAY,EAAE,CAAC;IAC5B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oDAAoD,EAAE,GAAG,EAAE;QAC5D,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC;QAElC,IAAI,CAAC,mBAAmB,CAAC,EAAE,CAAC;QAE5B,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;QACvE,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,YAAY,CAAC;YAC1B,IAAI,EAAE,yCAAyC;SAChD,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;KAY7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;QACvE,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,YAAY,CAAC;YAC1B,IAAI,EAAE,8DAA8D;SACrE,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;KAY7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2DAA2D,EAAE,KAAK,IAAI,EAAE;QACzE,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,YAAY,CAAC;YAC1B,IAAI,EAAE,4DAA4D;SACnE,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;KAY7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6DAA6D,EAAE,KAAK,IAAI,EAAE;QAC3E,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,YAAY,CAAC;YAC1B,IAAI,EAAE,8DAA8D;SACrE,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;KAY7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;QACvE,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,YAAY,CAAC;YAC1B,IAAI,EAAE,yCAAyC;SAChD,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;KAY7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { Notification } from './notification';\n\ndescribe('wink-notification', () => {\n  let comp: Notification;\n\n  beforeEach(() => {\n    comp = new Notification();\n  });\n\n  it('should assign false value to isNotificationVisible', () => {\n    comp.isNotificationVisible = true;\n\n    comp['closeNotification']();\n\n    expect(comp.isNotificationVisible).toBe(false);\n  });\n\n  it('should render the notification component by information', async () => {\n    const page = await newSpecPage({\n      components: [Notification],\n      html: `<wink-notification></wink-notification>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <wink-notification exportparts=\"icon, icon-cross-small, icon-information-shape\">\n        <mock:shadow-root>\n          <div class=\"notification information\">\n            <wink-icon icon=\"information-shape\" size=\"md\"></wink-icon>\n            <div class=\"notification-text\">\n                <slot name=\"heading\"></slot>\n               <slot name=\"content\"></slot>\n            </div>\n          </div>\n        </mock:shadow-root>\n      </wink-notification>\n    `);\n  });\n\n  it('should render the success of the notification component', async () => {\n    const page = await newSpecPage({\n      components: [Notification],\n      html: `<wink-notification appearance=\"success\"></wink-notification>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <wink-notification appearance=\"success\" exportparts=\"icon, icon-cross-small, icon-check-shape\">\n        <mock:shadow-root>\n          <div class=\"notification success\">\n            <wink-icon icon=\"check-shape\" size=\"md\"></wink-icon>\n           <div class=\"notification-text\">\n                <slot name=\"heading\"></slot>\n               <slot name=\"content\"></slot>\n            </div>\n          </div>\n        </mock:shadow-root>\n      </wink-notification>\n    `);\n  });\n\n  it('should render the error variant of notification component', async () => {\n    const page = await newSpecPage({\n      components: [Notification],\n      html: `<wink-notification appearance=\"error\"></wink-notification>`,\n    });\n    expect(page.root).toEqualHtml(`\n     <wink-notification appearance=\"error\" exportparts=\"icon, icon-cross-small, icon-error-shape\">\n        <mock:shadow-root>\n          <div class=\"notification error\">\n            <wink-icon icon=\"error-shape\" size=\"md\"></wink-icon>\n               <div class=\"notification-text\">\n                <slot name=\"heading\"></slot>\n               <slot name=\"content\"></slot>\n            </div>\n          </div>\n        </mock:shadow-root>\n      </wink-notification>\n    `);\n  });\n\n  it('should render the warning variant of notification component', async () => {\n    const page = await newSpecPage({\n      components: [Notification],\n      html: `<wink-notification appearance=\"warning\"></wink-notification>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <wink-notification appearance=\"warning\" exportparts=\"icon, icon-cross-small, icon-alert-shape\">\n        <mock:shadow-root>\n          <div class=\"notification warning\">\n            <wink-icon icon=\"alert-shape\" size=\"md\"></wink-icon>\n               <div class=\"notification-text\">\n                <slot name=\"heading\"></slot>\n               <slot name=\"content\"></slot>\n            </div>\n          </div>\n        </mock:shadow-root>\n      </wink-notification>\n    `);\n  });\n\n  it('should render the notification component by information', async () => {\n    const page = await newSpecPage({\n      components: [Notification],\n      html: `<wink-notification></wink-notification>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <wink-notification exportparts=\"icon, icon-cross-small, icon-information-shape\">\n        <mock:shadow-root>\n          <div class=\"notification information\">\n            <wink-icon icon=\"information-shape\" size=\"md\"></wink-icon>\n            <div class=\"notification-text\">\n                <slot name=\"heading\"></slot>\n               <slot name=\"content\"></slot>\n            </div>\n          </div>\n        </mock:shadow-root>\n      </wink-notification>\n    `);\n  });\n});\n"]}