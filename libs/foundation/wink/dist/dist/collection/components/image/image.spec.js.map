{"version":3,"file":"image.spec.js","sourceRoot":"","sources":["../../../../../../../../src/components/image/image.spec.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AACpD,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAEhC,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;IAC1B,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;QACrD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,KAAK,CAAC;YACnB,IAAI,EAAE,aAAa;SACpB,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;KAM7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;QAClE,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,KAAK,CAAC;YACnB,IAAI,EAAE,6CAA6C;SACpD,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;KAQ7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;QAC9C,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,KAAK,CAAC;YACnB,IAAI,EAAE,0CAA0C;SACjD,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;KAQ7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;QACnD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,KAAK,CAAC;YACnB,IAAI,EAAE,mDAAmD;SAC1D,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;KAQ7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;QACtD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,KAAK,CAAC;YACnB,IAAI,EAAE,4CAA4C;SACnD,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;KAS7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iEAAiE,EAAE,KAAK,IAAI,EAAE;QAC/E,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,KAAK,CAAC;YACnB,IAAI,EAAE,2DAA2D;SAClE,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;KAU7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { Image } from './image';\n\ndescribe('wink-image', () => {\n  it('render image tags with no attributes ', async () => {\n    const page = await newSpecPage({\n      components: [Image],\n      html: `<wink-img/>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <wink-img src-desktop=\"\">\n         <mock:shadow-root>\n            <p>Please set src</p>\n         </mock:shadow-root>\n      </wink-img>\n    `);\n  });\n\n  it('render image tags with prop loading-plan to eager ', async () => {\n    const page = await newSpecPage({\n      components: [Image],\n      html: `<wink-img src-desktop=\"#\" loading=\"eager\"/>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n         <wink-img src-desktop=\"#\" loading=\"eager\">\n            <mock:shadow-root>\n               <picture>\n               <img src=\"#\" loading=\"eager\" alt=\"Image of testing.stenciljs.com\">\n               </picture>\n            </mock:shadow-root>\n         </wink-img>\n    `);\n  });\n\n  it('render image with correct src ', async () => {\n    const page = await newSpecPage({\n      components: [Image],\n      html: `<wink-img src-desktop=\"path/to/img.svg\">`,\n    });\n\n    expect(page.root).toEqualHtml(`\n         <wink-img src-desktop=\"path/to/img.svg\">\n            <mock:shadow-root>\n               <picture>\n               <img loading=\"lazy\" src=\"path/to/img.svg\" alt=\"Image of testing.stenciljs.com\">\n               </picture>\n            </mock:shadow-root>\n         </wink-img>\n    `);\n  });\n\n  it('render image with correct alt text ', async () => {\n    const page = await newSpecPage({\n      components: [Image],\n      html: `<wink-img src-desktop=\"#\" alt=\"text for testing\">`,\n    });\n\n    expect(page.root).toEqualHtml(`\n         <wink-img src-desktop=\"#\" alt=\"text for testing\">\n            <mock:shadow-root>\n               <picture>\n               <img loading=\"lazy\" src=\"#\" alt=\"text for testing\">\n               </picture>\n            </mock:shadow-root>\n         </wink-img>\n    `);\n  });\n\n  it('render image with mobile image source ', async () => {\n    const page = await newSpecPage({\n      components: [Image],\n      html: `<wink-img src-desktop=\"#\" src-mobile=\"#\" >`,\n    });\n\n    expect(page.root).toEqualHtml(`\n         <wink-img src-desktop=\"#\" src-mobile=\"#\">\n            <mock:shadow-root>\n               <picture>\n                  <source srcSet=\"#\" media=\"(max-width: 576px)\" />\n                  <img loading=\"lazy\" src=\"#\" alt=\"Image of testing.stenciljs.com\">\n               </picture>\n            </mock:shadow-root>\n         </wink-img>\n    `);\n  });\n\n  it('render image with tablet image source and in the correct order ', async () => {\n    const page = await newSpecPage({\n      components: [Image],\n      html: `<wink-img src-desktop=\"#\" src-tablet=\"#\" src-mobile=\"#\" >`,\n    });\n\n    expect(page.root).toEqualHtml(`\n         <wink-img src-desktop=\"#\" src-tablet=\"#\"  src-mobile=\"#\">\n            <mock:shadow-root>\n               <picture>\n                  <source srcSet=\"#\" media=\"(max-width: 576px)\" />\n                  <source srcSet=\"#\" media=\"(max-width: 769px)\" />\n                  <img loading=\"lazy\" src=\"#\" alt=\"Image of testing.stenciljs.com\">\n               </picture>\n            </mock:shadow-root>\n         </wink-img>\n    `);\n  });\n});\n"]}