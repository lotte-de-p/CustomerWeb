{"version":3,"file":"icon.spec.js","sourceRoot":"","sources":["../../../../../../../../src/components/icon/icon.spec.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAE9B,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;IACzB,IAAI,IAAU,CAAC;IAEf,UAAU,CAAC,GAAG,EAAE;QACd,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;IACpB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0BAA0B,EAAE,GAAG,EAAE;QAClC,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;QAC3B,EAAE,CAAC,qEAAqE,EAAE,GAAG,EAAE;YAC7E,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;YAE5B,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAE3B,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oEAAoE,EAAE,GAAG,EAAE;YAC5E,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;YAE5B,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAE3B,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sEAAsE,EAAE,GAAG,EAAE;YAC9E,IAAI,CAAC,UAAU,GAAG,WAAW,CAAC;YAE9B,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAE3B,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wEAAwE,EAAE,GAAG,EAAE;YAChF,IAAI,CAAC,UAAU,GAAG,aAAa,CAAC;YAEhC,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAE3B,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { Icon } from './icon';\n\ndescribe('wink-icon', () => {\n  let comp: Icon;\n\n  beforeEach(() => {\n    comp = new Icon();\n  });\n\n  it('Icon should do something', () => {\n    expect(comp).not.toBe(true);\n  });\n\n  describe('hasBackdrop', () => {\n    it('should assign false value to hasBackdrop when appearance is default', () => {\n      comp.appearance = 'default';\n\n      comp.componentWillRender();\n\n      expect(comp.hasBackdrop).toBe(false);\n    });\n\n    it('should assign true value to hasBackdrop when appearance is primary', () => {\n      comp.appearance = 'primary';\n\n      comp.componentWillRender();\n\n      expect(comp.hasBackdrop).toBe(true);\n    });\n\n    it('should assign true value to hasBackdrop when appearance is secondary', () => {\n      comp.appearance = 'secondary';\n\n      comp.componentWillRender();\n\n      expect(comp.hasBackdrop).toBe(true);\n    });\n\n    it('should assign true value to hasBackdrop when appearance is transparent', () => {\n      comp.appearance = 'transparent';\n\n      comp.componentWillRender();\n\n      expect(comp.hasBackdrop).toBe(true);\n    });\n  });\n});\n"]}