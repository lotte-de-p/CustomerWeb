{"file":"wink-radio-button.entry.js","mappings":";;;AAAA,MAAM,kBAAkB,GAAG,sgIAAsgI,CAAC;AACliI,kCAAe,kBAAkB;;ACDjC,MAAM,qBAAqB,GAAG,8qIAA8qI,CAAC;AAC7sI,qCAAe,qBAAqB;;MCUvB,WAAW;;;qBAKN,EAAE;sBACD,EAAE;6BACK,EAAE;oBACX,EAAE;uBACkB,KAAK;wBACrB,KAAK;qBACR,KAAK;;IAVF,SAAS,CAAoB;;IAY/B,aAAa,GAAG,CAAC,CAAkB;QAClD,IAAI,CAAC,CAAC,GAAG,KAAK,OAAO,EAAE;YACrB,IAAI,CAAC,IAAI,EAAE,aAAa,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,CAAC;SAC5C;KACF,CAAC;IAEF,MAAM;QACJ,QACE,gEACE,8DACE,IAAI,EAAC,OAAO,EACZ,EAAE,EAAE,IAAI,CAAC,aAAa,EACtB,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,OAAO,EAAE,IAAI,CAAC,OAAO,EACrB,QAAQ,EAAE,IAAI,CAAC,QAAQ,kBACT,IAAI,CAAC,KAAK,EACxB,SAAS,EAAE,IAAI,CAAC,aAAa,GAC7B,EACF,wEAAiB,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,SAAS,EAAE,oBAAoB,CAAC,YAAY,GAAI,CACnG,EACR;KACH;;;;;;;;;","names":[],"sources":["../core/src/components/_form-components/radio-button/styles/brands/radio-button.base.scss?tag=wink-radio-button&mode=base&encapsulation=scoped","../core/src/components/_form-components/radio-button/styles/brands/radio-button.telenet.scss?tag=wink-radio-button&mode=telenet&encapsulation=scoped","../core/src/components/_form-components/radio-button/radio-button.tsx"],"sourcesContent":["@import '../vars/vars.base';\n@import '../radio-button.default';\n","@import '../vars/vars.telenet';\n@import '../radio-button.default';\n","import { AttachInternals, Component, Element, h, Prop } from '@stencil/core';\nimport { FORM_LABEL_RENDITION } from '../form-label/models/form-label.types';\n\n@Component({\n  tag: 'wink-radio-button',\n  styleUrls: {\n    telenet: 'styles/brands/radio-button.telenet.scss',\n    base: 'styles/brands/radio-button.base.scss',\n  },\n  scoped: true,\n})\nexport class RadioButton {\n  @AttachInternals() internals!: ElementInternals;\n\n  @Element() host!: HTMLWinkRadioButtonElement;\n\n  @Prop() label = '';\n  @Prop() helper = '';\n  @Prop() radioButtonId = '';\n  @Prop() name = '';\n  @Prop({ reflect: true }) checked = false;\n  @Prop() disabled = false;\n  @Prop() error = false;\n\n  private readonly handleKeyDown = (e: { key: string }) => {\n    if (e.key === 'Enter') {\n      this.host?.querySelector('input')?.click();\n    }\n  };\n\n  render() {\n    return (\n      <label>\n        <input\n          type=\"radio\"\n          id={this.radioButtonId}\n          name={this.name}\n          value={this.label}\n          checked={this.checked}\n          disabled={this.disabled}\n          aria-invalid={this.error}\n          onKeyDown={this.handleKeyDown}\n        />\n        <wink-form-label label={this.label} helper={this.helper} rendition={FORM_LABEL_RENDITION.subComponent} />\n      </label>\n    );\n  }\n}\n"],"version":3}