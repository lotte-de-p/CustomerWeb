{"file":"wink-check-box-group.entry.js","mappings":";;;AAAA,MAAM,oBAAoB,GAAG,opCAAopC,CAAC;AAClrC,oCAAe,oBAAoB;;ACDnC,MAAM,uBAAuB,GAAG,isCAAisC,CAAC;AACluC,uCAAe,uBAAuB;;MCUzB,aAAa;;;qBAGR,EAAE;sBACD,EAAE;yBACa,UAAU,CAAC,QAAQ;;0BAE9B,KAAK;4BACH,WAAW;;IAPf,SAAS,CAAoB;IAUhD,MAAM,aAAa,CAAC,QAAiB;QACnC,IAAI,QAAQ,EAAE;YACZ,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC;SACvB;aAAM;YACL,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;SACjB;KACF;IAED,MAAM;QACJ,QACE,mEACE,+DAAQ,KAAK,EAAC,0BAA0B,IACtC,wEACE,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,MAAM,EAAE,IAAI,CAAC,MAAM,mBACJ,CAAC,IAAI,CAAC,UAAU,mBAChB,IAAI,CAAC,YAAY,GAChC,CACK,EACT,4DAAK,KAAK,EAAE,oBAAoB,IAAI,CAAC,SAAS,EAAE,IAC9C,8DAAQ,CACJ,EACL,IAAI,CAAC,KAAK,IAAI,+BAAyB,OAAO,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,EAAC,OAAO,GAAG,CACnE,EACX;KACH;;;;;;;;;","names":[],"sources":["../core/src/components/_form-components/check-box/_sub-comps/check-box-group/styles/brands/check-box-group.base.scss?tag=wink-check-box-group&mode=base&encapsulation=scoped","../core/src/components/_form-components/check-box/_sub-comps/check-box-group/styles/brands/check-box-group.telenet.scss?tag=wink-check-box-group&mode=telenet&encapsulation=scoped","../core/src/components/_form-components/check-box/_sub-comps/check-box-group/check-box-group.tsx"],"sourcesContent":["@import '../vars/vars.base';\n@import '../check-box-group.default';\n","@import '../vars/vars.telenet';\n@import '../check-box-group.default';\n","import { AttachInternals, Component, h, Prop, Method } from '@stencil/core';\nimport { Directions, DIRECTIONS } from '../../../../../models/positions.types';\n\n@Component({\n  tag: 'wink-check-box-group',\n  styleUrls: {\n    telenet: 'styles/brands/check-box-group.telenet.scss',\n    base: 'styles/brands/check-box-group.base.scss',\n  },\n  scoped: true,\n})\nexport class CheckBoxGroup {\n  @AttachInternals() internals!: ElementInternals;\n\n  @Prop() label = '';\n  @Prop() helper = '';\n  @Prop() direction: Directions = DIRECTIONS.vertical;\n  @Prop({ reflect: true, mutable: true }) error?: string;\n  @Prop() isRequired = false;\n  @Prop() optionalText = 'Optioneel';\n\n  @Method()\n  async setValidation(errorMsg?: string) {\n    if (errorMsg) {\n      this.error = errorMsg;\n    } else {\n      this.error = '';\n    }\n  }\n\n  render() {\n    return (\n      <fieldset>\n        <legend class=\"check-box-group__wrapper\">\n          <wink-form-label\n            label={this.label}\n            helper={this.helper}\n            show-optional={!this.isRequired}\n            optional-text={this.optionalText}\n          />\n        </legend>\n        <div class={`check-box-group--${this.direction}`}>\n          <slot />\n        </div>\n        {this.error && <wink-validation-message message={this.error} type=\"error\" />}\n      </fieldset>\n    );\n  }\n}\n"],"version":3}