{"version":3,"names":["inputBaseCss","WinkInputBaseStyle0","inputTelenetCss","WinkInputTelenetStyle0","Input","INPUT_APPEARANCES","default","INPUT_TYPES","text","INPUT_MODES","INPUT_AUTOCOMPLETES","off","INPUT_ENTERKEYHINTS","none","INPUT_SIZES","md","valueChanged","setValidation","errorMsg","this","error","getLabelId","inputId","getHelperId","getErrorMsgId","getAriaDescribedby","label","helper","filter","item","trim","length","join","getLabel","h","Fragment","htmlFor","id","class","isDisabled","isRequired","optionalText","getPrefix","prefixValue","iconLeft","isReadonly","getPostfix","postfixValue","iconRight","getReadOnlyLength","value","inputWidth","type","date","showSearchBackSpaceIcon","appearance","search","showIconRight","handleChange","event","target","emit","handleRightIconClick","inputEl","host","querySelector","classList","contains","rightIconEl","setAttribute","getAttributes","name","placeholder","inputModeOption","autocomplete","isAutofocused","autofocus","enterkeyhint","enterkeyhintOption","required","disabled","readonly","minValue","undefined","min","maxValue","max","step","componentDidRender","UUId","render","Host","key","icon","size","onInput","e","input","invalid","password","style","width","onClick","message"],"sources":["../core/src/components/_form-components/input/styles/brands/input.base.scss?tag=wink-input&mode=base&encapsulation=scoped","../core/src/components/_form-components/input/styles/brands/input.telenet.scss?tag=wink-input&mode=telenet&encapsulation=scoped","../core/src/components/_form-components/input/input.tsx"],"sourcesContent":["@import '../vars/vars.base';\n@import '../input.default';\n","@import '../vars/vars.telenet';\n@import '../input.default';\n","import { Component, Fragment, Host, h, Prop, Event, EventEmitter, State, Method, Element } from '@stencil/core';\nimport {\n  INPUT_APPEARANCES,\n  INPUT_AUTOCOMPLETES,\n  INPUT_ENTERKEYHINTS,\n  INPUT_MODES,\n  INPUT_SIZES,\n  INPUT_TYPES,\n  InputAppearance,\n  InputAutocomplete,\n  InputEnterkeyhint,\n  InputMode,\n  InputSize,\n  InputType,\n} from './models/input.types';\nimport { UUId } from '../../../utils/utils';\n\n@Component({\n  tag: 'wink-input',\n  styleUrls: {\n    telenet: 'styles/brands/input.telenet.scss',\n    base: 'styles/brands/input.base.scss',\n  },\n  formAssociated: true,\n  scoped: true,\n})\nexport class Input {\n  @Element() host!: HTMLWinkInputElement;\n\n  @Prop({ reflect: true }) appearance: InputAppearance = INPUT_APPEARANCES.default;\n  @Prop({ mutable: true, reflect: true }) value = '';\n  @Prop() inputId!: string;\n  @Prop() name!: string;\n  @Prop() type: InputType = INPUT_TYPES.text;\n  @Prop() placeholder = '';\n  @Prop() isRequired = false;\n  @Prop() inputModeOption: InputMode = INPUT_MODES.text;\n  @Prop() autocomplete: InputAutocomplete = INPUT_AUTOCOMPLETES.off;\n  @Prop() enterkeyhintOption: InputEnterkeyhint = INPUT_ENTERKEYHINTS.none;\n  @Prop() isReadonly = false;\n  @Prop() isDisabled = false;\n  @Prop() isAutofocused = false;\n  @Prop() step?: number;\n  @Prop() minValue?: number | string;\n  @Prop() maxValue?: number | string;\n  @Prop({ reflect: true, mutable: true }) error?: string;\n\n  @Prop() prefixValue = '';\n  @Prop() postfixValue = '';\n\n  @Prop() iconLeft = '';\n  @Prop() iconRight = '';\n  @State() showIconRight = true;\n  @State() inputWidth = 0;\n\n  @Prop() label = '';\n  @Prop() helper = '';\n  @Prop() optionalText = 'Optional';\n\n  @Prop({ reflect: true }) size: InputSize = INPUT_SIZES.md;\n\n  @Event() valueChanged: EventEmitter<string> | undefined;\n\n  @Method()\n  async setValidation(errorMsg?: string) {\n    if (errorMsg) {\n      this.error = errorMsg;\n    } else {\n      this.error = '';\n    }\n  }\n\n  private getLabelId() {\n    return this.inputId + ':Label';\n  }\n  private getHelperId() {\n    return this.inputId + ':Helper';\n  }\n  private getErrorMsgId() {\n    return this.inputId + ':Error';\n  }\n\n  private getAriaDescribedby() {\n    return [this.label && this.getLabelId(), this.helper && this.getHelperId(), this.error && this.getErrorMsgId()]\n      .filter((item) => typeof item === 'string' && item.trim().length > 0)\n      .join(' ');\n  }\n\n  private get getLabel() {\n    if (this.label) {\n      return (\n        <Fragment>\n          <label\n            htmlFor={this.inputId}\n            id={this.getLabelId()}\n            class={{ label: true, 'label-disabled': this.isDisabled }}>\n            <wink-form-label\n              label={this.label}\n              helper={this.helper}\n              helper-id={this.getHelperId()}\n              show-optional={!this.isRequired}\n              optional-text={this.optionalText}\n            />\n          </label>\n        </Fragment>\n      );\n    }\n  }\n  private get getPrefix() {\n    if (this.prefixValue && !this.iconLeft) {\n      return (\n        <Fragment>\n          <div\n            class={{\n              'input-affix input-affix-prefix': true,\n              'input-affix-disabled': this.isDisabled,\n              'input-affix-readonly': this.isReadonly,\n            }}>\n            {this.prefixValue}\n          </div>\n        </Fragment>\n      );\n    }\n  }\n\n  private get getPostfix() {\n    if (this.postfixValue && !this.iconRight) {\n      return (\n        <Fragment>\n          <div\n            class={{\n              'input-affix input-affix-postfix': true,\n              'input-affix-disabled': this.isDisabled,\n              'input-affix-readonly': this.isReadonly,\n            }}>\n            {this.postfixValue}\n          </div>\n        </Fragment>\n      );\n    }\n  }\n  private getReadOnlyLength(value: string) {\n    if (this.isReadonly && value.length > 0) {\n      this.inputWidth = this.type === INPUT_TYPES.date ? value.length + 4 : value.length;\n    } else {\n      this.inputWidth = 0;\n    }\n  }\n\n  private showSearchBackSpaceIcon(value: string) {\n    if (value.length === 0 && this.appearance === INPUT_APPEARANCES.search) {\n      this.showIconRight = false;\n    } else {\n      this.showIconRight = true;\n    }\n  }\n\n  private handleChange(event: Event) {\n    this.value = (event.target as HTMLInputElement).value;\n    this.showSearchBackSpaceIcon(this.value);\n    this.getReadOnlyLength(this.value);\n\n    if (this.valueChanged) {\n      this.valueChanged.emit(this.value);\n    }\n  }\n\n  private handleRightIconClick() {\n    const inputEl = this.host?.querySelector('input');\n    if (inputEl?.classList.contains('input-password')) {\n      const rightIconEl = this.host?.querySelector('.input-icon-button-right wink-icon');\n      if (inputEl?.type === 'password') {\n        inputEl.type = 'text';\n        rightIconEl?.setAttribute('icon', 'eye-off');\n      } else {\n        inputEl.type = 'password';\n        rightIconEl?.setAttribute('icon', 'eye');\n      }\n    }\n  }\n\n  private getAttributes() {\n    return {\n      ...{ id: this.inputId },\n      ...{ name: this.name },\n      ...{ type: this.type },\n      ...{ value: this.value },\n      ...(this.placeholder && { placeholder: this.placeholder }),\n      ...{ 'input-mode': this.inputModeOption },\n      ...{ autocomplete: this.autocomplete },\n      ...(this.isAutofocused && { autofocus: this.isAutofocused }),\n      ...{ enterkeyhint: this.enterkeyhintOption },\n      ...(this.isRequired && { required: this.isRequired }),\n      ...(this.isDisabled && { disabled: this.isDisabled }),\n      ...(this.isReadonly && { readonly: this.isReadonly }),\n      'aria-describedby': this.getAriaDescribedby(),\n      'aria-invalid': !!this.error,\n      ...(this.minValue !== undefined && { min: this.minValue }),\n      ...(this.maxValue !== undefined && { max: this.maxValue }),\n      ...(this.step && { step: this.step }),\n    };\n  }\n\n  componentDidRender() {\n    this.showSearchBackSpaceIcon(this.value);\n    this.getReadOnlyLength(this.value);\n    this.inputId = this.inputId?.length > 0 ? this.inputId : UUId();\n  }\n\n  render() {\n    return (\n      <Host>\n        {this.getLabel}\n\n        <div\n          class={{\n            'input-wrapper': true,\n            'input-with-icon-button input-with-icon-button-left': this.iconLeft?.length > 0,\n            'input-with-icon-button input-with-icon-button-right': this.iconRight?.length > 0,\n            'input-wrapper-date': this.type === 'date',\n          }}>\n          {this.getPrefix}\n\n          {this.iconLeft?.length > 0 && (\n            <div class=\"input-icon-button input-icon-button-left\">\n              <button type=\"button\" aria-label={this.iconLeft} class=\"input-icon-button-button\">\n                <wink-icon appearance=\"default\" icon={this.iconLeft} size={this.size}></wink-icon>\n              </button>\n            </div>\n          )}\n\n          <input\n            onInput={(e) => this.handleChange(e)}\n            {...this.getAttributes()}\n            class={{\n              input: true,\n              invalid: !!this.error,\n              'input-password': this.type === INPUT_TYPES.password,\n            }}\n            style={{\n              width: this.isReadonly && this.inputWidth > 0 ? `${this.inputWidth}ch` : '',\n            }}\n          />\n\n          {this.type === INPUT_TYPES.date && !this.isReadonly && (\n            <wink-icon class={{ disabled: this.isDisabled }} icon=\"calendar\" appearance=\"transparent\" />\n          )}\n\n          {this.iconRight?.length > 0 && this.showIconRight && (\n            <div class=\"input-icon-button input-icon-button-right\">\n              <button\n                type=\"button\"\n                aria-label={this.iconRight}\n                class=\"input-icon-button-button\"\n                onClick={() => this.handleRightIconClick()}>\n                <wink-icon appearance=\"default\" icon={this.iconRight} size={this.size}></wink-icon>\n              </button>\n            </div>\n          )}\n\n          {this.getPostfix}\n        </div>\n\n        {this.error && (\n          <div id={this.getErrorMsgId()} class=\"error-msg\">\n            <wink-validation-message message={this.error} />\n          </div>\n        )}\n      </Host>\n    );\n  }\n}\n"],"mappings":"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"}