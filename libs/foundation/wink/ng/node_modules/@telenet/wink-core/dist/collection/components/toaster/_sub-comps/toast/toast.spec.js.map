{"version":3,"file":"toast.spec.js","sourceRoot":"","sources":["../../../../../../../../../../src/components/toaster/_sub-comps/toast/toast.spec.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AACpD,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAEhC,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;IAC1B,EAAE,CAAC,2DAA2D,EAAE,GAAG,EAAE;QACnE,MAAM,IAAI,GAAG,IAAI,KAAK,EAAE,CAAC;QAEzB,MAAM,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4FAA4F,EAAE,KAAK,IAAI,EAAE;QAC1G,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,KAAK,CAAC;YACnB,IAAI,EAAE;;;;;;;;qBAQS;SAChB,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;KAU7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8FAA8F,EAAE,KAAK,IAAI,EAAE;QAC5G,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,KAAK,CAAC;YACnB,IAAI,EAAE;;;;;;;qBAOS;SAChB,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;KAQ7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gGAAgG,EAAE,KAAK,IAAI,EAAE;QAC9G,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,KAAK,CAAC;YACnB,IAAI,EAAE;;;;;;;qBAOS;SAChB,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;KAQ7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { Toast } from './toast';\n\ndescribe('wink-toast', () => {\n  it('should should create an instance of Toast class component', () => {\n    const comp = new Toast();\n\n    expect(comp).toBeInstanceOf(Toast);\n  });\n\n  it('should render the element wink-toast with a link and no icon when appearance is actionable', async () => {\n    const page = await newSpecPage({\n      components: [Toast],\n      html: `<wink-toast\n        isOpen=\"true\"\n        appearance=\"actionable\"\n        text=\"Toast feedback\"\n        href=\"#\"\n        link-text=\"Link\"\n        target=\"_self\"\n        duration=\"0\"\n      ></wink-toast>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <wink-toast duration=\"0\" href=\"#\" current-theme=\"telenet-light-theme\"  theme=\"telenet-dark-theme\" aria-hidden=\"true\" role=\"alert\"  link-text=\"Link\" isOpen=\"true\" target=\"_self\" text=\"Toast feedback\" appearance=\"actionable\">\n        <mock:shadow-root>\n          <p class=\"toast-text\">Toast feedback</p>\n          <wink-link appearance=\"default\" class=\"toast-link\" href=\"#\" icon=\"\" is-disabled=\"false\" size=\"inherit\" target=\"_self\">\n            Link\n          </wink-link>\n          <wink-button appearance=\"tertiary\" class=\"hydrated toast-close\" element=\"button\" exportparts=\"icon, icon-cross\" icon=\"cross\" icon-button-aria-label=\"close toast\" icon-position=\"center\" size=\"sm\" status=\"none\" type=\"button\" width=\"none\"></wink-button>\n        </mock:shadow-root>\n      </wink-toast>\n    `);\n  });\n\n  it('should render the element wink-toast with no link and check icon when appearance is positive', async () => {\n    const page = await newSpecPage({\n      components: [Toast],\n      html: `<wink-toast\n        isOpen=\"true\"\n        appearance=\"positive\"\n        text=\"Toast feedback\"\n        href=\"#\"\n        link-text=\"Link\"\n        duration=\"0\"\n      ></wink-toast>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <wink-toast duration=\"0\" current-theme=\"telenet-light-theme\" theme=\"telenet-dark-theme\"  aria-hidden=\"true\" role=\"alert\" href=\"#\" link-text=\"Link\" isOpen=\"true\" text=\"Toast feedback\" appearance=\"positive\">\n        <mock:shadow-root>\n          <wink-icon class=\"toast-icon toast-icon-positive\" icon=\"check-shape-filled\" size=\"md\"></wink-icon>\n          <p class=\"toast-text\">Toast feedback</p>\n          <wink-button appearance=\"tertiary\" class=\"hydrated toast-close\" element=\"button\" exportparts=\"icon, icon-cross\" icon=\"cross\" icon-button-aria-label=\"close toast\" icon-position=\"center\" size=\"sm\" status=\"none\" type=\"button\" width=\"none\"></wink-button>\n        </mock:shadow-root>\n      </wink-toast>\n    `);\n  });\n\n  it('should render the element wink-toast with no link and a cross icon when appearance is negative', async () => {\n    const page = await newSpecPage({\n      components: [Toast],\n      html: `<wink-toast\n        isOpen=\"true\"\n        appearance=\"negative\"\n        text=\"Toast feedback\"\n        href=\"#\"\n        link-text=\"Link\"\n        duration=\"0\"\n      ></wink-toast>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <wink-toast duration=\"0\" current-theme=\"telenet-light-theme\"  theme=\"telenet-dark-theme\"  aria-hidden=\"true\" role=\"alert\" href=\"#\" link-text=\"Link\" isOpen=\"true\" text=\"Toast feedback\" appearance=\"negative\">\n        <mock:shadow-root>\n          <wink-icon class=\"toast-icon toast-icon-negative\" icon=\"cross-circle-filled\" size=\"md\"></wink-icon>\n          <p class=\"toast-text\">Toast feedback</p>\n          <wink-button appearance=\"tertiary\" class=\"hydrated toast-close\" element=\"button\" exportparts=\"icon, icon-cross\" icon=\"cross\" icon-button-aria-label=\"close toast\" icon-position=\"center\" size=\"sm\" status=\"none\" type=\"button\" width=\"none\"></wink-button>\n        </mock:shadow-root>\n      </wink-toast>\n    `);\n  });\n});\n"]}