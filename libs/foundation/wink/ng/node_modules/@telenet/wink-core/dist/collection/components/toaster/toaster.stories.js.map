{"version":3,"file":"toaster.stories.js","sourceRoot":"","sources":["../../../../../../../../src/components/toaster/toaster.stories.tsx"],"names":[],"mappings":"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","sourcesContent":["import { html } from 'lit-html';\nimport { repeat } from '../../assets/shared/scripts/utils';\nimport { BADGES } from '../../models';\nimport { STORY_CATEGORIES } from '../../models/categories.types';\nimport * as ToastStory from './_sub-comps/toast/toast.stories';\nimport { ToastType, TOAST_TYPES } from './_sub-comps/toast/models/toast.types';\nimport { Target } from '../../models/targets.types';\n\nconst feedback = 'feedback';\n\ntype Args = {\n  exampleToasts: number;\n  showCreateToast: boolean;\n  isOpen: boolean;\n  appearance: ToastType;\n  appearanceFeedback: ToastType;\n  text: string;\n  duration: number;\n  href: string;\n  target: Target;\n  linkText: string;\n  brand: string;\n};\n\nexport default {\n  title: 'COMPONENTS/Toast',\n  component: 'Toaster',\n  parameters: {\n    badges: [BADGES.new],\n    layout: 'fullscreen',\n    html: {\n      transform: (code: string) => {\n        return code.replace(\n          /<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>|<wink-button\\b[^<]*(?:(?!<\\/wink-button>)<[^<]*)*<\\/wink-button>/g,\n          ''\n        );\n      },\n    },\n  },\n  argTypes: {\n    showCreateToast: {\n      control: 'boolean',\n      description: 'Show the create toast button to preview how toasts can be programmatically created',\n      table: {\n        defaultValue: { summary: 'true' },\n        category: STORY_CATEGORIES.sp,\n      },\n    },\n    exampleToasts: {\n      control: { type: 'number', min: 0, max: 5 },\n      description:\n        'Allows you to add or remove additional toast items within the container to observe and test the behavior of the layout.',\n      table: {\n        defaultValue: { summary: '1' },\n        category: STORY_CATEGORIES.sp,\n      },\n    },\n    text: {\n      ...ToastStory.default.argTypes.text,\n    },\n    appearance: {\n      ...ToastStory.default.argTypes.appearance,\n    },\n    appearanceFeedback: {\n      ...ToastStory.default.argTypes.appearanceFeedback,\n      if: { arg: 'appearance', eq: feedback },\n    },\n    duration: {\n      ...ToastStory.default.argTypes.duration,\n      if: { arg: 'appearance', eq: feedback },\n    },\n    href: {\n      ...ToastStory.default.argTypes.href,\n      if: { arg: 'appearance', eq: TOAST_TYPES.actionable },\n    },\n    target: {\n      ...ToastStory.default.argTypes.target,\n      if: { arg: 'appearance', eq: TOAST_TYPES.actionable },\n    },\n    linkText: {\n      ...ToastStory.default.argTypes.linkText,\n      if: { arg: 'appearance', eq: TOAST_TYPES.actionable },\n    },\n    isOpen: {\n      ...ToastStory.default.argTypes.isOpen,\n    },\n  },\n  args: {\n    appearance: TOAST_TYPES.actionable,\n    appearanceFeedback: TOAST_TYPES.positive,\n    text: 'De notificatie is succesvol verwijderd',\n    linkText: 'Open Link',\n    href: '#',\n    target: '_self',\n    duration: '0',\n    exampleToasts: 1,\n    showCreateToast: true,\n    isOpen: true,\n  },\n  render: (args: Args, { globals: { brand, theme } }: { globals: { brand: string; theme: string } }) =>\n    html` ${args.showCreateToast\n        ? html`<script>\n              const createToast = async (params) => {\n                await customElements.whenDefined('wink-toaster');\n                const toasterElement = document.querySelector('wink-toaster');\n                await toasterElement.winkCreateToast(params);\n              };\n            </script>\n            <wink-button\n              onClick=\"createToast({\n                appearance: '${args.appearance === feedback ? args.appearanceFeedback : args.appearance}',\n                text: '${args.text}',\n                duration: '${args.duration}',\n                href: '${args.href}',\n                target: '${args.target}',\n                linkText: '${args.linkText}'\n              })\"\n              text=\"Create Toast\"\n              element=\"button\"\n              type=\"button\"\n              appearance=\"primary\"\n              size=\"md\"\n              status=\"none\">\n            </wink-button>`\n        : ''}\n      <wink-toaster>\n        ${repeat(\n          args.exampleToasts,\n          html`\n            ${args.appearance === feedback\n              ? html` <wink-toast\n                  theme=\"${theme}-theme\"\n                  current-theme=\"${theme}-theme\"\n                  brand=\"${brand}\"\n                  is-open\n                  appearance=\"${args.appearanceFeedback}\"\n                  text=\"${args.text}\"\n                  duration=\"${args.duration}\">\n                </wink-toast>`\n              : html` <wink-toast\n                  theme=\"${theme}-theme\"\n                  current-theme=\"${theme}-theme\"\n                  brand=\"${brand}\"\n                  is-open\n                  test\n                  appearance=\"${args.appearance}\"\n                  text=\"${args.text}\"\n                  href=\"${args.href}\"\n                  target=\"${args.target}\"\n                  linkText=\"${args.linkText}\">\n                </wink-toast>`}\n          `\n        )}\n      </wink-toaster>`,\n};\n\nexport const Default = {\n  parameters: {\n    controls: {\n      exclude: ['isOpen'],\n    },\n  },\n};\n"]}