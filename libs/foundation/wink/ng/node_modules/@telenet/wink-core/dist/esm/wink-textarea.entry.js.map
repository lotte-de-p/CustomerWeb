{"file":"wink-textarea.entry.js","mappings":";;;;;AAAO,MAAM,oBAAoB,GAAG;IAClC,EAAE,EAAE,IAAI;IACR,GAAG,EAAE,KAAK;CACF;;ACHV,MAAM,eAAe,GAAG,g9DAAg9D,CAAC;AACz+D,+BAAe,eAAe;;ACD9B,MAAM,kBAAkB,GAAG,whEAAwhE,CAAC;AACpjE,kCAAe,kBAAkB;;MCYpB,QAAQ;;;0BACE,KAAK;0BACL,KAAK;4BACkB,oBAAoB,CAAC,GAAG;kCACpB,mBAAmB,CAAC,IAAI;;;;;;;;;;;IAYhE,aAAa;QACnB,OAAO;YACL,IAAI,IAAI,CAAC,UAAU,IAAI,EAAE,EAAE,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC;YAC/C,IAAI,IAAI,CAAC,IAAI,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC;YACrC,IAAI,IAAI,CAAC,YAAY,IAAI,EAAE,YAAY,EAAE,IAAI,CAAC,YAAY,EAAE,CAAC;YAC7D,IAAI,IAAI,CAAC,SAAS,IAAI,EAAE,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC;YACpD,IAAI,IAAI,CAAC,SAAS,IAAI,EAAE,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC;YACpD,IAAI,IAAI,CAAC,WAAW,IAAI,EAAE,WAAW,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC;YAC1D,IAAI,IAAI,CAAC,IAAI,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC;YACrC,IAAI,IAAI,CAAC,kBAAkB,IAAI,EAAE,YAAY,EAAE,IAAI,CAAC,kBAAkB,EAAE,CAAC;YACzE,cAAc,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK;YAC5B,QAAQ,EAAE,IAAI,CAAC,UAAU;YACzB,QAAQ,EAAE,IAAI,CAAC,UAAU;SAC1B,CAAC;KACH;IAED,kBAAkB;QAChB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,EAAE,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,UAAU,GAAG,IAAI,EAAE,CAAC;KAC1E;IAED,MAAM;QACJ,QACE,gEACE,wEACE,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,MAAM,EAAE,IAAI,CAAC,MAAM,EACnB,YAAY,EAAE,CAAC,IAAI,CAAC,UAAU,iBACjB,IAAI,CAAC,UAAU,GAAoB,EAClD,oEAAc,IAAI,CAAC,aAAa,EAAE,GAAa,EAC9C,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,+BAAyB,OAAO,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,EAAC,OAAO,GAAG,CACxE,EACR;KACH;;;;;;;;;","names":[],"sources":["../core/src/components/_form-components/textarea/models/textarea.types.tsx","../core/src/components/_form-components/textarea/styles/brands/textarea.base.scss?tag=wink-textarea&mode=base&encapsulation=scoped","../core/src/components/_form-components/textarea/styles/brands/textarea.telenet.scss?tag=wink-textarea&mode=telenet&encapsulation=scoped","../core/src/components/_form-components/textarea/textarea.tsx"],"sourcesContent":["export const AUTOCOMPLETE_OPTIONS = {\n  on: 'on',\n  off: 'off',\n} as const;\nexport type AutocompleteOptions = (typeof AUTOCOMPLETE_OPTIONS)[keyof typeof AUTOCOMPLETE_OPTIONS];\n","@import '../vars/vars.base';\n@import '../textarea.default';\n","@import '../vars/vars.telenet';\n@import '../textarea.default';\n","import { Component, h, Prop } from '@stencil/core';\nimport { AUTOCOMPLETE_OPTIONS, AutocompleteOptions } from './models/textarea.types';\nimport { InputEnterkeyhint, INPUT_ENTERKEYHINTS } from '../input/models/input.types';\nimport { UUId } from '../../../utils/utils';\n\n@Component({\n  tag: 'wink-textarea',\n  styleUrls: {\n    telenet: 'styles/brands/textarea.telenet.scss',\n    base: 'styles/brands/textarea.base.scss',\n  },\n  scoped: true,\n})\nexport class TextArea {\n  @Prop() isDisabled = false;\n  @Prop() isRequired = false;\n  @Prop() autocomplete: AutocompleteOptions = AUTOCOMPLETE_OPTIONS.off;\n  @Prop() enterkeyhintOption: InputEnterkeyhint = INPUT_ENTERKEYHINTS.none;\n\n  @Prop() textareaId!: string;\n  @Prop() label?: string;\n  @Prop() helper?: string;\n  @Prop() name?: string;\n  @Prop() placeholder?: string;\n  @Prop() error?: string;\n  @Prop() minlength?: number;\n  @Prop() maxlength?: number;\n  @Prop() rows?: number;\n\n  private getAttributes() {\n    return {\n      ...(this.textareaId && { id: this.textareaId }),\n      ...(this.name && { name: this.name }),\n      ...(this.autocomplete && { autocomplete: this.autocomplete }),\n      ...(this.minlength && { minlength: this.minlength }),\n      ...(this.maxlength && { maxlength: this.maxlength }),\n      ...(this.placeholder && { placeholder: this.placeholder }),\n      ...(this.rows && { rows: this.rows }),\n      ...(this.enterkeyhintOption && { enterkeyhint: this.enterkeyhintOption }),\n      'aria-invalid': !!this.error,\n      required: this.isRequired,\n      disabled: this.isDisabled,\n    };\n  }\n\n  componentDidRender() {\n    this.textareaId = this.textareaId?.length > 0 ? this.textareaId : UUId();\n  }\n\n  render() {\n    return (\n      <label>\n        <wink-form-label\n          label={this.label}\n          helper={this.helper}\n          showOptional={!this.isRequired}\n          is-disabled={this.isDisabled}></wink-form-label>\n        <textarea {...this.getAttributes()}></textarea>\n        {!!this.error && <wink-validation-message message={this.error} type=\"error\" />}\n      </label>\n    );\n  }\n}\n"],"version":3}