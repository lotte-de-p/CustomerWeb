{"version":3,"file":"logo.stories.js","sourceRoot":"","sources":["../../../../../../../../src/components/logo/logo.stories.tsx"],"names":[],"mappings":"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","sourcesContent":["import type { Meta } from '@storybook/web-components';\nimport { html, nothing } from 'lit-html';\nimport { BADGES } from '../../models/badges.types';\nimport { LOGO_CATEGORIES } from './models/logo.types';\nimport { TARGETS } from '../../models/targets.types';\nimport { logos } from './data/logo.data';\n\nconst getLogosOnCategory = (category: (typeof LOGO_CATEGORIES)[keyof typeof LOGO_CATEGORIES]) => {\n  return Object.entries(logos)\n    .filter((item) => item[1].category === category)\n    .map(([key]) => key);\n};\n\nconst brandControl = {\n  control: 'select',\n  name: 'appearance',\n  description: 'The appearance property in the logo component determines its visual style or variation.',\n  type: { name: 'string', required: true },\n};\nexport default {\n  title: 'COMPONENTS/Logo',\n  component: 'logo',\n  parameters: {\n    badges: [BADGES.ready],\n  },\n  argTypes: {\n    category: {\n      control: 'select',\n      options: Object.values(LOGO_CATEGORIES),\n      description: 'The category property in the logo component specifies its category or theme.',\n    },\n    variantTelenet: {\n      ...brandControl,\n      options: getLogosOnCategory(LOGO_CATEGORIES.telenet),\n      if: { arg: 'category', eq: LOGO_CATEGORIES.telenet },\n    },\n    variantBase: {\n      ...brandControl,\n      options: getLogosOnCategory(LOGO_CATEGORIES.base),\n      if: { arg: 'category', eq: LOGO_CATEGORIES.base },\n    },\n    variantEntPlay: {\n      ...brandControl,\n      options: getLogosOnCategory(LOGO_CATEGORIES.entPlay),\n      if: { arg: 'category', eq: LOGO_CATEGORIES.entPlay },\n    },\n    variantEntStream: {\n      ...brandControl,\n      options: getLogosOnCategory(LOGO_CATEGORIES.entStream),\n      if: { arg: 'category', eq: LOGO_CATEGORIES.entStream },\n    },\n    alt: {\n      control: 'text',\n      description:\n        'The alt property provides alternative text for an image, describing its content or function for accessibility purposes within the logo component.',\n    },\n    href: {\n      control: 'text',\n      description:\n        'The href property specifies the hyperlink reference for the logo component when it is rendered as an anchor tag, allowing navigation to a specific URL when clicked.',\n    },\n    target: {\n      control: 'inline-radio',\n      options: [TARGETS.blank, TARGETS.self],\n      if: { arg: 'href', neq: '' },\n      description:\n        'The target property determines how the linked URL should be opened, allowing options such as \"_self\" and \"_blank\" for defining the browsing context.',\n      table: {\n        defaultValue: { summary: TARGETS.self },\n      },\n    },\n  },\n  args: {\n    category: 'telenet',\n    variantTelenet: 'telenet-yellow',\n    variantBase: 'base',\n    variantEntPlay: 'goplay',\n    variantEntStream: 'netflix',\n    href: 'https://www.telenet.be',\n    target: TARGETS.self,\n    alt: 'Inspect element to check',\n  },\n  render: (args) => {\n    let exportVariant = args.variantTelenet;\n    switch (args.category) {\n      case LOGO_CATEGORIES.base:\n        exportVariant = args.variantBase;\n        break;\n      case LOGO_CATEGORIES.entPlay:\n        exportVariant = args.variantEntPlay;\n        break;\n      case LOGO_CATEGORIES.entStream:\n        exportVariant = args.variantEntStream;\n        break;\n    }\n    return html` <wink-logo\n      appearance=\"${exportVariant?.toLowerCase()}\"\n      href=\"${args.href || nothing}\"\n      target=\"${args.target || nothing}\"\n      alt=\"${args.alt || nothing}\">\n    </wink-logo>`;\n  },\n} as Meta;\n\nexport const Default = {};\n\nexport const BaseLogos = {\n  args: {\n    category: LOGO_CATEGORIES.base,\n  },\n};\n\nexport const EntertainmentPlayLogos = {\n  args: {\n    category: LOGO_CATEGORIES.entPlay,\n  },\n};\n\nexport const EntertainmentStreamingLogos = {\n  args: {\n    category: LOGO_CATEGORIES.entStream,\n  },\n};\n"]}