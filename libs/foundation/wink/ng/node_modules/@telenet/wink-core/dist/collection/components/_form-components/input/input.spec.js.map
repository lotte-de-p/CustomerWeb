{"version":3,"file":"input.spec.js","sourceRoot":"","sources":["../../../../../../../../../src/components/_form-components/input/input.spec.tsx"],"names":[],"mappings":"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","sourcesContent":["import { resetIdsInTest } from '../../../utils/utils';\nimport { Input } from './input';\n\nimport { newSpecPage } from '@stencil/core/testing';\n\ndescribe('wink-input', () => {\n  it('Should create an instance of Input comp', () => {\n    const comp = new Input();\n\n    expect(comp).toBeInstanceOf(Input);\n  });\n  it('Should create the label-id', () => {\n    const comp = new Input();\n\n    comp.inputId = 'inputId';\n\n    expect(comp['getLabelId']()).toBe('inputId:Label');\n  });\n\n  it('Should create the label-helper-id', () => {\n    const comp = new Input();\n\n    comp.inputId = 'inputId';\n\n    expect(comp['getHelperId']()).toBe('inputId:Helper');\n  });\n\n  it('Should create the error-message-id', () => {\n    const comp = new Input();\n\n    comp.inputId = 'inputId';\n\n    expect(comp['getErrorMsgId']()).toBe('inputId:Error');\n  });\n\n  it('Should create the AriaDescribedBy value with label id, helper id and error id', () => {\n    const comp = new Input();\n\n    comp.inputId = 'inputId';\n    comp.label = 'Label';\n    comp.helper = 'Helper text';\n    comp.error = ' ';\n\n    expect(comp['getAriaDescribedby']()).toBe('inputId:Label inputId:Helper inputId:Error');\n  });\n\n  it('Should create the AriaDescribedBy value with helper id and error id', () => {\n    const comp = new Input();\n\n    comp.inputId = 'inputId';\n    comp.helper = 'Helper text';\n    comp.error = ' ';\n\n    expect(comp['getAriaDescribedby']()).toBe('inputId:Helper inputId:Error');\n  });\n\n  it('Should create the AriaDescribedBy value with error id only when no any label', () => {\n    const comp = new Input();\n\n    comp.inputId = 'inputId';\n    comp.error = ' ';\n\n    expect(comp['getAriaDescribedby']()).toBe('inputId:Error');\n  });\n\n  it('Should render wink-input component', async () => {\n    const page = await newSpecPage({\n      components: [Input],\n      html: `<wink-input></wink-input>`,\n    });\n    expect(resetIdsInTest(page.root)).toEqualLightHtml(`\n    <wink-input appearance=\"default\" size=\"md\" value=\"\">\n      <div class=\"input-wrapper\">\n        <input aria-describedby=\"\" autocomplete=\"off\" class=\"input\" enterkeyhint=\"none\" id=\"\" input-mode=\"text\" type=\"text\" value=\"\">\n      </div>\n    </wink-input>\n\n    `);\n  });\n\n  it('Should render wink-input component focused on load', async () => {\n    const page = await newSpecPage({\n      components: [Input],\n      html: `<wink-input input-id=\"inputId\" is-autofocused></wink-input>`,\n    });\n    expect(page.root).toEqualLightHtml(\n      `<wink-input appearance=\"default\" input-id=\"inputId\" is-autofocused=\"\" size=\"md\" value=\"\">\n        <div class=\"input-wrapper\">\n          <input aria-describedby=\"\" autocomplete=\"off\" autofocus=\"\" class=\"input\" enterkeyhint=\"none\" id=\"inputId\" input-mode=\"text\" type=\"text\" value=\"\">\n        </div>\n      </wink-input>`\n    );\n  });\n  it('Should render wink-input component with the correct id', async () => {\n    const page = await newSpecPage({\n      components: [Input],\n      html: `<wink-input input-id=\"inputId\"></wink-input>`,\n    });\n    expect(page.root).toEqualLightHtml(\n      `<wink-input appearance=\"default\" input-id=\"inputId\" size=\"md\" value=\"\">\n        <div class=\"input-wrapper\">\n          <input aria-describedby=\"\" autocomplete=\"off\" class=\"input\" enterkeyhint=\"none\" id=\"inputId\" input-mode=\"text\" type=\"text\" value=\"\">\n        </div>\n      </wink-input>`\n    );\n  });\n\n  it('Should render the default label', async () => {\n    const page = await newSpecPage({\n      components: [Input],\n      html: `<wink-input input-id=\"inputId\" label=\"Label\"></wink-input>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <wink-input appearance=\"default\" input-id=\"inputId\" label=\"Label\" size=\"md\" value=\"\">\n          <label class=\"label\" htmlfor=\"inputId\" id=\"inputId:Label\">\n            <wink-form-label helper=\"\" helper-id=\"inputId:Helper\" label=\"Label\" show-optional optional-text=\"Optional\"></wink-form-label>\n          </label>\n          <div class=\"input-wrapper\">\n            <input aria-describedby=\"inputId:Label\" autocomplete=\"off\" class=\"input\" enterkeyhint=\"none\" id=\"inputId\" input-mode=\"text\"  type=\"text\" value=\"\">\n          </div>\n      </wink-input>`);\n  });\n\n  it('Should render the default label and helper text', async () => {\n    const page = await newSpecPage({\n      components: [Input],\n      html: `<wink-input input-id=\"inputId\" label=\"Label\" helper=\"Helper text\"></wink-input>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n    <wink-input appearance=\"default\" helper=\"Helper text\" input-id=\"inputId\" label=\"Label\" size=\"md\" value=\"\">\n        <label class=\"label\" htmlfor=\"inputId\" id=\"inputId:Label\">\n          <wink-form-label helper=\"Helper text\" helper-id=\"inputId:Helper\" label=\"Label\" show-optional optional-text=\"Optional\"></wink-form-label>\n        </label>\n        <div class=\"input-wrapper\">\n          <input aria-describedby=\"inputId:Label inputId:Helper\" autocomplete=\"off\" class=\"input\" enterkeyhint=\"none\" id=\"inputId\" input-mode=\"text\" type=\"text\" value=\"\">\n        </div>\n    </wink-input>`);\n  });\n\n  it('Should render wink-input buttonLeft with icon-search', async () => {\n    const page = await newSpecPage({\n      components: [Input],\n      html: `<wink-input input-id=\"inputId\" icon-left=\"search\"\"></wink-input>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <wink-input input-id=\"inputId\" icon-left=\"search\"\" appearance=\"default\" size=\"md\" value=\"\">\n           <div class=\" input-with-icon-button input-with-icon-button-left input-wrapper\">\n             <div class=\"input-icon-button input-icon-button-left\">\n               <button class=\"input-icon-button-button\" type=\"button\" aria-label=\"search\">\n                   <wink-icon appearance=\"default\" icon=\"search\" size=\"md\"></wink-icon>\n               </button>\n             </div>\n             <input aria-describedby=\"\" autocomplete=\"off\" class=\"input\" enterkeyhint=\"none\" id=\"inputId\" input-mode=\"text\" type=\"text\" value=\"\"  >\n           </div>\n       </wink-input>`);\n  });\n\n  it('Should render wink-input buttonRight with icon-backspace', async () => {\n    const page = await newSpecPage({\n      components: [Input],\n      html: `<wink-input input-id=\"inputId\" icon-right=\"backspace\" ></wink-input>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n    <wink-input appearance=\"default\" icon-right=\"backspace\" input-id=\"inputId\" size=\"md\" value=\"\">\n        <div class=\"input-with-icon-button input-with-icon-button-right input-wrapper\">\n          <input aria-describedby=\"\" autocomplete=\"off\" class=\"input\" enterkeyhint=\"none\" id=\"inputId\" input-mode=\"text\" type=\"text\" value=\"\">\n          <div class=\"input-icon-button input-icon-button-right\">\n            <button aria-label=\"backspace\" class=\"input-icon-button-button\" type=\"button\">\n              <wink-icon appearance=\"default\" icon=\"backspace\" size=\"md\"></wink-icon>\n            </button>\n          </div>\n        </div>\n    </wink-input>`);\n  });\n\n  it('Should render wink-input buttonRight with icon-search and buttonRight with icon-backspace', async () => {\n    const page = await newSpecPage({\n      components: [Input],\n      html: `<wink-input input-id=\"inputId\"  icon-left=\"search\" icon-right=\"backspace\"></wink-input>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n    <wink-input appearance=\"default\" icon-left=\"search\" icon-right=\"backspace\" input-id=\"inputId\" size=\"md\" value=\"\">\n        <div class=\"input-with-icon-button input-with-icon-button-left input-with-icon-button-right input-wrapper\">\n          <div class=\"input-icon-button input-icon-button-left\">\n            <button aria-label=\"search\" class=\"input-icon-button-button\" type=\"button\">\n              <wink-icon appearance=\"default\" icon=\"search\" size=\"md\"></wink-icon>\n            </button>\n          </div>\n          <input aria-describedby=\"\" autocomplete=\"off\" class=\"input\" enterkeyhint=\"none\" id=\"inputId\" input-mode=\"text\" type=\"text\" value=\"\">\n          <div class=\"input-icon-button input-icon-button-right\">\n            <button aria-label=\"backspace\" class=\"input-icon-button-button\" type=\"button\">\n              <wink-icon appearance=\"default\" icon=\"backspace\" size=\"md\"></wink-icon>\n            </button>\n          </div>\n        </div>\n    </wink-input>`);\n  });\n\n  it('Should render wink-input component with \"www.\" prefix', async () => {\n    const page = await newSpecPage({\n      components: [Input],\n      html: `<wink-input input-id=\"inputId\" prefix-value=\"www.\" ></wink-input>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <wink-input input-id=\"inputId\"  prefix-value=\"www.\" appearance=\"default\" size=\"md\" value=\"\">\n           <div class=\" input-wrapper\">\n             <div class=\"input-affix input-affix-prefix\">www.</div>\n             <input aria-describedby=\"\" autocomplete=\"off\" class=\"input\" enterkeyhint=\"none\" id=\"inputId\" input-mode=\"text\" type=\"text\" value=\"\"  >\n           </div>\n       </wink-input>`);\n  });\n\n  it('Should render wink-input component with \".be\" postfix', async () => {\n    const page = await newSpecPage({\n      components: [Input],\n      html: `<wink-input input-id=\"inputId\" postfix-value=\".be\"></wink-input>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <wink-input input-id=\"inputId\" postfix-value=\".be\" appearance=\"default\" size=\"md\" value=\"\">\n           <div class=\" input-wrapper\">\n             <input aria-describedby=\"\" autocomplete=\"off\" class=\"input\" enterkeyhint=\"none\" id=\"inputId\" input-mode=\"text\" type=\"text\" value=\"\"  >\n             <div class=\"input-affix input-affix-postfix\">.be</div>\n           </div>\n       </wink-input>`);\n  });\n\n  it('Should render error message for input component', async () => {\n    const page = await newSpecPage({\n      components: [Input],\n      html: `<wink-input input-id=\"inputId\"  error=\"Error description\"></wink-input>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <wink-input input-id=\"inputId\" error=\"Error description\" appearance=\"default\" size=\"md\" value=\"\">\n\n           <div class=\" input-wrapper\">\n            <input id=\"inputId\" aria-describedby=\"inputId:Error\" aria-invalid autocomplete=\"off\" class=\"input invalid\" enterkeyhint=\"none\" id=\"inputId\" input-mode=\"text\" type=\"text\" value=\"\" >\n           </div>\n           <div id=\"inputId:Error\" class=\"error-msg\">\n             <wink-validation-message message=\"Error description\" />\n           </div>\n\n       </wink-input>`);\n  });\n\n  it('Should render wink-input component with \".be\" postfix', async () => {\n    const page = await newSpecPage({\n      components: [Input],\n      html: `<wink-input input-id=\"inputId\" postfix-value=\".be\" ></wink-input>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <wink-input input-id=\"inputId\" postfix-value=\".be\" value=\"\" appearance=\"default\" size=\"md\">\n           <div class=\" input-wrapper\">\n             <input aria-describedby=\"\" autocomplete=\"off\" class=\"input\" enterkeyhint=\"none\" id=\"inputId\" input-mode=\"text\" type=\"text\" value=\"\"  >\n             <div class=\"input-affix input-affix-postfix\">.be</div>\n           </div>\n       </wink-input>`);\n  });\n\n  it('Should render the search input correctly', async () => {\n    const page = await newSpecPage({\n      components: [Input],\n      html: `<wink-input appearance=\"search\" size=\"sm\" icon-left=\"search\" icon-right=\"backspace\" input-mode-option=\"text\" type=\"text\" value=\"search value\" placeholder=\"search placeholder\" input-id=\"search-id\"  name=\"search id\" ></wink-input>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n    <wink-input appearance=\"search\" icon-left=\"search\" icon-right=\"backspace\" input-id=\"search-id\" input-mode-option=\"text\" name=\"search id\" placeholder=\"search placeholder\" size=\"sm\" type=\"text\" value=\"search value\">\n        <div class=\"input-with-icon-button input-with-icon-button-left input-with-icon-button-right input-wrapper\">\n          <div class=\"input-icon-button input-icon-button-left\">\n            <button aria-label=\"search\" class=\"input-icon-button-button\" type=\"button\">\n              <wink-icon appearance=\"default\" icon=\"search\" size=\"sm\"></wink-icon>\n            </button>\n          </div>\n          <input aria-describedby=\"\" autocomplete=\"off\" class=\"input\" enterkeyhint=\"none\" id=\"search-id\" input-mode=\"text\" name=\"search id\" placeholder=\"search placeholder\" type=\"text\" value=\"search value\">\n          <div class=\"input-icon-button input-icon-button-right\">\n            <button aria-label=\"backspace\" class=\"input-icon-button-button\" type=\"button\">\n              <wink-icon appearance=\"default\" icon=\"backspace\" size=\"sm\"></wink-icon>\n            </button>\n          </div>\n        </div>\n    </wink-input>\n    `);\n  });\n\n  it('Should not render backspace icon in the search variant when the value is empty', async () => {\n    const page = await newSpecPage({\n      components: [Input],\n      html: `<wink-input appearance=\"search\" size=\"sm\" icon-left=\"search\" icon-right=\"backspace\" input-mode-option=\"text\" type=\"text\" value=\"\" placeholder=\"search placeholder\" input-id=\"search-id\"  name=\"search id\" ></wink-input>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n    <wink-input appearance=\"search\" icon-left=\"search\" icon-right=\"backspace\" input-id=\"search-id\" input-mode-option=\"text\" name=\"search id\" placeholder=\"search placeholder\" size=\"sm\" type=\"text\" value=\"\">\n        <div class=\"input-with-icon-button input-with-icon-button-left input-with-icon-button-right input-wrapper\">\n          <div class=\"input-icon-button input-icon-button-left\">\n            <button aria-label=\"search\" class=\"input-icon-button-button\" type=\"button\">\n              <wink-icon appearance=\"default\" icon=\"search\" size=\"sm\"></wink-icon>\n            </button>\n          </div>\n          <input aria-describedby=\"\" autocomplete=\"off\" class=\"input\" enterkeyhint=\"none\" id=\"search-id\" input-mode=\"text\" name=\"search id\" placeholder=\"search placeholder\" type=\"text\" value=\"\">\n        </div>\n    </wink-input>\n    `);\n  });\n\n  it('Should render the date picker variant with the correct props', async () => {\n    const page = await newSpecPage({\n      components: [Input],\n      html: `<wink-input\n        input-id=\"test\"\n        type=\"date\"\n        label=\"Date picker\"\n        helper=\"Date picker helper text\"\n        name=\"date picker\"\n        value=\"2024-06-01\"\n        min-value=\"2014-06-01\"\n        max-value=\"2034-06-01\"\n      ></wink-input>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n    <wink-input appearance=\"default\" helper=\"Date picker helper text\" input-id=\"test\" label=\"Date picker\" max-value=\"2034-06-01\" min-value=\"2014-06-01\" name=\"date picker\" size=\"md\" type=\"date\" value=\"2024-06-01\">\n  <label class=\"label\" htmlfor=\"test\" id=\"test:Label\">\n    <wink-form-label helper=\"Date picker helper text\" helper-id=\"test:Helper\" label=\"Date picker\" optional-text=\"Optional\" show-optional=\"\"></wink-form-label>\n  </label>\n  <div class=\"input-wrapper input-wrapper-date\">\n    <input aria-describedby=\"test:Label test:Helper\" autocomplete=\"off\" class=\"input\" enterkeyhint=\"none\" id=\"test\" input-mode=\"text\" max=\"2034-06-01\" min=\"2014-06-01\" name=\"date picker\" type=\"date\" value=\"2024-06-01\">\n    <wink-icon appearance=\"transparent\" icon=\"calendar\"></wink-icon>\n  </div>\n</wink-input>\n    `);\n  });\n});\n"]}