{"version":3,"file":"title.spec.js","sourceRoot":"","sources":["../../../../../../../../src/components/title/title.spec.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AACpD,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAEhC,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;IAC1B,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;QACjD,MAAM,IAAI,GAAG,IAAI,KAAK,EAAE,CAAC;QAEzB,MAAM,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;QACpD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,KAAK,CAAC;YACnB,IAAI,EAAE,2BAA2B;SAClC,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;GAM/B,CAAC,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;QACvD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,KAAK,CAAC;YACnB,IAAI,EAAE,yCAAyC;SAChD,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;KAM7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;QACvE,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,KAAK,CAAC;YACnB,IAAI,EAAE,4CAA4C;SACnD,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;KAM7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kEAAkE,EAAE,KAAK,IAAI,EAAE;QAChF,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,KAAK,CAAC;YACnB,IAAI,EAAE,gDAAgD;SACvD,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;KAM7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { Title } from './title';\n\ndescribe('wink-title', () => {\n  it('Should create an instance of Title comp', () => {\n    const comp = new Title();\n\n    expect(comp).toBeInstanceOf(Title);\n  });\n\n  it('should render the element wink-title', async () => {\n    const page = await newSpecPage({\n      components: [Title],\n      html: `<wink-title></wink-title>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n    <wink-title class=\"\">\n      <mock:shadow-root>\n      <h2></h2>\n      </mock:shadow-root>\n    </wink-title>\n  `);\n  });\n\n  it('should render the element wink-title h1', async () => {\n    const page = await newSpecPage({\n      components: [Title],\n      html: `<wink-title html-tag=\"h1\"></wink-title>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <wink-title html-tag=\"h1\" class=\"\">\n        <mock:shadow-root>\n        <h1></h1>\n        </mock:shadow-root>\n      </wink-title>\n    `);\n  });\n\n  it('should render the element wink-title h2 with no spacing', async () => {\n    const page = await newSpecPage({\n      components: [Title],\n      html: `<wink-title spacing-y=\"none\"></wink-title>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n    <wink-title class=\"spacing-none\" spacing-y=\"none\">\n      <mock:shadow-root>\n      <h2></h2>\n      </mock:shadow-root>\n    </wink-title>\n    `);\n  });\n\n  it('should render the element wink-title with div that have h1 class', async () => {\n    const page = await newSpecPage({\n      components: [Title],\n      html: `<wink-title html-tag=\"h1\" no-seo></wink-title>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n    <wink-title  html-tag=\"h1\" no-seo>\n      <mock:shadow-root>\n      <div class=\"h1\"></div>\n      </mock:shadow-root>\n    </wink-title>\n    `);\n  });\n});\n"]}