import { html, nothing } from "lit-html";
import { ICONS_NAMES } from "../../assets/shared/data/icons-name.data";
import { INPUT_TYPES, INPUT_ENTERKEYHINTS, INPUT_AUTOCOMPLETES, INPUT_MODES, INPUT_SIZES } from "./models/input.types";
import { STORY_CATEGORIES } from "../../models/categories.types";
export default {
    title: 'COMPONENTS/Input',
    component: 'Input',
    argTypes: {
        value: {
            control: 'text',
            table: { category: STORY_CATEGORIES.cpBasic },
            description: 'The value property sets the initial value of the input field, allowing pre-filling of the input with existing data or default values.',
        },
        placeholder: {
            control: 'text',
            table: { category: STORY_CATEGORIES.cpBasic },
            description: 'The placeholder property provides a temporary hint or example text displayed in the input field, guiding users on what to input without permanently setting the value.',
            type: { name: 'string', required: true },
        },
        label: {
            control: 'text',
            table: { category: STORY_CATEGORIES.cpBasic },
            description: 'The label property specifies the label text displayed alongside the input field, providing context or instructions for the user.',
        },
        helper: {
            control: 'text',
            table: { category: STORY_CATEGORIES.cpBasic },
            description: 'The helper property provides additional assistance or information related to the input field in the form of helper text displayed below the label, offering guidance or clarification to the user.',
        },
        inputId: {
            control: 'text',
            table: { category: STORY_CATEGORIES.cpBasic },
            description: 'The inputId property assigns a unique identifier to the input field, facilitating accessibility and functionality.',
            type: { name: 'string', required: true },
        },
        name: {
            control: 'text',
            table: { category: STORY_CATEGORIES.cpBasic },
            description: 'The name property assigns a name to the input field, which is submitted with the form data when the form is submitted.',
            type: { name: 'string', required: true },
        },
        type: {
            control: 'select',
            table: { category: STORY_CATEGORIES.cpBasic },
            options: Object.values(INPUT_TYPES),
            description: 'The type property defines the type of input field, such as "text", "email", "password", etc., determining the format and validation rules for the entered data.',
            type: { name: 'string', required: true },
        },
        inputModeOption: {
            control: 'select',
            table: { category: STORY_CATEGORIES.cpAdvanced },
            options: ['', ...Object.values(INPUT_MODES)],
            description: 'The inputModeOption property allows specifying the input mode for the input field, which can control the keyboard layout or behavior on mobile devices, such as "text", "numeric", "tel", etc.',
        },
        autocomplete: {
            control: 'select',
            table: { category: STORY_CATEGORIES.cpAdvanced },
            options: ['', ...Object.values(INPUT_AUTOCOMPLETES)],
            description: "The autocomplete property enables browser autofill functionality for the input field, suggesting previously entered values or data based on the input's name and context.",
        },
        enterkeyhintOption: {
            control: 'select',
            table: { category: STORY_CATEGORIES.cpAdvanced },
            options: ['', ...Object.values(INPUT_ENTERKEYHINTS)],
            description: 'The enterkeyhintOption property specifies the expected action for the "Enter" key on mobile devices.',
        },
        isReadonly: {
            control: 'boolean',
            table: { category: STORY_CATEGORIES.cpAdvanced },
            description: 'The isReadonly property, when set to true, makes the input field read-only, preventing users from editing its contents.',
        },
        isRequired: {
            control: 'boolean',
            table: { category: STORY_CATEGORIES.cpBasic },
            description: 'The isRequired property, when set to true, marks the input field as mandatory, requiring users to provide a value before submitting the form.',
        },
        isDisabled: {
            control: 'boolean',
            table: { category: STORY_CATEGORIES.cpBasic },
            description: 'The isDisabled property, when set to true, disables the input field, preventing users from interacting with it or submitting data.',
        },
        isAutofocused: {
            control: 'boolean',
            table: { category: STORY_CATEGORIES.cpAdvanced },
            description: 'The isAutofocused property, when set to true, automatically focuses the input field when the page loads, allowing users to start typing without manually selecting the field.',
        },
        error: {
            control: 'text',
            table: { category: STORY_CATEGORIES.cpAdvanced },
            description: 'The error property provides an error message to be displayed when error is set to true, informing the user about the nature of the error in the input field.',
        },
        prefixValue: {
            control: 'text',
            table: { category: STORY_CATEGORIES.cpAdvanced },
            description: "The prefixValue property adds a prefix or a fixed value before the user's input in the input field.",
        },
        postfixValue: {
            control: 'text',
            table: { category: STORY_CATEGORIES.cpAdvanced },
            description: "The postfixValue property adds a suffix or a fixed value after the user's input in the input field.",
        },
        iconLeft: {
            control: 'select',
            table: { category: STORY_CATEGORIES.cpAdvanced },
            options: ['', ...ICONS_NAMES],
            description: 'The iconLeft property specifies the name of the icon used in the left icon button of the input field.',
        },
        iconRight: {
            control: 'select',
            table: { category: STORY_CATEGORIES.cpAdvanced },
            options: ['', ...ICONS_NAMES],
            description: 'The iconRight property specifies the name of the icon used in the right icon button of the input field.',
        },
        size: {
            control: 'inline-radio',
            table: { category: STORY_CATEGORIES.cpBasic },
            options: Object.values(INPUT_SIZES),
            description: 'The size property determines the visual dimensions of the search field.',
        },
    },
    parameters: {},
    args: {
        value: 'default value',
        placeholder: 'placeholder',
        label: 'Label',
        helper: 'Helper text',
        inputId: 'input-id',
        name: 'input name',
        type: INPUT_TYPES.text,
        inputModeOption: '',
        autocomplete: '',
        enterkeyhintOption: '',
        isReadonly: false,
        isDisabled: false,
        isRequired: false,
        isAutofocused: false,
        error: '',
        prefixValue: '',
        postfixValue: '',
        iconRight: '',
        size: INPUT_SIZES.md,
    },
    // eslint-disable-next-line sonarjs/cognitive-complexity
    render: (args) => html ` <wink-input
      type="${args.type || nothing}"
      value="${args.value || nothing}"
      placeholder="${args.placeholder || nothing}"
      label="${args.label || nothing}"
      helper="${args.helper || nothing}"
      input-id="${args.inputId || nothing}"
      name="${args.name || nothing}"
      is-required="${args.isRequired || nothing}"
      input-mode-option="${args.inputModeOption || nothing}"
      autocomplete="${args.autocomplete || nothing}"
      enterkeyhint-option="${args.enterkeyhintOption || nothing}"
      is-readonly="${args.isReadonly || nothing}"
      is-disabled="${args.isDisabled || nothing}"
      error="${args.error || nothing}"
      is-autofocused="${args.isAutofocused || nothing}"
      prefix-value="${args.prefixValue || nothing}"
      postfix-value="${args.postfixValue || nothing}"
      icon-left="${args.iconLeft || nothing}"
      icon-right="${args.iconRight || nothing}"></wink-input>`,
};
export const Basic = {
    args: {},
    parameters: {
        controls: {
            exclude: [
                'autocomplete',
                'enterkeyhintOption',
                'error',
                'iconRight',
                'iconLeft',
                'inputModeOption',
                'isAutofocused',
                'isReadonly',
                'postfixValue',
                'prefixValue',
                'size',
            ],
        },
    },
};
export const Full = {
    args: {},
    parameters: {
        controls: {
            exclude: ['size'],
        },
    },
};
export const Email = {
    args: {
        value: '',
        placeholder: 'example@telenet.be',
        label: 'Fill in your email',
        inputId: 'inputId',
        enterkeyhintOption: 'select',
        isReadonly: false,
        isAutofocused: false,
        error: false,
        type: 'text',
        inputModeOption: INPUT_MODES.email,
        isRequired: false,
    },
    parameters: {
        controls: {
            exclude: ['autocomplete', 'inputModeOption', 'postfixValue', 'prefixValue', 'prefixValue', 'size', 'value'],
        },
    },
};
export const Numerical = {
    args: {
        value: 'Default input',
        placeholder: '123456',
        label: 'label Numerical',
        inputId: 'inputId',
        enterkeyhintOption: 'select',
        isReadonly: false,
        isAutofocused: false,
        error: false,
        type: 'number',
        inputModType: INPUT_MODES.numeric,
        isRequired: false,
    },
    parameters: {
        controls: {
            exclude: ['autocomplete', 'inputModeOption', 'postfixValue', 'prefixValue', 'size', 'type', 'value'],
        },
    },
};
export const password = {
    args: {
        value: 'Password',
        placeholder: 'password',
        label: 'password',
        inputId: 'inputId',
        type: 'password',
        isRequired: false,
        autocomplete: 'new-password',
        iconRight: 'eye',
        inputModeOption: INPUT_MODES.text,
    },
    parameters: {
        controls: {
            exclude: ['inputModeOption', 'iconLeft', 'iconRight', 'isReadonly', 'postfixValue', 'prefixValue', 'size'],
        },
    },
};
export const Text = {
    args: {
        value: 'text',
        placeholder: 'text',
        label: 'text',
        inputId: 'inputId',
        type: 'text',
        enterkeyhintOption: '',
        inputModeOption: INPUT_MODES.text,
        isReadonly: false,
        isAutofocused: false,
        isRequired: false,
    },
    parameters: {
        controls: {
            exclude: ['autocomplete', 'inputModeOption', 'postfixValue', 'prefixValue', 'size'],
        },
    },
};
export const Telephone = {
    args: {
        value: 'number',
        placeholder: '015/33.45.67',
        label: 'Telephone',
        inputId: 'inputId',
        type: 'number',
        enterkeyhintOption: '',
        inputModeOption: INPUT_MODES.tel,
        isReadonly: false,
        isAutofocused: false,
        isRequired: false,
    },
    parameters: {
        controls: {
            exclude: ['autocomplete', 'inputModeOption', 'postfixValue', 'prefixValue', 'size'],
        },
    },
};
export const Search = {
    parameters: {
        controls: {
            exclude: [
                'type',
                'isDisabled',
                'isRequired',
                'helper',
                'inputModeOption',
                'prefixValue',
                'postfixValue',
                'autocomplete',
                'enterkeyhintOption',
                'isReadonly',
                'error',
                'iconLeft',
                'iconRight',
                'label',
                'isAutofocused',
            ],
        },
    },
    render: (args) => html `<wink-input
      appearance="search"
      size="${args.size || nothing}"
      icon-left="search"
      icon-right="backspace"
      input-mode-option="text"
      type="text"
      value="${args.value || nothing}"
      placeholder="${args.placeholder || nothing}"
      input-id=${args.searchId || nothing}
      name="${args.name || nothing}"></wink-input> `,
};
//# sourceMappingURL=input.stories.js.map
