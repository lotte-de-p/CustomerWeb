{"version":3,"file":"textarea.spec.js","sourceRoot":"","sources":["../../../../../../../../../src/components/_form-components/textarea/textarea.spec.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AACpD,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AACtC,OAAO,EAAE,cAAc,EAAE,MAAM,sBAAsB,CAAC;AAEtD,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;IAC7B,EAAE,CAAC,8DAA8D,EAAE,GAAG,EAAE;QACtE,MAAM,IAAI,GAAG,IAAI,QAAQ,EAAE,CAAC;QAE5B,MAAM,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;QACvD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,QAAQ,CAAC;YACtB,IAAI,EAAE,iCAAiC;SACxC,CAAC,CAAC;QAEH,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,WAAW,CAAC;;;;;;;GAO/C,CAAC,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uDAAuD,EAAE,KAAK,IAAI,EAAE;QACrE,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,QAAQ,CAAC;YACtB,IAAI,EAAE;;;;;;;;;wBASY;SACnB,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;GAO/B,CAAC,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uEAAuE,EAAE,KAAK,IAAI,EAAE;QACrF,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,QAAQ,CAAC;YACtB,IAAI,EAAE;;;;;;;;;;;wBAWY;SACnB,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;GAO/B,CAAC,CAAC;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { TextArea } from './textarea';\nimport { resetIdsInTest } from '../../../utils/utils';\n\ndescribe('wink-textarea', () => {\n  it('should should create an instance of TextArea class component', () => {\n    const comp = new TextArea();\n\n    expect(comp).toBeInstanceOf(TextArea);\n  });\n\n  it('should render the element wink-textarea', async () => {\n    const page = await newSpecPage({\n      components: [TextArea],\n      html: `<wink-textarea></wink-textarea>`,\n    });\n\n    expect(resetIdsInTest(page.root)).toEqualHtml(`\n    <wink-textarea>\n      <label>\n        <wink-form-label showoptional=\"\"></wink-form-label>\n        <textarea autocomplete=\"off\" enterkeyhint=\"none\"></textarea>\n      </label>\n    </wink-textarea>\n  `);\n  });\n\n  it('should render the element wink-textarea with an error', async () => {\n    const page = await newSpecPage({\n      components: [TextArea],\n      html: `<wink-textarea\n        label=\"textarea\"\n        helper=\"textarea met helper text\"\n        name=\"textarea\"\n        textarea-id=\"textarea-01\"\n        error=\"Geef een geldige waarde in\"\n        is-required=\"\"\n        rows=\"3\"\n        placeholder=\"Placeholder\"\n      ></wink-textarea>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n    <wink-textarea error=\"Geef een geldige waarde in\" helper=\"textarea met helper text\" is-required=\"\" label=\"textarea\" name=\"textarea\" placeholder=\"Placeholder\" rows=\"3\" textarea-id=\"textarea-01\">\n      <label>\n      <wink-form-label helper=\"textarea met helper text\" label=\"textarea\"></wink-form-label><textarea id=\"textarea-01\" autocomplete=\"off\" aria-invalid=\"\" enterkeyhint=\"none\" name=\"textarea\" placeholder=\"Placeholder\" required=\"\" rows=\"3\"></textarea>\n        <wink-validation-message message=\"Geef een geldige waarde in\" type=\"error\"></wink-validation-message>\n      </label\n    </wink-textarea>\n  `);\n  });\n\n  it('should render the element wink-textarea with the right numeric values', async () => {\n    const page = await newSpecPage({\n      components: [TextArea],\n      html: `<wink-textarea\n        label=\"textarea\"\n        helper=\"textarea met helper text\"\n        name=\"textarea\"\n        textarea-id=\"textarea-01\"\n        is-required=\"\"\n        autocomplete=\"on\"\n        minlength=\"300\"\n        maxlength=\"2000\"\n        rows=\"7\"\n        placeholder=\"Placeholder\"\n      ></wink-textarea>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n    <wink-textarea autocomplete=\"on\" helper=\"textarea met helper text\" is-required=\"\" label=\"textarea\" maxlength=\"2000\" minlength=\"300\" name=\"textarea\" placeholder=\"Placeholder\" rows=\"7\" textarea-id=\"textarea-01\">\n      <label>\n        <wink-form-label helper=\"textarea met helper text\" label=\"textarea\"></wink-form-label><textarea id=\"textarea-01\" autocomplete=\"on\" enterkeyhint=\"none\" maxlength=\"2000\" minlength=\"300\" name=\"textarea\" placeholder=\"Placeholder\" required=\"\" rows=\"7\">\n        </textarea>\n      </label>\n    </wink-textarea>\n  `);\n  });\n});\n"]}