{"version":3,"file":"avatar.spec.js","sourceRoot":"","sources":["../../../../../../../../src/components/avatar/avatar.spec.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAClC,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AAEpD,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;IAC3B,EAAE,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;QAC1D,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,MAAM,CAAC;YACpB,IAAI,EAAE;;;SAGH;SACJ,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;KAM7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;QACtE,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,MAAM,CAAC;YACpB,IAAI,EAAE;;;SAGH;SACJ,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;KAM7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0DAA0D,EAAE,KAAK,IAAI,EAAE;QACxE,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,MAAM,CAAC;YACpB,IAAI,EAAE;;;QAGJ;SACH,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;IAM9B,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { Avatar } from './avatar';\nimport { newSpecPage } from '@stencil/core/testing';\n\ndescribe('wink-avatar', () => {\n  it('should render the default avatar correctly', async () => {\n    const page = await newSpecPage({\n      components: [Avatar],\n      html: `\n        <wink-avatar>\n        </wink-avatar>\n        `,\n    });\n    expect(page.root).toEqualHtml(`\n    <wink-avatar>\n      <mock:shadow-root>\n        <wink-icon appearance=\"secondary\" icon=\"user\" size=\"md\"></wink-icon>\n      </mock:shadow-root>\n    </wink-avatar>\n    `);\n  });\n\n  it('should render the avatar with an image if a src is set', async () => {\n    const page = await newSpecPage({\n      components: [Avatar],\n      html: `\n        <wink-avatar src=\"path/to/image\">\n        </wink-avatar>\n        `,\n    });\n    expect(page.root).toEqualHtml(`\n    <wink-avatar src=\"path/to/image\">\n      <mock:shadow-root>\n        <img alt=\"avatar image\" src=\"path/to/image\">\n      </mock:shadow-root>\n    </wink-avatar>\n    `);\n  });\n\n  it('should render the avatar different size if a size is set', async () => {\n    const page = await newSpecPage({\n      components: [Avatar],\n      html: `\n       <wink-avatar size=\"lg\">\n       </wink-avatar>\n       `,\n    });\n    expect(page.root).toEqualHtml(`\n   <wink-avatar size=\"lg\">\n     <mock:shadow-root>\n       <wink-icon appearance=\"secondary\" icon=\"user\" size=\"lg\"></wink-icon>\n     </mock:shadow-root>\n   </wink-avatar>\n   `);\n  });\n});\n"]}