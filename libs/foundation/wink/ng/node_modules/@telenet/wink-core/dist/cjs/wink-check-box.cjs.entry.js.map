{"file":"wink-check-box.entry.cjs.js","mappings":";;;;;;;AAAA,MAAM,eAAe,GAAG,q1JAAq1J,CAAC;AAC92J,+BAAe,eAAe;;ACD9B,MAAM,kBAAkB,GAAG,6/JAA6/J,CAAC;AACzhK,kCAAe,kBAAkB;;MCUpB,QAAQ;;;qBAWH,EAAE;sBACD,EAAE;0BACE,EAAE;oBACR,EAAE;uBACkB,KAAK;qBACxB,KAAK;wBACF,KAAK;;IAhBL,SAAS,CAAoB;;IAI/B,aAAa,GAAG,CAAC,CAAkB;QAClD,IAAI,CAAC,CAAC,GAAG,KAAK,OAAO,EAAE;YACrB,IAAI,CAAC,IAAI,EAAE,aAAa,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,CAAC;SAC5C;KACF,CAAC;IAUF,MAAM;QACJ,QACEA,sEACEA,oEACE,IAAI,EAAC,UAAU,EACf,OAAO,EAAE,IAAI,CAAC,OAAO,EACrB,QAAQ,EAAE,IAAI,CAAC,QAAQ,kBACT,IAAI,CAAC,KAAK,EACxB,EAAE,EAAE,IAAI,CAAC,UAAU,EACnB,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,SAAS,EAAE,IAAI,CAAC,aAAa,GAC7B,EACFA,8EAAiB,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,SAAS,EAAEC,oCAAoB,CAAC,YAAY,GAAI,CACnG,EACR;KACH;;;;;;;;;","names":["h","FORM_LABEL_RENDITION"],"sources":["../core/src/components/_form-components/check-box/styles/brands/check-box.base.scss?tag=wink-check-box&mode=base&encapsulation=scoped","../core/src/components/_form-components/check-box/styles/brands/check-box.telenet.scss?tag=wink-check-box&mode=telenet&encapsulation=scoped","../core/src/components/_form-components/check-box/check-box.tsx"],"sourcesContent":["@import '../vars/vars.base';\n@import '../check-box.default';\n","@import '../vars/vars.telenet';\n@import '../check-box.default';\n","import { AttachInternals, Component, Element, h, Prop } from '@stencil/core';\nimport { FORM_LABEL_RENDITION } from '../form-label/models/form-label.types';\n\n@Component({\n  tag: 'wink-check-box',\n  styleUrls: {\n    telenet: 'styles/brands/check-box.telenet.scss',\n    base: 'styles/brands/check-box.base.scss',\n  },\n  scoped: true,\n})\nexport class CheckBox {\n  @AttachInternals() internals!: ElementInternals;\n\n  @Element() host!: HTMLWinkCheckBoxElement;\n\n  private readonly handleKeyDown = (e: { key: string }) => {\n    if (e.key === 'Enter') {\n      this.host?.querySelector('input')?.click();\n    }\n  };\n\n  @Prop() label = '';\n  @Prop() helper = '';\n  @Prop() checkboxId = '';\n  @Prop() name = '';\n  @Prop({ reflect: true }) checked = false;\n  @Prop() error = false;\n  @Prop() disabled = false;\n\n  render() {\n    return (\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={this.checked}\n          disabled={this.disabled}\n          aria-invalid={this.error}\n          id={this.checkboxId}\n          name={this.name}\n          value={this.label}\n          onKeyDown={this.handleKeyDown}\n        />\n        <wink-form-label label={this.label} helper={this.helper} rendition={FORM_LABEL_RENDITION.subComponent} />\n      </label>\n    );\n  }\n}\n"],"version":3}