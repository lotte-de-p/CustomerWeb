{"version":3,"names":["NOTIFICATION_TYPES","information","STATUS_VARIANTS","success","error","warning","notificationBaseCss","WinkNotificationBaseStyle0","notificationTelenetCss","WinkNotificationTelenetStyle0","Notification","iconsNamesMap","Map","closeNotification","this","isNotificationVisible","render","h","Host","key","exportparts","get","appearance","class","hasCloseIcon","size","ICON_SIZES","md","icon","onClick","name"],"sources":["../core/src/components/notification/models/notification.types.tsx","../core/src/components/notification/styles/brands/notification.base.scss?tag=wink-notification&mode=base&encapsulation=shadow","../core/src/components/notification/styles/brands/notification.telenet.scss?tag=wink-notification&mode=telenet&encapsulation=shadow","../core/src/components/notification/notification.tsx"],"sourcesContent":["import { STATUS_VARIANTS } from '../../../models/statuses.types';\n\nexport const NOTIFICATION_TYPES = {\n  information: STATUS_VARIANTS.information,\n  success: STATUS_VARIANTS.success,\n  error: STATUS_VARIANTS.error,\n  warning: STATUS_VARIANTS.warning,\n} as const;\nexport type NotificationType = (typeof NOTIFICATION_TYPES)[keyof typeof NOTIFICATION_TYPES];\n","@import '../vars/vars.base';\n@import '../notification.default';\n","@import '../vars/vars.telenet';\n@import '../notification.default';\n","import { Component, h, Host, Prop, State } from '@stencil/core';\nimport { NOTIFICATION_TYPES, NotificationType } from './models/notification.types';\nimport { ICON_SIZES } from '../icon/models/icon.types';\n\n@Component({\n  tag: 'wink-notification',\n  styleUrls: {\n    telenet: 'styles/brands/notification.telenet.scss',\n    base: 'styles/brands/notification.base.scss',\n  },\n  shadow: true,\n})\nexport class Notification {\n  @Prop() appearance: NotificationType = NOTIFICATION_TYPES.information;\n  @Prop() hasCloseIcon = false;\n\n  @State() isNotificationVisible = true;\n\n  private readonly iconsNamesMap = new Map([\n    ['information', 'information-shape'],\n    ['success', 'check-shape'],\n    ['error', 'error-shape'],\n    ['warning', 'alert-shape'],\n  ]);\n\n  private readonly closeNotification = () => {\n    this.isNotificationVisible = false;\n  };\n\n  render() {\n    return (\n      this.isNotificationVisible && (\n        <Host exportparts={`icon, icon-cross-small, icon-${this.iconsNamesMap.get(this.appearance)}`}>\n          <div class={`notification ${this.appearance} ${this.hasCloseIcon ? 'has-close-icon' : ''}`}>\n            <wink-icon size={ICON_SIZES.md} icon={this.iconsNamesMap.get(this.appearance)}></wink-icon>\n\n            {this.hasCloseIcon && (\n              <wink-icon\n                class=\"close-icon\"\n                appearance=\"default\"\n                icon=\"cross-small\"\n                size={ICON_SIZES.md}\n                onClick={this.closeNotification}></wink-icon>\n            )}\n\n            <div class=\"notification-text\">\n              <slot name=\"heading\" />\n              <slot name=\"content\" />\n            </div>\n          </div>\n        </Host>\n      )\n    );\n  }\n}\n"],"mappings":"kJAEO,MAAMA,EAAqB,CAChCC,YAAaC,EAAgBD,YAC7BE,QAASD,EAAgBC,QACzBC,MAAOF,EAAgBE,MACvBC,QAASH,EAAgBG,SCN3B,MAAMC,EAAsB,4+CAC5B,MAAAC,EAAeD,ECDf,MAAME,EAAyB,4+CAC/B,MAAAC,EAAeD,E,MCWFE,EAAY,M,yCACgBV,EAAmBC,Y,kBACnC,M,2BAEU,I,CAEhBU,cAAgB,IAAIC,IAAI,CACvC,CAAC,cAAe,qBAChB,CAAC,UAAW,eACZ,CAAC,QAAS,eACV,CAAC,UAAW,iBAGGC,kBAAoB,KACnCC,KAAKC,sBAAwB,KAAK,EAGpC,MAAAC,GACE,OACEF,KAAKC,uBACHE,EAACC,EAAI,CAAAC,IAAA,2CAACC,YAAa,gCAAgCN,KAAKH,cAAcU,IAAIP,KAAKQ,eAC7EL,EAAA,OAAAE,IAAA,2CAAKI,MAAO,gBAAgBT,KAAKQ,cAAcR,KAAKU,aAAe,iBAAmB,MACpFP,EAAA,aAAAE,IAAA,2CAAWM,KAAMC,EAAWC,GAAIC,KAAMd,KAAKH,cAAcU,IAAIP,KAAKQ,cAEjER,KAAKU,cACJP,EAAA,aACEM,MAAM,aACND,WAAW,UACXM,KAAK,cACLH,KAAMC,EAAWC,GACjBE,QAASf,KAAKD,oBAGlBI,EAAA,OAAAE,IAAA,2CAAKI,MAAM,qBACTN,EAAA,QAAAE,IAAA,2CAAMW,KAAK,YACXb,EAAA,QAAAE,IAAA,2CAAMW,KAAK,c"}