{"version":3,"file":"toggle-switch.spec.js","sourceRoot":"","sources":["../../../../../../../../../src/components/_form-components/toggle-switch/toggle-switch.spec.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AACpD,OAAO,EAAE,YAAY,EAAE,MAAM,iBAAiB,CAAC;AAC/C,OAAO,EAAE,cAAc,EAAE,MAAM,sBAAsB,CAAC;AAEtD,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IAClC,EAAE,CAAC,kEAAkE,EAAE,GAAG,EAAE;QAC1E,MAAM,IAAI,GAAG,IAAI,YAAY,EAAE,CAAC;QAEhC,MAAM,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;QAC5D,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,YAAY,CAAC;YAC1B,IAAI,EAAE,2CAA2C;SAClD,CAAC,CAAC;QACH,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;IAY9C,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gEAAgE,EAAE,KAAK,IAAI,EAAE;QAC9E,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,YAAY,CAAC;YAC1B,IAAI,EAAE,sEAAsE;SAC7E,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;GAY/B,CAAC,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wEAAwE,EAAE,KAAK,IAAI,EAAE;QACtF,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,YAAY,CAAC;YAC1B,IAAI,EAAE,gGAAgG;SACvG,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;GAY/B,CAAC,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iEAAiE,EAAE,KAAK,IAAI,EAAE;QAC/E,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,YAAY,CAAC;YAC1B,IAAI,EAAE,qDAAqD;SAC5D,CAAC,CAAC;QAEH,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;GAY/C,CAAC,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gEAAgE,EAAE,KAAK,IAAI,EAAE;QAC9E,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,YAAY,CAAC;YAC1B,IAAI,EAAE,mDAAmD;SAC1D,CAAC,CAAC;QAEH,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;GAY/C,CAAC,CAAC;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { ToggleSwitch } from './toggle-switch';\nimport { resetIdsInTest } from '../../../utils/utils';\n\ndescribe('wink-toggle-switch', () => {\n  it('should should create an instance of ToggleSwitch class component', () => {\n    const comp = new ToggleSwitch();\n\n    expect(comp).toBeInstanceOf(ToggleSwitch);\n  });\n\n  it('should render the element wink-toggle-switch', async () => {\n    const page = await newSpecPage({\n      components: [ToggleSwitch],\n      html: `<wink-toggle-switch></wink-toggle-switch>`,\n    });\n    expect(resetIdsInTest(page.root)).toEqualHtml(`\n     <wink-toggle-switch class=\"toggle-switch--nexttoeachother\">\n       <p class=\"toggle-switch--label\"></p>\n       <div class=\"toggle-switch--wrapper\">\n         <input id=\"\" type=\"checkbox\">\n           <div class=\"toggle-switch--icon\">\n            <wink-icon icon=\"cross-small\" size=\"sm\"></wink-icon>\n            <wink-icon icon=\"tick-small\" size=\"sm\"></wink-icon>\n         </div>\n         <label htmlfor=\"\"></label>\n       </div>\n     </wink-toggle-switch>\n   `);\n  });\n\n  it('should render the element wink-toggle-switch with id correctly', async () => {\n    const page = await newSpecPage({\n      components: [ToggleSwitch],\n      html: `<wink-toggle-switch toggle-switch-id=\"test-id\"></wink-toggle-switch>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n    <wink-toggle-switch class=\"toggle-switch--nexttoeachother\" toggle-switch-id=\"test-id\">\n      <p class=\"toggle-switch--label\"></p>\n      <div class=\"toggle-switch--wrapper\">\n        <input id=\"test-id\" type=\"checkbox\">\n         <div class=\"toggle-switch--icon\">\n          <wink-icon icon=\"cross-small\" size=\"sm\"></wink-icon>\n          <wink-icon icon=\"tick-small\" size=\"sm\"></wink-icon>\n        </div>\n        <label htmlfor=\"test-id\"></label>\n      </div>\n    </wink-toggle-switch>\n  `);\n  });\n\n  it('should render the element wink-toggle-switch alignment class correctly', async () => {\n    const page = await newSpecPage({\n      components: [ToggleSwitch],\n      html: `<wink-toggle-switch  alignment=\"spaceBetween\" toggle-switch-id=\"test-id\"></wink-toggle-switch>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n    <wink-toggle-switch alignment=\"spaceBetween\" toggle-switch-id=\"test-id\" class=\"toggle-switch--spacebetween\">\n      <p class=\"toggle-switch--label\"></p>\n      <div class=\"toggle-switch--wrapper\">\n        <input id=\"test-id\" type=\"checkbox\">\n         <div class=\"toggle-switch--icon\">\n          <wink-icon icon=\"cross-small\" size=\"sm\"></wink-icon>\n          <wink-icon icon=\"tick-small\" size=\"sm\"></wink-icon>\n        </div>\n        <label htmlfor=\"test-id\"></label>\n      </div>\n    </wink-toggle-switch>\n  `);\n  });\n\n  it('should render the element wink-toggle-switch disabled correctly', async () => {\n    const page = await newSpecPage({\n      components: [ToggleSwitch],\n      html: `<wink-toggle-switch  disabled></wink-toggle-switch>`,\n    });\n\n    expect(resetIdsInTest(page.root)).toEqualHtml(`\n    <wink-toggle-switch disabled class=\"toggle-switch--nexttoeachother\">\n      <p class=\"toggle-switch--label toggle-switch--label--disabled\"></p>\n      <div class=\"toggle-switch--wrapper\">\n        <input id=\"\" type=\"checkbox\" disabled>\n        <div class=\"toggle-switch--icon\">\n          <wink-icon icon=\"cross-small\" size=\"sm\"></wink-icon>\n          <wink-icon icon=\"tick-small\" size=\"sm\"></wink-icon>\n        </div>\n        <label htmlfor=\"\"></label>\n      </div>\n    </wink-toggle-switch>\n  `);\n  });\n\n  it('should render the element wink-toggle-switch checked correctly', async () => {\n    const page = await newSpecPage({\n      components: [ToggleSwitch],\n      html: `<wink-toggle-switch checked></wink-toggle-switch>`,\n    });\n\n    expect(resetIdsInTest(page.root)).toEqualHtml(`\n    <wink-toggle-switch checked class=\"toggle-switch--nexttoeachother\">\n      <p class=\"toggle-switch--label\"></p>\n      <div class=\"toggle-switch--wrapper\">\n        <input id=\"\" type=\"checkbox\" checked>\n        <div class=\"toggle-switch--icon\">\n          <wink-icon icon=\"cross-small\" size=\"sm\"></wink-icon>\n          <wink-icon icon=\"tick-small\" size=\"sm\"></wink-icon>\n        </div>\n        <label htmlfor=\"\"></label>\n      </div>\n    </wink-toggle-switch>\n  `);\n  });\n});\n"]}