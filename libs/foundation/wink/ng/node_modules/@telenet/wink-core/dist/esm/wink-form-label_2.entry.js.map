{"file":"wink-form-label.wink-validation-message.entry.js","mappings":";;;;AAAA,MAAM,gBAAgB,GAAG,iiEAAiiE,CAAC;AAC3jE,gCAAe,gBAAgB;;ACD/B,MAAM,mBAAmB,GAAG,ymEAAymE,CAAC;AACtoE,mCAAe,mBAAmB;;MCUrB,SAAS;;;qBACJ,EAAE;;;;yBAIsB,oBAAoB,CAAC,OAAO;4BAC7C,WAAW;4BACX,KAAK;0BACP,KAAK;;IAE1B,MAAM;QACJ,QACE,EAAC,IAAI,qDAAC,KAAK,EAAE,GAAG,IAAI,CAAC,UAAU,GAAG,iBAAiB,GAAG,EAAE,WAAW,IAAI,CAAC,SAAS,EAAE,CAAC,iBAAiB,EAAE,IACrG,6DAAM,KAAK,EAAC,wBAAwB,IAClC,6DAAM,KAAK,EAAC,aAAa,IAAE,IAAI,CAAC,KAAK,CAAQ,EAC5C,IAAI,CAAC,MAAM,KACV,YAAM,KAAK,EAAC,eAAe,EAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,IAC1C,IAAI,CAAC,MAAM,CACP,CACR,CACI,EACN,IAAI,CAAC,YAAY,IAAI,YAAM,KAAK,EAAC,iBAAiB,IAAE,IAAI,CAAC,YAAY,CAAQ,CACzE,EACP;KACH;;;;;;;ACjCI,MAAM,gBAAgB,GAAG;IAC9B,KAAK,EAAE,eAAe,CAAC,KAAK;CACpB;;ACJV,MAAM,wBAAwB,GAAG,41BAA41B,CAAC;AAC93B,wCAAe,wBAAwB;;ACDvC,MAAM,2BAA2B,GAAG,82BAA82B,CAAC;AACn5B,2CAAe,2BAA2B;;MCU7B,iBAAiB;;;;oBAEI,gBAAgB,CAAC,KAAK;;IAEtD,MAAM;QACJ,QACE,4DAAK,KAAK,EAAE,uBAAuB,IAAI,CAAC,IAAI,EAAE,IAC5C,kEAAW,IAAI,EAAC,aAAa,GAAG,EAC/B,IAAI,CAAC,OAAO,CACT,EACN;KACH;;;;;;;;;","names":[],"sources":["../core/src/components/_form-components/form-label/styles/brands/form-label.base.scss?tag=wink-form-label&mode=base&encapsulation=scoped","../core/src/components/_form-components/form-label/styles/brands/form-label.telenet.scss?tag=wink-form-label&mode=telenet&encapsulation=scoped","../core/src/components/_form-components/form-label/form-label.tsx","../core/src/components/_form-components/validation-message/models/validation-message.types.tsx","../core/src/components/_form-components/validation-message/styles/brands/validation-message.base.scss?tag=wink-validation-message&mode=base&encapsulation=scoped","../core/src/components/_form-components/validation-message/styles/brands/validation-message.telenet.scss?tag=wink-validation-message&mode=telenet&encapsulation=scoped","../core/src/components/_form-components/validation-message/validation-message.tsx"],"sourcesContent":["@import '../vars/vars.base';\n@import '../form-label.default';\n","@import '../vars/vars.telenet';\n@import '../form-label.default';\n","import { Component, h, Host, Prop } from '@stencil/core';\nimport { FORM_LABEL_RENDITION, FormLabelRendition } from './models/form-label.types';\n\n@Component({\n  tag: 'wink-form-label',\n  styleUrls: {\n    telenet: 'styles/brands/form-label.telenet.scss',\n    base: 'styles/brands/form-label.base.scss',\n  },\n  scoped: true,\n})\nexport class FormLabel {\n  @Prop() label = '';\n  @Prop() helper?: string;\n  @Prop() labelId?: string;\n  @Prop() helperId?: string;\n  @Prop() rendition: FormLabelRendition = FORM_LABEL_RENDITION.default;\n  @Prop() optionalText = 'Optioneel';\n  @Prop() showOptional = false;\n  @Prop() isDisabled = false;\n\n  render() {\n    return (\n      <Host class={`${this.isDisabled ? 'label--disabled' : ''} label--${this.rendition}`.toLocaleLowerCase()}>\n        <span class=\"label--content-wrapper\">\n          <span class=\"label--text\">{this.label}</span>\n          {this.helper && (\n            <span class=\"label--helper\" id={this.helperId}>\n              {this.helper}\n            </span>\n          )}\n        </span>\n        {this.showOptional && <span class=\"label--optional\">{this.optionalText}</span>}\n      </Host>\n    );\n  }\n}\n","import { STATUS_VARIANTS } from '../../../../models/statuses.types';\n\nexport const VALIDATION_TYPES = {\n  error: STATUS_VARIANTS.error,\n} as const;\nexport type ValidationTypes = (typeof VALIDATION_TYPES)[keyof typeof VALIDATION_TYPES];\n","@import '../vars/vars.base';\n@import '../validation-message.default';\n","@import '../vars/vars.telenet';\n@import '../validation-message.default';\n","import { Component, h, Prop } from '@stencil/core';\nimport { VALIDATION_TYPES, ValidationTypes } from './models/validation-message.types';\n\n@Component({\n  tag: 'wink-validation-message',\n  styleUrls: {\n    telenet: 'styles/brands/validation-message.telenet.scss',\n    base: 'styles/brands/validation-message.base.scss',\n  },\n  scoped: true,\n})\nexport class ValidationMessage {\n  @Prop() message?: string;\n  @Prop() type: ValidationTypes = VALIDATION_TYPES.error;\n\n  render() {\n    return (\n      <div class={`validation-message--${this.type}`}>\n        <wink-icon icon=\"error-shape\" />\n        {this.message}\n      </div>\n    );\n  }\n}\n"],"version":3}