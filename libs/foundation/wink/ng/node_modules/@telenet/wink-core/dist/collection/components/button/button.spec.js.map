{"version":3,"file":"button.spec.js","sourceRoot":"","sources":["../../../../../../../../src/components/button/button.spec.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAClC,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AAEpD,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;IAC3B,EAAE,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;QACtD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,MAAM,CAAC;YACpB,IAAI,EAAE;;;SAGH;SACJ,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;KAM7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;QAC9D,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,MAAM,CAAC;YACpB,IAAI,EAAE;;;WAGD;SACN,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;MAM5B,CAAC,CAAC;IACN,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;QACtE,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,MAAM,CAAC;YACpB,IAAI,EAAE;;;UAGF;SACL,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;KAS7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,0DAA0D,EAAE,KAAK,IAAI,EAAE;QACxE,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,MAAM,CAAC;YACpB,IAAI,EAAE;;;UAGF;SACL,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;KAS7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;QAC9D,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,MAAM,CAAC;YACpB,IAAI,EAAE;;;WAGD;SACN,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;MAS5B,CAAC,CAAC;IACN,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;QAC3D,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,MAAM,CAAC;YACpB,IAAI,EAAE;;;UAGF;SACL,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;KAQ7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { Button } from './button';\nimport { newSpecPage } from '@stencil/core/testing';\n\ndescribe('wink-button', () => {\n  it('should render default button correctly', async () => {\n    const page = await newSpecPage({\n      components: [Button],\n      html: `\n        <wink-button text=\"test button\" element=\"button\" type=\"button\" appearance=\"primary\" size=\"md\" status=\"none\">\n        </wink-button>\n        `,\n    });\n    expect(page.root).toEqualHtml(`\n      <wink-button text=\"test button\" size=\"md\" status=\"none\" element=\"button\" type=\"button\" appearance=\"primary\">\n         <mock:shadow-root>\n         <button class=\"button primary\" type=\"button\" aria-label=\"test button\">test button</button>\n         </mock:shadow-root>\n      </wink-button>\n    `);\n  });\n  it('should render small secondary button correctly', async () => {\n    const page = await newSpecPage({\n      components: [Button],\n      html: `\n       <wink-button text=\"button secondary\" element=\"input\" type=\"button\" appearance=\"secondary\" size=\"sm\" status=\"none\" >\n       </wink-button>\n          `,\n    });\n    expect(page.root).toEqualHtml(`\n       <wink-button text=\"button secondary\" element=\"input\" type=\"button\" appearance=\"secondary\" size=\"sm\" status=\"none\">\n          <mock:shadow-root>\n          <input class=\"button type-input secondary size-sm\" type=\"button\" value=\"button secondary\" role=\"button\" aria-label=\"button secondary\">\n          </mock:shadow-root>\n       </wink-button>\n     `);\n  });\n  it('should render tertiary button with left icon correctly', async () => {\n    const page = await newSpecPage({\n      components: [Button],\n      html: `\n      <wink-button text=\"button tertiary\" element=\"a\" appearance=\"tertiary\" size=\"md\" status=\"none\" href=\"telenet.be\" has-icon icon-position=\"left\" icon=\"arrow-left\">\n      </wink-button>\n         `,\n    });\n    expect(page.root).toEqualHtml(`\n      <wink-button text=\"button tertiary\" element=\"a\" exportparts=\"icon, icon-arrow-left\" appearance=\"tertiary\" size=\"md\" status=\"none\" href=\"telenet.be\" has-icon icon-position=\"left\" icon=\"arrow-left\">\n         <mock:shadow-root>\n         <a href=\"telenet.be\" class=\"button type-a tertiary icon-left\" target=\"_self\" aria-label=\"button tertiary\" role=\"button\">\n            <wink-icon appearance=\"default\" icon=\"arrow-left\" size=\"md\"></wink-icon>\n            button tertiary\n         </a>\n         </mock:shadow-root>\n      </wink-button>\n    `);\n  });\n  it('should render secondary button with right icon correctly', async () => {\n    const page = await newSpecPage({\n      components: [Button],\n      html: `\n      <wink-button text=\"button\" element=\"button\" appearance=\"secondary\" size=\"md\" state=\"none\" has-icon=\"true\" icon-position=\"right\" icon=\"arrow-left\">\n      </wink-button>\n         `,\n    });\n    expect(page.root).toEqualHtml(`\n      <wink-button text=\"button\" element=\"button\" exportparts=\"icon, icon-arrow-left\" appearance=\"secondary\" size=\"md\" state=\"none\" has-icon=\"true\" icon-position=\"right\" icon=\"arrow-left\">\n        <mock:shadow-root>\n         <button class=\"button icon-right secondary\" type=\"button\" aria-label=\"button\">\n            <wink-icon appearance=\"default\" icon=\"arrow-left\" size=\"md\"></wink-icon>\n            button\n          </button>\n        </mock:shadow-root>\n      </wink-button>\n    `);\n  });\n  it('should render primary loading button correctly', async () => {\n    const page = await newSpecPage({\n      components: [Button],\n      html: `\n       <wink-button text=\"\" loading-text=\"Loading\" element=\"button\" appearance=\"primary\" size=\"md\" status=\"loading\" type=\"button\">\n       </wink-button>\n          `,\n    });\n    expect(page.root).toEqualHtml(`\n       <wink-button text=\"\" loading-text=\"Loading\" element=\"button\" appearance=\"primary\" size=\"md\" status=\"loading\" type=\"button\" >\n          <mock:shadow-root>\n          <button class=\"button primary state-loading\" disabled aria-disabled=\"true\" type=\"button\">\n            <wink-animation autoplay=\"\" class=\"animation\" src=\"/assets/shared/animations/spinner.json\"></wink-animation>\n            Loading\n          </button>\n          </mock:shadow-root>\n       </wink-button>\n     `);\n  });\n  it('should render primary icon button correctly', async () => {\n    const page = await newSpecPage({\n      components: [Button],\n      html: `\n      <wink-button element=\"button\" appearance=\"primary\" size=\"md\" status=\"none\" type=\"button\" has-icon icon-position=\"left\" icon=\"accessibility\">\n      </wink-button>\n         `,\n    });\n    expect(page.root).toEqualHtml(`\n      <wink-button element=\"button\" exportparts=\"icon, icon-accessibility\" appearance=\"primary\" size=\"md\" status=\"none\" type=\"button\" has-icon icon-position=\"left\" icon=\"accessibility\">\n         <mock:shadow-root>\n         <button class=\"button icon-button primary icon-left\" type=\"button\">\n            <wink-icon appearance=\"default\" icon=\"accessibility\" size=\"md\"></wink-icon>\n         </button>\n         </mock:shadow-root>\n      </wink-button>\n    `);\n  });\n});\n"]}