{"version":3,"file":"accordion.spec.js","sourceRoot":"","sources":["../../../../../../../../src/components/accordion/accordion.spec.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AACxC,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AAEpD,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAC9B,EAAE,CAAC,+DAA+D,EAAE,GAAG,EAAE;QACvE,MAAM,IAAI,GAAG,IAAI,SAAS,EAAE,CAAC;QAE7B,MAAM,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qBAAqB,EAAE,GAAG,EAAE;QAC7B,MAAM,IAAI,GAAG,IAAI,SAAS,EAAE,CAAC;QAE7B,IAAI,CAAC,OAAO,GAAG,mCAAmC,CAAC;QAEnD,MAAM,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACxD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;QACnD,MAAM,IAAI,GAAG,IAAI,SAAS,EAAE,CAAC;QAE7B,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC;QAExB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACrC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4CAA4C,EAAE,GAAG,EAAE;QACpD,MAAM,IAAI,GAAG,IAAI,SAAS,EAAE,CAAC;QAC7B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QAEvB,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC;QAExB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACtC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+FAA+F,EAAE,KAAK,IAAI,EAAE;QAC7G,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,SAAS,CAAC;YACvB,IAAI,EAAE,kHAAkH;SACzH,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;;;;;;;;;KAqB7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0GAA0G,EAAE,KAAK,IAAI,EAAE;QACxH,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,SAAS,CAAC;YACvB,IAAI,EAAE,+HAA+H;SACtI,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;;;;;;;;;;KAsB7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { Accordion } from './accordion';\nimport { newSpecPage } from '@stencil/core/testing';\n\ndescribe('wink-accordion', () => {\n  it('should should create an instance of Accordion class component', () => {\n    const comp = new Accordion();\n\n    expect(comp).toBeInstanceOf(Accordion);\n  });\n\n  it('should create an id', () => {\n    const comp = new Accordion();\n\n    comp.heading = 'some title text for the accordion';\n\n    expect(comp['dynamicIdBasedOnTitle']).toBe('some-ti');\n  });\n\n  it('should toggle the isExpanded prop to true', () => {\n    const comp = new Accordion();\n\n    comp['onButtonClick']();\n\n    expect(comp.isExpanded).toBe(true);\n  });\n\n  it('should toggle the isExpanded prop to false', () => {\n    const comp = new Accordion();\n    comp.isExpanded = true;\n\n    comp['onButtonClick']();\n\n    expect(comp.isExpanded).toBe(false);\n  });\n\n  it('should expand and render the element wink-accordion with the title and the panel slot content', async () => {\n    const page = await newSpecPage({\n      components: [Accordion],\n      html: `<wink-accordion heading=\"some title text for the accordion\" is-expanded=\"true\">some panel text!</wink-accordion>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n       <wink-accordion heading=\"some title text for the accordion\" is-expanded=\"true\">\n       <mock:shadow-root>\n         <div class=\"accordion\" id=\"accordion\">\n           <div aria-level=\"5\" role=\"heading\">\n             <button aria-controls=\"section-some-ti\" aria-expanded=\"true\" class=\"accordion-trigger\" id=\"accordion1id\" type=\"button\">\n               <div class=\"accordion-title\">\n                 some title text for the accordion\n               </div>\n               <wink-icon class=\"accordion-icon\" icon=\"chevron-down\" size=\"md\" appearance=\"default\"></wink-icon>\n             </button>\n           </div>\n           <div aria-hidden=\"true\" aria-labelledby=\"accordion1id\" class=\"accordion-panel\" id=\"section-some-ti\" role=\"region\">\n             <div id=\"content\">\n               <slot></slot>\n             </div>\n           </div>\n         </div>\n       </mock:shadow-root>\n       some panel text!\n     </wink-accordion>\n    `);\n  });\n\n  it('should collapse and render the element wink-accordion with the title with icon and no panel slot content', async () => {\n    const page = await newSpecPage({\n      components: [Accordion],\n      html: `<wink-accordion heading=\"some title text for the accordion\" icon=\"bell\" is-expanded=\"false\">some panel text!</wink-accordion>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n       <wink-accordion heading=\"some title text for the accordion\" is-expanded=\"false\" icon=\"bell\">\n       <mock:shadow-root>\n         <div class=\"accordion\" id=\"accordion\">\n           <div aria-level=\"5\" role=\"heading\">\n             <button aria-controls=\"section-some-ti\" aria-expanded=\"false\" class=\"accordion-trigger\" id=\"accordion1id\" type=\"button\">\n               <div class=\"accordion-title\">\n                  <wink-icon appearance=\"default\" icon=\"bell\" size=\"md\"></wink-icon>\n                 some title text for the accordion\n               </div>\n                <wink-icon appearance=\"default\" class=\"accordion-icon\" icon=\"chevron-down\" size=\"md\"></wink-icon>\n             </button>\n           </div>\n           <div aria-hidden=\"false\" aria-labelledby=\"accordion1id\" class=\"accordion-panel\" hidden id=\"section-some-ti\" role=\"region\">\n             <div id=\"content\" class=\"with-icon\" style=\"display: none;\">\n               <slot></slot>\n             </div>\n           </div>\n         </div>\n       </mock:shadow-root>\n       some panel text!\n     </wink-accordion>\n    `);\n  });\n});\n"]}