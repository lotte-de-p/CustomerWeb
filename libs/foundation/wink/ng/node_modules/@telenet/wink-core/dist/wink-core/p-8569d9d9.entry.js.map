{"version":3,"names":["NOTIFICATION_TYPES","information","success","error","warning","notificationBaseCss","WinkNotificationBaseStyle0","notificationTelenetCss","WinkNotificationTelenetStyle0","Notification","iconsNamesMap","Map","render","h","Host","key","exportparts","this","get","appearance","class","hasCloseIcon","size","ICON_SIZES","md","icon","name"],"sources":["../core/src/components/notification/models/notification.types.tsx","../core/src/components/notification/styles/brands/notification.base.scss?tag=wink-notification&mode=base&encapsulation=shadow","../core/src/components/notification/styles/brands/notification.telenet.scss?tag=wink-notification&mode=telenet&encapsulation=shadow","../core/src/components/notification/notification.tsx"],"sourcesContent":["export const NOTIFICATION_TYPES = {\n  information: 'information',\n  success: 'success',\n  error: 'error',\n  warning: 'warning',\n} as const;\nexport type NotificationType = (typeof NOTIFICATION_TYPES)[keyof typeof NOTIFICATION_TYPES];\n","@import '../vars/vars.base';\n@import '../notification.default';\n","@import '../vars/vars.telenet';\n@import '../notification.default';\n","import { Component, h, Host, Prop } from '@stencil/core';\nimport { NOTIFICATION_TYPES, NotificationType } from './models/notification.types';\nimport { ICON_SIZES } from '../icon/models/icon.types';\n\n@Component({\n  tag: 'wink-notification',\n  styleUrls: {\n    telenet: 'styles/brands/notification.telenet.scss',\n    base: 'styles/brands/notification.base.scss',\n  },\n  shadow: true,\n})\nexport class Notification {\n  @Prop() appearance: NotificationType = NOTIFICATION_TYPES.information;\n  @Prop() hasCloseIcon = false;\n\n  private readonly iconsNamesMap = new Map([\n    ['information', 'information-shape'],\n    ['success', 'check-shape'],\n    ['error', 'error-shape'],\n    ['warning', 'alert-shape'],\n  ]);\n\n  render() {\n    return (\n      <Host exportparts={`icon, icon-cross-small, icon-${this.iconsNamesMap.get(this.appearance)}`}>\n        <div class={`notification ${this.appearance} ${this.hasCloseIcon ? 'has-close-icon' : ''}`}>\n          <wink-icon size={ICON_SIZES.md} icon={this.iconsNamesMap.get(this.appearance)}></wink-icon>\n\n          {this.hasCloseIcon && (\n            <wink-icon class=\"icon-close\" appearance=\"default\" icon=\"cross-small\" size={ICON_SIZES.md}></wink-icon>\n          )}\n\n          <div class=\"notification-text\">\n            <slot name=\"heading\" />\n            <slot name=\"content\" />\n          </div>\n        </div>\n      </Host>\n    );\n  }\n}\n"],"mappings":"8GAAO,MAAMA,EAAqB,CAChCC,YAAa,cACbC,QAAS,UACTC,MAAO,QACPC,QAAS,WCJX,MAAMC,EAAsB,+oCAC5B,MAAAC,EAAeD,ECDf,MAAME,EAAyB,+oCAC/B,MAAAC,EAAeD,E,MCWFE,EAAY,M,yCACgBT,EAAmBC,Y,kBACnC,K,CAENS,cAAgB,IAAIC,IAAI,CACvC,CAAC,cAAe,qBAChB,CAAC,UAAW,eACZ,CAAC,QAAS,eACV,CAAC,UAAW,iBAGd,MAAAC,GACE,OACEC,EAACC,EAAI,CAAAC,IAAA,2CAACC,YAAa,gCAAgCC,KAAKP,cAAcQ,IAAID,KAAKE,eAC7EN,EAAA,OAAAE,IAAA,2CAAKK,MAAO,gBAAgBH,KAAKE,cAAcF,KAAKI,aAAe,iBAAmB,MACpFR,EAAA,aAAAE,IAAA,2CAAWO,KAAMC,EAAWC,GAAIC,KAAMR,KAAKP,cAAcQ,IAAID,KAAKE,cAEjEF,KAAKI,cACJR,EAAA,aAAWO,MAAM,aAAaD,WAAW,UAAUM,KAAK,cAAcH,KAAMC,EAAWC,KAGzFX,EAAA,OAAAE,IAAA,2CAAKK,MAAM,qBACTP,EAAA,QAAAE,IAAA,2CAAMW,KAAK,YACXb,EAAA,QAAAE,IAAA,2CAAMW,KAAK,c"}