{"version":3,"file":"notification.js","sourceRoot":"","sources":["../../../../../../../../src/components/notification/notification.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AAChE,OAAO,EAAE,kBAAkB,EAAoB,MAAM,6BAA6B,CAAC;AACnF,OAAO,EAAE,UAAU,EAAE,MAAM,2BAA2B,CAAC;AAUvD,MAAM,OAAO,YAAY;;0BACgB,kBAAkB,CAAC,WAAW;4BAC9C,KAAK;qCAEK,IAAI;;IAEpB,aAAa,GAAG,IAAI,GAAG,CAAC;QACvC,CAAC,aAAa,EAAE,mBAAmB,CAAC;QACpC,CAAC,SAAS,EAAE,aAAa,CAAC;QAC1B,CAAC,OAAO,EAAE,aAAa,CAAC;QACxB,CAAC,SAAS,EAAE,aAAa,CAAC;KAC3B,CAAC,CAAC;IAEc,iBAAiB,GAAG,GAAG,EAAE;QACxC,IAAI,CAAC,qBAAqB,GAAG,KAAK,CAAC;IACrC,CAAC,CAAC;IAEF,MAAM;QACJ,OAAO,CACL,IAAI,CAAC,qBAAqB,IAAI,CAC5B,EAAC,IAAI,qDAAC,WAAW,EAAE,gCAAgC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;YAC1F,4DAAK,KAAK,EAAE,gBAAgB,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,EAAE;gBACxF,kEAAW,IAAI,EAAE,UAAU,CAAC,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,GAAc;gBAE1F,IAAI,CAAC,YAAY,IAAI,CACpB,iBACE,KAAK,EAAC,YAAY,EAClB,UAAU,EAAC,SAAS,EACpB,IAAI,EAAC,aAAa,EAClB,IAAI,EAAE,UAAU,CAAC,EAAE,EACnB,OAAO,EAAE,IAAI,CAAC,iBAAiB,GAAc,CAChD;gBAED,4DAAK,KAAK,EAAC,mBAAmB;oBAC5B,6DAAM,IAAI,EAAC,SAAS,GAAG;oBACvB,6DAAM,IAAI,EAAC,SAAS,GAAG,CACnB,CACF,CACD,CACR,CACF,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, h, Host, Prop, State } from '@stencil/core';\nimport { NOTIFICATION_TYPES, NotificationType } from './models/notification.types';\nimport { ICON_SIZES } from '../icon/models/icon.types';\n\n@Component({\n  tag: 'wink-notification',\n  styleUrls: {\n    telenet: 'styles/brands/notification.telenet.scss',\n    base: 'styles/brands/notification.base.scss',\n  },\n  shadow: true,\n})\nexport class Notification {\n  @Prop() appearance: NotificationType = NOTIFICATION_TYPES.information;\n  @Prop() hasCloseIcon = false;\n\n  @State() isNotificationVisible = true;\n\n  private readonly iconsNamesMap = new Map([\n    ['information', 'information-shape'],\n    ['success', 'check-shape'],\n    ['error', 'error-shape'],\n    ['warning', 'alert-shape'],\n  ]);\n\n  private readonly closeNotification = () => {\n    this.isNotificationVisible = false;\n  };\n\n  render() {\n    return (\n      this.isNotificationVisible && (\n        <Host exportparts={`icon, icon-cross-small, icon-${this.iconsNamesMap.get(this.appearance)}`}>\n          <div class={`notification ${this.appearance} ${this.hasCloseIcon ? 'has-close-icon' : ''}`}>\n            <wink-icon size={ICON_SIZES.md} icon={this.iconsNamesMap.get(this.appearance)}></wink-icon>\n\n            {this.hasCloseIcon && (\n              <wink-icon\n                class=\"close-icon\"\n                appearance=\"default\"\n                icon=\"cross-small\"\n                size={ICON_SIZES.md}\n                onClick={this.closeNotification}></wink-icon>\n            )}\n\n            <div class=\"notification-text\">\n              <slot name=\"heading\" />\n              <slot name=\"content\" />\n            </div>\n          </div>\n        </Host>\n      )\n    );\n  }\n}\n"]}