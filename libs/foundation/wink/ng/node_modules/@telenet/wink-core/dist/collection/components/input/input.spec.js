import { Input } from "./input";
import { newSpecPage } from "@stencil/core/testing";
describe('wink-input', () => {
    it('Should create an instance of Input comp', () => {
        const comp = new Input();
        expect(comp).toBeInstanceOf(Input);
    });
    it('Should create the label-id', () => {
        const comp = new Input();
        comp.inputId = 'inputId';
        expect(comp['getLabelId']()).toBe('inputId:Label');
    });
    it('Should create the label-helper-id', () => {
        const comp = new Input();
        comp.inputId = 'inputId';
        expect(comp['getHelperId']()).toBe('inputId:Helper');
    });
    it('Should create the error-message-id', () => {
        const comp = new Input();
        comp.inputId = 'inputId';
        expect(comp['getErrorMsgId']()).toBe('inputId:Error');
    });
    it('Should create the AreaDescribedBy value with label id, helper id and error id', () => {
        const comp = new Input();
        comp.inputId = 'inputId';
        comp.label = 'Label';
        comp.helper = 'Helper text';
        comp.error = ' ';
        expect(comp['getAreaDescribedby']()).toBe('inputId:Label inputId:Helper inputId:Error');
    });
    it('Should create the AreaDescribedBy value with helper id and error id', () => {
        const comp = new Input();
        comp.inputId = 'inputId';
        comp.helper = 'Helper text';
        comp.error = ' ';
        expect(comp['getAreaDescribedby']()).toBe('inputId:Helper inputId:Error');
    });
    it('Should create the AreaDescribedBy value with error id only when no any label', () => {
        const comp = new Input();
        comp.inputId = 'inputId';
        comp.error = ' ';
        expect(comp['getAreaDescribedby']()).toBe('inputId:Error');
    });
    it('Should render wink-input component', async () => {
        const page = await newSpecPage({
            components: [Input],
            html: `<wink-input></wink-input>`,
        });
        expect(page.root).toEqualLightHtml(`<wink-input appearance="default" size="md" value=""></wink-input>`);
    });
    it('Should render wink-input component focused on load', async () => {
        const page = await newSpecPage({
            components: [Input],
            html: `<wink-input input-id="inputId" is-autofocused></wink-input>`,
        });
        expect(page.root).toEqualLightHtml(`<wink-input input-id="inputId" is-autofocused value="" appearance="default" size="md"></wink-input>`);
    });
    it('Should render wink-input component focused on load', async () => {
        const page = await newSpecPage({
            components: [Input],
            html: `<wink-input input-id="inputId"></wink-input>`,
        });
        expect(page.root).toEqualLightHtml(`<wink-input input-id="inputId" appearance="default" size="md" value=""></wink-input>`);
    });
    it('Should render the default label', async () => {
        const page = await newSpecPage({
            components: [Input],
            html: `<wink-input input-id="inputId" label="Label"></wink-input>`,
        });
        expect(page.root).toEqualHtml(`
      <wink-input input-id="inputId" label="Label" appearance="default" size="md" value="">
         <mock:shadow-root>
           <label htmlFor="inputId" id="inputId:Label" class="label"><div class="label-label">Label</div>
           <div class="label-optional">Optional</div>
           </label>
           <div class="input-wrapper">
             <input aria-describedby="inputId:Label" autocomplete="off" class="input"  input-mode="text"  enterkeyhint="none" id="inputId" input-mode="text" type="text" placeholder="" value="" >
           </div>
         </mock:shadow-root>
       </wink-input>`);
    });
    it('Should render the default label and helper text', async () => {
        const page = await newSpecPage({
            components: [Input],
            html: `<wink-input input-id="inputId" label="Label" helper="Helper text"></wink-input>`,
        });
        expect(page.root).toEqualHtml(`
      <wink-input input-id="inputId" label="Label" helper="Helper text" appearance="default" size="md" value="">
         <mock:shadow-root>
           <label htmlFor="inputId" id="inputId:Label" class="label"><div class="label-label">Label<div class="label-helper" id="inputId:Helper">Helper text</div></div>
           <div class="label-optional">Optional</div>
           </label>
           <div class=" input-wrapper">
             <input aria-describedby="inputId:Label inputId:Helper" input-mode="text" autocomplete="off" class="input" enterkeyhint="none" id="inputId" type="text" placeholder="" value=""  >
           </div>
         </mock:shadow-root>
       </wink-input>`);
    });
    it('Should render wink-input buttonLeft with icon-search', async () => {
        const page = await newSpecPage({
            components: [Input],
            html: `<wink-input input-id="inputId" icon-left="search""></wink-input>`,
        });
        expect(page.root).toEqualHtml(`
      <wink-input input-id="inputId" icon-left="search"" appearance="default" size="md" value="">
         <mock:shadow-root>
           <div class=" input-with-icon-button input-with-icon-button-left input-wrapper">
             <div class="input-icon-button input-icon-button-left">
               <button class="input-icon-button-button" type="button" aria-label="search">
                   <wink-icon appearance="default" icon="search" size="md"></wink-icon>
               </button>
             </div>
             <input aria-describedby="" autocomplete="off" class="input" enterkeyhint="none" id="inputId" input-mode="text" type="text" placeholder="" value=""  >
           </div>
         </mock:shadow-root>
       </wink-input>`);
    });
    it('Should render wink-input buttonRight with icon-backspace', async () => {
        const page = await newSpecPage({
            components: [Input],
            html: `<wink-input input-id="inputId" icon-right="backspace" ></wink-input>`,
        });
        expect(page.root).toEqualHtml(`
      <wink-input input-id="inputId"  icon-right="backspace" appearance="default" size="md" value="">
         <mock:shadow-root>
           <div class=" input-with-icon-button input-with-icon-button-right input-wrapper">
             <input aria-describedby="" autocomplete="off" class="input" enterkeyhint="none" id="inputId" input-mode="text" type="text" placeholder="" value="" >
             <div class="input-icon-button input-icon-button-right">
               <button class="input-icon-button-button" type="button" aria-label="backspace">
                  <wink-icon appearance="default" icon="backspace" size="md"></wink-icon>
               </button>
             </div>
           </div>
         </mock:shadow-root>
       </wink-input>`);
    });
    it('Should render wink-input buttonRight with icon-search and buttonRight with icon-backspace', async () => {
        const page = await newSpecPage({
            components: [Input],
            html: `<wink-input input-id="inputId"  icon-left="search" icon-right="backspace"></wink-input>`,
        });
        expect(page.root).toEqualHtml(`
         <wink-input input-id="inputId" icon-left="search" icon-right="backspace" appearance="default" size="md" value="">
         <mock:shadow-root>
           <div class=" input-with-icon-button input-with-icon-button-left input-with-icon-button-right input-wrapper">
           <div class="input-icon-button input-icon-button-left" >
               <button class="input-icon-button-button" type="button" aria-label="search">
                  <wink-icon appearance="default" icon="search" size="md"></wink-icon>
               </button>
             </div>
             <input aria-describedby="" autocomplete="off" class="input" enterkeyhint="none" id="inputId" input-mode="text" type="text"  placeholder="" value=""  >
             <div class="input-icon-button input-icon-button-right">
               <button class="input-icon-button-button" type="button" aria-label="backspace">
                  <wink-icon appearance="default" icon="backspace" size="md"></wink-icon>
               </button>
             </div>
           </div>
         </mock:shadow-root>
       </wink-input>`);
    });
    it('Should render wink-input component with "www." prefix', async () => {
        const page = await newSpecPage({
            components: [Input],
            html: `<wink-input input-id="inputId" prefix-value="www." ></wink-input>`,
        });
        expect(page.root).toEqualHtml(`
      <wink-input input-id="inputId" prefix-value="www." appearance="default" size="md" value="">
         <mock:shadow-root>
           <div class=" input-wrapper">
             <div class="input-affix input-affix-prefix">www.</div>
             <input aria-describedby="" autocomplete="off" class="input" enterkeyhint="none" id="inputId" input-mode="text" type="text"  placeholder="" value=""  >
           </div>
         </mock:shadow-root>
       </wink-input>`);
    });
    it('Should render wink-input component with ".be" postfix', async () => {
        const page = await newSpecPage({
            components: [Input],
            html: `<wink-input input-id="inputId" postfix-value=".be"></wink-input>`,
        });
        expect(page.root).toEqualHtml(`
      <wink-input input-id="inputId" postfix-value=".be" appearance="default" size="md" value="">
         <mock:shadow-root>
           <div class=" input-wrapper">
             <input aria-describedby="" autocomplete="off" class="input" enterkeyhint="none" id="inputId" input-mode="text" type="text" placeholder="" value=""  >
             <div class="input-affix input-affix-postfix">.be</div>
           </div>
         </mock:shadow-root>
       </wink-input>`);
    });
    it('Should render error message for input component', async () => {
        const page = await newSpecPage({
            components: [Input],
            html: `<wink-input input-id="inputId"  error="Error description"></wink-input>`,
        });
        expect(page.root).toEqualHtml(`
      <wink-input input-id="inputId" error="Error description" appearance="default" size="md" value="">
         <mock:shadow-root>
           <div class=" input-wrapper">
            <input id="inputId" aria-describedby="inputId:Error" aria-invalid="" autocomplete="off" class="input" enterkeyhint="none" id="inputId" input-mode="text" type="text" placeholder="" value="" >
           </div>
           <div id="inputId:Error" class="error-msg">
              <wink-icon appearance="default" icon="error-shape" size="md"></wink-icon>
           <div class="error-label font-caption">Error description</div>
           </div>
         </mock:shadow-root>
       </wink-input>`);
    });
    it('Should render wink-input component with ".be" postfix', async () => {
        const page = await newSpecPage({
            components: [Input],
            html: `<wink-input input-id="inputId" postfix-value=".be" ></wink-input>`,
        });
        expect(page.root).toEqualHtml(`
      <wink-input input-id="inputId" postfix-value=".be" value="" appearance="default" size="md">
         <mock:shadow-root>
           <div class=" input-wrapper">
             <input aria-describedby="" autocomplete="off" class="input" enterkeyhint="none" id="inputId" input-mode="text" type="text" placeholder="" value=""  >
             <div class="input-affix input-affix-postfix">.be</div>
           </div>
         </mock:shadow-root>
       </wink-input>`);
    });
    it('Should render the search input correctly', async () => {
        const page = await newSpecPage({
            components: [Input],
            html: `<wink-input appearance="search" size="sm" icon-left="search" icon-right="backspace" input-mode-option="text" type="text" value="search value" placeholder="search placeholder" input-id="search-id"  name="search id" ></wink-input>`,
        });
        expect(page.root).toEqualHtml(`
    <wink-input appearance="search" icon-left="search" icon-right="backspace" input-id="search-id" input-mode-option="text" name="search id" placeholder="search placeholder" size="sm" type="text" value="search value">
      <mock:shadow-root>
        <div class="input-with-icon-button input-with-icon-button-left input-with-icon-button-right input-wrapper">
          <div class="input-icon-button input-icon-button-left">
            <button aria-label="search" class="input-icon-button-button" type="button">
              <wink-icon appearance="default" icon="search" size="sm"></wink-icon>
            </button>
          </div>
          <input aria-describedby="" autocomplete="off" class="input" enterkeyhint="none" id="search-id" input-mode="text" name="search id" placeholder="search placeholder" type="text" value="search value">
          <div class="input-icon-button input-icon-button-right">
            <button aria-label="backspace" class="input-icon-button-button" type="button">
              <wink-icon appearance="default" icon="backspace" size="sm"></wink-icon>
            </button>
          </div>
        </div>
      </mock:shadow-root>
    </wink-input>
    `);
    });
    it('Should not render backspace icon in the search variant when the value is empty', async () => {
        const page = await newSpecPage({
            components: [Input],
            html: `<wink-input appearance="search" size="sm" icon-left="search" icon-right="backspace" input-mode-option="text" type="text" value="" placeholder="search placeholder" input-id="search-id"  name="search id" ></wink-input>`,
        });
        expect(page.root).toEqualHtml(`
    <wink-input appearance="search" icon-left="search" icon-right="backspace" input-id="search-id" input-mode-option="text" name="search id" placeholder="search placeholder" size="sm" type="text" value="">
      <mock:shadow-root>
        <div class="input-with-icon-button input-with-icon-button-left input-with-icon-button-right input-wrapper">
          <div class="input-icon-button input-icon-button-left">
            <button aria-label="search" class="input-icon-button-button" type="button">
              <wink-icon appearance="default" icon="search" size="sm"></wink-icon>
            </button>
          </div>
          <input aria-describedby="" autocomplete="off" class="input" enterkeyhint="none" id="search-id" input-mode="text" name="search id" placeholder="search placeholder" type="text" value="">
        </div>
      </mock:shadow-root>
    </wink-input>
    `);
    });
});
//# sourceMappingURL=input.spec.js.map
