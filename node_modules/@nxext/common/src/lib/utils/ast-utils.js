"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addAfterLastImport = exports.addImport = exports.readTsSourceFile = void 0;
const ts = require("typescript");
const typescript_1 = require("nx/src/utils/typescript");
const devkit_1 = require("@nx/devkit");
function readTsSourceFile(host, path) {
    if (!host.exists(path)) {
        throw new Error(`Typescript file not readable (${path}).`);
    }
    else {
        const contentBuffer = host.read(path);
        return ts.createSourceFile(path, contentBuffer.toString(), ts.ScriptTarget.Latest, true);
    }
}
exports.readTsSourceFile = readTsSourceFile;
function addImport(source, statement) {
    return [addAfterLastImport(source, statement)];
}
exports.addImport = addImport;
function addAfterLastImport(source, statement) {
    const allImports = (0, typescript_1.findNodes)(source, ts.SyntaxKind.ImportDeclaration);
    if (allImports.length > 0) {
        const lastImport = allImports[allImports.length - 1];
        return {
            type: devkit_1.ChangeType.Insert,
            index: lastImport.end + 1,
            text: `\n${statement}\n`,
        };
    }
    else {
        return {
            type: devkit_1.ChangeType.Insert,
            index: 0,
            text: `\n${statement}\n`,
        };
    }
}
exports.addAfterLastImport = addAfterLastImport;
//# sourceMappingURL=ast-utils.js.map