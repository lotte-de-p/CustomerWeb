"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addAngularSchematic = exports.addAngularGenerator = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const versions_1 = require("../../../utils/versions");
const utillities_1 = require("../../../utils/utillities");
const calculate_stencil_source_options_1 = require("../lib/calculate-stencil-source-options");
const path_1 = require("path");
const fileutils_1 = require("../../../utils/fileutils");
const stencil_core_utils_1 = require("../../../stencil-core-utils");
const typescript_1 = require("typescript");
const angular_ast_utils_1 = require("../../../utils/angular-ast-utils");
const generator_1 = require("../../storybook-configuration/generator");
const common_1 = require("@nxext/common");
const js_1 = require("@nx/js");
function prepareAngularLibrary(host, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const angularProjectName = `${options.projectName}-angular`;
        const { libsDir } = (0, devkit_1.getWorkspaceLayout)(host);
        yield (0, devkit_1.ensurePackage)('@nx/angular', devkit_1.NX_VERSION);
        const generators = yield Promise.resolve().then(() => require('@nx/angular/generators'));
        const libraryTarget = yield generators.libraryGenerator(host, {
            name: angularProjectName,
            skipFormat: true,
            publishable: options.publishable,
            importPath: options.importPath,
        });
        (0, devkit_1.addDependenciesToPackageJson)(host, {}, {
            '@stencil/angular-output-target': versions_1.STENCIL_OUTPUTTARGET_VERSION['angular'],
        });
        (0, utillities_1.addToGitignore)(host, `${libsDir}/${angularProjectName}/**/generated`);
        return libraryTarget;
    });
}
function addAngularOutputtarget(host, projectName, stencilProjectConfig, stencilConfigPath, stencilConfigSource, packageName) {
    const angularProjectConfig = (0, devkit_1.readProjectConfiguration)(host, `${projectName}-angular`);
    const realtivePath = (0, path_1.relative)((0, fileutils_1.getDistDir)(stencilProjectConfig.root), angularProjectConfig.root);
    const proxyPath = (0, devkit_1.joinPathFragments)(realtivePath, 'src/generated/directives/proxies.ts');
    const arrayPath = (0, devkit_1.joinPathFragments)(realtivePath, 'src/generated/directives/index.ts');
    const changes = (0, devkit_1.applyChangesToString)(stencilConfigSource.text, [
        ...(0, common_1.addImport)(stencilConfigSource, `import { angularOutputTarget, ValueAccessorConfig } from '@stencil/angular-output-target';`),
        ...(0, stencil_core_utils_1.addOutputTarget)(stencilConfigSource, `
      angularOutputTarget({
          componentCorePackage: '${packageName}',
          directivesProxyFile: '${proxyPath}',
          directivesArrayFile: '${arrayPath}',
          valueAccessorConfigs: angularValueAccessorBindings
        }),
      `),
    ]);
    host.write(stencilConfigPath, changes);
    (0, js_1.addGlobal)(host, stencilConfigSource, stencilConfigPath, 'const angularValueAccessorBindings: ValueAccessorConfig[] = [];');
}
function addLibraryDirectives(host, options) {
    const angularProjectName = `${options.projectName}-angular`;
    const { libsDir } = (0, devkit_1.getWorkspaceLayout)(host);
    const modulePath = (0, devkit_1.joinPathFragments)(`${libsDir}/${angularProjectName}/src/lib/${angularProjectName}.module.ts`);
    const sourceText = host.read(modulePath, 'utf-8');
    let sourceFile = (0, typescript_1.createSourceFile)(modulePath, sourceText, typescript_1.ScriptTarget.Latest, true);
    sourceFile = (0, angular_ast_utils_1.addDeclarationToModule)(host, sourceFile, modulePath, '...DIRECTIVES');
    sourceFile = (0, angular_ast_utils_1.addExportToModule)(host, sourceFile, modulePath, '...DIRECTIVES');
    const changes = (0, devkit_1.applyChangesToString)(sourceFile.getFullText(), [
        ...(0, common_1.addImport)(sourceFile, `import { DIRECTIVES } from '../generated/directives';`),
        ...(0, common_1.addImport)(sourceFile, `import { defineCustomElements} from '${(0, generator_1.getProjectTsImportPath)(host, options.projectName)}/loader';`),
        (0, common_1.addAfterLastImport)(sourceFile, `\ndefineCustomElements();\n`),
    ]);
    host.write(modulePath, changes);
}
function addAngularGenerator(host, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const libraryTarget = yield prepareAngularLibrary(host, options);
        addLibraryDirectives(host, options);
        const { stencilProjectConfig, stencilConfigPath, stencilConfigSource, packageName, } = (0, calculate_stencil_source_options_1.calculateStencilSourceOptions)(host, options.projectName);
        addAngularOutputtarget(host, options.projectName, stencilProjectConfig, stencilConfigPath, stencilConfigSource, packageName);
        return libraryTarget;
    });
}
exports.addAngularGenerator = addAngularGenerator;
exports.default = addAngularGenerator;
exports.addAngularSchematic = (0, devkit_1.convertNxGenerator)(addAngularGenerator);
//# sourceMappingURL=generator.js.map