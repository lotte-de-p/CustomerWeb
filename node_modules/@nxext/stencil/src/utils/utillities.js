"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.readNxVersion = exports.hasError = exports.isBuildableStencilProject = exports.addToGitignore = exports.calculateStyle = void 0;
const ignore_1 = require("ignore");
const devkit_1 = require("@nx/devkit");
const stencil_core_utils_1 = require("../stencil-core-utils");
function calculateStyle(style) {
    const styleDefault = stencil_core_utils_1.SupportedStyles.css;
    if (style == undefined) {
        return styleDefault;
    }
    return /^(css|scss|less|styl|pcss)$/.test(style) ? style : styleDefault;
}
exports.calculateStyle = calculateStyle;
function addToGitignore(host, path) {
    if (!host.exists('.gitignore')) {
        return;
    }
    const ig = (0, ignore_1.default)();
    ig.add(host.read('.gitignore').toString('utf-8'));
    if (!ig.ignores(path)) {
        const gitignore = host.read('.gitignore');
        if (gitignore) {
            const content = `${gitignore.toString('utf-8').trimRight()}\n${path}\n`;
            host.write('.gitignore', content);
        }
    }
}
exports.addToGitignore = addToGitignore;
function isBuildableStencilProject(project) {
    const target = project.targets && project.targets['build'] ? project.targets['build'] : {};
    return target && target.executor === `@nxext/stencil:build`;
}
exports.isBuildableStencilProject = isBuildableStencilProject;
const hasError = (diagnostics) => {
    if (diagnostics == null || diagnostics.length === 0) {
        return false;
    }
    return diagnostics.some((d) => d.level === 'error' && d.type !== 'runtime');
};
exports.hasError = hasError;
function readNxVersion(host) {
    const packageJson = (0, devkit_1.readJson)(host, 'package.json');
    const nxVersion = packageJson.devDependencies['@nx/workspace']
        ? packageJson.devDependencies['@nx/workspace']
        : packageJson.dependencies['@nx/workspace'];
    if (!nxVersion) {
        throw new Error('@nx/workspace is not a dependency.');
    }
    return nxVersion;
}
exports.readNxVersion = readNxVersion;
//# sourceMappingURL=utillities.js.map