"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const devkit_1 = require("@nx/devkit");
const executor_options_utils_1 = require("@nx/devkit/src/generators/executor-options-utils");
async function default_1(tree) {
    updateNonAngularStorybookBuildTargets(tree);
    updateNonAngularStorybookServeTargets(tree);
    await (0, devkit_1.formatFiles)(tree);
}
exports.default = default_1;
function updateNonAngularStorybookBuildTargets(tree) {
    (0, executor_options_utils_1.forEachExecutorOptions)(tree, '@nrwl/storybook:build', (_options, projectName, targetName, configuration) => {
        if (!configuration) {
            return;
        }
        const projectConfiguration = (0, devkit_1.readProjectConfiguration)(tree, projectName);
        if (!projectConfiguration.targets[targetName].options) {
            projectConfiguration.targets[targetName].options = {};
        }
        if (!projectConfiguration.targets[targetName].options.configDir) {
            projectConfiguration.targets[targetName].options.configDir =
                projectConfiguration.targets[targetName].options.config?.configFolder;
        }
        if (!projectConfiguration.targets[targetName].options.outputDir) {
            projectConfiguration.targets[targetName].options.outputDir =
                projectConfiguration.targets[targetName].options.outputPath;
        }
        if (!projectConfiguration.targets[targetName].options.docs) {
            projectConfiguration.targets[targetName].options.docs =
                projectConfiguration.targets[targetName].options.docsMode;
        }
        projectConfiguration.targets[targetName].outputs =
            projectConfiguration.targets[targetName].outputs?.map((output) => output.replace('{options.outputPath}', '{options.outputDir}'));
        delete projectConfiguration.targets[targetName].options.config;
        delete projectConfiguration.targets[targetName].options.outputPath;
        delete projectConfiguration.targets[targetName].options.docsMode;
        (0, devkit_1.updateProjectConfiguration)(tree, projectName, {
            ...projectConfiguration,
        });
    });
}
function updateNonAngularStorybookServeTargets(tree) {
    (0, executor_options_utils_1.forEachExecutorOptions)(tree, '@nrwl/storybook:storybook', (_options, projectName, targetName, configuration) => {
        if (!configuration) {
            return;
        }
        const projectConfiguration = (0, devkit_1.readProjectConfiguration)(tree, projectName);
        if (!projectConfiguration.targets[targetName].options) {
            projectConfiguration.targets[targetName].options = {};
        }
        if (!projectConfiguration.targets[targetName].options.configDir) {
            projectConfiguration.targets[targetName].options.configDir =
                projectConfiguration.targets[targetName].options.config?.configFolder;
        }
        if (!projectConfiguration.targets[targetName].options.docs) {
            projectConfiguration.targets[targetName].options.docs =
                projectConfiguration.targets[targetName].options.docsMode;
        }
        delete projectConfiguration.targets[targetName].options.config;
        delete projectConfiguration.targets[targetName].options.docsMode;
        (0, devkit_1.updateProjectConfiguration)(tree, projectName, {
            ...projectConfiguration,
        });
    });
}
