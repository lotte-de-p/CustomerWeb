"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cypressProjectGeneratorInternal = exports.cypressProjectGenerator = void 0;
const project_name_1 = require("@nx/cypress/src/utils/project-name");
const devkit_1 = require("@nx/devkit");
const project_name_and_root_utils_1 = require("@nx/devkit/src/generators/project-name-and-root-utils");
const path_1 = require("path");
const utilities_1 = require("../../utils/utilities");
const versions_1 = require("../../utils/versions");
async function cypressProjectGenerator(tree, schema) {
    return await cypressProjectGeneratorInternal(tree, {
        projectNameAndRootFormat: 'derived',
        ...schema,
    });
}
exports.cypressProjectGenerator = cypressProjectGenerator;
async function cypressProjectGeneratorInternal(tree, schema) {
    const { configurationGenerator } = (0, devkit_1.ensurePackage)('@nx/cypress', versions_1.nxVersion);
    const e2eName = schema.name ? `${schema.name}-e2e` : undefined;
    const { projectName, projectRoot } = await (0, project_name_and_root_utils_1.determineProjectNameAndRootOptions)(tree, {
        name: e2eName,
        projectType: 'application',
        directory: schema.directory,
        projectNameAndRootFormat: schema.projectNameAndRootFormat,
        callingGenerator: '@nx/storybook:cypress-project',
    });
    const libConfig = (0, devkit_1.readProjectConfiguration)(tree, schema.name);
    const libRoot = libConfig.root;
    (0, devkit_1.addProjectConfiguration)(tree, projectName, {
        root: projectRoot,
        projectType: 'application',
        sourceRoot: (0, devkit_1.joinPathFragments)(projectRoot, 'src'),
        targets: {},
        implicitDependencies: [projectName],
    });
    const cypressTask = await configurationGenerator(tree, {
        project: projectName,
        js: schema.js,
        linter: schema.linter,
        directory: projectRoot,
        devServerTarget: `${schema.name}:storybook`,
        skipFormat: true,
    });
    const generatedCypressProjectName = (0, project_name_1.getE2eProjectName)(schema.name, libRoot, schema.directory);
    removeUnneededFiles(tree, generatedCypressProjectName, schema.js);
    addBaseUrlToCypressConfig(tree, generatedCypressProjectName);
    updateAngularJsonBuilder(tree, {
        e2eProjectName: generatedCypressProjectName,
        targetProjectName: schema.name,
        ciTargetName: schema.ciTargetName,
    });
    if (!schema.skipFormat) {
        await (0, devkit_1.formatFiles)(tree);
    }
    return cypressTask;
}
exports.cypressProjectGeneratorInternal = cypressProjectGeneratorInternal;
function removeUnneededFiles(tree, projectName, js) {
    const { sourceRoot, root } = (0, devkit_1.readProjectConfiguration)(tree, projectName);
    const fileType = js ? 'js' : 'ts';
    if (tree.exists((0, path_1.join)(root, 'cypress.config.ts'))) {
        (0, utilities_1.safeFileDelete)(tree, `${sourceRoot}/e2e/app.cy.${fileType}`);
        (0, utilities_1.safeFileDelete)(tree, `${sourceRoot}/support/app.po.${fileType}`);
    }
    else {
        (0, utilities_1.safeFileDelete)(tree, `${sourceRoot}/integration/app.spec.${fileType}`);
        (0, utilities_1.safeFileDelete)(tree, `${sourceRoot}/support/app.po.${fileType}`);
    }
}
function addBaseUrlToCypressConfig(tree, projectName) {
    const projectRoot = (0, devkit_1.readProjectConfiguration)(tree, projectName).root;
    const cypressJson = (0, path_1.join)(projectRoot, 'cypress.json');
    const cypressTs = (0, path_1.join)(projectRoot, 'cypress.config.ts');
    // TODO(caleb): remove this when cypress < v10 is deprecated
    if (tree.exists(cypressJson)) {
        // cypress < v10
        (0, devkit_1.updateJson)(tree, cypressJson, (json) => {
            json.baseUrl = 'http://localhost:4400';
            return json;
        });
    }
    else if (tree.exists(cypressTs)) {
        // cypress >= v10
        tree.delete(cypressTs);
        (0, devkit_1.generateFiles)(tree, (0, path_1.join)(__dirname, 'files'), projectRoot, {
            tpl: '',
        });
    }
}
function updateAngularJsonBuilder(tree, opts) {
    const project = (0, devkit_1.readProjectConfiguration)(tree, opts.e2eProjectName);
    const e2eTarget = project.targets.e2e;
    project.targets.e2e = {
        ...e2eTarget,
        options: {
            ...e2eTarget.options,
            devServerTarget: `${opts.targetProjectName}:storybook`,
        },
        configurations: {
            ci: {
                devServerTarget: opts.ciTargetName
                    ? `${opts.targetProjectName}:${opts.ciTargetName}:ci`
                    : `${opts.targetProjectName}:storybook:ci`,
            },
        },
    };
    (0, devkit_1.updateProjectConfiguration)(tree, opts.e2eProjectName, project);
}
function projectAlreadyHasCypress(tree) {
    const packageJsonContents = (0, devkit_1.readJson)(tree, 'package.json');
    return ((packageJsonContents?.['devDependencies']?.['@nx/cypress'] ||
        packageJsonContents?.['dependencies']?.['@nx/cypress'] ||
        packageJsonContents?.['devDependencies']?.['@nrwl/cypress'] ||
        packageJsonContents?.['dependencies']?.['@nrwl/cypress']) &&
        (packageJsonContents?.['devDependencies']?.['cypress'] ||
            packageJsonContents?.['dependencies']?.['cypress']));
}
exports.default = cypressProjectGenerator;
