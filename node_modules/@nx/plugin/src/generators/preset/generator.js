"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const devkit_1 = require("@nx/devkit");
const eslint_1 = require("@nx/eslint");
const plugin_1 = require("../plugin/plugin");
const create_package_1 = require("../create-package/create-package");
async function default_1(tree, options) {
    const tasks = [];
    const pluginProjectName = (0, devkit_1.names)(options.pluginName.includes('/')
        ? options.pluginName.split('/')[1]
        : options.pluginName).fileName;
    options.createPackageName =
        options.createPackageName === 'false' // for command line in e2e, it is passed as a string
            ? undefined
            : options.createPackageName;
    const pluginTask = await (0, plugin_1.pluginGenerator)(tree, {
        compiler: 'tsc',
        linter: eslint_1.Linter.EsLint,
        name: pluginProjectName,
        skipFormat: true,
        unitTestRunner: 'jest',
        importPath: options.pluginName,
        e2eTestRunner: 'jest',
        publishable: true,
        // when creating a CLI package, the plugin will be in the packages folder
        directory: options.createPackageName && options.createPackageName !== 'false'
            ? 'packages'
            : undefined,
        rootProject: options.createPackageName ? false : true,
    });
    tasks.push(pluginTask);
    moveNxPluginToDevDeps(tree);
    if (options.createPackageName) {
        const e2eProject = `${options.pluginName}-e2e`;
        const cliTask = await (0, create_package_1.default)(tree, {
            directory: 'packages',
            name: options.createPackageName,
            e2eProject: e2eProject,
            project: options.pluginName,
            skipFormat: true,
            unitTestRunner: 'jest',
            linter: eslint_1.Linter.EsLint,
            compiler: 'tsc',
        });
        tasks.push(cliTask);
    }
    await (0, devkit_1.formatFiles)(tree);
    return (0, devkit_1.runTasksInSerial)(...tasks);
}
exports.default = default_1;
function moveNxPluginToDevDeps(tree) {
    (0, devkit_1.updateJson)(tree, 'package.json', (json) => {
        const nxPluginEntry = json.dependencies['@nx/plugin'];
        delete json.dependencies['@nx/plugin'];
        json.devDependencies['@nx/plugin'] = nxPluginEntry;
        return json;
    });
}
