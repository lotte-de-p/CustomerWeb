"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.e2eProjectGeneratorInternal = exports.e2eProjectGenerator = void 0;
const devkit_1 = require("@nx/devkit");
const project_name_and_root_utils_1 = require("@nx/devkit/src/generators/project-name-and-root-utils");
const jest_1 = require("@nx/jest");
const js_1 = require("@nx/js");
const generator_1 = require("@nx/js/src/generators/setup-verdaccio/generator");
const add_local_registry_scripts_1 = require("@nx/js/src/utils/add-local-registry-scripts");
const eslint_1 = require("@nx/eslint");
const path_1 = require("path");
async function normalizeOptions(host, options) {
    const projectName = options.rootProject ? 'e2e' : `${options.pluginName}-e2e`;
    options.addPlugin ??= process.env.NX_ADD_PLUGINS !== 'false';
    let projectRoot;
    if (options.projectNameAndRootFormat === 'as-provided') {
        const projectNameAndRootOptions = await (0, project_name_and_root_utils_1.determineProjectNameAndRootOptions)(host, {
            name: projectName,
            projectType: 'application',
            directory: options.rootProject || !options.projectDirectory
                ? projectName
                : `${options.projectDirectory}-e2e`,
            projectNameAndRootFormat: `as-provided`,
            callingGenerator: '@nx/plugin:e2e-project',
        });
        projectRoot = projectNameAndRootOptions.projectRoot;
    }
    else {
        const { layoutDirectory, projectDirectory } = (0, devkit_1.extractLayoutDirectory)(options.projectDirectory);
        const { appsDir: defaultAppsDir } = (0, devkit_1.getWorkspaceLayout)(host);
        const appsDir = layoutDirectory ?? defaultAppsDir;
        projectRoot = options.rootProject
            ? projectName
            : projectDirectory
                ? (0, devkit_1.joinPathFragments)(appsDir, `${projectDirectory}-e2e`)
                : (0, devkit_1.joinPathFragments)(appsDir, projectName);
    }
    const pluginPropertyName = (0, devkit_1.names)(options.pluginName).propertyName;
    return {
        ...options,
        projectName,
        linter: options.linter ?? eslint_1.Linter.EsLint,
        pluginPropertyName,
        projectRoot,
    };
}
function validatePlugin(host, pluginName) {
    try {
        (0, devkit_1.readProjectConfiguration)(host, pluginName);
    }
    catch {
        throw new Error(`Project name "${pluginName}" doesn't not exist.`);
    }
}
function addFiles(host, options) {
    const projectConfiguration = (0, devkit_1.readProjectConfiguration)(host, options.pluginName);
    const { name: pluginPackageName } = (0, devkit_1.readJson)(host, (0, path_1.join)(projectConfiguration.root, 'package.json'));
    (0, devkit_1.generateFiles)(host, (0, path_1.join)(__dirname, './files'), options.projectRoot, {
        ...options,
        tmpl: '',
        rootTsConfigPath: (0, js_1.getRelativePathToRootTsConfig)(host, options.projectRoot),
        packageManagerCommands: (0, devkit_1.getPackageManagerCommand)('npm'),
        pluginPackageName,
    });
}
async function addJest(host, options) {
    (0, devkit_1.addProjectConfiguration)(host, options.projectName, {
        root: options.projectRoot,
        projectType: 'application',
        sourceRoot: `${options.projectRoot}/src`,
        targets: {},
        implicitDependencies: [options.pluginName],
    });
    const jestTask = await (0, jest_1.configurationGenerator)(host, {
        project: options.projectName,
        targetName: 'e2e',
        setupFile: 'none',
        supportTsx: false,
        skipSerializers: true,
        skipFormat: true,
        addPlugin: options.addPlugin,
    });
    const { startLocalRegistryPath, stopLocalRegistryPath } = (0, add_local_registry_scripts_1.addLocalRegistryScripts)(host);
    (0, jest_1.addPropertyToJestConfig)(host, (0, path_1.join)(options.projectRoot, 'jest.config.ts'), 'globalSetup', (0, path_1.join)((0, devkit_1.offsetFromRoot)(options.projectRoot), startLocalRegistryPath));
    (0, jest_1.addPropertyToJestConfig)(host, (0, path_1.join)(options.projectRoot, 'jest.config.ts'), 'globalTeardown', (0, path_1.join)((0, devkit_1.offsetFromRoot)(options.projectRoot), stopLocalRegistryPath));
    const project = (0, devkit_1.readProjectConfiguration)(host, options.projectName);
    const e2eTarget = project.targets.e2e;
    project.targets.e2e = {
        ...e2eTarget,
        dependsOn: [`^build`],
        options: {
            ...e2eTarget.options,
            runInBand: true,
        },
    };
    (0, devkit_1.updateProjectConfiguration)(host, options.projectName, project);
    return jestTask;
}
async function addLintingToApplication(tree, options) {
    const lintTask = await (0, eslint_1.lintProjectGenerator)(tree, {
        linter: options.linter,
        project: options.projectName,
        tsConfigPaths: [
            (0, devkit_1.joinPathFragments)(options.projectRoot, 'tsconfig.app.json'),
        ],
        unitTestRunner: 'jest',
        skipFormat: true,
        setParserOptionsProject: false,
        addPlugin: options.addPlugin,
    });
    return lintTask;
}
async function e2eProjectGenerator(host, schema) {
    return await e2eProjectGeneratorInternal(host, {
        addPlugin: false,
        projectNameAndRootFormat: 'derived',
        ...schema,
    });
}
exports.e2eProjectGenerator = e2eProjectGenerator;
async function e2eProjectGeneratorInternal(host, schema) {
    const tasks = [];
    validatePlugin(host, schema.pluginName);
    const options = await normalizeOptions(host, schema);
    addFiles(host, options);
    tasks.push(await (0, generator_1.setupVerdaccio)(host, {
        skipFormat: true,
    }));
    tasks.push(await addJest(host, options));
    if (options.linter !== eslint_1.Linter.None) {
        tasks.push(await addLintingToApplication(host, {
            ...options,
        }));
    }
    if (!options.skipFormat) {
        await (0, devkit_1.formatFiles)(host);
    }
    return (0, devkit_1.runTasksInSerial)(...tasks);
}
exports.e2eProjectGeneratorInternal = e2eProjectGeneratorInternal;
exports.default = e2eProjectGenerator;
