"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeOptions = void 0;
const devkit_1 = require("@nx/devkit");
const project_name_and_root_utils_1 = require("@nx/devkit/src/generators/project-name-and-root-utils");
async function normalizeOptions(host, options) {
    const { projectName, projectRoot, importPath: npmPackageName, projectNameAndRootFormat, } = await (0, project_name_and_root_utils_1.determineProjectNameAndRootOptions)(host, {
        name: options.name,
        projectType: 'library',
        directory: options.directory,
        importPath: options.importPath,
        projectNameAndRootFormat: options.projectNameAndRootFormat,
        rootProject: options.rootProject,
        callingGenerator: '@nx/plugin:plugin',
    });
    options.projectNameAndRootFormat = projectNameAndRootFormat;
    options.rootProject = projectRoot === '.';
    let projectDirectory = projectRoot;
    if (options.projectNameAndRootFormat === 'derived') {
        let { layoutDirectory } = (0, devkit_1.extractLayoutDirectory)(options.directory);
        if (!layoutDirectory) {
            const { libsDir } = (0, devkit_1.getWorkspaceLayout)(host);
            layoutDirectory = libsDir;
        }
        if (projectRoot.startsWith(`${layoutDirectory}/`)) {
            projectDirectory = projectRoot.replace(`${layoutDirectory}/`, '');
        }
    }
    const parsedTags = options.tags
        ? options.tags.split(',').map((s) => s.trim())
        : [];
    return {
        ...options,
        bundler: options.compiler ?? 'tsc',
        fileName: projectName,
        name: projectName,
        projectRoot,
        projectDirectory,
        parsedTags,
        npmPackageName,
        publishable: options.publishable ?? false,
    };
}
exports.normalizeOptions = normalizeOptions;
