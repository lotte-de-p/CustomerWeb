"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.nxPluginE2EExecutor = void 0;
const devkit_1 = require("@nx/devkit");
const jest_impl_1 = require("@nx/jest/src/executors/jest/jest.impl");
// TODO(v19): remove this
async function* nxPluginE2EExecutor(options, context) {
    const { target, ...jestOptions } = options;
    devkit_1.output.warn({
        title: `"@nx/plugin:e2e" is deprecated and will be removed in Nx 19`,
        bodyLines: [
            'Use the "@nx/jest:jest" executor instead and set the following:',
            `"dependsOn": ["${target}"]`,
        ],
    });
    let success;
    for await (const _ of runBuildTarget(target, context)) {
        try {
            success = await runTests(jestOptions, context);
        }
        catch (e) {
            devkit_1.logger.error(e.message);
            success = false;
        }
    }
    return { success };
}
exports.nxPluginE2EExecutor = nxPluginE2EExecutor;
async function* runBuildTarget(buildTarget, context) {
    const { project, target, configuration } = (0, devkit_1.parseTargetString)(buildTarget, context);
    const buildTargetOptions = (0, devkit_1.readTargetOptions)({ project, target, configuration }, context);
    const targetSupportsWatch = Object.keys(buildTargetOptions).includes('watch');
    for await (const output of await (0, devkit_1.runExecutor)({ project, target, configuration }, targetSupportsWatch ? { watch: false } : {}, context)) {
        if (!output.success)
            throw new Error('Could not compile application files.');
        yield output.success;
    }
}
async function runTests(jestOptions, context) {
    const { success } = await (0, jest_impl_1.jestExecutor)({ ...jestOptions, watch: false }, context);
    return success;
}
exports.default = nxPluginE2EExecutor;
