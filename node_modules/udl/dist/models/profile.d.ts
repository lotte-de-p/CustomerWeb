export declare class Profile {
    private loginstate;
    private loginscope;
    private impersonation;
    private technicalID;
    private postalcode;
    private installationPostalCode;
    private billingPostalCode;
    private customerCategory;
    private logintype;
    private customerType;
    setLoginState: (loginstate: string) => void;
    getLoginState: () => string;
    setLoginScope: (loginscope: string) => void;
    getLoginScope: () => string;
    setImpersonation: (impersonation: boolean) => void;
    getImpersonation: () => boolean;
    setTechnicalID: (technicalID: string) => void;
    getTechnicalID: () => string;
    setPostalCode: (postalcode: string) => void;
    getPostalCode: () => string;
    setInstallationPostalCode: (installationPostalCode: string) => void;
    getInstallationPostalCode: () => string;
    setBillingPostalCode: (billingPostalCode: string) => void;
    getBillingPostalCode: () => string;
    setCustomerCategory: (customerCategory: string) => void;
    getCustomerCategory: () => string;
    setLoginType: (logintype: string) => void;
    getLoginType: () => string;
    setCustomerType: (customerType: string) => void;
    getCustomerType: () => string;
}
export declare class ProfileBuilder {
    private profile;
    withLoginState(loginstate: string): ProfileBuilder;
    withLoginScope(loginscope: string): ProfileBuilder;
    withImpersonation(impersonation: boolean): ProfileBuilder;
    withTechnicalID(technicalID: string): ProfileBuilder;
    withPostalCode(postalcode: string): ProfileBuilder;
    withInstallationPostalCode(installationPostalCode: string): ProfileBuilder;
    withBillingPostalCode(billingPostalCode: string): ProfileBuilder;
    withCustomerCategory(customerCategory: string): ProfileBuilder;
    withLoginType(logintype: string): ProfileBuilder;
    withCustomerType(customerType: string): ProfileBuilder;
    build(): Profile;
}
