"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var utility_1 = require("../util/utility");
var EventInfo = /** @class */ (function () {
    function EventInfo(eventInfoJson) {
        var _this = this;
        this.setEventName = function (eventName) {
            _this.eventName = eventName;
        };
        this.getEventName = function () {
            return _this.eventName;
        };
        this.setEventStatus = function (eventStatus) {
            _this.eventStatus = eventStatus;
        };
        this.getEventStatus = function () {
            return _this.eventStatus;
        };
        this.setEventStatusMessage = function (eventStatusMessage) {
            _this.eventStatusMessage = eventStatusMessage;
        };
        this.getEventStatusMessage = function () {
            return _this.eventStatusMessage;
        };
        this.setType = function (eventType) {
            _this.type = eventType;
        };
        this.getType = function () {
            return _this.type;
        };
        this.setTimestamp = function (eventTimestamp) {
            _this.timeStamp = eventTimestamp;
        };
        this.getTimestamp = function () {
            return _this.timeStamp;
        };
        Object.assign(this, eventInfoJson);
        this.timeStamp = utility_1.Utility.getCurrentDateTime();
    }
    return EventInfo;
}());
exports.EventInfo = EventInfo;
var EventInfoBuilder = /** @class */ (function () {
    function EventInfoBuilder() {
        this.eventInfo = new EventInfo();
    }
    EventInfoBuilder.prototype.withEventName = function (name) {
        this.eventInfo.setEventName(name);
        return this;
    };
    EventInfoBuilder.prototype.withType = function (type) {
        this.eventInfo.setType(type);
        return this;
    };
    EventInfoBuilder.prototype.withEventStatus = function (status) {
        this.eventInfo.setEventStatus(status);
        return this;
    };
    EventInfoBuilder.prototype.withEventStatusMessage = function (statusMessage) {
        this.eventInfo.setEventStatusMessage(statusMessage);
        return this;
    };
    EventInfoBuilder.prototype.withTimestamp = function (timestamp) {
        this.eventInfo.setTimestamp(timestamp);
        return this;
    };
    EventInfoBuilder.prototype.build = function () {
        return this.eventInfo;
    };
    return EventInfoBuilder;
}());
exports.EventInfoBuilder = EventInfoBuilder;
//# sourceMappingURL=eventInfo.js.map