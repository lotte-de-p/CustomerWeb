"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var page_1 = require("./page");
var transaction_1 = require("./transaction");
var analyticsService_1 = require("../services/analyticsService");
var utility_1 = require("../util/utility");
var event_1 = require("./event");
var analytics_beacon_enum_1 = require("../enums/analytics-beacon.enum");
var direct_call_label_enum_1 = require("../enums/direct-call-label.enum");
var analytics_constant_1 = require("../constants/analytics.constant");
var analytics_call_fire_strategy_enum_1 = require("../enums/analytics-call-fire-strategy.enum");
var DataLayer = /** @class */ (function () {
    function DataLayer(dataLayerJson) {
        var _this = this;
        this.setVersion = function (version) {
            _this.version = version;
        };
        this.getVersion = function () {
            return _this.version;
        };
        this.setDateTimeLocal = function (dateTime) {
            _this.dateTimeLocal = dateTime;
        };
        this.getDateTimeLocal = function () {
            return _this.dateTimeLocal;
        };
        this.setEnvironment = function (env) {
            _this.environment = env;
        };
        this.getEnvironment = function () {
            return _this.environment;
        };
        this.setDoNotFirePageBeacon = function (doNotFirePageBeacon) {
            _this.doNotFirePageBeacon = doNotFirePageBeacon;
        };
        this.getDoNotFirePageBeacon = function () {
            return _this.doNotFirePageBeacon;
        };
        this.getPage = function () {
            return _this.page;
        };
        this.setPage = function (page) {
            _this.page = page;
            return _this.analyticsService.pushDataToAnalyticsWithoutWait(_this.page, _this.doNotFirePageBeacon);
        };
        this.getComponents = function () {
            return _this.component;
        };
        this.setComponents = function (component) {
            _this.component = component;
        };
        this.getEvents = function () {
            return _this.event;
        };
        this.getEventById = function (id) {
            return _this.getEvents().filter(function (event) { return event.getIdentifier() === id; })[0];
        };
        this.addUser = function (user) {
            if (!_this.user) {
                _this.user = [];
            }
            _this.user.push(user);
            return _this.analyticsService.pushDataToAnalyticsWithoutWait(user);
        };
        this.getUsers = function () {
            return _this.user;
        };
        this.getUserById = function (id) {
            return _this.getUsers().filter(function (user) { return user.getIdentifier() === id; })[0];
        };
        this.getCart = function () {
            return _this.cart;
        };
        this.setCart = function (cart) {
            _this.cart = cart;
            return _this.analyticsService.pushDataToAnalyticsWithWait(cart);
        };
        this.getTransaction = function () {
            return _this.transaction;
        };
        this.setTransaction = function (transaction) {
            _this.transaction = transaction;
            return _this.analyticsService.pushDataToAnalyticsWithWait(transaction);
        };
        this.setBrand = function (brand) {
            _this.brand = brand;
        };
        this.getBrand = function () {
            return _this.brand;
        };
        this.setApplicationID = function (appId) {
            _this.applicationID = appId;
        };
        this.getApplicationID = function () {
            return _this.applicationID;
        };
        this.getCategory = function (componentInstanceID) {
            var component = _this.getComponentById(componentInstanceID);
            if (component) {
                return component.getCategory();
            }
        };
        this.getComponentById = function (componentInstanceId) {
            return _this.getComponents() && _this.getComponents().length > 0 ?
                _this.getComponents().filter(function (component) {
                    return component.getComponentInfo().getComponentInstanceID() === componentInstanceId;
                })[0] :
                undefined;
        };
        this.addEvent = function (event) {
            _this.appendEvent(event);
            return _this.analyticsService.pushDataToAnalyticsWithWait(event);
        };
        this.appendEvent = function (event) {
            if (!_this.event) {
                _this.event = [];
            }
            _this.event.push(event);
        };
        this.addStepViewEvent = function (event) {
            event.setDirectCallLabel(direct_call_label_enum_1.DirectCallLabelEnum.EVENT_OCCURRED_STEP_VIEW);
            if (_this.doNotFirePageBeacon) { // default page-view beacon is disabled
                _this.appendEvent(event);
                var stepViewEventPromise = _this.analyticsService.pushDataToAnalyticsWithoutWait(event);
                stepViewEventPromise.then(function () {
                    _this.analyticsService.getPageBeaconPromise();
                    _this.analyticsService.resolvePromiseNow(_this.getPage().getIdentifier());
                });
                return stepViewEventPromise;
            }
            return _this.addEvent(event);
        };
        this.getAnalyticsPromises = function () {
            var analyticsPromises = _this.analyticsService.getAnalyticsPromises();
            var promises = Object.keys(analyticsPromises).map(function (item) {
                return analyticsPromises[item].promise;
            });
            return promises;
        };
        this.reportParkedObjects = function () {
            var pendingParkedAnalyticsObjects = [];
            var parkedAnalyticsObjectsInStore = utility_1.Utility.getItemFromStore(analytics_constant_1.AnalyticsConstants.STORE_KEY_PARKED_EVENTS);
            var parkedAnalyticsObjects = parkedAnalyticsObjectsInStore ? JSON.parse(parkedAnalyticsObjectsInStore) : [];
            parkedAnalyticsObjects.forEach(function (parkedAnalyticsObject) {
                var parkedJSONObject = parkedAnalyticsObject.parkedObject;
                var currentURI = window.location.pathname;
                if ((parkedJSONObject.strategy === analytics_call_fire_strategy_enum_1.AnalyticsCallFireStrategyEnum.FIRE_ON_PAGE_RELOAD)
                    || (parkedJSONObject.strategy === analytics_call_fire_strategy_enum_1.AnalyticsCallFireStrategyEnum.FIRE_ON_NEXT_PAGE
                        && currentURI !== parkedAnalyticsObject.parkedOnPage)) {
                    delete parkedJSONObject.strategy;
                    delete parkedJSONObject.identifier;
                    _this.reportParkedObject(parkedJSONObject);
                }
                else {
                    pendingParkedAnalyticsObjects.push(parkedAnalyticsObject);
                }
            });
            utility_1.Utility.setItemInStore(analytics_constant_1.AnalyticsConstants.STORE_KEY_PARKED_EVENTS, pendingParkedAnalyticsObjects);
        };
        this.reportParkedObject = function (parkedJSONObject) {
            switch (parkedJSONObject.directCallLabel) {
                case direct_call_label_enum_1.DirectCallLabelEnum.EVENT_OCCURRED:
                    var parkedEvent = new event_1.Event(parkedJSONObject);
                    _this.addEvent(parkedEvent);
                    break;
                case direct_call_label_enum_1.DirectCallLabelEnum.TRANSACTION_UPDATED:
                    var parkedTransaction = new transaction_1.Transaction(parkedJSONObject);
                    _this.setTransaction(parkedTransaction);
            }
        };
        if (dataLayerJson) {
            dataLayerJson.initialized = true;
            Object.assign(this, dataLayerJson);
            this.analyticsService = new analyticsService_1.AnalyticsService();
            this.dateTimeLocal = utility_1.Utility.getCurrentDateTime();
            if (dataLayerJson.page) {
                this.page = new page_1.Page(dataLayerJson.page);
            }
        }
        else {
            this.analyticsService = new analyticsService_1.AnalyticsService(analytics_beacon_enum_1.AnalyticsBeaconEnum.DISABLED);
        }
    }
    DataLayer.create = function () {
        var udlObjectName = window['udlObjectName'];
        var dataLayerJson = window[udlObjectName];
        if (!(dataLayerJson && dataLayerJson.applicationID && dataLayerJson.environment)) {
            console.error("Missing Mandatory properties!!! Initial DataLayer JSON with applicationID and "
                + " environment properties is mandatory.");
            DataLayer.instance = new DataLayer();
        }
        else {
            if (dataLayerJson.initialized) {
                DataLayer.instance = dataLayerJson;
            }
            else {
                DataLayer.instance = new DataLayer(dataLayerJson);
                window[udlObjectName] = DataLayer.instance;
            }
        }
        return DataLayer.instance;
    };
    DataLayer.destroy = function () {
        DataLayer.instance = null;
    };
    return DataLayer;
}());
exports.DataLayer = DataLayer;
//# sourceMappingURL=dataLayer.js.map