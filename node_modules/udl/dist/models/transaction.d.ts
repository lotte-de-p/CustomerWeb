import { Price } from "./price";
import { Item } from "./item";
import { Base } from "./base";
import { DirectCallLabelEnum } from "../enums/direct-call-label.enum";
import { AnalyticsCallFireStrategyEnum } from "../enums/analytics-call-fire-strategy.enum";
export declare class Transaction extends Base {
    private transactionID;
    private price;
    private item;
    private existingItem;
    constructor(transactionJson?: any);
    setTransactionID: (transactionID: string) => void;
    getTransactionID: () => string;
    setPrice: (price: Price) => void;
    getPrice: () => Price;
    addItem: (item: Item) => void;
    getItems: () => Item[];
    setItems: (items: Item[]) => void;
    addExistingItem: (item: Item) => void;
    getExistingItems: () => Item[];
    setExistingItems: (existingItem: Item[]) => void;
}
export declare class TransactionBuilder {
    private transaction;
    withTransactionID(transactionID: string): TransactionBuilder;
    withPrice(price: Price): TransactionBuilder;
    withItem(item: Item): TransactionBuilder;
    withItems(items: Item[]): TransactionBuilder;
    withExistingItem(item: Item): TransactionBuilder;
    withExistingItems(items: Item[]): TransactionBuilder;
    withAttribute(name: string, value: string | number | boolean): TransactionBuilder;
    withAttributes(items: Item[]): TransactionBuilder;
    withDirectCallLabel(directCallLabel: DirectCallLabelEnum): TransactionBuilder;
    withStrategy(strategy: AnalyticsCallFireStrategyEnum): TransactionBuilder;
    build(): Transaction;
}
