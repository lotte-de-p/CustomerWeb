"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var price_1 = require("./price");
var item_1 = require("./item");
var base_1 = require("./base");
var direct_call_label_enum_1 = require("../enums/direct-call-label.enum");
var Transaction = /** @class */ (function (_super) {
    __extends(Transaction, _super);
    function Transaction(transactionJson) {
        var _this = _super.call(this, direct_call_label_enum_1.DirectCallLabelEnum.TRANSACTION_UPDATED) || this;
        _this.setTransactionID = function (transactionID) {
            _this.transactionID = transactionID;
        };
        _this.getTransactionID = function () {
            return _this.transactionID;
        };
        _this.setPrice = function (price) {
            _this.price = price;
        };
        _this.getPrice = function () {
            return _this.price;
        };
        _this.addItem = function (item) {
            if (!_this.item)
                _this.item = [];
            _this.item.push(item);
        };
        _this.getItems = function () {
            return _this.item;
        };
        _this.setItems = function (items) {
            _this.item = items;
        };
        _this.addExistingItem = function (item) {
            if (!_this.existingItem)
                _this.existingItem = [];
            _this.existingItem.push(item);
        };
        _this.getExistingItems = function () {
            return _this.existingItem;
        };
        _this.setExistingItems = function (existingItem) {
            _this.existingItem = existingItem;
        };
        if (transactionJson) {
            Object.assign(_this, transactionJson);
            _this.price = transactionJson.price ? new price_1.Price(transactionJson.price) : undefined;
            if (transactionJson.item) {
                _this.setItems([]);
                transactionJson.item.forEach(function (itemJson) {
                    var item = new item_1.Item(itemJson);
                    _this.addItem(item);
                });
            }
            if (transactionJson.existingItem) {
                _this.setExistingItems([]);
                transactionJson.existingItem.forEach(function (itemJson) {
                    var item = new item_1.Item(itemJson);
                    _this.addExistingItem(item);
                });
            }
        }
        return _this;
    }
    return Transaction;
}(base_1.Base));
exports.Transaction = Transaction;
var TransactionBuilder = /** @class */ (function () {
    function TransactionBuilder() {
        this.transaction = new Transaction();
    }
    TransactionBuilder.prototype.withTransactionID = function (transactionID) {
        this.transaction.setTransactionID(transactionID);
        return this;
    };
    TransactionBuilder.prototype.withPrice = function (price) {
        this.transaction.setPrice(price);
        return this;
    };
    TransactionBuilder.prototype.withItem = function (item) {
        this.transaction.addItem(item);
        return this;
    };
    TransactionBuilder.prototype.withItems = function (items) {
        this.transaction.setItems(items);
        return this;
    };
    TransactionBuilder.prototype.withExistingItem = function (item) {
        this.transaction.addExistingItem(item);
        return this;
    };
    TransactionBuilder.prototype.withExistingItems = function (items) {
        this.transaction.setExistingItems(items);
        return this;
    };
    TransactionBuilder.prototype.withAttribute = function (name, value) {
        this.transaction.addAttribute(name, value);
        return this;
    };
    TransactionBuilder.prototype.withAttributes = function (items) {
        this.transaction.setAttributes(items);
        return this;
    };
    TransactionBuilder.prototype.withDirectCallLabel = function (directCallLabel) {
        this.transaction.setDirectCallLabel(directCallLabel);
        return this;
    };
    TransactionBuilder.prototype.withStrategy = function (strategy) {
        this.transaction.setStrategy(strategy);
        return this;
    };
    TransactionBuilder.prototype.build = function () {
        return this.transaction;
    };
    return TransactionBuilder;
}());
exports.TransactionBuilder = TransactionBuilder;
//# sourceMappingURL=transaction.js.map