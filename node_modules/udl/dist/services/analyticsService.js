"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var page_1 = require("../models/page");
var analytics_beacon_enum_1 = require("../enums/analytics-beacon.enum");
var loggingService_1 = require("./logging/loggingService");
var analytics_constant_1 = require("../constants/analytics.constant");
var analytics_call_fire_strategy_enum_1 = require("../enums/analytics-call-fire-strategy.enum");
var utility_1 = require("../util/utility");
var deferred_1 = require("./deferred");
var AnalyticsService = /** @class */ (function () {
    function AnalyticsService(analyticsBeacons) {
        this.analyticsBeacons = analyticsBeacons;
        this.analyticsPromises = {};
        this.satelliteCallbacks = [];
        this.loggingService = new loggingService_1.LoggingService();
        this.createSatelliteLoadListener();
        if (!this.analyticsBeacons) {
            this.analyticsBeacons = analytics_beacon_enum_1.AnalyticsBeaconEnum.ENABLED;
        }
    }
    AnalyticsService.prototype.createSatelliteLoadListener = function () {
        var analyticsService = this;
        var _isSatelliteLoaded = window['isSatelliteLoaded'];
        Object.defineProperty(window, 'isSatelliteLoaded', {
            configurable: true,
            enumerable: true,
            get: function () {
                return _isSatelliteLoaded;
            },
            set: function (satelliteLoaded) {
                _isSatelliteLoaded = satelliteLoaded;
                var len = analyticsService.satelliteCallbacks.length;
                for (var i = 0; i < len; i++) {
                    var callback = analyticsService.satelliteCallbacks.shift();
                    callback();
                }
            }
        });
    };
    AnalyticsService.prototype.pushDataToAnalyticsWithoutWait = function (base, doNotFirePageBeacon) {
        var _this = this;
        var baseBeaconDeferred = this.getOrCreateDeferred(base.getIdentifier());
        var pushDataCallback = function () {
            _this.pushDataToAnalyticsWithoutWaitInternal(base, doNotFirePageBeacon);
        };
        // Force resolve promise in case _satellite took long time to load
        var resolvePromiseIfSatelliteNotLoadedCallback = function () {
            _this.loggingService.log({ msg: 'Timer with ' + AnalyticsService.TIMEOUT_IF_SATELLITE_NOT_LOADED + 'ms started to force resolve identifier: ' + base.getIdentifier() });
            _this.resolvePromiseWithDelay(base.getIdentifier(), AnalyticsService.TIMEOUT_IF_SATELLITE_NOT_LOADED);
        };
        this.onSatelliteLoaded(pushDataCallback, resolvePromiseIfSatelliteNotLoadedCallback);
        return baseBeaconDeferred.promise;
    };
    AnalyticsService.prototype.pushDataToAnalyticsWithoutWaitInternal = function (base, doNotFirePageBeacon) {
        if (doNotFirePageBeacon) {
            return;
        }
        this.fireAnalyticsBeacon(base);
    };
    AnalyticsService.prototype.onSatelliteLoaded = function (callback, resolvePromiseIfSatelliteNotLoadedCallback) {
        if (this.isSatelliteLoaded()) {
            this.loggingService.log({ msg: '_satellite is loaded!!' });
            callback();
            return;
        }
        this.loggingService.log({ msg: '_satellite is not loaded. Waiting ........' });
        this.satelliteCallbacks.push(callback);
        resolvePromiseIfSatelliteNotLoadedCallback();
    };
    AnalyticsService.prototype.isSatelliteLoaded = function () {
        return window['isSatelliteLoaded'];
    };
    AnalyticsService.prototype.pushDataToAnalyticsWithWait = function (analyticsDataObj) {
        var _this = this;
        var analyticsDeferred = this.getOrCreateDeferred(analyticsDataObj.getIdentifier());
        switch (analyticsDataObj.getStrategy()) {
            case analytics_call_fire_strategy_enum_1.AnalyticsCallFireStrategyEnum.FIRE_ON_NEXT_PAGE:
            case analytics_call_fire_strategy_enum_1.AnalyticsCallFireStrategyEnum.FIRE_ON_PAGE_RELOAD:
                this.parkAnalyticsObject(analyticsDataObj);
                this.resolvePromiseNow(analyticsDataObj.getIdentifier());
                break;
            default:
                var pageBeaconPromise_1 = this.getPageBeaconPromise();
                (function (analyticsObj) {
                    pageBeaconPromise_1.then(function () {
                        _this.fireAnalyticsBeacon(analyticsObj);
                    });
                })(analyticsDataObj);
        }
        return analyticsDeferred.promise;
    };
    AnalyticsService.prototype.parkAnalyticsObject = function (analyticsDataObj) {
        var parkedAnalyticsObjectsInStore = utility_1.Utility.getItemFromStore(analytics_constant_1.AnalyticsConstants.STORE_KEY_PARKED_EVENTS);
        var parkedAnalyticsObjects = parkedAnalyticsObjectsInStore ? JSON.parse(parkedAnalyticsObjectsInStore) : [];
        var analyticsObjectToPark = {
            'parkedObject': analyticsDataObj,
            'parkedOnPage': window.location.pathname
        };
        parkedAnalyticsObjects.push(analyticsObjectToPark);
        utility_1.Utility.setItemInStore(analytics_constant_1.AnalyticsConstants.STORE_KEY_PARKED_EVENTS, parkedAnalyticsObjects);
    };
    AnalyticsService.prototype.getAnalyticsPromises = function () {
        return this.analyticsPromises;
    };
    AnalyticsService.prototype.getOrCreateDeferred = function (promiseIdentifier) {
        if (!promiseIdentifier) {
            return;
        }
        var analyticsDeferred = this.analyticsPromises[promiseIdentifier];
        if (analyticsDeferred === undefined) {
            analyticsDeferred = new deferred_1.Deferred();
            this.analyticsPromises[promiseIdentifier] = analyticsDeferred;
        }
        return analyticsDeferred;
    };
    AnalyticsService.prototype.getPageBeaconPromise = function () {
        return this.getOrCreateDeferred(page_1.Page.PAGE_IDENTIFIER).promise;
    };
    AnalyticsService.prototype.fireAnalyticsBeacon = function (base) {
        this.loggingService.log({ msg: 'invoking launch direct call: ' + base.getDirectCallLabel(),
            identifier: base.getIdentifier() });
        var isAnalyticsBeaconFired = false;
        if (this.analyticsBeacons === analytics_beacon_enum_1.AnalyticsBeaconEnum.ENABLED) {
            try {
                window['_satellite'].track(base.getDirectCallLabel(), { identifier: base.getIdentifier() });
                isAnalyticsBeaconFired = true;
                this.loggingService.log({ msg: 'direct call invoked!', identifier: base.getIdentifier() });
            }
            catch (err) {
                console.log("Analytics direct call invocation failed", err);
            }
        }
        this.resolvePromiseNow(base.getIdentifier());
        return isAnalyticsBeaconFired;
    };
    AnalyticsService.prototype.resolvePromiseWithDelay = function (promiseIdentifier, duration) {
        var _this = this;
        setTimeout(function () {
            _this.resolvePromiseNow(promiseIdentifier);
        }, duration);
    };
    AnalyticsService.prototype.resolvePromiseNow = function (promiseIdentifier) {
        var deferred = this.analyticsPromises[promiseIdentifier];
        if (deferred) {
            deferred.resolve(true);
            this.loggingService.log({ msg: 'promise resolved', identifier: promiseIdentifier });
            if (promiseIdentifier !== page_1.Page.PAGE_IDENTIFIER) {
                delete this.analyticsPromises[promiseIdentifier];
            }
        }
    };
    AnalyticsService.TIMEOUT_IF_SATELLITE_NOT_LOADED = 6000; // ms
    return AnalyticsService;
}());
exports.AnalyticsService = AnalyticsService;
//# sourceMappingURL=analyticsService.js.map