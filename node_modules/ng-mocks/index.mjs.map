{"version":3,"file":"index.mjs","mappings":"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","sources":["webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.config.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.define-property.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.helpers.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.reflect.parameters-resolve.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.tokens.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.directive-io-build.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.directive-io-parse.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.extract-forward-ref.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.get-global.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.get-name.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.get-type.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.is-ng-type.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.is-ng-def.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.is-ng-injection-token.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.is-ng-module-def-with-providers.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/ng-mocks-universe.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.stub-member.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.stub.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-instance/mock-instance-apply.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/helper.create-clone.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/helper.define-property-descriptor.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/helper.extract-methods-from-prototype.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/helper.extract-properties-from-prototype.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/helper.extract-property-descriptor.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/helper.mock.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/helper.mock-function.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/helper.replace-with-mocks.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/helper.mock-service.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/helper.create-mock-from-prototype.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/helper.resolve-provider.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/helper.use-factory.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/mock-provider.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/check.is-func.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/mock-service.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/check.is-class.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/check.is-inst.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/resolve/collect-declarations.ts","webpack://ng-mocks/external module \"@angular/core\"","webpack://ng-mocks/external module \"@angular/core/testing\"","webpack://ng-mocks/webpack/bootstrap","webpack://ng-mocks/webpack/runtime/define property getters","webpack://ng-mocks/webpack/runtime/global","webpack://ng-mocks/webpack/runtime/hasOwnProperty shorthand","webpack://ng-mocks/webpack/runtime/make namespace object","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/ng-mocks-stack.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/func.extract-tokens.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.get-ng-type.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.is-standalone.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.def-stack.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/mock-builder-stash.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.reflect.provided-in.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/add-requested-providers.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/error.jest-mock.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.is-jest-mock.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.reflect.body-catch.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/error.empty-def.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/error.missing-decorators.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.reflect.directive-resolve.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.reflect.module-resolve.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.reflect.meta.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.get-source-of-mock.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock/mark-exported.ts","webpack://ng-mocks/external module \"@angular/forms\"","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.form.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.is-mock.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/mock-control-value-accessor-proxy.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/mock.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/mock-control-value-accessor.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/decorate.inputs.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/decorate.mock.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/decorate.queries.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock/to-existing-provider.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock/to-factory-provider.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock/clone-providers.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock/decorate-declaration.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/decorate.outputs.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.import-exists.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.is-mock-ng-def.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/func.get-last-fixture.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock/return-cached-mock.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock/get-mock.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-component/render/generate-template.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-component/render/get-key.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-component/mock-component.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-directive/mock-directive.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.reflect.pipe-resolve.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-pipe/mock-pipe.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-module/mock-module.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-module/create-resolvers.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-module/mark-providers.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-module/mock-ng-def.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/get-override-def.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/skip-override.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/handle-entry-components.ts","webpack://ng-mocks/external module \"@angular/common\"","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/skip-dep.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/add-def-to-root-provider-parameters.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/check-root-provider-dependency.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/extract-dep.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/handle-provided-in-dependency.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/skip-root-provider-dependency.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/init-ng-modules.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/init-module.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.extract-deps.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/try-mock-provider.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/try-mock-declaration.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/parse-provider.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/mock-builder.promise.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/init-universe.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/init-keep-def.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/init-replace-def.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/init-exclude-def.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/init-mock-declarations.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/init-modules.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/handle-root-providers.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/get-root-provider-parameters.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/get-root-providers-data.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/apply-platform-modules.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/create-ng-mocks-token.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/create-ng-mocks-touches-token.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/create-ng-mocks-overrides-token.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/parse-mock-arguments.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/performance/equal-variables.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/performance/equal-render-defs.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/performance/are-equal-config-params.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/performance/equal-render-configs.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/performance/are-equal-maps.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/performance/are-equal-providers.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/performance/are-equal-sets.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/performance/required-metadata.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/mock-builder.performance.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/performance/get-empty-config.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/mock-builder.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/format/is-debug-node.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/func.parse-find-args-name.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/format/is-fixture.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/find/func.parse-find-args.ts","webpack://ng-mocks/external module \"@angular/platform-browser\"","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/find/func.parse-find-term.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/find/mock-helper.find.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/detect-text-node.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/el-def-compare.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/el-def-get-node.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.injector.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/el-def-get-parent.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/nested-check-children.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/nested-check-parent.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/nested-check.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/mock-helper.crawl.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/func.parse-find-args.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/func.parse-provider-tokens-directives.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/func.get-public-provider-keys.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/func.parse-inputs-and-requires-attributes.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/detect-selectors-from-node.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/crawl-by-attribute.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/detect-attribute-in-selectors.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/crawl-by-attribute-value.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/crawl-by-declaration.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/crawl-by-id.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/detect-tag-name-in-selectors.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/detect-crawler.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/crawl-by-tag-name.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/func.is-valid-reveal-selector.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/mock-helper.reveal.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.is-mock-control-value-accessor.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/format/is-html-element.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/events/mock-helper.event.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/events/mock-helper.trigger.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/cva/func.get-vca.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/cva/mock-helper.change.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/cva/mock-helper.touch.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/find/mock-helper.find-all.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/func.get-from-node-element.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/func.get-from-node-scan.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/func.get-from-node-ivy.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/func.get-from-node-standard.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/func.get-from-node.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/func.get-from-node-injector.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/find-instance/func.is-valid-find-instance-selector.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/find-instance/mock-helper.find-instance.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/format/format-handler.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/format/handle-array.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/format/handle-text.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/format/is-text.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/format/mock-helper.format-html.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/format/mock-helper.format-text.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.auto-spy.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.console.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.console-ignore.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.console-throw.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.default-mock.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.faster-install.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.flush-test-bed.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.faster.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.get.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.iterate-declaration.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/func.global-prepare.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.global-exclude.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.global-keep.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.global-mock.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.global-wipe.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.guts.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.attributes.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/render/func.find-deep.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/render/func.parse-template.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/template-ref/detect-crawler.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/template-ref/detect-template-ref.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/template-ref/func.is-valid-template-ref-selector.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/template-ref/mock-helper.find-template-ref.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.object.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/events/mock-helper.click.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.default-config.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/find-instance/mock-helper.find-instances.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/template-ref/mock-helper.find-template-refs.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.global-replace.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/render/mock-helper.hide.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.input.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.output.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/render/mock-helper.render.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.reset.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/mock-helper.reveal-all.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-provider/mock-provider.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/ng-mocks-global-overrides.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.is-mocked-ng-def-of.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.get-mocked-ng-def-of.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.is-mock-of.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.is-mock-validator.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-instance/mock-instance.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-instance/mock-instance-forgot-reset.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-declaration/mock-declaration.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-render/func.generate-template.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-render/func.create-wrapper.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-render/func.install-prop-reader.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-render/func.reflect-template.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-render/mock-render-factory.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-render/mock-render.ts"],"sourcesContent":["export default {\n  flags: ['cacheModule', 'cacheComponent', 'cacheDirective', 'cacheProvider', 'correctModuleExports'],\n  mockRenderCacheSize: 25,\n  neverMockModule: [\n    'ApplicationModule',\n    'CommonModule',\n    'BrowserModule',\n\n    // Angular 16 adds underscores\n    '_ApplicationModule',\n    '_CommonModule',\n    '_BrowserModule',\n  ],\n  neverMockProvidedFunction: [\n    'DomRendererFactory2',\n    'EventManager',\n    'Injector', // ivy only\n    'RendererFactory2',\n\n    // https://github.com/help-me-mom/ng-mocks/issues/538\n    'Sanitizer',\n    'DomSanitizer',\n    'DomSanitizerImpl',\n\n    // ApplicationModule, A14 made them global at root level\n    'ApplicationInitStatus',\n    'ApplicationRef',\n    'Compiler',\n    'IterableDiffers',\n    'KeyValueDiffers',\n\n    // Angular 16 adds underscores\n    '_DomRendererFactory2',\n    '_EventManager',\n    '_Injector',\n    '_Sanitizer',\n    '_DomSanitizer',\n    '_DomSanitizerImpl',\n    '_ApplicationInitStatus',\n    '_ApplicationRef',\n    '_Compiler',\n    '_IterableDiffers',\n    '_KeyValueDiffers',\n  ],\n  neverMockToken: [\n    'InjectionToken Set Injector scope.', // INJECTOR_SCOPE // ivy only\n    'InjectionToken EventManagerPlugins', // EVENT_MANAGER_PLUGINS\n    'InjectionToken HammerGestureConfig', // HAMMER_GESTURE_CONFIG\n\n    // ApplicationModule, A14 made them global at root level\n    'InjectionToken AppId', // APP_ID\n    'InjectionToken DefaultCurrencyCode', // DEFAULT_CURRENCY_CODE\n    'InjectionToken LocaleId', // LOCALE_ID\n    'InjectionToken SCHEDULER_TOKEN', // SCHEDULER\n  ],\n  onMockBuilderMissingDependency: 'throw',\n  onMockInstanceRestoreNeed: 'warn',\n  onTestBedFlushNeed: 'warn',\n\n  dependencies: [\n    'declarations',\n    'hostDirectives',\n    'entryComponents',\n    'bootstrap',\n    'providers',\n    'viewProviders',\n    'imports',\n    'exports',\n  ] as const,\n};\n","import helperMockService from '../mock-service/helper.mock-service';\n\nexport default (instance: any, property: keyof any, value: any, enumerable = false) => {\n  helperMockService.definePropertyDescriptor(instance, property, {\n    configurable: true,\n    enumerable,\n    value,\n    writable: true,\n  });\n};\n","import { getTestBed } from '@angular/core/testing';\n\nimport coreDefineProperty from './core.define-property';\nimport coreReflectParametersResolve from './core.reflect.parameters-resolve';\nimport { AnyDeclaration, AnyType, Type } from './core.types';\nimport funcGetGlobal from './func.get-global';\nimport funcGetName from './func.get-name';\nimport ngMocksUniverse from './ng-mocks-universe';\n\n/**\n * It will be removed from public interface with the next release: A14\n * Use ngMocks.get(token) instead.\n *\n * @deprecated\n * @internal\n */\nexport const getTestBedInjection = <I>(token: AnyDeclaration<I>): I | undefined => {\n  try {\n    // istanbul ignore next\n    return getInjection(token);\n  } catch {\n    return undefined;\n  }\n};\n\n/**\n * It will be removed from public interface with the next release: A14\n *\n * @deprecated\n * @internal\n */\nexport const getInjection = <I>(token: AnyDeclaration<I>): I => {\n  const testBed: any = getTestBed();\n\n  // istanbul ignore next\n  return testBed.inject ? testBed.inject(token) : testBed.get(token);\n};\n\nexport const flatten = <T>(values: T | T[] | { ɵproviders: T[] }, result: T[] = []): T[] => {\n  if (Array.isArray(values)) {\n    for (const value of values) {\n      flatten(value, result);\n    }\n  } else if (values !== null && typeof values === 'object' && Array.isArray((values as any).ɵproviders)) {\n    for (const value of (values as any).ɵproviders) {\n      flatten(value, result);\n    }\n  } else {\n    // any is needed to cover ɵproviders\n    result.push(values as any);\n  }\n\n  return result;\n};\n\nexport const mapKeys = <T>(set: Map<T, any>): T[] => {\n  const result: T[] = [];\n  // eslint-disable-next-line unicorn/no-array-for-each\n  set.forEach((_, value: T) => result.push(value));\n\n  return result;\n};\n\nexport const mapValues = <T>(set: { forEach(a1: (value: T) => void): void }, destination?: Set<T>): T[] => {\n  const result: T[] = [];\n  if (destination) {\n    // eslint-disable-next-line unicorn/no-array-for-each\n    set.forEach((value: T) => {\n      destination.add(value);\n    });\n  } else {\n    // eslint-disable-next-line unicorn/no-array-for-each\n    set.forEach((value: T) => {\n      result.push(value);\n    });\n  }\n\n  return result;\n};\n\nexport const mapEntries = <K, T>(set: Map<K, T>, destination?: Map<K, T>): Array<[K, T]> => {\n  const result: Array<[K, T]> = [];\n\n  if (destination) {\n    // eslint-disable-next-line unicorn/no-array-for-each\n    set.forEach((value: T, key: K) => destination.set(key, value));\n  } else {\n    // eslint-disable-next-line unicorn/no-array-for-each\n    set.forEach((value: T, key: K) => result.push([key, value]));\n  }\n\n  return result;\n};\n\nconst extractDependencyArray = (deps: any[], set: Set<any>): void => {\n  for (const flag of deps) {\n    const name = flag && typeof flag === 'object' ? flag.ngMetadataName : undefined;\n    if (name === 'Optional' || name === 'SkipSelf' || name === 'Self') {\n      continue;\n    }\n    set.add(flag);\n  }\n};\n\n// Accepts an array of dependencies from providers, skips injections flags,\n// and adds the providers to the set.\nexport const extractDependency = (deps: any[], set?: Set<any>): void => {\n  if (!set) {\n    return;\n  }\n  for (const dep of deps) {\n    if (!Array.isArray(dep)) {\n      set.add(dep);\n      continue;\n    }\n    extractDependencyArray(dep, set);\n  }\n};\n\nexport const extendClassicClass = <I>(base: AnyType<I>): Type<I> => {\n  let child: any;\n  const index = ngMocksUniverse.index();\n\n  const glb = funcGetGlobal();\n  glb.ngMocksParent = base;\n\n  // First we try to eval es2015 style and if it fails to use es5 transpilation in the catch block.\n  // The next step is to respect constructor parameters as the parent class via jitReflector.\n  // istanbul ignore next\n  try {\n    eval(`\n      var glb = typeof window === 'undefined' ? global : window;\n      class MockMiddleware${index} extends glb.ngMocksParent {};\n      glb.ngMocksResult = MockMiddleware${index};\n    `);\n    child = glb.ngMocksResult;\n  } catch {\n    class MockMiddleware extends glb.ngMocksParent {}\n    child = MockMiddleware;\n  } finally {\n    glb.ngMocksResult = undefined;\n    glb.ngMocksParent = undefined;\n  }\n\n  // A16: adding unique property.\n  coreDefineProperty(child.prototype, `__ngMocks_index_${index}`, undefined, false);\n\n  return child;\n};\n\nexport const extendClass = <I>(base: AnyType<I>): Type<I> => {\n  const child: Type<I> = extendClassicClass(base);\n  coreDefineProperty(child, 'name', `MockMiddleware${funcGetName(base)}`, true);\n\n  const parameters = coreReflectParametersResolve(base);\n  if (parameters.length > 0) {\n    coreDefineProperty(child, 'parameters', [...parameters]);\n  }\n\n  return child;\n};\n","import collectDeclarations from '../resolve/collect-declarations';\n\nexport default (def: any): any[] => {\n  const declaration = collectDeclarations(def);\n\n  return declaration.parameters ?? [];\n};\n","import { InjectionToken } from '@angular/core';\nimport { MetadataOverride } from '@angular/core/testing';\n\nimport { AnyType } from './core.types';\n\n/**\n * NG_MOCKS token is a map from a declaration to its mock copy.\n *\n * @internal\n *\n * ```ts\n * const MockClass = TestBed.inject(NG_MOCKS).get(RealClass);\n * ```\n */\nexport const NG_MOCKS = new InjectionToken<Map<any, any>>('NG_MOCKS');\n(NG_MOCKS as any).__ngMocksSkip = true;\n\n/**\n * NG_MOCKS_TOUCHES token is a set of all touched declarations during mock process.\n *\n * @internal\n *\n * ```ts\n * const touched = TestBed.inject(NG_MOCKS_TOUCHES).has(RealClass);\n * ```\n */\nexport const NG_MOCKS_TOUCHES = new InjectionToken<Set<any>>('NG_MOCKS_TOUCHES');\n(NG_MOCKS_TOUCHES as any).__ngMocksSkip = true;\n\n/**\n * NG_MOCKS_OVERRIDES token contains overrides for:\n * - TestBed.overrideModule\n * - TestBed.overrideComponent\n * - TestBed.overrideDirective\n * - TestBed.overrideProvider\n *\n * It is used when there is no way to provide a mock copy and an override is required.\n * For example, if we want to keep a component, but to override one of its local providers.\n *\n * @internal\n */\nexport const NG_MOCKS_OVERRIDES = new InjectionToken<Map<AnyType<any>, MetadataOverride<any>>>('NG_MOCKS_OVERRIDES');\n(NG_MOCKS_OVERRIDES as any).__ngMocksSkip = true;\n\n/**\n * NG_MOCKS_GUARDS token influences on provided guards in MockBuilder.\n * More info by the links below.\n *\n * @see https://ng-mocks.sudo.eu/api/MockBuilder#ng_mocks_guards-token\n * @see https://ng-mocks.sudo.eu/guides/routing-guard\n */\nexport const NG_MOCKS_GUARDS = new InjectionToken<void>('NG_MOCKS_GUARDS');\n(NG_MOCKS_GUARDS as any).__ngMocksSkip = true;\n\n/**\n * NG_MOCKS_RESOLVERS token influences on provided resolvers in MockBuilder.\n * More info by the links below.\n *\n * @see https://ng-mocks.sudo.eu/api/MockBuilder#ng_mocks_resolvers-token\n * @see https://ng-mocks.sudo.eu/guides/routing-resolver\n */\nexport const NG_MOCKS_RESOLVERS = new InjectionToken<void>('NG_MOCKS_RESOLVERS');\n(NG_MOCKS_RESOLVERS as any).__ngMocksSkip = true;\n\n/**\n * NG_MOCKS_INTERCEPTORS token influences on provided interceptors in MockBuilder.\n * More info by the links below.\n *\n * @see https://ng-mocks.sudo.eu/api/MockBuilder#ng_mocks_interceptors-token\n * @see https://ng-mocks.sudo.eu/guides/http-interceptor\n */\nexport const NG_MOCKS_INTERCEPTORS = new InjectionToken<void>('NG_MOCKS_INTERCEPTORS');\n(NG_MOCKS_INTERCEPTORS as any).__ngMocksSkip = true;\n\n/**\n * NG_MOCKS_ROOT_PROVIDERS token influences on root providers in MockBuilder,\n * which aren't provided in specified modules.\n * It helps to mock or keep them automatically.\n *\n * @see https://ng-mocks.sudo.eu/api/MockBuilder#ng_mocks_root_providers-token\n */\nexport const NG_MOCKS_ROOT_PROVIDERS = new InjectionToken<void>('NG_MOCKS_ROOT_PROVIDERS');\n(NG_MOCKS_ROOT_PROVIDERS as any).__ngMocksSkip = true;\n","import { DirectiveIo, DirectiveIoParsed } from './core.types';\n\nexport default function ({ name, alias, required }: DirectiveIoParsed, skipName = false): DirectiveIo {\n  if (required) {\n    return { name, alias, required };\n  }\n  if (!alias || name === alias) {\n    return skipName ? '' : name;\n  }\n\n  return skipName ? alias : `${name}:${alias}`;\n}\n","import { DirectiveIo, DirectiveIoParsed } from './core.types';\n\nexport default function (param: DirectiveIo): DirectiveIoParsed {\n  if (typeof param === 'string') {\n    const [name, alias] = param.split(':').map(v => v.trim());\n\n    if (name === alias || !alias) {\n      return { name };\n    }\n\n    return { name, alias };\n  }\n\n  return param;\n}\n","// handles forwardRef on useExisting\nexport default (provide: any): any => {\n  if (typeof provide === 'function' && provide.__forward_ref__) {\n    return provide();\n  }\n\n  return provide;\n};\n","export default (): Record<keyof any, any> => {\n  // istanbul ignore if\n  if (typeof window === 'undefined') {\n    return global;\n  }\n\n  return window;\n};\n","const badCharacters = new RegExp('[^0-9a-z]+', 'mgi');\n\nexport default (value: any): string => {\n  let result: string | undefined;\n\n  if (typeof value === 'function' && value.name) {\n    result = value.name;\n  } else if (typeof value === 'function') {\n    result = 'arrowFunction';\n  } else if (typeof value === 'object' && value && value.ngMetadataName === 'InjectionToken') {\n    result = value._desc;\n  } else if (typeof value === 'object' && value && typeof value.constructor === 'function') {\n    result = value.constructor.name;\n  }\n\n  result ||= 'unknown';\n\n  return result.replace(badCharacters, '_');\n};\n","import { isNgModuleDefWithProviders } from './func.is-ng-module-def-with-providers';\n\nexport default (provider: any): any => {\n  return provider && typeof provider === 'object' && provider.provide\n    ? provider.provide\n    : isNgModuleDefWithProviders(provider)\n      ? provider.ngModule\n      : provider && typeof provider === 'object' && provider.directive\n        ? provider.directive\n        : provider;\n};\n","import collectDeclarations from '../resolve/collect-declarations';\n\nimport { AnyType } from './core.types';\n\n/**\n * Checks whether a class has been decorated with a specific Angular decorator.\n * Due to the extension / multi decoration, we rely on the last used decorator.\n *\n * @internal\n *\n * ```ts\n * isNgType(MockModule, 'NgModule'); // returns true\n * isNgType(RealComponent, 'Component'); // returns true\n * isNgType(ArbitraryClass, 'Directive'); // returns false\n * isNgType(ArbitraryClass, 'Injectable'); // returns false\n * ```\n */\nexport const isNgType = (declaration: AnyType<any>, type: string): boolean => {\n  const { decorators } = collectDeclarations(declaration);\n  if (decorators.length === 0) {\n    return false;\n  }\n\n  let offset = 1;\n\n  // Injectable works well if the declaration is in providers.\n  if (type === 'Injectable' && decorators.indexOf('Injectable') !== -1) {\n    return true;\n  }\n\n  // Skipping Injectable.\n  while (decorators[decorators.length - offset] === 'Injectable') {\n    offset += 1;\n  }\n\n  return decorators[decorators.length - offset] === type;\n};\n","import { InjectionToken, PipeTransform } from '@angular/core';\n\nimport { Type } from './core.types';\nimport { isNgInjectionToken } from './func.is-ng-injection-token';\nimport { isNgType } from './func.is-ng-type';\n\nconst isModuleCheck = (def: any, ngType?: string): boolean => (!ngType || ngType === 'm') && isNgType(def, 'NgModule');\nconst isComponentCheck = (def: any, ngType?: string): boolean =>\n  (!ngType || ngType === 'c') && isNgType(def, 'Component');\nconst isDirectiveCheck = (def: any, ngType?: string): boolean =>\n  (!ngType || ngType === 'd') && isNgType(def, 'Directive');\nconst isPipeCheck = (def: any, ngType?: string): boolean => (!ngType || ngType === 'p') && isNgType(def, 'Pipe');\nconst isInjectableCheck = (def: any, ngType?: string): boolean =>\n  (!ngType || ngType === 'i') && isNgType(def, 'Injectable');\n\n/**\n * Checks whether a class has been decorated by @NgModule.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isNgDef\n *\n * ```ts\n * isNgDef(RealModule, 'm'); // returns true\n * isNgDef(MockModule, 'm'); // returns true\n * isNgDef(ArbitraryModule, 'm'); // returns true\n * isNgDef(ArbitraryClass, 'm'); // returns false\n * ```\n */\nexport function isNgDef(declaration: any, ngType: 'm'): declaration is Type<any>;\n\n/**\n * Checks whether a class has been decorated by @Component.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isNgDef\n *\n * ```ts\n * isNgDef(RealComponent, 'c'); // returns true\n * isNgDef(MockComponent, 'c'); // returns true\n * isNgDef(ArbitraryComponent, 'c'); // returns true\n * isNgDef(ArbitraryClass, 'c'); // returns false\n * ```\n */\nexport function isNgDef(declaration: any, ngType: 'c'): declaration is Type<any>;\n\n/**\n * Checks whether a class has been decorated by @Directive.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isNgDef\n *\n * ```ts\n * isNgDef(RealDirective, 'd'); // returns true\n * isNgDef(MockDirective, 'd'); // returns true\n * isNgDef(ArbitraryDirective, 'd'); // returns true\n * isNgDef(ArbitraryClass, 'd'); // returns false\n * ```\n */\nexport function isNgDef(declaration: any, ngType: 'd'): declaration is Type<any>;\n\n/**\n * Checks whether a class has been decorated by @Pipe.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isNgDef\n *\n * ```ts\n * isNgDef(RealPipe, 'p'); // returns true\n * isNgDef(MockPipe, 'p'); // returns true\n * isNgDef(ArbitraryPipe, 'p'); // returns true\n * isNgDef(ArbitraryClass, 'p'); // returns false\n * ```\n */\nexport function isNgDef(declaration: any, ngType: 'p'): declaration is Type<PipeTransform>;\n\n/**\n * Checks whether a class has been decorated by @Injectable.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isNgDef\n *\n * ```ts\n * isNgDef(RealService, 'i'); // returns true\n * isNgDef(MockService, 'i'); // returns true\n * isNgDef(ArbitraryService, 'i'); // returns true\n * isNgDef(ArbitraryClass, 'i'); // returns false\n * ```\n */\nexport function isNgDef(declaration: any, ngType: 'i'): declaration is Type<any>;\n\n/**\n * Checks whether a variable is a token.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isNgDef\n *\n * ```ts\n * isNgDef(realToken, 't'); // returns true\n * isNgDef(mockToken, 't'); // returns true\n * isNgDef(arbitraryToken, 't'); // returns true\n * isNgDef(arbitraryObject, 't'); // returns false\n * ```\n */\nexport function isNgDef(declaration: any, ngType: 't'): declaration is InjectionToken<any>;\n\n/**\n * Checks whether a class or variable has been decorated by a ng type.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isNgDef\n *\n * ```ts\n * isNgDef(RealModule); // returns true\n * isNgDef(MockComponent); // returns true\n * isNgDef(ArbitraryDirective); // returns true\n * isNgDef(token); // returns true\n * isNgDef(ArbitraryClass); // returns false\n * ```\n */\nexport function isNgDef(declaration: any): declaration is Type<any>;\n\nexport function isNgDef(declaration: any, ngType?: string): declaration is Type<any> {\n  if (ngType === 't') {\n    return isNgInjectionToken(declaration);\n  }\n  if (typeof declaration !== 'function') {\n    return false;\n  }\n\n  const isModule = isModuleCheck(declaration, ngType);\n  const isComponent = isComponentCheck(declaration, ngType);\n  const isDirective = isDirectiveCheck(declaration, ngType);\n  const isPipe = isPipeCheck(declaration, ngType);\n  const isInjectable = isInjectableCheck(declaration, ngType);\n\n  return isModule || isComponent || isDirective || isPipe || isInjectable;\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Checks whether a variable is an Angular token.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isNgInjectionToken\n *\n * ```ts\n * isNgInjectionToken(APP_ID); // returns true\n * isNgInjectionToken(arbitraryVariable); // returns false\n * ```\n */\nexport const isNgInjectionToken = (token: any): token is InjectionToken<any> =>\n  token && typeof token === 'object' && token.ngMetadataName === 'InjectionToken';\n","import { NgModule } from '@angular/core';\n\nimport { Type } from './core.types';\n\n/**\n * NgModuleWithProviders helps to support ModuleWithProviders in all angular versions.\n * In A5 it was without the generic type.\n *\n * @internal remove after removal of A5 support\n */\nexport interface NgModuleWithProviders<T = any> {\n  ngModule: Type<T>;\n  providers?: NgModule['providers'];\n}\n\n/**\n * isNgModuleDefWithProviders checks if an object implements ModuleWithProviders.\n *\n * @internal\n */\nexport const isNgModuleDefWithProviders = (declaration: any): declaration is NgModuleWithProviders =>\n  declaration && typeof declaration === 'object' && typeof declaration.ngModule === 'function';\n","import { IMockBuilderConfig } from '../mock-builder/types';\n\nimport coreConfig from './core.config';\nimport { AnyDeclaration } from './core.types';\nimport funcGetGlobal from './func.get-global';\nimport funcGetName from './func.get-name';\n\nconst globalMap = (key: string) => () => {\n  if (!ngMocksUniverse.global.has(key)) {\n    ngMocksUniverse.global.set(key, new Map());\n  }\n\n  return ngMocksUniverse.global.get(key);\n};\n\ninterface NgMocksUniverse {\n  /**\n   * the value can be:\n   * - null - exclude\n   * - undefined - delayed initialization\n   * - value - the definition which should be used in tests: real value, replacement, mock.\n   */\n  builtDeclarations: Map<any, any>;\n  builtProviders: Map<any, any>;\n  cacheDeclarations: Map<any, any>;\n  cacheProviders: Map<any, any>;\n  config: Map<any, any>;\n  configInstance: Map<any, any>;\n  flags: Set<string>;\n  getBuildDeclaration: (def: any) => any | undefined;\n  getConfigMock: () => Map<any, IMockBuilderConfig>;\n  getDefaults: () => Map<any, ['mock' | 'keep' | 'replace' | 'exclude', any?]>;\n  getLocalMocks: () => Array<[any, any]>;\n  getOverrides: () => Map<any, any>;\n  getResolution: (def: any) => undefined | 'mock' | 'keep' | 'replace' | 'exclude';\n  global: Map<any, any>;\n  hasBuildDeclaration: (def: any) => boolean;\n  isExcludedDef: (def: any) => boolean;\n  isProvidedDef: (def: any) => boolean;\n  touches: Set<AnyDeclaration<any> | string>;\n  indexValue: number;\n  index: () => number;\n}\n\nfuncGetGlobal().ngMocksUniverse = funcGetGlobal().ngMocksUniverse || {};\nconst ngMocksUniverse: NgMocksUniverse = funcGetGlobal().ngMocksUniverse;\n\nngMocksUniverse.builtDeclarations = new Map();\nngMocksUniverse.builtProviders = new Map();\nngMocksUniverse.cacheDeclarations = new Map();\nngMocksUniverse.cacheProviders = new Map();\nngMocksUniverse.config = new Map();\nngMocksUniverse.configInstance = new Map();\nngMocksUniverse.flags = new Set(coreConfig.flags);\nngMocksUniverse.global = new Map();\nngMocksUniverse.touches = new Set();\n\nngMocksUniverse.global.set('flags', {\n  // @deprecated and will be changed in A13 to 'throw'\n  onMockBuilderMissingDependency: coreConfig.onMockBuilderMissingDependency,\n  // @deprecated and will be changed in A13 to 'throw'\n  onMockInstanceRestoreNeed: coreConfig.onMockInstanceRestoreNeed,\n  // @deprecated and will be changed in A13 to 'throw'\n  onTestBedFlushNeed: coreConfig.onTestBedFlushNeed,\n});\n\nngMocksUniverse.getOverrides = globalMap('overrides');\nngMocksUniverse.getDefaults = globalMap('defaults');\nngMocksUniverse.getConfigMock = globalMap('configMock');\n\nconst getDefaults = (def: any): [] | ['mock' | 'keep' | 'replace' | 'exclude', any?] => {\n  {\n    const defValue = ngMocksUniverse.getDefaults().get(def);\n    if (defValue) {\n      return defValue;\n    }\n  }\n\n  {\n    const defValue = typeof def === 'function' ? ngMocksUniverse.getDefaults().get(`@${funcGetName(def)}`) : undefined;\n    if (defValue) {\n      return defValue;\n    }\n  }\n\n  return [];\n};\n\nngMocksUniverse.getResolution = (def: any): undefined | 'mock' | 'keep' | 'replace' | 'exclude' => {\n  const set = ngMocksUniverse.config.get('ngMocksDepsResolution');\n  if (set?.has(def)) {\n    return set.get(def);\n  }\n  const [value] = getDefaults(def);\n\n  return value;\n};\n\nngMocksUniverse.getBuildDeclaration = (def: any): undefined | null | any => {\n  if (ngMocksUniverse.builtDeclarations.has(def)) {\n    return ngMocksUniverse.builtDeclarations.get(def);\n  }\n  const [mode, replacement] = getDefaults(def);\n\n  if (mode === 'exclude') {\n    return null;\n  }\n  if (!mode || mode === 'keep') {\n    return def;\n  }\n  if (mode === 'replace') {\n    return replacement;\n  }\n};\n\nngMocksUniverse.hasBuildDeclaration = (def: any): boolean => {\n  if (ngMocksUniverse.builtDeclarations.has(def)) {\n    // undefined means that we know about this declaration,\n    // but its initialization is postponed at the moment.\n    return ngMocksUniverse.builtDeclarations.get(def) !== undefined;\n  }\n  const [mode] = getDefaults(def);\n\n  return !!mode && mode !== 'mock';\n};\n\nconst hasBuildDeclaration = (def: any): boolean => ngMocksUniverse.hasBuildDeclaration(def);\nconst getBuildDeclaration = (def: any): any => ngMocksUniverse.getBuildDeclaration(def);\n\nngMocksUniverse.isExcludedDef = (def: any): boolean => {\n  const resolution = ngMocksUniverse.getResolution(def);\n  if (resolution && resolution !== 'exclude') {\n    return false;\n  }\n\n  return hasBuildDeclaration(def) && getBuildDeclaration(def) === null;\n};\n\nngMocksUniverse.isProvidedDef = (def: any): boolean => hasBuildDeclaration(def) && getBuildDeclaration(def) !== null;\n\n// excluding StoreDevtoolsModule by default\nngMocksUniverse.getDefaults().set('@StoreDevtoolsModule', ['exclude']);\n\nngMocksUniverse.indexValue = 0;\nngMocksUniverse.index = () => {\n  return ngMocksUniverse.indexValue++;\n};\n\nexport default ((): NgMocksUniverse => ngMocksUniverse)();\n","import helperExtractPropertyDescriptor from '../mock-service/helper.extract-property-descriptor';\n\nexport default <T extends object>(\n  instance: T & { __ngMocks__source?: object },\n  key: any,\n  value: any,\n  encapsulation?: 'get' | 'set',\n): any => {\n  const def = helperExtractPropertyDescriptor(instance, key) ?? {};\n\n  if (!encapsulation && def.set && (def.set as any).__ngMocksProxy) {\n    def.set(value);\n\n    return value;\n  }\n\n  const descriptor: PropertyDescriptor = {\n    configurable: true,\n    enumerable: true,\n  };\n  if (encapsulation === 'get' && def.set) {\n    descriptor.set = def.set;\n  } else if (encapsulation === 'set' && def.get) {\n    descriptor.get = def.get;\n  }\n  if (encapsulation) {\n    descriptor[encapsulation] = value;\n  } else {\n    descriptor.writable = true;\n    descriptor.value = value;\n  }\n\n  Object.defineProperty(instance, key, descriptor);\n\n  return value;\n};\n","import helperExtractMethodsFromPrototype from '../mock-service/helper.extract-methods-from-prototype';\nimport helperExtractPropertiesFromPrototype from '../mock-service/helper.extract-properties-from-prototype';\nimport helperExtractPropertyDescriptor from '../mock-service/helper.extract-property-descriptor';\nimport helperMockService from '../mock-service/helper.mock-service';\nimport { MockedFunction } from '../mock-service/types';\n\nexport default <T = MockedFunction>(instance: any, override: any, style?: 'get' | 'set'): T => {\n  if (typeof override === 'string') {\n    return helperMockService.mock(instance, override, style);\n  }\n\n  // if someone is giving us a function, then we should swap instance and overrides.\n  // so in the end the function can be called, but it also has all desired properties.\n  let correctInstance = instance;\n  let applyOverrides = override;\n  const skipProps = ['__zone_symbol__unconfigurables'];\n  if (typeof override === 'function') {\n    correctInstance = helperMockService.createClone(override);\n    applyOverrides = instance;\n    skipProps.push(...Object.getOwnPropertyNames(correctInstance));\n  }\n\n  const keys = [\n    ...helperExtractMethodsFromPrototype(applyOverrides),\n    ...helperExtractPropertiesFromPrototype(applyOverrides),\n  ];\n  for (const key of keys) {\n    const desc = skipProps.indexOf(key) === -1 ? helperExtractPropertyDescriptor(applyOverrides, key) : undefined;\n    if (desc && Object.prototype.hasOwnProperty.call(desc, 'value') && desc.value === undefined) {\n      continue;\n    }\n    helperMockService.definePropertyDescriptor(correctInstance, key, desc);\n  }\n\n  return correctInstance;\n};\n","import ngMocksUniverse from '../common/ng-mocks-universe';\nimport mockHelperStubMember from '../mock-helper/mock-helper.stub-member';\n\nexport default (def: any): any[] => {\n  const callbacks = [];\n\n  const config = ngMocksUniverse.configInstance.get(def);\n  if (config?.overloads) {\n    for (const [name, stub, encapsulation] of config.overloads) {\n      if (name) {\n        callbacks.push((instance: any) => {\n          mockHelperStubMember(instance, name, stub, encapsulation);\n        });\n      } else {\n        callbacks.push(stub);\n      }\n    }\n  }\n\n  return callbacks;\n};\n","import helperDefinePropertyDescriptor from './helper.define-property-descriptor';\nimport helperExtractMethodsFromPrototype from './helper.extract-methods-from-prototype';\nimport helperExtractPropertiesFromPrototype from './helper.extract-properties-from-prototype';\nimport helperExtractPropertyDescriptor from './helper.extract-property-descriptor';\n\nexport default (service: any, bindFrom?: object, bindTo?: object, mock?: any): any => {\n  const instance = function (...args: any[]) {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    return (mock || service).apply(bindFrom === this ? bindTo : this, args);\n  };\n\n  for (const prop of [\n    ...helperExtractMethodsFromPrototype(service),\n    ...helperExtractPropertiesFromPrototype(service),\n  ]) {\n    const desc = helperExtractPropertyDescriptor(service, prop);\n    helperDefinePropertyDescriptor(instance, prop, desc);\n  }\n\n  return instance;\n};\n","import helperExtractPropertyDescriptor from './helper.extract-property-descriptor';\n\nexport default (instance: any, prop: keyof any, desc?: PropertyDescriptor): boolean => {\n  if (!desc || !instance) {\n    return false;\n  }\n\n  // istanbul ignore else\n  if (Object.defineProperty) {\n    const sourceDesc = helperExtractPropertyDescriptor(instance, prop);\n    if (sourceDesc?.configurable === false) {\n      return false;\n    }\n\n    Object.defineProperty(instance, prop, {\n      ...desc,\n      configurable: true,\n      ...((desc.get === undefined && desc.set === undefined) || desc.writable === false ? { writable: true } : {}),\n    });\n  } else {\n    instance[prop] = desc.value;\n  }\n\n  return true;\n};\n","import funcGetName from '../common/func.get-name';\n\nconst sanitizerMethods = [\n  'sanitize',\n  'bypassSecurityTrustHtml',\n  'bypassSecurityTrustStyle',\n  'bypassSecurityTrustScript',\n  'bypassSecurityTrustUrl',\n  'bypassSecurityTrustResourceUrl',\n];\n\nconst extraMethods: Record<string, undefined | string[]> = {\n  DomSanitizer: sanitizerMethods,\n  Sanitizer: sanitizerMethods,\n};\n\nconst getOwnPropertyNames = (prototype: any): string[] => {\n  const result: string[] = Object.getOwnPropertyNames(prototype);\n  for (const method of extraMethods[funcGetName(prototype)] ?? []) {\n    result.push(method);\n  }\n\n  return result;\n};\n\nexport default <T>(service: T): string[] => {\n  const result: string[] = [];\n\n  let prototype = service;\n  while (prototype && Object.getPrototypeOf(prototype) !== null) {\n    for (const method of getOwnPropertyNames(prototype)) {\n      if ((method as any) === 'constructor') {\n        continue;\n      }\n\n      const descriptor = Object.getOwnPropertyDescriptor(prototype, method);\n      const isGetterSetter = descriptor && (descriptor.get || descriptor.set);\n      if (isGetterSetter || result.indexOf(method) !== -1) {\n        continue;\n      }\n      result.push(method);\n    }\n    prototype = Object.getPrototypeOf(prototype);\n  }\n\n  return result;\n};\n","export default <T>(service: T): string[] => {\n  const result: string[] = [];\n  let prototype = service;\n  while (prototype && Object.getPrototypeOf(prototype) !== null) {\n    for (const prop of Object.getOwnPropertyNames(prototype)) {\n      if ((prop as any) === 'constructor') {\n        continue;\n      }\n\n      const descriptor = Object.getOwnPropertyDescriptor(prototype, prop);\n      const isGetterSetter = descriptor && (descriptor.get || descriptor.set);\n      if (!isGetterSetter || result.indexOf(prop) !== -1) {\n        continue;\n      }\n      result.push(prop);\n    }\n    prototype = Object.getPrototypeOf(prototype);\n  }\n\n  return result;\n};\n","export default <T>(service: T, prop: keyof any): PropertyDescriptor | undefined => {\n  let prototype = service;\n  while (prototype && Object.getPrototypeOf(prototype) !== null) {\n    const descriptor = Object.getOwnPropertyDescriptor(prototype, prop);\n    if (descriptor) {\n      return descriptor;\n    }\n    prototype = Object.getPrototypeOf(prototype);\n  }\n\n  return undefined;\n};\n","import funcGetName from '../common/func.get-name';\n\nimport helperMockService from './helper.mock-service';\nimport { MockedFunction } from './types';\n\n// istanbul ignore next\nconst createName = (name: string, mockName?: string, instance?: any, accessType?: string) =>\n  `${mockName ?? (typeof instance.prototype === 'function' ? instance.prototype.name : funcGetName(instance))}.${name}${\n    accessType ?? ''\n  }`;\n\nconst generateMockDef = (def: any, mock: any, accessType?: string): PropertyDescriptor => ({\n  ...(accessType === 'get' && def && def.set\n    ? {\n        set: def.set,\n      }\n    : {}),\n\n  ...(accessType === 'set' && def && def.get\n    ? {\n        get: def.get,\n      }\n    : {}),\n\n  ...(accessType\n    ? {}\n    : {\n        writable: true,\n      }),\n\n  [accessType || 'value']: mock,\n  configurable: true,\n  enumerable: true,\n});\n\nconst parseArgs = (\n  args: any[],\n): {\n  accessType?: 'get' | 'set';\n  mockName?: string;\n} => {\n  let accessType: 'get' | 'set' | undefined;\n  let mockName: string | undefined;\n\n  if (args.length > 0 && args[0] !== 'get' && args[0] !== 'set') {\n    mockName = args[0];\n  } else if (args.length > 0 && (args[0] === 'get' || args[0] === 'set')) {\n    accessType = args[0];\n    mockName = args[1];\n  }\n\n  return { accessType, mockName };\n};\n\nexport default <T = MockedFunction>(instance: any, name: string, ...args: Array<string | undefined>): T => {\n  const { accessType, mockName } = parseArgs(args);\n\n  const def = Object.getOwnPropertyDescriptor(instance, name);\n  if (def && def[accessType || 'value']) {\n    return def[accessType || 'value'];\n  }\n\n  const detectedMockName = createName(name, mockName, instance, accessType);\n  const mock: any = helperMockService.mockFunction(detectedMockName, !!accessType);\n\n  const mockDef = generateMockDef(def, mock, accessType);\n  if (mockDef.get && mockDef.set && (mockDef.get as any).__ngMocks && (mockDef.set as any).__ngMocks) {\n    (mockDef.set as any).__ngMocksSet((val: any) => (mockDef.get as any).__ngMocksGet(val));\n  }\n\n  Object.defineProperty(instance, name, mockDef);\n\n  return mock;\n};\n","import coreDefineProperty from '../common/core.define-property';\n\nimport { CustomMockFunction, MockedFunction } from './types';\n\nconst mockFunction: {\n  (mockName: string, original?: boolean): MockedFunction;\n  customMockFunction?: CustomMockFunction;\n} = (mockName: string, original = false): MockedFunction => {\n  // eslint-disable-next-line unicorn/prefer-logical-operator-over-ternary\n  const func =\n    mockFunction.customMockFunction && !original\n      ? mockFunction.customMockFunction(mockName)\n      : (val: any) => {\n          if (setValue) {\n            setValue(val);\n          }\n\n          return value;\n        };\n\n  // magic to make getters / setters working\n\n  let value: any;\n  let setValue: any;\n\n  coreDefineProperty(func, '__ngMocks', true);\n  coreDefineProperty(func, '__ngMocksSet', (newSetValue: any) => (setValue = newSetValue));\n  coreDefineProperty(func, '__ngMocksGet', (newValue: any) => (value = newValue));\n\n  return func;\n};\n\nexport default (() => mockFunction)();\n","import { NG_MOCKS_GUARDS, NG_MOCKS_RESOLVERS } from '../common/core.tokens';\nimport { isNgDef } from '../common/func.is-ng-def';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nconst handleSection = (section: any[]) => {\n  const guards: any[] = [];\n\n  for (const guard of section) {\n    if (!ngMocksUniverse.isProvidedDef(guard) && ngMocksUniverse.isExcludedDef(NG_MOCKS_GUARDS)) {\n      continue;\n    }\n\n    guards.push(guard);\n    if (!isNgDef(guard)) {\n      ngMocksUniverse.touches.add(guard);\n    }\n  }\n\n  return guards;\n};\n\nconst handleArray = (cache: Map<any, any>, value: any[], callback: any): [boolean, any[]] => {\n  const mock: Array<any> = [];\n  let updated = false;\n  cache.set(value, mock);\n\n  for (const valueItem of value) {\n    if (ngMocksUniverse.isExcludedDef(valueItem)) {\n      updated = updated || true;\n      continue;\n    }\n    mock.push(callback(valueItem, cache));\n    updated = updated || mock[mock.length - 1] !== valueItem;\n  }\n\n  return [updated, mock];\n};\n\nconst handleItemKeys = ['canActivate', 'canActivateChild', 'canDeactivate', 'canMatch', 'canLoad'];\nconst handleItemGetGuards = (mock: any, section: string) =>\n  Array.isArray(mock[section]) ? handleSection(mock[section]) : mock[section];\n\nconst handleItem = (\n  cache: Map<any, any>,\n  value: Record<keyof any, any>,\n  callback: any,\n): [boolean, Record<keyof any, any>] => {\n  let mock: Record<keyof any, any> = {};\n  let updated = false;\n  cache.set(value, mock);\n\n  for (const key of Object.keys(value)) {\n    if (ngMocksUniverse.isExcludedDef(value[key])) {\n      updated = updated || true;\n      continue;\n    }\n    mock[key] = callback(value[key], cache);\n    updated = updated || mock[key] !== value[key];\n  }\n\n  // Removal of guards.\n  for (const section of handleItemKeys) {\n    const guards: any[] = handleItemGetGuards(mock, section);\n    if (guards && mock[section].length !== guards.length) {\n      updated = updated || true;\n      mock = { ...mock, [section]: guards };\n    }\n  }\n\n  // Removal of resolvers.\n  if (typeof mock.resolve === 'object' && mock.resolve) {\n    const resolve: any = {};\n    let resolveUpdated = false;\n    for (const key of Object.keys(mock.resolve)) {\n      const resolver = mock.resolve[key];\n      if (!ngMocksUniverse.isProvidedDef(resolver) && ngMocksUniverse.isExcludedDef(NG_MOCKS_RESOLVERS)) {\n        resolveUpdated = resolveUpdated || true;\n        continue;\n      }\n      resolve[key] = resolver;\n      if (!isNgDef(resolver)) {\n        ngMocksUniverse.touches.add(resolver);\n      }\n    }\n    if (resolveUpdated) {\n      updated = updated || true;\n      mock = { ...mock, resolve };\n    }\n  }\n\n  return [updated, mock];\n};\n\nconst replaceWithMocks = (value: any, cache: Map<any, any>): any => {\n  if (ngMocksUniverse.cacheDeclarations.has(value)) {\n    return ngMocksUniverse.cacheDeclarations.get(value);\n  }\n  if (typeof value !== 'object') {\n    return value;\n  }\n  if (cache.has(value)) {\n    return value;\n  }\n\n  let mock: any;\n  let updated = false;\n\n  if (Array.isArray(value)) {\n    [updated, mock] = handleArray(cache, value, replaceWithMocks);\n  } else if (value) {\n    [updated, mock] = handleItem(cache, value, replaceWithMocks);\n  }\n\n  if (updated) {\n    Object.setPrototypeOf(mock, Object.getPrototypeOf(value));\n\n    return mock;\n  }\n\n  return value;\n};\n\nconst replaceWithMocksWrapper = (value: any) => {\n  const cache = new Map();\n  const result = replaceWithMocks(value, cache);\n  cache.clear();\n\n  return result;\n};\n\nexport default (() => replaceWithMocksWrapper)();\n","import funcGetGlobal from '../common/func.get-global';\n\nimport helperCreateClone from './helper.create-clone';\nimport helperCreateMockFromPrototype from './helper.create-mock-from-prototype';\nimport helperDefinePropertyDescriptor from './helper.define-property-descriptor';\nimport helperExtractMethodsFromPrototype from './helper.extract-methods-from-prototype';\nimport helperExtractPropertiesFromPrototype from './helper.extract-properties-from-prototype';\nimport helperExtractPropertyDescriptor from './helper.extract-property-descriptor';\nimport helperMock from './helper.mock';\nimport helperMockFunction from './helper.mock-function';\nimport helperReplaceWithMocks from './helper.replace-with-mocks';\nimport helperResolveProvider from './helper.resolve-provider';\nimport helperUseFactory from './helper.use-factory';\nimport { CustomMockFunction } from './types';\n\n// We need a single pointer to the object among all environments.\nfuncGetGlobal().ngMockshelperMockService = funcGetGlobal().ngMockshelperMockService || {\n  mockFunction: helperMockFunction,\n\n  registerMockFunction: (func: CustomMockFunction | undefined) => {\n    funcGetGlobal().ngMockshelperMockService.mockFunction.customMockFunction = func;\n  },\n\n  createClone: helperCreateClone,\n  createMockFromPrototype: helperCreateMockFromPrototype,\n  definePropertyDescriptor: helperDefinePropertyDescriptor,\n  extractMethodsFromPrototype: helperExtractMethodsFromPrototype,\n  extractPropertiesFromPrototype: helperExtractPropertiesFromPrototype,\n  extractPropertyDescriptor: helperExtractPropertyDescriptor,\n  mock: helperMock,\n  replaceWithMocks: helperReplaceWithMocks,\n  resolveProvider: helperResolveProvider,\n  useFactory: helperUseFactory,\n};\n\nexport default ((): {\n  createClone: typeof helperCreateClone;\n  createMockFromPrototype: typeof helperCreateMockFromPrototype;\n  definePropertyDescriptor: typeof helperDefinePropertyDescriptor;\n  extractMethodsFromPrototype: typeof helperExtractMethodsFromPrototype;\n  extractPropertiesFromPrototype: typeof helperExtractPropertiesFromPrototype;\n  extractPropertyDescriptor: typeof helperExtractPropertyDescriptor;\n  mock: typeof helperMock;\n  mockFunction: typeof helperMockFunction;\n  registerMockFunction: (func: CustomMockFunction | undefined) => void;\n  replaceWithMocks: typeof helperReplaceWithMocks;\n  resolveProvider: typeof helperResolveProvider;\n  useFactory: typeof helperUseFactory;\n} => funcGetGlobal().ngMockshelperMockService)();\n\nexport function registerMockFunction(func?: CustomMockFunction | undefined): void {\n  funcGetGlobal().ngMockshelperMockService.registerMockFunction(func);\n}\n","import coreDefineProperty from '../common/core.define-property';\nimport funcGetName from '../common/func.get-name';\n\nimport helperMockService from './helper.mock-service';\nimport { MockedFunction } from './types';\n\nexport default (service: any): { [key in keyof any]: MockedFunction } => {\n  const mockName = funcGetName(service);\n  const value: any = {};\n  coreDefineProperty(value, '__ngMocks', true);\n\n  const methods = helperMockService.extractMethodsFromPrototype(service);\n  for (const method of methods) {\n    helperMockService.mock(value, method, mockName);\n  }\n\n  const properties = helperMockService.extractPropertiesFromPrototype(service);\n  for (const property of properties) {\n    helperMockService.mock(value, property, 'get', mockName);\n    helperMockService.mock(value, property, 'set', mockName);\n  }\n  Object.setPrototypeOf(value, service);\n\n  return value;\n};\n","import CoreDefStack from '../common/core.def-stack';\nimport { extractDependency } from '../common/core.helpers';\nimport { NG_MOCKS_INTERCEPTORS } from '../common/core.tokens';\nimport funcExtractForwardRef from '../common/func.extract-forward-ref';\nimport funcGetType from '../common/func.get-type';\nimport { isNgInjectionToken } from '../common/func.is-ng-injection-token';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport helperMockService from './helper.mock-service';\nimport mockProvider from './mock-provider';\n\nconst anyDiffers = (a: any, b: any, ...keys: string[]): boolean => {\n  for (const key of keys) {\n    if (a[key] !== b[key]) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst createFromResolution = (provide: any, resolution: any) => {\n  let mockDef = resolution;\n\n  const existingMock = ngMocksUniverse.builtProviders.get(provide);\n  if (existingMock) {\n    mockDef = existingMock;\n  }\n\n  // A case when a provider is actually a component, directive, pipe.\n  if (typeof mockDef === 'function') {\n    mockDef = {\n      provide,\n      useClass: mockDef,\n    };\n  }\n\n  return mockDef;\n};\n\nconst isSuitableProvider = (provider: any, provide: any): boolean =>\n  ngMocksUniverse.builtProviders.has(NG_MOCKS_INTERCEPTORS) &&\n  ngMocksUniverse.builtProviders.get(NG_MOCKS_INTERCEPTORS) === null &&\n  isNgInjectionToken(provide) &&\n  provide.toString() === 'InjectionToken HTTP_INTERCEPTORS' &&\n  provide !== provider;\n\nconst excludeInterceptors = (provider: any, provide: any): boolean => {\n  if (isSuitableProvider(provider, provide)) {\n    if (provider.useFactory || provider.useValue) {\n      return true;\n    }\n    const interceptor = funcExtractForwardRef(provider.useExisting) || provider.useClass;\n    if (!ngMocksUniverse.builtProviders.has(interceptor) || ngMocksUniverse.builtProviders.get(interceptor) === null) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst parseProvider = (\n  provider: any,\n  callback: any,\n): {\n  change: () => void;\n  multi: boolean;\n  provide: any;\n} => {\n  const provide = funcGetType(provider);\n  const multi = provider !== provide && !!provider.multi;\n\n  return {\n    change: () => {\n      if (callback) {\n        callback();\n      }\n    },\n    multi,\n    provide,\n  };\n};\n\n// if the provider is a value, we need to go through the value and to replace all mock instances.\nconst replaceWithMocks = (provider: any, provide: any, mockDef: any) => {\n  if (provide !== provider && mockDef && mockDef.useValue) {\n    const useValue = helperMockService.replaceWithMocks(mockDef.useValue);\n\n    return useValue === mockDef.useValue\n      ? mockDef\n      : {\n          ...mockDef,\n          useValue,\n        };\n  }\n\n  return mockDef;\n};\n\nconst createPredefinedMockProvider = (provider: any, provide: any): any => {\n  // Then we check decisions whether we should keep or replace a provider.\n  if (ngMocksUniverse.builtProviders.has(provide)) {\n    const mockDef = ngMocksUniverse.builtProviders.get(provide);\n    if (mockDef === provide) {\n      return provider;\n    }\n\n    return mockDef;\n  }\n\n  return undefined;\n};\n\nconst createMockProvider = (provider: any, provide: any, change: () => void) => {\n  let mockDef = createPredefinedMockProvider(provider, provide);\n\n  if (!mockDef && ngMocksUniverse.flags.has('skipMock') && ngMocksUniverse.getResolution(provide) !== 'mock') {\n    ngMocksUniverse.config.get('ngMocksDepsSkip')?.add(provide);\n    mockDef = provider;\n  }\n  if (!mockDef) {\n    mockDef = mockProvider(provider);\n  }\n\n  mockDef = replaceWithMocks(provider, provide, mockDef);\n  if (!areEqualDefs(mockDef, provider, provide)) {\n    change();\n  }\n  // Touching only when we really provide a value.\n  if (mockDef) {\n    ngMocksUniverse.touches.add(provide);\n  }\n\n  return mockDef;\n};\n\nconst areEqualDefs = (mockDef: any, provider: any, provide: any): boolean => {\n  let providerDiffers = false;\n  let defDiffers = !mockDef;\n  if (provider && mockDef && !defDiffers) {\n    defDiffers = anyDiffers(provider, mockDef, 'provide', 'useValue', 'useClass', 'useExisting', 'useFactory', 'deps');\n  }\n  if (provider === provide && mockDef !== provider) {\n    providerDiffers = true;\n  } else if (provider !== provide && defDiffers) {\n    providerDiffers = true;\n  }\n\n  return !providerDiffers;\n};\n\nconst isPreconfiguredDependency = (provider: any, provide: any): boolean => {\n  //  we should not touch excluded providers.\n  if (ngMocksUniverse.builtProviders.get(provide) === null) {\n    return true;\n  }\n\n  if (provide !== provider && provider.deps) {\n    extractDependency(provider.deps, ngMocksUniverse.config.get('ngMocksDeps'));\n  }\n\n  return excludeInterceptors(provider, provide);\n};\n\nconst isPreconfiguredUseExisting = (provider: any, provide: any): boolean => {\n  //  we should not touch non-useExisting providers.\n  if (!provider || typeof provider !== 'object' || !provider.useExisting) {\n    return false;\n  }\n  if (provider.useExisting.mockOf) {\n    return true;\n  }\n\n  // skipping explicit declarations (not internally processed)\n  if (ngMocksUniverse.getResolution(provide) && !ngMocksUniverse.config.get(provide)?.__internal) {\n    return false;\n  }\n\n  return ngMocksUniverse.getResolution(funcExtractForwardRef(provider.useExisting)) === 'keep';\n};\n\n// tries to resolve a provider based on current universe state.\nexport default (provider: any, resolutions: CoreDefStack<any, any>, changed?: () => void) => {\n  const { provide, multi, change } = parseProvider(provider, changed);\n  if (isPreconfiguredDependency(provider, provide)) {\n    return change();\n  }\n  if (isPreconfiguredUseExisting(provider, provide)) {\n    ngMocksUniverse.touches.add(provide);\n\n    return provider;\n  }\n  if (resolutions.has(provide)) {\n    return createFromResolution(provide, resolutions.get(provide));\n  }\n\n  const mockDef = createMockProvider(provider, provide, change);\n\n  return multi && typeof mockDef === 'object' ? { ...mockDef, multi } : mockDef;\n};\n","import { FactoryProvider, Injector } from '@angular/core';\n\nimport { mapValues } from '../common/core.helpers';\nimport { isNgInjectionToken } from '../common/func.is-ng-injection-token';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\nimport mockHelperStub from '../mock-helper/mock-helper.stub';\nimport mockInstanceApply from '../mock-instance/mock-instance-apply';\n\nimport { MockService } from './mock-service';\n\nconst applyCallbackToken = (def: any): boolean => isNgInjectionToken(def) || typeof def === 'string';\n\nconst applyCallback = (def: any, inst: any, callbacks: any[], injector?: Injector, overrides?: any): void => {\n  let instance: any = inst;\n\n  for (const callback of callbacks) {\n    const override = callback(instance, injector);\n    if (applyCallbackToken(def)) {\n      instance = override;\n      continue;\n    }\n\n    // overrides return real value.\n    if (callback === overrides) {\n      instance = override;\n      continue;\n    }\n\n    if (!override) {\n      continue;\n    }\n\n    instance = mockHelperStub(instance, override);\n  }\n\n  return instance;\n};\n\nexport default <D, I>(\n  def: D,\n  init?: () => I,\n  overrides?: (instance: I, injector: Injector) => I | Partial<I>,\n): FactoryProvider => ({\n  deps: [Injector],\n  provide: def,\n  useFactory: (injector?: Injector) => {\n    const instance = init ? init() : MockService(def as any);\n\n    const configGlobal: Set<any> | undefined = ngMocksUniverse.getOverrides().get(def);\n    const callbacks = configGlobal ? mapValues(configGlobal) : [];\n    if (overrides) {\n      callbacks.push(overrides);\n    }\n    callbacks.push(...mockInstanceApply(def));\n\n    return applyCallback(def, instance, callbacks, injector, overrides);\n  },\n});\n","import { Provider } from '@angular/core';\n\nimport coreConfig from '../common/core.config';\nimport { Type } from '../common/core.types';\nimport funcGetType from '../common/func.get-type';\nimport { isNgInjectionToken } from '../common/func.is-ng-injection-token';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport helperDefinePropertyDescriptor from './helper.define-property-descriptor';\nimport helperExtractPropertyDescriptor from './helper.extract-property-descriptor';\nimport helperUseFactory from './helper.use-factory';\nimport { MockService } from './mock-service';\n\nconst { neverMockProvidedFunction, neverMockToken } = coreConfig;\n\nconst applyMissingClassProperties = (instance: any, useClass: Type<any>) => {\n  const existing = Object.getOwnPropertyNames(instance);\n  const child = MockService(useClass);\n\n  for (const name of Object.getOwnPropertyNames(child)) {\n    if (existing.indexOf(name) !== -1) {\n      continue;\n    }\n    const def = helperExtractPropertyDescriptor(child, name);\n    helperDefinePropertyDescriptor(instance, name, def);\n  }\n};\n\nconst createFactoryProvider = (provider: any, provide: any) =>\n  helperUseFactory(provide, () => {\n    const instance = MockService(provide);\n    // Magic below adds missed properties to the instance to\n    // fulfill missed abstract methods.\n    if (provide !== provider && Object.keys(provider).indexOf('useClass') !== -1) {\n      applyMissingClassProperties(instance, provider.useClass);\n    }\n\n    return instance;\n  });\n\nconst normalizePrimitivesMap: Array<[(value: any) => boolean, any]> = [\n  [value => typeof value === 'boolean', false],\n  [value => typeof value === 'number', 0],\n  [value => typeof value === 'string', ''],\n  [value => value === null, null],\n];\n\nconst normalizePrimitives = (value: any): any => {\n  for (const [check, result] of normalizePrimitivesMap) {\n    if (check(value)) {\n      return result;\n    }\n  }\n\n  return undefined;\n};\n\nconst createValueProvider = (provider: any, provide: any) =>\n  helperUseFactory(provide, () =>\n    provider.useValue && typeof provider.useValue === 'object'\n      ? MockService(provider.useValue)\n      : normalizePrimitives(provider.useValue),\n  );\n\nconst createClassProvider = (provider: any, provide: any) =>\n  ngMocksUniverse.builtProviders.has(provider.useClass) &&\n  ngMocksUniverse.builtProviders.get(provider.useClass) === provider.useClass\n    ? provider\n    : helperUseFactory(provide, () => MockService(provider.useClass));\n\nconst createMockProvider = (provider: any, provide: any, cacheProviders?: Map<any, any>): Provider | undefined => {\n  let mockProvider: Provider | undefined;\n  if (typeof provide === 'function') {\n    mockProvider = createFactoryProvider(provider, provide);\n  }\n  if (provide === provider && mockProvider && cacheProviders) {\n    cacheProviders.set(provide, mockProvider);\n  }\n\n  return mockProvider;\n};\n\n// Tokens are special subject, we can skip adding them because in a mock module they are useless.\n// The main problem is that providing undefined to HTTP_INTERCEPTORS and others breaks their code.\n// If a testing module / component requires omitted tokens then they should be provided manually\n// during creation of TestBed module.\nconst handleProvider = (provider: any, provide: any, useFactory: boolean) => {\n  if (provide === provider) {\n    return useFactory ? helperUseFactory(provider, () => undefined) : undefined;\n  }\n  if (provider.multi) {\n    ngMocksUniverse.config.get('ngMocksMulti')?.add(provide);\n\n    return undefined;\n  }\n\n  let mockProvider: any;\n  // istanbul ignore else\n  if (Object.keys(provider).indexOf('useValue') !== -1) {\n    mockProvider = createValueProvider(provider, provide);\n  } else if (Object.keys(provider).indexOf('useExisting') !== -1) {\n    mockProvider = provider;\n  } else if (Object.keys(provider).indexOf('useClass') !== -1) {\n    mockProvider = createClassProvider(provider, provide);\n  } else if (Object.keys(provider).indexOf('useFactory') !== -1) {\n    mockProvider = helperUseFactory(provide, () => ({}));\n  }\n\n  return mockProvider;\n};\n\nconst isNeverMockFunction = (provide: any): boolean =>\n  typeof provide === 'function' && neverMockProvidedFunction.indexOf(provide.name) !== -1;\n\nconst isNeverMockToken = (provide: any): boolean =>\n  isNgInjectionToken(provide) && neverMockToken.indexOf(provide.toString()) !== -1;\n\nexport default (provider: any, useFactory = false): Provider | undefined => {\n  const provide = funcGetType(provider);\n\n  if (ngMocksUniverse.getResolution(provide) === 'mock') {\n    // nothing to do\n  } else if (isNeverMockFunction(provide)) {\n    return provider;\n  } else if (isNeverMockToken(provide)) {\n    return undefined;\n  }\n\n  // Only pure provides should be cached to avoid their influence on\n  // another different declarations.\n  const cacheProviders = ngMocksUniverse.flags.has('cacheProvider')\n    ? ngMocksUniverse.cacheProviders\n    : /* istanbul ignore next */ undefined;\n  if (provide === provider && cacheProviders && cacheProviders.has(provide)) {\n    return cacheProviders.get(provide);\n  }\n\n  return createMockProvider(provider, provide, cacheProviders) || handleProvider(provider, provide, useFactory);\n};\n","const isAngularClass = (value: Record<keyof any, unknown>): boolean => {\n  if (value.ɵprov) {\n    return true;\n  }\n  if (value.__annotations__) {\n    return true;\n  }\n  if (value.__parameters__) {\n    return true;\n  }\n  if (value.parameters) {\n    return true;\n  }\n\n  return false;\n};\n\nconst guessClass = (name: string, proto: string, value: any): boolean => {\n  // unnamed classes can be class_N\n  if (name.match(/^class/) !== null) {\n    return true;\n  }\n\n  // let's consider an existing 'prototype' as a class\n  if (Object.keys(value.prototype).length > 0) {\n    return true;\n  }\n\n  // let's consider a capital name and 'this' usage as a class\n  const clsCode = name.codePointAt(0);\n  if (clsCode && clsCode >= 65 && clsCode <= 90 && proto.match(/\\bthis\\./gm) !== null) {\n    return true;\n  }\n\n  // webpack es5 class\n  const regEx = new RegExp(`\\\\(this,\\\\s*${name}\\\\)`, 'mg');\n  // istanbul ignore if\n  if (proto.match(regEx) !== null) {\n    return true;\n  }\n\n  return false;\n};\n\nexport default (value: any): boolean => {\n  if (typeof value !== 'function') {\n    return false;\n  }\n  if (!value.prototype) {\n    return true;\n  }\n  if (isAngularClass(value)) {\n    return false;\n  }\n\n  const proto = value.toString();\n\n  // es2015 class\n  // istanbul ignore if\n  if (proto.match(/^class\\b/) !== null) {\n    return false;\n  }\n\n  const cls = proto.match(/^function\\s+([^\\s(]+)\\(/);\n  if (cls === null) {\n    return true;\n  }\n  if (guessClass(cls[1], proto, value)) {\n    return false;\n  }\n\n  return true;\n};\n","import { AnyType } from '../common/core.types';\nimport funcGetName from '../common/func.get-name';\nimport mockHelperStub from '../mock-helper/mock-helper.stub';\n\nimport checkIsClass from './check.is-class';\nimport checkIsFunc from './check.is-func';\nimport checkIsInst from './check.is-inst';\nimport helperMockService from './helper.mock-service';\n\ntype MockServiceHandler = (cache: Map<any, any>, service: any, prefix?: string, overrides?: any) => any;\n\nconst mockVariableMap: Array<[(def: any) => boolean, MockServiceHandler]> = [\n  [\n    checkIsClass,\n    (cache, service) => {\n      const value = helperMockService.createMockFromPrototype(service.prototype);\n      cache.set(service, value);\n\n      return value;\n    },\n  ],\n  [\n    checkIsFunc,\n    (cache, service, prefix) => {\n      const value = helperMockService.mockFunction(`func:${prefix || funcGetName(service)}`);\n      cache.set(service, value());\n\n      return value;\n    },\n  ],\n  [def => Array.isArray(def), () => []],\n  [\n    checkIsInst,\n    (cache, service, prefix, callback) => {\n      const value = helperMockService.createMockFromPrototype(service.constructor.prototype);\n      cache.set(service, value);\n      for (const property of Object.keys(service)) {\n        const mock: any = callback(cache, service[property], `${prefix || 'instance'}.${property}`);\n        if (mock !== undefined) {\n          value[property] = mock;\n        }\n      }\n      Object.setPrototypeOf(value, Object.getPrototypeOf(service));\n\n      return value;\n    },\n  ],\n];\n\nconst mockVariable = (cache: Map<any, any>, service: any, prefix: string, callback: MockServiceHandler) => {\n  for (const [check, createMock] of mockVariableMap) {\n    if (!check(service)) {\n      continue;\n    }\n\n    return cache.get(service) ?? createMock(cache, service, prefix, callback);\n  }\n};\n\n/**\n * Mocking all methods / properties of a class / object.\n */\nconst mockService: MockServiceHandler = (cache, service, prefix = '', overrides): any => {\n  const value: any = mockVariable(cache, service, prefix, mockService);\n\n  if (overrides) {\n    mockHelperStub(value, overrides);\n  }\n\n  return value;\n};\n\n/**\n * MockService creates a mock instance out of an object or a class.\n * Primitives are converted to undefined.\n *\n * @see https://ng-mocks.sudo.eu/api/MockService\n */\nexport function MockService(service: boolean | number | string | null | undefined): undefined;\n\n/**\n * MockService creates a mock instance out of an object or a class.\n *\n * @see https://ng-mocks.sudo.eu/api/MockService\n *\n * ```ts\n * const service = MockService(AuthService);\n * service.login(); // does nothing, it's dummy.\n */\nexport function MockService<T>(service: AnyType<T>, spyNamePrefix?: string): T;\n\n/**\n * MockService creates a mock instance out of an object or a class.\n *\n * @see https://ng-mocks.sudo.eu/api/MockService\n *\n * ```ts\n * const mockUser = MockService(currentUser);\n * mockUser.save(); // does nothing, it's dummy.\n */\nexport function MockService<T = any>(service: object, spyNamePrefix?: string): T;\n\n/**\n * MockService creates a mock instance out of an object or a class.\n * The second parameter can be used as overrides.\n *\n * @see https://ng-mocks.sudo.eu/api/MockService\n *\n * ```ts\n * const service = MockService(AuthService, {\n *   loggedIn: true,\n * });\n * service.login(); // does nothing, it's dummy.\n * ```\n */\nexport function MockService<T>(service: AnyType<T>, overrides?: Partial<T>, spyNamePrefix?: string): T;\n\nexport function MockService(service: any, ...args: any[]): any {\n  const prefix = args.length > 0 && typeof args[0] === 'string' ? args[0] : args[1];\n  const overrides = args.length > 0 && args[0] && typeof args[0] === 'object' ? args[0] : undefined;\n\n  const cache = new Map();\n  const result = mockService(cache, service, prefix, overrides);\n  cache.clear();\n\n  return result;\n}\n","import checkIsFunc from './check.is-func';\n\nexport default (value: any): boolean => {\n  if (typeof value !== 'function') {\n    return false;\n  }\n\n  return !checkIsFunc(value);\n};\n","export default (value: any): boolean => {\n  if (value === null) {\n    return false;\n  }\n  if (typeof value !== 'object') {\n    return false;\n  }\n  if (value.ngMetadataName === 'InjectionToken') {\n    return false;\n  }\n\n  return typeof Object.getPrototypeOf(value) === 'object';\n};\n","import { ɵReflectionCapabilities as ReflectionCapabilities } from '@angular/core';\n\nimport coreDefineProperty from '../common/core.define-property';\nimport { AnyDeclaration, DirectiveIo } from '../common/core.types';\nimport funcDirectiveIoBuild from '../common/func.directive-io-build';\nimport funcDirectiveIoParse from '../common/func.directive-io-parse';\n\ninterface Declaration {\n  host: Record<string, string | undefined>;\n  hostBindings: Array<[string, string?, ...any[]]>;\n  hostListeners: Array<[string, string?, ...any[]]>;\n  attributes: string[];\n  inputs: Array<DirectiveIo>;\n  outputs: Array<DirectiveIo>;\n  propDecorators: Record<string, any[]>;\n  queries: Record<string, any>;\n  decorators: Array<'Injectable' | 'Pipe' | 'Directive' | 'Component' | 'NgModule'>;\n  [key: string]: any;\n}\n\nconst pushDecorator = (decorators: string[], decorator: string): void => {\n  const deleteIndex = decorators.indexOf(decorator);\n  if (deleteIndex !== -1) {\n    decorators.splice(deleteIndex, 1);\n  }\n  if (\n    decorator === 'Injectable' ||\n    decorator === 'Pipe' ||\n    decorator === 'Directive' ||\n    decorator === 'Component' ||\n    decorator === 'NgModule'\n  ) {\n    decorators.push(decorator);\n  }\n};\n\nconst getAllKeys = <T extends Record<keyof any, any>>(instance: T): Array<keyof T> => {\n  const props: string[] = [];\n  for (const key of Object.keys(instance)) {\n    props.push(key);\n  }\n\n  return props as never;\n};\n\nconst createDeclarations = (parent: Partial<Declaration>): Declaration => ({\n  host: parent.host ? { ...parent.host } : {},\n  hostBindings: parent.hostBindings ? [...parent.hostBindings] : [],\n  hostListeners: parent.hostListeners ? [...parent.hostListeners] : [],\n  attributes: parent.attributes ? [...parent.attributes] : [],\n  inputs: parent.inputs ? [...parent.inputs] : [],\n  outputs: parent.outputs ? [...parent.outputs] : [],\n  propDecorators: parent.propDecorators ? { ...parent.propDecorators } : {},\n  queries: parent.queries ? { ...parent.queries } : {},\n  decorators: parent.decorators ? [...parent.decorators] : [],\n});\n\nconst parseParameters = (\n  def: {\n    __parameters__?: Array<null | Array<\n      | {\n          attributeName: string;\n          ngMetadataName: 'Attribute';\n        }\n      | {\n          token: AnyDeclaration<any>;\n          ngMetadataName: 'Inject';\n        }\n      | {\n          ngMetadataName: 'Optional';\n        }\n    >>;\n  },\n  declaration: Declaration,\n): void => {\n  if (Object.prototype.hasOwnProperty.call(def, '__parameters__') && def.__parameters__) {\n    for (const decorators of def.__parameters__) {\n      for (const decorator of decorators || []) {\n        if (\n          decorator.ngMetadataName === 'Attribute' &&\n          declaration.attributes.indexOf(decorator.attributeName) === -1\n        ) {\n          declaration.attributes.push(decorator.attributeName);\n        }\n      }\n    }\n  }\n};\n\nconst parseAnnotations = (\n  def: {\n    __annotations__?: Array<{\n      ngMetadataName?: string;\n    }>;\n  },\n  declaration: Declaration,\n): void => {\n  if (Object.prototype.hasOwnProperty.call(def, '__annotations__') && def.__annotations__) {\n    for (const annotation of def.__annotations__) {\n      const ngMetadataName = annotation?.ngMetadataName;\n      if (!ngMetadataName) {\n        continue;\n      }\n      declaration[ngMetadataName] = { ...annotation, attributes: declaration.attributes };\n      pushDecorator(declaration.decorators, ngMetadataName);\n    }\n  }\n};\n\nconst parseDecorators = (\n  def: {\n    decorators?: Array<{\n      args?: [any];\n      type?: {\n        prototype?: {\n          ngMetadataName?: string;\n        };\n      };\n    }>;\n  },\n  declaration: Declaration,\n): void => {\n  if (Object.prototype.hasOwnProperty.call(def, 'decorators') && def.decorators) {\n    for (const decorator of def.decorators) {\n      const ngMetadataName = decorator?.type?.prototype?.ngMetadataName;\n      if (!ngMetadataName) {\n        continue;\n      }\n      declaration[ngMetadataName] = decorator.args ? { ...decorator.args[0] } : {};\n      pushDecorator(declaration.decorators, ngMetadataName);\n    }\n  }\n};\n\nconst parsePropMetadataParserFactoryProp =\n  (key: 'inputs' | 'outputs') =>\n  (\n    _: string,\n    name: string,\n    decorator: {\n      alias?: string;\n      required?: boolean;\n      bindingPropertyName?: string;\n    },\n    declaration: Declaration,\n  ): void => {\n    const { alias, required } = funcDirectiveIoParse({\n      name,\n      alias: decorator.alias ?? decorator.bindingPropertyName,\n      required: decorator.required,\n    });\n\n    const normalizedDef = funcDirectiveIoBuild({ name, alias, required });\n\n    let add = true;\n    for (const def of declaration[key]) {\n      if (def === normalizedDef) {\n        add = false;\n        break;\n      }\n\n      const { name: defName, alias: defAlias, required: defRequired } = funcDirectiveIoParse(def);\n      if (defName === name && defAlias === alias && defRequired === required) {\n        add = false;\n        break;\n      }\n    }\n\n    if (add) {\n      declaration[key].unshift(normalizedDef);\n    }\n  };\nconst parsePropMetadataParserInput = parsePropMetadataParserFactoryProp('inputs');\nconst parsePropMetadataParserOutput = parsePropMetadataParserFactoryProp('outputs');\n\nconst parsePropMetadataParserFactoryQueryChild =\n  (isViewQuery: boolean) =>\n  (\n    ngMetadataName: string,\n    prop: string,\n    decorator: {\n      read?: any;\n      selector: string;\n      static?: boolean;\n    },\n    declaration: Declaration,\n  ): void => {\n    if (!declaration.queries[prop]) {\n      declaration.queries[prop] = {\n        isViewQuery,\n        ngMetadataName,\n        selector: decorator.selector,\n        ...(decorator.read === undefined ? {} : { read: decorator.read }),\n        ...(decorator.static === undefined ? {} : { static: decorator.static }),\n      };\n    }\n  };\nconst parsePropMetadataParserContentChild = parsePropMetadataParserFactoryQueryChild(false);\nconst parsePropMetadataParserViewChild = parsePropMetadataParserFactoryQueryChild(true);\n\nconst parsePropMetadataParserFactoryQueryChildren =\n  (isViewQuery: boolean) =>\n  (\n    ngMetadataName: string,\n    prop: string,\n    decorator: {\n      descendants?: any;\n      emitDistinctChangesOnly?: boolean;\n      read?: any;\n      selector: string;\n    },\n    declaration: Declaration,\n  ): void => {\n    if (!declaration.queries[prop]) {\n      declaration.queries[prop] = {\n        isViewQuery,\n        ngMetadataName,\n        selector: decorator.selector,\n        ...(decorator.descendants === undefined ? {} : { descendants: decorator.descendants }),\n        ...(decorator.emitDistinctChangesOnly === undefined\n          ? {}\n          : { emitDistinctChangesOnly: decorator.emitDistinctChangesOnly }),\n        ...(decorator.read === undefined ? {} : { read: decorator.read }),\n      };\n    }\n  };\nconst parsePropMetadataParserContentChildren = parsePropMetadataParserFactoryQueryChildren(false);\nconst parsePropMetadataParserViewChildren = parsePropMetadataParserFactoryQueryChildren(true);\n\nconst parsePropMetadataParserHostBinding = (\n  _: string,\n  prop: string,\n  decorator: {\n    args?: any;\n    hostPropertyName?: string;\n  },\n  declaration: Declaration,\n): void => {\n  const key = `[${decorator.hostPropertyName || prop}]`;\n  if (!declaration.host[key]) {\n    declaration.host[key] = prop;\n  }\n  declaration.hostBindings.push([\n    prop,\n    decorator.hostPropertyName || prop,\n    ...(decorator.args ? [decorator.args] : []),\n  ]);\n};\n\nconst parsePropMetadataParserHostListener = (\n  _: string,\n  prop: string,\n  decorator: {\n    args?: any;\n    eventName?: string;\n  },\n  declaration: Declaration,\n): void => {\n  const key = `(${decorator.eventName || prop})`;\n  if (!declaration.host[key]) {\n    declaration.host[key] = `${prop}($event)`;\n  }\n  declaration.hostListeners.push([prop, decorator.eventName || prop, ...(decorator.args ? [decorator.args] : [])]);\n};\n\nconst parsePropMetadataMap: any = {\n  ContentChild: parsePropMetadataParserContentChild,\n  ContentChildren: parsePropMetadataParserContentChildren,\n  HostBinding: parsePropMetadataParserHostBinding,\n  HostListener: parsePropMetadataParserHostListener,\n  Input: parsePropMetadataParserInput,\n  Output: parsePropMetadataParserOutput,\n  ViewChild: parsePropMetadataParserViewChild,\n  ViewChildren: parsePropMetadataParserViewChildren,\n};\n\nconst parsePropMetadata = (\n  def: {\n    __prop__metadata__?: Record<keyof any, any[]>;\n  },\n  declaration: Declaration,\n): void => {\n  if (Object.prototype.hasOwnProperty.call(def, '__prop__metadata__') && def.__prop__metadata__) {\n    for (const prop of getAllKeys(def.__prop__metadata__)) {\n      const decorators: Array<{\n        ngMetadataName?: string;\n      }> = def.__prop__metadata__[prop];\n      for (const decorator of decorators) {\n        const ngMetadataName = decorator?.ngMetadataName;\n        if (!ngMetadataName) {\n          continue;\n        }\n        parsePropMetadataMap[ngMetadataName]?.(ngMetadataName, prop, decorator, declaration);\n      }\n    }\n  }\n};\n\nconst parsePropDecoratorsParserFactoryProp = (key: 'inputs' | 'outputs') => {\n  const callback = parsePropMetadataParserFactoryProp(key);\n  return (\n    _: string,\n    name: string,\n    decorator: {\n      args?: [DirectiveIo];\n    },\n    declaration: Declaration,\n  ): void => {\n    const { alias = undefined, required = undefined } =\n      typeof decorator.args?.[0] === 'undefined'\n        ? {}\n        : typeof decorator.args[0] === 'string'\n          ? { alias: decorator.args[0] }\n          : decorator.args[0];\n    callback(_, name, { alias, required, bindingPropertyName: alias }, declaration);\n  };\n};\nconst parsePropDecoratorsParserInput = parsePropDecoratorsParserFactoryProp('inputs');\nconst parsePropDecoratorsParserOutput = parsePropDecoratorsParserFactoryProp('outputs');\n\nconst parsePropDecoratorsParserFactoryQuery =\n  (isViewQuery: boolean) =>\n  (\n    ngMetadataName: string,\n    prop: string,\n    decorator: {\n      args: [string] | [string, any];\n    },\n    declaration: Declaration,\n  ): void => {\n    if (!declaration.queries[prop]) {\n      declaration.queries[prop] = {\n        isViewQuery,\n        ngMetadataName,\n        selector: decorator.args[0],\n        ...decorator.args[1],\n      };\n    }\n  };\nconst parsePropDecoratorsParserContent = parsePropDecoratorsParserFactoryQuery(false);\nconst parsePropDecoratorsParserView = parsePropDecoratorsParserFactoryQuery(true);\n\nconst parsePropDecoratorsParserHostBinding = (\n  _: string,\n  prop: string,\n  decorator: {\n    args?: [string] | [string, any[]];\n  },\n  declaration: Declaration,\n): void => {\n  const key = `[${decorator.args?.[0] || prop}]`;\n  if (!declaration.host[key]) {\n    declaration.host[key] = prop;\n  }\n  declaration.hostBindings.push([prop, ...(decorator.args || [])]);\n};\n\nconst parsePropDecoratorsParserHostListener = (\n  _: string,\n  prop: string,\n  decorator: {\n    args?: any[];\n  },\n  declaration: Declaration,\n): void => {\n  const key = `(${decorator.args?.[0] || prop})`;\n  if (!declaration.host[key]) {\n    declaration.host[key] = `${prop}($event)`;\n  }\n  declaration.hostListeners.push([prop, ...(decorator.args || [])]);\n};\n\nconst parsePropDecoratorsMap: any = {\n  ContentChild: parsePropDecoratorsParserContent,\n  ContentChildren: parsePropDecoratorsParserContent,\n  HostBinding: parsePropDecoratorsParserHostBinding,\n  HostListener: parsePropDecoratorsParserHostListener,\n  Input: parsePropDecoratorsParserInput,\n  Output: parsePropDecoratorsParserOutput,\n  ViewChild: parsePropDecoratorsParserView,\n  ViewChildren: parsePropDecoratorsParserView,\n};\n\nconst parsePropDecorators = (\n  def: {\n    propDecorators?: Record<\n      string,\n      Array<{\n        args: any;\n        type?: {\n          prototype?: {\n            ngMetadataName?: string;\n          };\n        };\n      }>\n    >;\n  },\n  declaration: Declaration,\n): void => {\n  if (Object.prototype.hasOwnProperty.call(def, 'propDecorators') && def.propDecorators) {\n    for (const prop of getAllKeys(def.propDecorators)) {\n      declaration.propDecorators[prop] = [...(declaration.propDecorators[prop] || []), ...def.propDecorators[prop]];\n      for (const decorator of def.propDecorators[prop]) {\n        const ngMetadataName = decorator?.type?.prototype?.ngMetadataName;\n        if (!ngMetadataName) {\n          continue;\n        }\n        parsePropDecoratorsMap[ngMetadataName]?.(ngMetadataName, prop, decorator, declaration);\n      }\n    }\n  }\n};\n\nconst buildDeclaration = (def: any | undefined, declaration: Declaration): void => {\n  if (def) {\n    def.inputs = def.inputs || [];\n    for (const input of declaration.inputs) {\n      if (def.inputs.indexOf(input) === -1) {\n        def.inputs.push(input);\n      }\n    }\n\n    def.outputs = def.outputs || [];\n    for (const output of declaration.outputs) {\n      if (def.outputs.indexOf(output) === -1) {\n        def.outputs.push(output);\n      }\n    }\n\n    def.queries = {\n      ...(def.queries || []),\n      ...declaration.queries,\n    };\n\n    def.hostBindings = declaration.hostBindings;\n    def.hostListeners = declaration.hostListeners;\n  }\n};\n\nconst reflectionCapabilities = new ReflectionCapabilities();\n\nconst parse = (def: any): any => {\n  if (typeof def !== 'function' && typeof def !== 'object') {\n    return {};\n  }\n\n  if (Object.prototype.hasOwnProperty.call(def, '__ngMocksParsed')) {\n    return def.__ngMocksDeclarations;\n  }\n\n  const parent = Object.getPrototypeOf(def);\n  const parentDeclarations = parent ? parse(parent) : {};\n  const declaration = createDeclarations(parentDeclarations);\n  coreDefineProperty(def, '__ngMocksParsed', true);\n  parseParameters(def, declaration);\n  parseAnnotations(def, declaration);\n  parseDecorators(def, declaration);\n  parsePropDecorators(def, declaration);\n  parsePropMetadata(def, declaration);\n  buildDeclaration(declaration.Directive, declaration);\n  buildDeclaration(declaration.Component, declaration);\n\n  coreDefineProperty(def, '__ngMocksDeclarations', {\n    ...parentDeclarations,\n    ...declaration,\n    parameters: reflectionCapabilities.parameters(def),\n  });\n\n  return def.__ngMocksDeclarations;\n};\n\nexport default ((): ((def: any) => Declaration) => parse)();\n","var x = y => { var x = {}; __webpack_require__.d(x, y); return x; }\nvar y = x => () => x\nmodule.exports = x({ [\"ChangeDetectorRef\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.ChangeDetectorRef, [\"Component\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.Component, [\"ComponentFactoryResolver\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.ComponentFactoryResolver, [\"ContentChild\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.ContentChild, [\"ContentChildren\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.ContentChildren, [\"DebugElement\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.DebugElement, [\"Directive\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.Directive, [\"ElementRef\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.ElementRef, [\"EventEmitter\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.EventEmitter, [\"InjectionToken\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.InjectionToken, [\"Injector\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.Injector, [\"Input\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.Input, [\"NgModule\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.NgModule, [\"Optional\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.Optional, [\"Output\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.Output, [\"Pipe\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.Pipe, [\"QueryList\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.QueryList, [\"Self\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.Self, [\"TemplateRef\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.TemplateRef, [\"ViewChild\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.ViewChild, [\"ViewChildren\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.ViewChildren, [\"ViewContainerRef\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.ViewContainerRef, [\"ɵReflectionCapabilities\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__[\"ɵReflectionCapabilities\"] });","var x = y => { var x = {}; __webpack_require__.d(x, y); return x; }\nvar y = x => () => x\nmodule.exports = x({ [\"TestBed\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_testing_89899de6__.TestBed, [\"getTestBed\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_testing_89899de6__.getTestBed });","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import ngMocksUniverse from './ng-mocks-universe';\n\nexport interface NgMocksStack {\n  id: object;\n  level: 'root' | 'runtime';\n  mockInstance?: any[];\n}\n\ntype NgMocksStackCallback = (state: NgMocksStack, stack: NgMocksStack[]) => void;\n\nconst stackRoot: NgMocksStack = { id: {}, level: 'root' };\nconst stack: NgMocksStack[] = ngMocksUniverse.global.get('reporter-stack') || [{ ...stackRoot }];\nngMocksUniverse.global.set('reporter-stack', stack);\nconst current = () => stack[stack.length - 1];\n\n// istanbul ignore next\nconst listenersPush: NgMocksStackCallback[] = ngMocksUniverse.global.get('reporter-stack-push') ?? [];\nngMocksUniverse.global.set('reporter-stack-push', listenersPush);\n\n// istanbul ignore next\nconst listenersPop: NgMocksStackCallback[] = ngMocksUniverse.global.get('reporter-stack-pop') ?? [];\nngMocksUniverse.global.set('reporter-stack-pop', listenersPop);\n\nconst stackPush = () => {\n  const id = {};\n  ngMocksUniverse.global.set('reporter-stack-id', id);\n  const state: NgMocksStack = { id, level: 'runtime' };\n  stack.push(state);\n\n  for (const callback of listenersPush) {\n    callback(state, stack);\n  }\n};\nconst stackPop = () => {\n  const state = stack.pop();\n\n  // this code is actually needed for jest tests.\n  // istanbul ignore if\n  if (stack.length === 0) {\n    stack.push(state?.level === 'root' ? state : { ...stackRoot });\n  }\n\n  // istanbul ignore else\n  if (state && state.level !== 'root') {\n    for (const callback of listenersPop) {\n      callback(state, stack);\n    }\n  }\n\n  ngMocksUniverse.global.set('reporter-stack-id', stack[stack.length - 1].id);\n};\n\n// istanbul ignore next\nconst subscribePush = (callback: NgMocksStackCallback) => {\n  if (listenersPush.indexOf(callback)) {\n    listenersPush.push(callback);\n  }\n  if (stack.length > 0) {\n    callback(stack[stack.length - 1], stack);\n  }\n};\n\n// istanbul ignore next\nconst subscribePop = (callback: NgMocksStackCallback) => {\n  if (listenersPop.indexOf(callback) === -1) {\n    listenersPop.push(callback);\n  }\n};\n\n// istanbul ignore next\nconst unsubscribePush = (callback: NgMocksStackCallback) => {\n  const index = listenersPush.indexOf(callback);\n  if (index !== -1) {\n    listenersPush.splice(index, 1);\n  }\n};\n\n// istanbul ignore next\nconst unsubscribePop = (callback: NgMocksStackCallback) => {\n  const index = listenersPop.indexOf(callback);\n  if (index !== -1) {\n    listenersPop.splice(index, 1);\n  }\n};\n\nexport default {\n  current,\n  stackPop,\n  stackPush,\n  subscribePop,\n  subscribePush,\n  unsubscribePop,\n  unsubscribePush,\n};\n","import { MetadataOverride } from '@angular/core/testing';\n\nimport { flatten } from '../common/core.helpers';\nimport { NG_MOCKS, NG_MOCKS_OVERRIDES, NG_MOCKS_TOUCHES } from '../common/core.tokens';\nimport { AnyType } from '../common/core.types';\n\nexport default (\n  providers: any,\n): {\n  mocks?: Map<any, any>;\n  overrides?: Map<AnyType<any>, [MetadataOverride<any>, MetadataOverride<any>]>;\n  touches?: Set<any>;\n} => {\n  let mocks: Map<any, any> | undefined;\n  let overrides: Map<AnyType<any>, [MetadataOverride<any>, MetadataOverride<any>]> | undefined;\n  let touches: Set<any> | undefined;\n\n  for (const provide of flatten(providers || [])) {\n    if (typeof provide !== 'object') {\n      continue;\n    }\n    if (provide.provide === NG_MOCKS) {\n      mocks = provide.useValue;\n    }\n    if (provide.provide === NG_MOCKS_OVERRIDES) {\n      overrides = provide.useValue;\n    }\n    if (provide.provide === NG_MOCKS_TOUCHES) {\n      touches = provide.useValue;\n    }\n  }\n\n  return {\n    mocks,\n    overrides,\n    touches,\n  };\n};\n","import collectDeclarations from '../resolve/collect-declarations';\n\nimport { AnyDeclaration } from './core.types';\nimport { isNgInjectionToken } from './func.is-ng-injection-token';\nimport { NgModuleWithProviders } from './func.is-ng-module-def-with-providers';\n\n/**\n * Returns how the class has been decorated.\n * It doesn't work well, because multi decorations and extensions of decorated classes can bring strange behavior.\n * Because of that, we simply take the last decoration as the expected, if the decorator is not Injectable.\n * Services have the lowest priority.\n *\n * @internal\n *\n * ```ts\n * getNgType(MockModule); // returns 'NgModule' | 'Component' | 'Directive' | 'Pipe' | 'Injectable'\n * ```\n */\nexport const getNgType = (\n  declaration: AnyDeclaration<any> | NgModuleWithProviders<any>,\n): 'NgModule' | 'Component' | 'Directive' | 'Pipe' | 'Injectable' | undefined => {\n  if (typeof declaration === 'string') {\n    return undefined;\n  }\n  if (isNgInjectionToken(declaration)) {\n    return 'Injectable';\n  }\n\n  const { decorators } = collectDeclarations(declaration);\n\n  for (let index = decorators.length - 1; index >= 0; index -= 1) {\n    if (decorators[index] === 'Injectable') {\n      continue;\n    }\n\n    return decorators[index];\n  }\n\n  if (decorators.length > 0) {\n    return 'Injectable';\n  }\n\n  return undefined;\n};\n","import collectDeclarations from '../resolve/collect-declarations';\n\nimport { getNgType } from './func.get-ng-type';\n\n/**\n * Checks whether a class has been decorated with the standalone flag.\n */\nexport function isStandalone(declaration: any): boolean {\n  const type = getNgType(declaration);\n  if (!type || type === 'Injectable') {\n    return false;\n  }\n\n  return collectDeclarations(declaration)[type].standalone === true;\n}\n","import { mapEntries } from './core.helpers';\n\nexport default class<K, V> {\n  protected stack: Array<Map<K, V>> = [];\n\n  public constructor() {\n    this.push();\n  }\n\n  public push() {\n    this.stack.push(new Map());\n  }\n\n  public pop(): Map<V, V> {\n    return this.stack.pop() ?? new Map();\n  }\n\n  public has(key: K): ReturnType<Map<K, V>['has']> {\n    for (let i = this.stack.length - 1; i >= 0; i -= 1) {\n      if (this.stack[i].has(key)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public get(key: K): ReturnType<Map<K, V>['get']> {\n    for (let i = this.stack.length - 1; i >= 0; i -= 1) {\n      if (this.stack[i].has(key)) {\n        return this.stack[i].get(key);\n      }\n    }\n\n    return undefined;\n  }\n\n  public set(key: K, value: V): this {\n    for (let i = this.stack.length - 1; i >= 0; i -= 1) {\n      this.stack[i].set(key, value);\n    }\n\n    return this;\n  }\n\n  public merge(resolutions: Map<K, V>): this {\n    for (const [key, value] of mapEntries(resolutions)) {\n      this.set(key, value);\n    }\n\n    return this;\n  }\n}\n","import coreConfig from '../common/core.config';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nexport class MockBuilderStash {\n  protected data: Record<keyof any, any> = {};\n\n  public backup(): void {\n    this.data = {\n      builtDeclarations: ngMocksUniverse.builtDeclarations,\n      builtProviders: ngMocksUniverse.builtProviders,\n      cacheDeclarations: ngMocksUniverse.cacheDeclarations,\n      cacheProviders: ngMocksUniverse.cacheProviders,\n      config: ngMocksUniverse.config,\n      configInstance: ngMocksUniverse.configInstance,\n      flags: ngMocksUniverse.flags,\n      touches: ngMocksUniverse.touches,\n    };\n\n    ngMocksUniverse.builtDeclarations = new Map();\n    ngMocksUniverse.builtProviders = new Map();\n    ngMocksUniverse.cacheDeclarations = new Map();\n    ngMocksUniverse.cacheProviders = new Map();\n    ngMocksUniverse.config = new Map();\n    ngMocksUniverse.configInstance = new Map();\n    ngMocksUniverse.flags = new Set(coreConfig.flags);\n    ngMocksUniverse.touches = new Set();\n  }\n\n  public restore(): void {\n    for (const key of Object.keys(this.data)) {\n      (ngMocksUniverse as any)[key] = (this.data as any)[key];\n    }\n  }\n}\n","import { AnyType } from './core.types';\n\nexport default (declaration: any): undefined | AnyType<any> | string => {\n  if (!declaration || (typeof declaration !== 'object' && typeof declaration !== 'function')) {\n    return undefined;\n  }\n\n  return declaration.ɵprov?.providedIn ?? declaration.ngInjectableDef?.providedIn;\n};\n","import CoreDefStack from '../../common/core.def-stack';\nimport { extractDependency, flatten, mapValues } from '../../common/core.helpers';\nimport coreReflectProvidedIn from '../../common/core.reflect.provided-in';\nimport funcGetType from '../../common/func.get-type';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\nimport helperResolveProvider from '../../mock-service/helper.resolve-provider';\n\nimport { BuilderData, NgMeta } from './types';\n\nexport default (ngModule: NgMeta, { providerDef, mockDef }: BuilderData, resolutions: CoreDefStack<any, any>): void => {\n  // Adding requested providers to test bed.\n  for (const provider of mapValues(providerDef)) {\n    ngModule.providers.push(provider);\n  }\n\n  // Analyzing providers.\n  for (const provider of flatten(ngModule.providers)) {\n    const provide = funcGetType(provider);\n    ngMocksUniverse.touches.add(provide);\n\n    if (provide !== provider && (provider as any).deps) {\n      extractDependency((provider as any).deps, ngMocksUniverse.config.get('ngMocksDeps'));\n    }\n  }\n\n  for (const def of mapValues(mockDef)) {\n    if (ngMocksUniverse.touches.has(def) || coreReflectProvidedIn(def) !== 'root') {\n      continue;\n    }\n\n    ngModule.providers.push(helperResolveProvider(def, resolutions));\n    ngMocksUniverse.touches.add(def);\n  }\n};\n","import funcGetName from './func.get-name';\nimport funcIsJestMock from './func.is-jest-mock';\n\nexport default (def: any): void => {\n  if (funcIsJestMock(def)) {\n    throw new Error(\n      [\n        `ng-mocks got ${funcGetName(def)} which has been already mocked by jest.mock().`,\n        'It is not possible to produce correct mocks for it, because jest.mock() removes Angular decorators.',\n        `To fix this, please avoid jest.mock() on the file which exports ${funcGetName(\n          def,\n        )} or add jest.dontMock() on it.`,\n        'The same should be done for all related dependencies.',\n      ].join(' '),\n    );\n  }\n};\n","export default (def: any): boolean => {\n  if (!def) {\n    return false;\n  }\n\n  if (typeof def !== 'function' && typeof def !== 'object') {\n    return false;\n  }\n\n  if (def._isMockFunction && def.mockName && def.__annotations__) {\n    return true;\n  }\n\n  return false;\n};\n","import errorEmptyDef from './error.empty-def';\nimport errorJestMock from './error.jest-mock';\nimport errorMissingDecorators from './error.missing-decorators';\n\nexport default (callback: any) => (def: any) => {\n  errorEmptyDef(def);\n\n  try {\n    return callback(def);\n  } catch {\n    errorJestMock(def);\n    errorMissingDecorators(def);\n  }\n};\n","export default (def: any): void => {\n  if (!def) {\n    throw new Error(\n      [\n        'undefined / null has been passed into ng-mocks as a declaration / provider.',\n        'Please ensure that the current test file has correct imports:',\n        'imported files exist and imported declarations have been exported in the file.',\n      ].join(' '),\n    );\n  }\n};\n","import funcGetName from './func.get-name';\n\nexport default (def: any): void => {\n  throw new Error(\n    [\n      `${funcGetName(def)} declaration has been passed into ng-mocks without Angular decorators.`,\n      'Therefore, it cannot be properly handled.',\n      'Highly likely,',\n      typeof jest === 'undefined' ? '' : /* istanbul ignore next */ 'jest.mock() has been used on its file, or',\n      'ng-mocks is imported in production code, or got a class without Angular decoration.',\n      'Otherwise, please create an issue on github: https://github.com/help-me-mom/ng-mocks/issues/new?title=False%20positive%20ng-mocks%20not%20in%20JIT.',\n      'Thank you in advance for support.',\n    ].join(' '),\n  );\n};\n","import { Component, Directive, NgModule } from '@angular/core';\n\nimport collectDeclarations from '../resolve/collect-declarations';\n\nimport coreReflectBodyCatch from './core.reflect.body-catch';\n\nexport default (\n  def: any,\n): Directive &\n  Partial<Component> &\n  NgModule & {\n    hostBindings?: Array<[string, any]>;\n    hostListeners?: Array<[string, any, any]>;\n    imports?: any[];\n    standalone?: boolean;\n  } =>\n  coreReflectBodyCatch((arg: any) => {\n    const declaration = collectDeclarations(arg);\n    if (declaration.Component) {\n      return declaration.Component;\n    }\n    if (declaration.Directive) {\n      return declaration.Directive;\n    }\n\n    throw new Error('Cannot resolve declarations');\n  })(def);\n","import { NgModule } from '@angular/core';\n\nimport collectDeclarations from '../resolve/collect-declarations';\n\nimport coreReflectBodyCatch from './core.reflect.body-catch';\n\nexport default (def: any): NgModule =>\n  coreReflectBodyCatch((arg: any) => {\n    const declaration = collectDeclarations(arg);\n    if (declaration.NgModule) {\n      return declaration.NgModule;\n    }\n\n    throw new Error('Cannot resolve declarations');\n  })(def);\n","import coreReflectDirectiveResolve from './core.reflect.directive-resolve';\nimport coreReflectModuleResolve from './core.reflect.module-resolve';\nimport { isNgDef } from './func.is-ng-def';\n\nexport default (value: any): any => {\n  if (isNgDef(value, 'c')) {\n    return coreReflectDirectiveResolve(value);\n  }\n  if (isNgDef(value, 'd')) {\n    return coreReflectDirectiveResolve(value);\n  }\n  if (isNgDef(value, 'm')) {\n    return coreReflectModuleResolve(value);\n  }\n\n  return undefined;\n};\n","import { MockedComponent } from '../mock-component/types';\nimport { MockedDirective } from '../mock-directive/types';\nimport { MockedModule } from '../mock-module/types';\nimport { MockedPipe } from '../mock-pipe/types';\n\nimport { AnyType, Type } from './core.types';\n\n/**\n * Returns the original class of a mock module class.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/getSourceOfMock\n *\n * ```ts\n * getSourceOfMock(MockModule); // returns RealModule\n * getSourceOfMock(RealModule); // returns RealModule\n * ```\n */\nexport function getSourceOfMock<T>(declaration: AnyType<MockedModule<T>>): Type<T>;\n\n/**\n * Returns the original class of a mock component class.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/getSourceOfMock\n *\n * ```ts\n * getSourceOfMock(MockComponent); // returns RealComponent\n * getSourceOfMock(RealComponent); // returns RealComponent\n * ```\n */\nexport function getSourceOfMock<T>(declaration: AnyType<MockedComponent<T>>): Type<T>;\n\n/**\n * Returns the original class of a mock directive class.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/getSourceOfMock\n *\n * ```ts\n * getSourceOfMock(MockDirective); // returns RealDirective\n * getSourceOfMock(RealDirective); // returns RealDirective\n * ```\n */\nexport function getSourceOfMock<T>(declaration: AnyType<MockedDirective<T>>): Type<T>;\n\n/**\n * Returns the original class of a mock pipe class.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/getSourceOfMock\n *\n * ```ts\n * getSourceOfMock(MockPipe); // returns RealPipe\n * getSourceOfMock(RealPipe); // returns RealPipe\n * ```\n */\nexport function getSourceOfMock<T>(declaration: AnyType<MockedPipe<T>>): Type<T>;\n\n/**\n * Returns the original class of a mock class.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/getSourceOfMock\n *\n * ```ts\n * getSourceOfMock(MockClass); // returns RealClass\n * getSourceOfMock(RealClass); // returns RealClass\n * ```\n */\nexport function getSourceOfMock<T>(declaration: AnyType<T>): Type<T>;\n\nexport function getSourceOfMock<T>(declaration: any): Type<T> {\n  return typeof declaration === 'function' && declaration.mockOf ? declaration.mockOf : declaration;\n}\n","import { getSourceOfMock } from '../common/func.get-source-of-mock';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nexport default (instanceDef: any, ngModuleDef?: any) => {\n  const instance = getSourceOfMock(instanceDef);\n  const configInstance = ngMocksUniverse.configInstance.get(instance) ?? { __set: true };\n  if (!configInstance.exported) {\n    configInstance.exported = new Set();\n  }\n  if (ngModuleDef) {\n    configInstance.exported.add(getSourceOfMock(ngModuleDef));\n  }\n  if (configInstance.__set) {\n    configInstance.__set = undefined;\n    ngMocksUniverse.configInstance.set(instance, configInstance);\n  }\n};\n","var x = y => { var x = {}; __webpack_require__.d(x, y); return x; }\nvar y = x => () => x\nconst __WEBPACK_NAMESPACE_OBJECT__ = x({ [\"AbstractControl\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_forms_df10eade__.AbstractControl, [\"DefaultValueAccessor\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_forms_df10eade__.DefaultValueAccessor, [\"FormControl\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_forms_df10eade__.FormControl, [\"FormControlDirective\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_forms_df10eade__.FormControlDirective, [\"NG_ASYNC_VALIDATORS\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_forms_df10eade__.NG_ASYNC_VALIDATORS, [\"NG_VALIDATORS\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_forms_df10eade__.NG_VALIDATORS, [\"NG_VALUE_ACCESSOR\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_forms_df10eade__.NG_VALUE_ACCESSOR, [\"NgControl\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_forms_df10eade__.NgControl, [\"NgModel\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_forms_df10eade__.NgModel });","import * as module from '@angular/forms';\n\nconst AbstractControl = module.AbstractControl;\nconst DefaultValueAccessor = module.DefaultValueAccessor;\nconst FormControl = module.FormControl;\nconst FormControlDirective = module.FormControlDirective;\nconst NG_ASYNC_VALIDATORS = module.NG_ASYNC_VALIDATORS;\nconst NG_VALIDATORS = module.NG_VALIDATORS;\nconst NG_VALUE_ACCESSOR = module.NG_VALUE_ACCESSOR;\nconst NgControl = module.NgControl;\nconst NgModel = module.NgModel;\n\nexport default {\n  AbstractControl,\n  DefaultValueAccessor,\n  FormControl,\n  FormControlDirective,\n  NG_ASYNC_VALIDATORS,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  NgControl,\n  NgModel,\n};\n","import { Injector, TemplateRef, ViewContainerRef } from '@angular/core';\n\nimport { MockConfig } from './mock';\n\nexport default <T>(\n  value: T,\n): value is T &\n  MockConfig & {\n    __ngMocksInjector?: Injector;\n    __template?: TemplateRef<any>;\n    __vcr?: ViewContainerRef;\n  } => {\n  return value && typeof value === 'object' && !!(value as any).__ngMocks;\n};\n","import { AsyncValidator, ControlValueAccessor, ValidationErrors, Validator } from '@angular/forms';\n\nimport { AnyType } from './core.types';\nimport { MockControlValueAccessor, MockValidator } from './mock-control-value-accessor';\n\nconst applyProxy = (proxy: any, method: string, value: any, storage?: string) => {\n  if (proxy.instance && storage) {\n    proxy.instance[storage] = value;\n  }\n  if (proxy.instance && proxy.instance[method]) {\n    return proxy.instance[method](value);\n  }\n};\n\nexport class MockControlValueAccessorProxy implements ControlValueAccessor {\n  public instance?: Partial<MockControlValueAccessor & ControlValueAccessor>;\n\n  public constructor(public readonly target?: AnyType<any>) {}\n\n  public registerOnChange(fn: any): void {\n    applyProxy(this, 'registerOnChange', fn, '__simulateChange');\n  }\n\n  public registerOnTouched(fn: any): void {\n    applyProxy(this, 'registerOnTouched', fn, '__simulateTouch');\n  }\n\n  public setDisabledState(isDisabled: boolean): void {\n    applyProxy(this, 'setDisabledState', isDisabled);\n  }\n\n  public writeValue(value: any): void {\n    applyProxy(this, 'writeValue', value);\n  }\n}\n\nexport class MockValidatorProxy implements Validator {\n  public instance?: Partial<MockValidator & Validator>;\n\n  public constructor(public readonly target?: AnyType<any>) {}\n\n  public registerOnValidatorChange(fn: any): void {\n    applyProxy(this, 'registerOnValidatorChange', fn, '__simulateValidatorChange');\n  }\n\n  public validate(control: any): ValidationErrors | null {\n    if (this.instance && this.instance.validate) {\n      return this.instance.validate(control);\n    }\n\n    return null;\n  }\n}\n\nexport class MockAsyncValidatorProxy implements AsyncValidator {\n  public instance?: Partial<MockValidator & AsyncValidator>;\n\n  public constructor(public readonly target?: AnyType<any>) {}\n\n  public registerOnValidatorChange(fn: any): void {\n    applyProxy(this, 'registerOnValidatorChange', fn, '__simulateValidatorChange');\n  }\n\n  public validate(control: any): any {\n    if (this.instance && this.instance.validate) {\n      const result: any = this.instance.validate(control);\n\n      return result === undefined ? Promise.resolve(null) : result;\n    }\n\n    return Promise.resolve(null);\n  }\n}\n","import { EventEmitter, Injector, Optional, PipeTransform, Self } from '@angular/core';\n\nimport { IMockBuilderConfig } from '../mock-builder/types';\nimport mockHelperStub from '../mock-helper/mock-helper.stub';\nimport mockInstanceApply from '../mock-instance/mock-instance-apply';\nimport helperMockService from '../mock-service/helper.mock-service';\n\nimport coreDefineProperty from './core.define-property';\nimport coreForm from './core.form';\nimport { mapValues } from './core.helpers';\nimport { AnyType, DirectiveIo } from './core.types';\nimport funcDirectiveIoParse from './func.directive-io-parse';\nimport funcIsMock from './func.is-mock';\nimport { MockControlValueAccessorProxy } from './mock-control-value-accessor-proxy';\nimport ngMocksUniverse from './ng-mocks-universe';\n\nconst setValueAccessor = (instance: any, ngControl?: any) => {\n  if (ngControl && !ngControl.valueAccessor && instance.__ngMocksConfig.setControlValueAccessor) {\n    try {\n      ngControl.valueAccessor = new MockControlValueAccessorProxy(instance.__ngMocksCtor);\n    } catch {\n      // nothing to do.\n    }\n  }\n};\n\n// connecting to NG_VALUE_ACCESSOR\nconst installValueAccessor = (ngControl: any, instance: any) => {\n  if (!ngControl.valueAccessor.instance && ngControl.valueAccessor.target === instance.__ngMocksCtor) {\n    ngControl.valueAccessor.instance = instance;\n    helperMockService.mock(instance, 'registerOnChange');\n    helperMockService.mock(instance, 'registerOnTouched');\n    helperMockService.mock(instance, 'setDisabledState');\n    helperMockService.mock(instance, 'writeValue');\n    instance.__ngMocksConfig.isControlValueAccessor = true;\n  }\n};\n\n// connecting to NG_VALIDATORS\n// connecting to NG_ASYNC_VALIDATORS\nconst installValidator = (validators: any[], instance: any) => {\n  for (const validator of validators) {\n    if (!validator.instance && validator.target === instance.__ngMocksCtor) {\n      validator.instance = instance;\n      helperMockService.mock(instance, 'registerOnValidatorChange');\n      helperMockService.mock(instance, 'validate');\n      instance.__ngMocksConfig.isValidator = true;\n    }\n  }\n};\n\nconst applyNgValueAccessor = (instance: any, ngControl: any) => {\n  setValueAccessor(instance, ngControl);\n\n  try {\n    // istanbul ignore else\n    if (ngControl) {\n      installValueAccessor(ngControl, instance);\n      installValidator(ngControl._rawValidators, instance);\n      installValidator(ngControl._rawAsyncValidators, instance);\n    }\n  } catch {\n    // nothing to do.\n  }\n};\n\nconst applyOutputs = (instance: MockConfig & Record<keyof any, any>) => {\n  const mockOutputs = [];\n  for (const output of instance.__ngMocksConfig.outputs || []) {\n    mockOutputs.push(funcDirectiveIoParse(output).name);\n  }\n\n  for (const output of mockOutputs) {\n    if (instance[output] || Object.getOwnPropertyDescriptor(instance, output)) {\n      continue;\n    }\n    instance[output] = new EventEmitter<any>();\n  }\n};\n\nconst applyPrototype = (instance: Mock, prototype: AnyType<any>) => {\n  for (const prop of [\n    ...helperMockService.extractMethodsFromPrototype(prototype),\n    ...helperMockService.extractPropertiesFromPrototype(prototype),\n  ]) {\n    const descriptor = helperMockService.extractPropertyDescriptor(prototype, prop);\n    helperMockService.definePropertyDescriptor(instance, prop, descriptor);\n  }\n};\n\nconst applyMethods = (instance: Mock & Record<keyof any, any>, prototype: AnyType<any>) => {\n  for (const method of helperMockService.extractMethodsFromPrototype(prototype)) {\n    if (instance[method] || Object.getOwnPropertyDescriptor(instance, method)) {\n      continue;\n    }\n    helperMockService.mock(instance, method);\n  }\n};\n\nconst applyProps = (instance: Mock & Record<keyof any, any>, prototype: AnyType<any>) => {\n  for (const prop of helperMockService.extractPropertiesFromPrototype(prototype)) {\n    if (instance[prop] || Object.getOwnPropertyDescriptor(instance, prop)) {\n      continue;\n    }\n    helperMockService.mock(instance, prop, 'get');\n    helperMockService.mock(instance, prop, 'set');\n  }\n};\n\nexport type ngMocksMockConfig = {\n  config?: IMockBuilderConfig;\n  hostBindings?: string[];\n  hostListeners?: string[];\n  init?: (instance: any) => void;\n  isControlValueAccessor?: boolean;\n  isValidator?: boolean;\n  outputs?: Array<DirectiveIo>;\n  queryScanKeys?: string[];\n  setControlValueAccessor?: boolean;\n  transform?: PipeTransform['transform'];\n};\n\nconst applyOverrides = (instance: any, mockOf: any, injector?: Injector): void => {\n  const configGlobal: Set<any> | undefined = ngMocksUniverse.getOverrides().get(mockOf);\n  const callbacks = configGlobal ? mapValues(configGlobal) : [];\n  if (instance.__ngMocksConfig.init) {\n    callbacks.push(instance.__ngMocksConfig.init);\n  }\n  callbacks.push(...mockInstanceApply(mockOf));\n\n  for (const callback of callbacks) {\n    const overrides = callback(instance, injector);\n    if (!overrides) {\n      continue;\n    }\n    mockHelperStub(instance, overrides);\n  }\n};\n\nexport interface MockConfig {\n  __ngMocksConfig: ngMocksMockConfig;\n}\n\n/**\n * Mock class is the base class for each mock.\n * Usually, it should not be used directly.\n */\nexport class Mock {\n  protected __ngMocksConfig!: ngMocksMockConfig;\n\n  public constructor(\n    injector: Injector | null = null,\n    ngControl: any | null = null, // NgControl\n  ) {\n    const mockOf = (this.constructor as any).mockOf;\n    coreDefineProperty(this, '__ngMocks', true);\n    coreDefineProperty(this, '__ngMocksInjector', injector);\n    coreDefineProperty(this, '__ngMocksCtor', this.constructor);\n    for (const key of this.__ngMocksConfig.queryScanKeys || /* istanbul ignore next */ []) {\n      coreDefineProperty(this, `__ngMocksVcr_${key}`, undefined);\n    }\n    for (const key of this.__ngMocksConfig.hostBindings || /* istanbul ignore next */ []) {\n      helperMockService.mock(this, key, 'get');\n      helperMockService.mock(this, key, 'set');\n    }\n    for (const key of this.__ngMocksConfig.hostListeners || /* istanbul ignore next */ []) {\n      helperMockService.mock(this, key);\n    }\n\n    // istanbul ignore else\n    if (funcIsMock(this)) {\n      applyNgValueAccessor(this, ngControl);\n      applyOutputs(this);\n      applyPrototype(this, Object.getPrototypeOf(this));\n      applyMethods(this, mockOf.prototype);\n      applyProps(this, mockOf.prototype);\n    }\n\n    // and faking prototype\n    Object.setPrototypeOf(this, mockOf.prototype);\n\n    applyOverrides(this, mockOf, injector ?? undefined);\n  }\n}\n\ncoreDefineProperty(Mock, 'parameters', [\n  [Injector, new Optional()],\n  [coreForm.NgControl || /* istanbul ignore next */ (() => undefined), new Optional(), new Self()],\n]);\n","import { Mock } from './mock';\n\n/**\n * LegacyControlValueAccessor was used to be a way to manipulate a mock ControlValueAccessor.\n *\n * @deprecated use isMockControlValueAccessor or isMockValidator instead (removing in A13)\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockControlValueAccessor\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockValidator\n */\nexport class LegacyControlValueAccessor extends Mock {\n  /**\n   * @deprecated use isMockControlValueAccessor instead (removing in A13)\n   * @see https://ng-mocks.sudo.eu/api/helpers/isMockControlValueAccessor\n   */\n  public __simulateChange(value: any): void;\n  // istanbul ignore next\n  public __simulateChange() {\n    // nothing to do.\n  }\n\n  // istanbul ignore next\n  /**\n   * @deprecated use isMockControlValueAccessor instead (removing in A13)\n   * @see https://ng-mocks.sudo.eu/api/helpers/isMockControlValueAccessor\n   */\n  public __simulateTouch() {\n    // nothing to do.\n  }\n\n  // istanbul ignore next\n  /**\n   * @deprecated use isMockValidator instead (removing in A13)\n   * @see https://ng-mocks.sudo.eu/api/helpers/isMockValidator\n   */\n  public __simulateValidatorChange() {\n    // nothing to do.\n  }\n}\n\n/**\n * MockControlValueAccessor exposes access to a mock ControlValueAccessor.\n * It should be used in a combination with isMockControlValueAccessor.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockControlValueAccessor\n */\nexport interface MockControlValueAccessor {\n  /**\n   * It simulates an external change of the value.\n   * Please consider usage of ngMocks.change().\n   *\n   * @see https://ng-mocks.sudo.eu/extra/mock-form-controls\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/change\n   */\n  __simulateChange(value: any): void;\n\n  /**\n   * It simulates an external touch.\n   * Please consider usage of ngMocks.touch().\n   *\n   * @see https://ng-mocks.sudo.eu/extra/mock-form-controls\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/touch\n   */\n  __simulateTouch(): void;\n}\n\n/**\n * MockValidator exposes access to a mock Validator.\n * It should be used in a combination with isMockValidator.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockValidator\n */\nexport interface MockValidator {\n  /**\n   * it simulates an external validation change.\n   *\n   * @see https://ng-mocks.sudo.eu/extra/mock-form-controls\n   */\n  __simulateValidatorChange(): void;\n}\n","import { Input } from '@angular/core';\n\nimport { AnyType, DirectiveIo } from './core.types';\nimport funcDirectiveIoBuild from './func.directive-io-build';\nimport funcDirectiveIoParse from './func.directive-io-parse';\n\n// Looks like an A9 bug, that queries from @Component are not processed.\n// Also, we have to pass prototype, not the class.\n// The same issue happens with outputs, but time to time\n// (when I restart tests with refreshing browser manually).\n// https://github.com/help-me-mom/ng-mocks/issues/109\nexport default (cls: AnyType<any>, inputs?: Array<DirectiveIo>, exclude?: string[]) => {\n  // istanbul ignore else\n  if (inputs) {\n    for (const input of inputs) {\n      const { name, alias, required } = funcDirectiveIoParse(input);\n      if (exclude && exclude.indexOf(name) !== -1) {\n        continue;\n      }\n      Input(funcDirectiveIoBuild({ name, alias, required }, true) as never)(cls.prototype, name);\n    }\n  }\n};\n","import coreDefineProperty from './core.define-property';\nimport { AnyType } from './core.types';\nimport funcGetName from './func.get-name';\nimport { ngMocksMockConfig } from './mock';\nimport ngMocksUniverse from './ng-mocks-universe';\n\nexport default (mock: AnyType<any>, source: AnyType<any>, configInput: ngMocksMockConfig = {}): void => {\n  coreDefineProperty(mock, 'mockOf', source);\n  coreDefineProperty(mock, 'nameConstructor', funcGetName(mock));\n  coreDefineProperty(mock, 'name', `MockOf${funcGetName(source)}`, true);\n  const config = ngMocksUniverse.getConfigMock().has(source)\n    ? {\n        ...configInput,\n        config: {\n          ...ngMocksUniverse.getConfigMock().get(source),\n          ...configInput.config,\n        },\n      }\n    : configInput;\n  coreDefineProperty(mock.prototype, '__ngMocksConfig', config);\n};\n","import { ContentChild, ContentChildren, Query, ViewChild, ViewChildren, ViewContainerRef } from '@angular/core';\n\nimport { AnyType } from './core.types';\n\nconst map: any = {\n  ContentChild,\n  ContentChildren,\n  ViewChild,\n  ViewChildren,\n};\n\nconst isInternalKey = (key: string): boolean => {\n  return key.indexOf('__mock') === 0;\n};\n\nconst cloneVcrQuery = (query: Query & { ngMetadataName?: string }) => ({\n  ...query,\n  ngMetadataName: query.ngMetadataName,\n  read: ViewContainerRef,\n});\n\nconst generateFinalQueries = (queries: {\n  [key: string]: Query;\n}): [Array<[string, Query & { ngMetadataName?: string }]>, string[]] => {\n  const final: Array<[string, Query & { ngMetadataName?: string }]> = [];\n  const scanKeys: string[] = [];\n\n  for (const key of Object.keys(queries)) {\n    const query: Query & { ngMetadataName?: string } = queries[key];\n    final.push([key, query]);\n\n    if (!query.isViewQuery && !isInternalKey(key)) {\n      scanKeys.push(key);\n      final.push([`__ngMocksVcr_${key}`, cloneVcrQuery(query)]);\n    }\n  }\n\n  return [final, scanKeys];\n};\n\n// Looks like an A9 bug, that queries from @Component are not processed.\n// Also, we have to pass prototype, not the class.\n// The same issue happens with outputs, but time to time\n// (when I restart tests with refreshing browser manually).\n// https://github.com/help-me-mom/ng-mocks/issues/109\nexport default (cls: AnyType<any>, queries?: { [key: string]: Query }): string[] => {\n  // istanbul ignore if\n  if (!queries) {\n    return [];\n  }\n  const [final, keys] = generateFinalQueries(queries);\n\n  for (const [key, query] of final) {\n    // istanbul ignore else\n    if (query.ngMetadataName) {\n      const decorator = map[query.ngMetadataName];\n      decorator(query.selector, query)(cls.prototype, key);\n    }\n  }\n\n  return keys;\n};\n","import { AnyType } from '../common/core.types';\n\nexport default (provide: AnyType<any>, useExisting: AnyType<any>) => ({\n  provide,\n  useExisting,\n});\n","import { AnyType } from '../common/core.types';\n\nexport default (provide: AnyType<any>, useFactory: any) => ({\n  multi: true,\n  provide,\n  useFactory,\n});\n","import { Provider } from '@angular/core';\n\nimport CoreDefStack from '../common/core.def-stack';\nimport coreForm from '../common/core.form';\nimport { flatten } from '../common/core.helpers';\nimport { AnyType } from '../common/core.types';\nimport funcExtractForwardRef from '../common/func.extract-forward-ref';\nimport funcGetType from '../common/func.get-type';\nimport {\n  MockAsyncValidatorProxy,\n  MockControlValueAccessorProxy,\n  MockValidatorProxy,\n} from '../common/mock-control-value-accessor-proxy';\nimport helperMockService from '../mock-service/helper.mock-service';\n\nimport toExistingProvider from './to-existing-provider';\nimport toFactoryProvider from './to-factory-provider';\n\nconst processTokens = (mockType: AnyType<any>, provider: any) => {\n  const provide = funcGetType(provider);\n  if (coreForm.NG_VALIDATORS && provide === coreForm.NG_VALIDATORS) {\n    return toFactoryProvider(provide, () => new MockValidatorProxy(mockType));\n  }\n  if (coreForm.NG_ASYNC_VALIDATORS && provide === coreForm.NG_ASYNC_VALIDATORS) {\n    return toFactoryProvider(provide, () => new MockAsyncValidatorProxy(mockType));\n  }\n  if (coreForm.NG_VALUE_ACCESSOR && provide === coreForm.NG_VALUE_ACCESSOR) {\n    return toFactoryProvider(provide, () => new MockControlValueAccessorProxy(mockType));\n  }\n\n  return undefined;\n};\n\nconst processOwnUseExisting = (sourceType: AnyType<any>, mockType: AnyType<any>, provider: any) => {\n  const provide = funcGetType(provider);\n\n  // Check tests/issue-302/test.spec.ts\n  if (provide === coreForm.NgControl || provide === coreForm.FormControlDirective) {\n    return undefined;\n  }\n\n  if (provider !== provide && funcExtractForwardRef(provider.useExisting) === sourceType) {\n    return toExistingProvider(provide, mockType);\n  }\n\n  return undefined;\n};\n\nconst processProvider = (\n  sourceType: AnyType<any>,\n  mockType: AnyType<any>,\n  provider: any,\n  resolutions: CoreDefStack<any, any>,\n): any => {\n  const token = processTokens(mockType, provider);\n  if (token) {\n    return token;\n  }\n\n  const ownUseExisting = processOwnUseExisting(sourceType, mockType, provider);\n  if (ownUseExisting) {\n    return ownUseExisting;\n  }\n\n  return helperMockService.resolveProvider(provider, resolutions);\n};\n\nexport default (\n  sourceType: AnyType<any>,\n  mockType: AnyType<any>,\n  providers: any[],\n  resolutions: CoreDefStack<any, any>,\n): {\n  providers: Provider[];\n  setControlValueAccessor?: boolean;\n} => {\n  const result: Provider[] = [];\n  let setControlValueAccessor: boolean | undefined;\n\n  for (const provider of flatten(providers || /* istanbul ignore next */ [])) {\n    const provide = funcGetType(provider);\n    if (provide === coreForm.NG_VALUE_ACCESSOR) {\n      setControlValueAccessor = false;\n    }\n    const mock = processProvider(sourceType, mockType, provider, resolutions);\n    if (mock) {\n      result.push(mock);\n    }\n  }\n\n  return {\n    providers: result,\n    setControlValueAccessor,\n  };\n};\n","import { Component, Directive, NgModule, ViewChild } from '@angular/core';\n\nimport CoreDefStack from '../common/core.def-stack';\nimport { AnyType, DirectiveIo } from '../common/core.types';\nimport decorateInputs from '../common/decorate.inputs';\nimport decorateMock from '../common/decorate.mock';\nimport decorateOutputs from '../common/decorate.outputs';\nimport decorateQueries from '../common/decorate.queries';\nimport { ngMocksMockConfig } from '../common/mock';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\nimport mockNgDef from '../mock-module/mock-ng-def';\nimport helperMockService from '../mock-service/helper.mock-service';\n\nimport cloneProviders from './clone-providers';\nimport toExistingProvider from './to-existing-provider';\n\nconst buildConfig = (\n  source: AnyType<any>,\n  meta: {\n    inputs?: Array<DirectiveIo>;\n    outputs?: Array<DirectiveIo>;\n    providers?: NgModule['providers'];\n    queries?: Record<string, ViewChild>;\n  },\n  setControlValueAccessor: boolean,\n) => {\n  return {\n    config: ngMocksUniverse.config.get(source),\n    outputs: meta.outputs,\n    queryScanKeys: [],\n    setControlValueAccessor: setControlValueAccessor,\n  };\n};\n\nexport default <T extends Component & Directive>(\n  source: AnyType<any>,\n  mock: AnyType<any>,\n  meta: Component &\n    Directive &\n    NgModule & {\n      hostBindings?: Array<[string, any]>;\n      hostListeners?: Array<[string, any, any]>;\n      hostDirectives?: Array<AnyType<any> | { directive: AnyType<any> }>;\n      imports?: any[];\n      standalone?: boolean;\n    },\n  params: T,\n): Component & Directive => {\n  const hasResolver = ngMocksUniverse.config.has('mockNgDefResolver');\n  if (!hasResolver) {\n    ngMocksUniverse.config.set('mockNgDefResolver', new CoreDefStack());\n  }\n\n  const options: T & { imports?: any[]; hostDirectives?: any[]; standalone?: boolean } = {\n    ...params,\n  };\n\n  if (meta.exportAs !== undefined) {\n    options.exportAs = meta.exportAs;\n  }\n  if (meta.selector !== undefined) {\n    options.selector = meta.selector;\n  }\n  if (meta.standalone !== undefined) {\n    options.standalone = meta.standalone;\n  }\n\n  if (meta.standalone && meta.imports) {\n    const [, { imports }] = mockNgDef({ imports: meta.imports, skipExports: true });\n    if (imports?.length) {\n      options.imports = imports as never;\n    }\n  }\n\n  if (meta.hostDirectives) {\n    const [, { hostDirectives }] = mockNgDef({ hostDirectives: meta.hostDirectives, skipExports: true });\n    if (hostDirectives?.length) {\n      options.hostDirectives = hostDirectives;\n    }\n  }\n\n  const { setControlValueAccessor, providers } = cloneProviders(\n    source,\n    mock,\n    meta.providers || [],\n    ngMocksUniverse.config.get('mockNgDefResolver'),\n  );\n  providers.push(toExistingProvider(source, mock));\n  options.providers = providers;\n\n  const { providers: viewProviders } = cloneProviders(\n    source,\n    mock,\n    meta.viewProviders || [],\n    ngMocksUniverse.config.get('mockNgDefResolver'),\n  );\n  if (viewProviders.length > 0) {\n    options.viewProviders = viewProviders;\n  }\n\n  const config: ngMocksMockConfig = buildConfig(\n    source,\n    meta,\n    setControlValueAccessor ??\n      helperMockService.extractMethodsFromPrototype(source.prototype).indexOf('writeValue') !== -1,\n  );\n  decorateMock(mock, source, config);\n\n  // istanbul ignore else\n  if (meta.queries) {\n    decorateInputs(mock, meta.inputs, Object.keys(meta.queries));\n  }\n  decorateOutputs(mock, meta.outputs);\n  config.queryScanKeys = decorateQueries(mock, meta.queries);\n\n  config.hostBindings = [];\n  for (const [key] of meta.hostBindings || /* istanbul ignore next */ []) {\n    // mock declarations should not have side effects based on host bindings.\n    // HostBinding(...args)(mock.prototype, key);\n    if (config.hostBindings.indexOf(key) === -1) {\n      config.hostBindings.push(key);\n    }\n  }\n\n  config.hostListeners = [];\n  for (const [key] of meta.hostListeners || /* istanbul ignore next */ []) {\n    // mock declarations should not have side effects based on host bindings.\n    // HostListener(...args)(mock.prototype, key);\n    if (config.hostListeners.indexOf(key) === -1) {\n      config.hostListeners.push(key);\n    }\n  }\n\n  if (!hasResolver) {\n    ngMocksUniverse.config.delete('mockNgDefResolver');\n  }\n\n  return options;\n};\n","import { Output } from '@angular/core';\n\nimport { AnyType, DirectiveIo } from './core.types';\nimport funcDirectiveIoBuild from './func.directive-io-build';\nimport funcDirectiveIoParse from './func.directive-io-parse';\n\n// Looks like an A9 bug, that queries from @Component are not processed.\n// Also, we have to pass prototype, not the class.\n// The same issue happens with outputs, but time to time\n// (when I restart tests with refreshing browser manually).\n// https://github.com/help-me-mom/ng-mocks/issues/109\nexport default (cls: AnyType<any>, outputs?: Array<DirectiveIo>) => {\n  // istanbul ignore else\n  if (outputs) {\n    for (const output of outputs) {\n      const { name, alias, required } = funcDirectiveIoParse(output);\n      Output(funcDirectiveIoBuild({ name, alias, required }, true) as never)(cls.prototype, name);\n    }\n  }\n};\n","import funcGetName from './func.get-name';\nimport { isNgDef } from './func.is-ng-def';\n\nconst getType = (value: any): string =>\n  isNgDef(value, 'p')\n    ? 'pipe'\n    : isNgDef(value, 'd')\n      ? 'directive'\n      : isNgDef(value, 'c')\n        ? 'component'\n        : isNgDef(value, 'm')\n          ? 'module'\n          : isNgDef(value, 'i')\n            ? 'service'\n            : isNgDef(value, 't')\n              ? 'token'\n              : '';\n\nexport default (value: any, funcName: string) => {\n  if (value === undefined || value === null) {\n    throw new Error(`null / undefined has been passed into ${funcName}. Please check that its import is correct.`);\n  }\n\n  if (funcName === 'MockPipe' && isNgDef(value, 'p')) {\n    return;\n  }\n  if (funcName === 'MockDirective' && isNgDef(value, 'd')) {\n    return;\n  }\n  if (funcName === 'MockComponent' && isNgDef(value, 'c')) {\n    return;\n  }\n  if (funcName === 'MockModule' && isNgDef(value, 'm')) {\n    return;\n  }\n\n  const type = getType(value);\n\n  if (type && funcName === 'MockPipe') {\n    throw new Error(`${funcName} accepts pipes, whereas ${funcGetName(value)} is a ${type}.`);\n  }\n  if (type && funcName === 'MockDirective') {\n    throw new Error(`${funcName} accepts directives, whereas ${funcGetName(value)} is a ${type}.`);\n  }\n  if (type && funcName === 'MockComponent') {\n    throw new Error(`${funcName} accepts components, whereas ${funcGetName(value)} is a ${type}.`);\n  }\n  if (type && funcName === 'MockModule') {\n    throw new Error(`${funcName} accepts modules, whereas ${funcGetName(value)} is a ${type}.`);\n  }\n};\n","import { MockedComponent } from '../mock-component/types';\nimport { MockedDirective } from '../mock-directive/types';\nimport { MockedModule } from '../mock-module/types';\nimport { MockedPipe } from '../mock-pipe/types';\n\nimport { AnyType, Type } from './core.types';\nimport { isNgDef } from './func.is-ng-def';\n\n/**\n * isMockNgDef verifies whether a class is a mock component class.\n *\n * @internal\n *\n * ```ts\n * isMockNgDef(MockComponent, 'c'); // returns true\n * isMockNgDef(RealComponent, 'c'); // returns false\n * isMockNgDef(ArbitraryClass, 'c'); // returns false\n * ```\n */\nexport function isMockNgDef<T>(component: AnyType<T>, ngType: 'c'): component is Type<MockedComponent<T>>;\n\n/**\n * isMockNgDef verifies whether a class is a mock directive class.\n *\n * @internal\n *\n * ```ts\n * isMockNgDef(MockDirective, 'd'); // returns true\n * isMockNgDef(RealDirective, 'd'); // returns false\n * isMockNgDef(ArbitraryClass, 'd'); // returns false\n * ```\n */\nexport function isMockNgDef<T>(directive: AnyType<T>, ngType: 'd'): directive is Type<MockedDirective<T>>;\n\n/**\n * isMockNgDef verifies whether a class is a mock pipe class.\n *\n * @internal\n *\n * ```ts\n * isMockNgDef(MockPipe, 'p'); // returns true\n * isMockNgDef(RealPipe, 'p'); // returns false\n * isMockNgDef(ArbitraryClass, 'p'); // returns false\n * ```\n */\nexport function isMockNgDef<T>(pipe: AnyType<T>, ngType: 'p'): pipe is Type<MockedPipe<T>>;\n\n/**\n * isMockNgDef verifies whether a class is a mock module class.\n *\n * @internal\n *\n * ```ts\n * isMockNgDef(MockModule, 'm'); // returns true\n * isMockNgDef(RealModule, 'm'); // returns false\n * isMockNgDef(ArbitraryClass, 'm'); // returns false\n * ```\n */\nexport function isMockNgDef<T>(module: AnyType<T>, ngType: 'm'): module is Type<MockedModule<T>>;\n\n/**\n * isMockNgDef verifies whether a class is a mock class.\n *\n * @internal\n *\n * ```ts\n * isMockNgDef(MockComponent); // returns true\n * isMockNgDef(RealModule); // returns false\n * isMockNgDef(ArbitraryClass); // returns false\n * ```\n */\nexport function isMockNgDef<T>(module: Type<T>): module is Type<T>;\n\nexport function isMockNgDef<TComponent>(\n  component: AnyType<TComponent> & { mockOf?: any },\n  type?: 'c' | 'd' | 'p' | 'm',\n): component is Type<TComponent> {\n  if (!(component as any).mockOf) {\n    return false;\n  }\n  if (!type) {\n    return true;\n  }\n\n  return isNgDef(component.mockOf, type as never);\n}\n","import { ComponentFixture, getTestBed } from '@angular/core/testing';\n\nexport default () => {\n  const fixtures: Array<ComponentFixture<any>> = (getTestBed() as any)._activeFixtures;\n\n  return fixtures[fixtures.length - 1];\n};\n","import { NG_MOCKS } from '../common/core.tokens';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\nimport funcGetLastFixture from '../mock-helper/func.get-last-fixture';\n\nexport default (declaration: any) => {\n  let result: any;\n\n  try {\n    result = funcGetLastFixture().debugElement.injector.get(NG_MOCKS).get(declaration);\n  } catch {\n    // nothing to do.\n  }\n\n  if (!result) {\n    result = ngMocksUniverse.cacheDeclarations.get(declaration);\n  }\n\n  if (declaration.__ngMocksResolutions && ngMocksUniverse.config.has('mockNgDefResolver')) {\n    ngMocksUniverse.config.get('mockNgDefResolver').merge(declaration.__ngMocksResolutions);\n  }\n\n  return result;\n};\n","import { extendClass } from '../common/core.helpers';\nimport funcImportExists from '../common/func.import-exists';\nimport { isMockNgDef } from '../common/func.is-mock-ng-def';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport returnCachedMock from './return-cached-mock';\n\nexport default (def: any, type: any, func: string, cacheFlag: string, base: any, decorator: any) => {\n  funcImportExists(def, func);\n\n  if (isMockNgDef(def, type)) {\n    return def;\n  }\n\n  if (ngMocksUniverse.flags.has(cacheFlag) && ngMocksUniverse.cacheDeclarations.has(def)) {\n    return returnCachedMock(def);\n  }\n\n  const hasNgMocksDepsResolution = ngMocksUniverse.config.has('ngMocksDepsResolution');\n  if (!hasNgMocksDepsResolution) {\n    ngMocksUniverse.config.set('ngMocksDepsResolution', new Map());\n  }\n\n  const mock = extendClass(base);\n  decorator(def, mock);\n\n  // istanbul ignore else\n  if (ngMocksUniverse.flags.has(cacheFlag)) {\n    ngMocksUniverse.cacheDeclarations.set(def, mock);\n  }\n\n  if (!hasNgMocksDepsResolution) {\n    ngMocksUniverse.config.delete('ngMocksDepsResolution');\n  }\n\n  return mock as any;\n};\n","import { Query, TemplateRef, ViewChild, ViewContainerRef } from '@angular/core';\n\nconst viewChildArgs: any = { read: ViewContainerRef, static: false };\n\nconst viewChildTemplate = (selector: string, key: string): string =>\n  `<div *ngIf=\"ngMocksRender_${key}_${selector}\" data-${key}=\"${selector}\"><ng-template #${key}_${selector}></ng-template></div>`;\n\nconst isTemplateRefQuery = (query: Query): boolean => {\n  if (query.isViewQuery) {\n    return false; // ignoring all internal @ViewChild\n  }\n  if (query.read && query.read !== TemplateRef) {\n    return false; // ignoring read of instances\n  }\n  if (typeof query.selector !== 'string' && !query.read) {\n    return false; // ignoring class selectors if they do not read TemplateRef\n  }\n\n  return true;\n};\n\nexport default (queries?: Record<keyof any, any>): string => {\n  const parts = ['<ng-content></ng-content>'];\n  // istanbul ignore if\n  if (!queries) {\n    return parts.join('');\n  }\n\n  for (const key of Object.keys(queries)) {\n    const query: Query = queries[key];\n    if (!isTemplateRefQuery(query)) {\n      continue;\n    }\n    if (typeof query.selector === 'string') {\n      const selector = query.selector.replace(new RegExp('\\\\W', 'mg'), '_');\n      queries[`__mockView_key_${selector}`] = new ViewChild(`key_${selector}`, viewChildArgs);\n      queries[`__mockTpl_key_${selector}`] = query;\n      parts.push(viewChildTemplate(selector, 'key'));\n    }\n    queries[`__mockView_prop_${key}`] = new ViewChild(`prop_${key}`, viewChildArgs);\n    parts.push(viewChildTemplate(key, 'prop'));\n  }\n\n  return parts.join('');\n};\n","export default (\n  contentChildSelector: string | [string, ...number[]],\n): [string, string, string, undefined | number[]] => {\n  if (typeof contentChildSelector === 'string') {\n    return ['key', `__mockTpl_key_${contentChildSelector}`, contentChildSelector, undefined];\n  }\n\n  const [key, ...indices] = contentChildSelector;\n\n  return ['prop', key, key, indices.length > 0 ? indices : undefined];\n};\n","import {\n  AfterContentInit,\n  ChangeDetectorRef,\n  Component,\n  EmbeddedViewRef,\n  Injector,\n  Optional,\n  QueryList,\n  Self,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\n\nimport coreDefineProperty from '../common/core.define-property';\nimport coreForm from '../common/core.form';\nimport coreReflectDirectiveResolve from '../common/core.reflect.directive-resolve';\nimport { Type } from '../common/core.types';\nimport funcIsMock from '../common/func.is-mock';\nimport { MockConfig } from '../common/mock';\nimport { LegacyControlValueAccessor } from '../common/mock-control-value-accessor';\nimport decorateDeclaration from '../mock/decorate-declaration';\nimport getMock from '../mock/get-mock';\n\nimport generateTemplate from './render/generate-template';\nimport getKey from './render/get-key';\nimport { MockedComponent } from './types';\n\nconst mixRenderPrepareVcr = (\n  instance: MockConfig & Record<keyof any, any>,\n  type: string,\n  selector: string,\n  cdr: ChangeDetectorRef,\n): ViewContainerRef | undefined => {\n  if (!instance[`ngMocksRender_${type}_${selector}`]) {\n    instance[`ngMocksRender_${type}_${selector}`] = true;\n    cdr.detectChanges();\n  }\n\n  return instance[`__mockView_${type}_${selector}`];\n};\n\nconst mixRenderReorderViews = (\n  viewContainer: ViewContainerRef,\n  views: Array<EmbeddedViewRef<any>>,\n  index: number,\n): void => {\n  for (const view of views.splice(index + 1)) {\n    view.destroy();\n  }\n\n  let viewIndex = 0;\n  for (const view of views) {\n    if (!view) {\n      continue;\n    }\n    viewContainer.move(view, viewIndex);\n    viewIndex += 1;\n  }\n};\n\nconst mixRenderApplyContext = (view: EmbeddedViewRef<any>, context: Record<keyof any, any>): void => {\n  for (const contextKey of Object.keys(view.context)) {\n    view.context[contextKey] = undefined;\n  }\n  for (const contextKey of Object.keys(context)) {\n    view.context[contextKey] = (context as any)[contextKey];\n  }\n  view.markForCheck();\n};\n\nconst mixRenderHandleViews = (\n  vcr: ViewContainerRef,\n  cdr: ChangeDetectorRef,\n  templates: any[],\n  views: Array<EmbeddedViewRef<any>>,\n  indices: undefined | number[],\n  context: Record<keyof any, any>,\n): number => {\n  let index = -1;\n\n  for (const templateRef of templates) {\n    index += 1;\n    views[index] = views[index] || undefined;\n    if ((indices && indices.indexOf(index) === -1) || !templateRef) {\n      continue;\n    }\n    if (!(templateRef instanceof TemplateRef)) {\n      throw new Error(`Cannot find TemplateRef`);\n    }\n    if (!views[index]) {\n      views[index] = vcr.createEmbeddedView(templateRef, {});\n    }\n    mixRenderApplyContext(views[index], context);\n  }\n  cdr.detectChanges();\n\n  return index;\n};\n\nconst mixRender = (instance: MockConfig & Record<keyof any, any>, cdr: ChangeDetectorRef): void => {\n  // Providing a method to render any @ContentChild based on its selector.\n  coreDefineProperty(\n    instance,\n    '__render',\n    (contentChildSelector: string | [string, ...number[]], $implicit?: any, variables?: Record<keyof any, any>) => {\n      const [type, key, selector, indices] = getKey(contentChildSelector);\n\n      const vcr = mixRenderPrepareVcr(instance, type, selector, cdr);\n      if (!vcr) {\n        return;\n      }\n\n      const property: any = instance[key];\n      const templates = property instanceof QueryList ? property.toArray() : [property];\n\n      const views = instance[`ngMocksRender_${type}_${selector}_views`] || [];\n      const index = mixRenderHandleViews(vcr, cdr, templates, views, indices, { ...variables, $implicit });\n\n      mixRenderReorderViews(vcr, views, index);\n      instance[`ngMocksRender_${type}_${selector}_views`] = views;\n      cdr.detectChanges();\n    },\n  );\n};\n\nconst mixHideHandler = (\n  instance: MockConfig & Record<keyof any, any>,\n  type: string,\n  selector: string,\n  indices: undefined | number[],\n) => {\n  const views = instance[`ngMocksRender_${type}_${selector}_views`];\n  let index = -1;\n  for (const view of views) {\n    index += 1;\n    if ((indices && indices.indexOf(index) === -1) || !view) {\n      continue;\n    }\n    view.destroy();\n    views[index] = undefined;\n  }\n};\n\nconst mixHide = (instance: MockConfig & Record<keyof any, any>, changeDetector: ChangeDetectorRef): void => {\n  // Providing method to hide any @ContentChild based on its selector.\n  coreDefineProperty(instance, '__hide', (contentChildSelector: string | [string, ...number[]]) => {\n    const [type, , selector, indices] = getKey(contentChildSelector);\n\n    if (!instance[`ngMocksRender_${type}_${selector}`]) {\n      return;\n    }\n    mixHideHandler(instance, type, selector, indices);\n\n    if (!indices) {\n      instance[`ngMocksRender_${type}_${selector}`] = false;\n    }\n    changeDetector.detectChanges();\n  });\n};\n\nclass ComponentMockBase extends LegacyControlValueAccessor implements AfterContentInit {\n  // istanbul ignore next\n  public constructor(\n    injector: Injector,\n    ngControl: any, // NgControl\n    changeDetector: ChangeDetectorRef,\n  ) {\n    super(injector, ngControl);\n    if (funcIsMock(this)) {\n      mixRender(this, changeDetector);\n      mixHide(this, changeDetector);\n    }\n  }\n\n  public ngAfterContentInit(): void {\n    const config = (this.__ngMocksConfig as any).config;\n    if (!(this as any).__rendered && config && config.render) {\n      for (const block of Object.keys(config.render)) {\n        const { $implicit, variables } =\n          config.render[block] === true\n            ? {\n                $implicit: undefined,\n                variables: {},\n              }\n            : config.render[block];\n        (this as any).__render(block, $implicit, variables);\n      }\n      (this as any).__rendered = true;\n    }\n  }\n}\n\ncoreDefineProperty(ComponentMockBase, 'parameters', [\n  [Injector],\n  [coreForm.NgControl || /* istanbul ignore next */ (() => undefined), new Optional(), new Self()],\n  [ChangeDetectorRef],\n]);\n\nconst decorateClass = (component: Type<any>, mock: Type<any>): void => {\n  const meta = coreReflectDirectiveResolve(component);\n  Component(\n    decorateDeclaration(component, mock, meta, {\n      template: generateTemplate(meta.queries),\n    }),\n  )(mock);\n};\n\n/**\n * MockComponents creates an array of mock component classes out of components passed as parameters.\n *\n * @see https://ng-mocks.sudo.eu/api/MockComponent\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   declarations: MockComponents(\n *     Dep1Component,\n *     Dep2Component,\n *   ),\n * });\n * ```\n */\nexport function MockComponents(...components: Array<Type<any>>): Array<Type<MockedComponent<any>>> {\n  return components.map(MockComponent);\n}\n\n/**\n * MockComponent creates a mock component class out of an arbitrary component.\n *\n * @see https://ng-mocks.sudo.eu/api/MockComponent\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   declarations: [\n *     MockComponent(Dep1Component),\n *     MockComponent(Dep2Component),\n *   ],\n * });\n * ```\n */\nexport function MockComponent<TComponent>(component: Type<TComponent>): Type<MockedComponent<TComponent>> {\n  return getMock(component, 'c', 'MockComponent', 'cacheComponent', ComponentMockBase, decorateClass);\n}\n","import {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  Injector,\n  OnInit,\n  Optional,\n  Self,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\n\nimport coreDefineProperty from '../common/core.define-property';\nimport coreForm from '../common/core.form';\nimport coreReflectDirectiveResolve from '../common/core.reflect.directive-resolve';\nimport { Type } from '../common/core.types';\nimport { LegacyControlValueAccessor } from '../common/mock-control-value-accessor';\nimport decorateDeclaration from '../mock/decorate-declaration';\nimport getMock from '../mock/get-mock';\n\nimport { MockedDirective } from './types';\n\nclass DirectiveMockBase extends LegacyControlValueAccessor implements OnInit {\n  // istanbul ignore next\n  public constructor(\n    injector: Injector,\n    ngControl: any, // NgControl\n    cdr: ChangeDetectorRef,\n    vcr: ViewContainerRef,\n    element: ElementRef | null = null,\n    template: TemplateRef<any> | null = null,\n  ) {\n    super(injector, ngControl);\n    this.__ngMocksInstall(vcr, cdr, element, template);\n  }\n\n  public ngOnInit(): void {\n    const config = (this.__ngMocksConfig as any).config;\n    if (config?.render) {\n      const { $implicit, variables } =\n        config.render === true\n          ? {\n              $implicit: undefined,\n              variables: {},\n            }\n          : config.render;\n      (this as any).__render($implicit, variables);\n    }\n  }\n\n  private __ngMocksInstall(\n    vcr: ViewContainerRef,\n    cdr: ChangeDetectorRef,\n    element: ElementRef | null,\n    template: TemplateRef<any> | null,\n  ): void {\n    // Basically any directive on ng-template is treated as structural, even it does not control render process.\n    // In our case we do not if we should render it or not and due to this we do nothing.\n    coreDefineProperty(this, '__element', element);\n    coreDefineProperty(this, '__template', template);\n    coreDefineProperty(this, '__viewContainer', vcr);\n    coreDefineProperty(this, '__vcr', vcr);\n    coreDefineProperty(this, '__cdr', cdr);\n    coreDefineProperty(this, '__isStructural', template && vcr);\n\n    // Providing method to render mock values.\n    coreDefineProperty(this, '__render', ($implicit?: any, variables?: Record<keyof any, any>) => {\n      if (vcr && template) {\n        vcr.clear();\n        vcr.createEmbeddedView(template, { ...variables, $implicit });\n        cdr.detectChanges();\n      }\n    });\n  }\n}\n\ncoreDefineProperty(DirectiveMockBase, 'parameters', [\n  [Injector],\n  [coreForm.NgControl || /* istanbul ignore next */ (() => undefined), new Optional(), new Self()],\n  [ChangeDetectorRef],\n  [ViewContainerRef],\n  [ElementRef, new Optional(), new Self()],\n  [TemplateRef, new Optional(), new Self()],\n]);\n\nconst decorateClass = (directive: Type<any>, mock: Type<any>): void => {\n  const meta = coreReflectDirectiveResolve(directive);\n  const options = decorateDeclaration(directive, mock, meta, {});\n  Directive(options)(mock);\n};\n\n/**\n * MockDirectives creates an array of mock directive classes out of directives passed as parameters.\n *\n * @see https://ng-mocks.sudo.eu/api/MockDirective\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   declarations: MockDirectives(\n *     Dep1Directive,\n *     Dep2Directive,\n *   ),\n * });\n * ```\n */\nexport function MockDirectives(...directives: Array<Type<any>>): Array<Type<MockedDirective<any>>> {\n  return directives.map(MockDirective);\n}\n\n/**\n * MockDirective creates a mock directive class out of an arbitrary directive.\n *\n * @see https://ng-mocks.sudo.eu/api/MockDirective\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   declarations: [\n *     MockDirective(Dep1Directive),\n *     MockDirective(Dep2Directive),\n *   ],\n * });\n * ```\n */\nexport function MockDirective<TDirective>(directive: Type<TDirective>): Type<MockedDirective<TDirective>> {\n  return getMock(directive, 'd', 'MockDirective', 'cacheDirective', DirectiveMockBase, decorateClass);\n}\n","import { Pipe } from '@angular/core';\n\nimport collectDeclarations from '../resolve/collect-declarations';\n\nimport coreReflectBodyCatch from './core.reflect.body-catch';\n\nexport default (def: any): Pipe & { standalone?: boolean } =>\n  coreReflectBodyCatch((arg: any) => {\n    const declaration = collectDeclarations(arg);\n    if (declaration.Pipe) {\n      return declaration.Pipe;\n    }\n\n    throw new Error('Cannot resolve declarations');\n  })(def);\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport { extendClass } from '../common/core.helpers';\nimport coreReflectPipeResolve from '../common/core.reflect.pipe-resolve';\nimport { Type } from '../common/core.types';\nimport decorateMock from '../common/decorate.mock';\nimport funcGetName from '../common/func.get-name';\nimport funcImportExists from '../common/func.import-exists';\nimport { isMockNgDef } from '../common/func.is-mock-ng-def';\nimport { Mock } from '../common/mock';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\nimport returnCachedMock from '../mock/return-cached-mock';\nimport helperMockService from '../mock-service/helper.mock-service';\n\nimport { MockedPipe } from './types';\n\n/**\n * MockPipes creates an array of mock pipe classes out of pipes passed as parameters.\n *\n * @see https://ng-mocks.sudo.eu/api/MockPipe\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   declarations: MockPipes(\n *     Dep1Pipe,\n *     Dep2Pipe,\n *   ),\n * });\n * ```\n */\nexport function MockPipes(...pipes: Array<Type<PipeTransform>>): Array<Type<PipeTransform>> {\n  return pipes.map(pipe => MockPipe(pipe, undefined));\n}\n\nconst getMockClass = (pipe: Type<any>, transformValue?: PipeTransform['transform']): Type<any> => {\n  const config = ngMocksUniverse.config.get(pipe);\n  const transform = transformValue ?? config?.defValue?.transform;\n  const mock = extendClass(Mock);\n  Pipe(coreReflectPipeResolve(pipe))(mock);\n  decorateMock(mock, pipe, {\n    init: (instance: PipeTransform) => {\n      if (transform) {\n        instance.transform = transform;\n      }\n      if (!instance.transform) {\n        helperMockService.mock(instance, 'transform', `${funcGetName(instance)}.transform`);\n      }\n    },\n    transform,\n  });\n\n  return mock;\n};\n\n/**\n * MockPipe creates a mock pipe class out of an arbitrary pipe.\n *\n * @see https://ng-mocks.sudo.eu/api/MockPipe\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   declarations: [\n *     MockPipe(Dep1Pipe),\n *     MockPipe(Dep2Pipe),\n *   ],\n * });\n * ```\n */\nexport function MockPipe<TPipe extends PipeTransform>(\n  pipe: Type<TPipe>,\n  transform?: TPipe['transform'],\n): Type<MockedPipe<TPipe>>;\n\nexport function MockPipe<TPipe extends PipeTransform>(\n  pipe: Type<TPipe>,\n  transform?: TPipe['transform'],\n): Type<MockedPipe<TPipe>> {\n  funcImportExists(pipe, 'MockPipe');\n\n  if (isMockNgDef(pipe, 'p')) {\n    return pipe;\n  }\n\n  // istanbul ignore next\n  if (ngMocksUniverse.flags.has('cachePipe') && ngMocksUniverse.cacheDeclarations.has(pipe)) {\n    return returnCachedMock(pipe);\n  }\n\n  const mock = getMockClass(pipe, transform);\n  if (ngMocksUniverse.flags.has('cachePipe')) {\n    ngMocksUniverse.cacheDeclarations.set(pipe, mock);\n  }\n\n  return mock as any;\n}\n","import { NgModule } from '@angular/core';\n\nimport coreConfig from '../common/core.config';\nimport coreDefineProperty from '../common/core.define-property';\nimport { extendClass } from '../common/core.helpers';\nimport coreReflectModuleResolve from '../common/core.reflect.module-resolve';\nimport { AnyType, Type } from '../common/core.types';\nimport decorateMock from '../common/decorate.mock';\nimport funcGetName from '../common/func.get-name';\nimport funcImportExists from '../common/func.import-exists';\nimport { isMockNgDef } from '../common/func.is-mock-ng-def';\nimport { isNgDef } from '../common/func.is-ng-def';\nimport { isNgModuleDefWithProviders, NgModuleWithProviders } from '../common/func.is-ng-module-def-with-providers';\nimport { Mock } from '../common/mock';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\nimport returnCachedMock from '../mock/return-cached-mock';\n\nimport mockNgDef from './mock-ng-def';\n\nconst flagMock = (resolution?: string): boolean => resolution === 'mock' && ngMocksUniverse.flags.has('skipMock');\n\nconst flagKeep = (resolution?: string): boolean => resolution === 'keep' && !ngMocksUniverse.flags.has('skipMock');\n\nconst flagReplace = (resolution?: string): boolean =>\n  resolution === 'replace' && !ngMocksUniverse.flags.has('skipMock');\n\nconst flagNever = (ngModule?: any): boolean =>\n  coreConfig.neverMockModule.indexOf(funcGetName(ngModule)) !== -1 && !ngMocksUniverse.flags.has('skipMock');\n\nconst preProcessFlags = (ngModule: AnyType<any>): { isRootModule: boolean; toggleSkipMockFlag: boolean } => {\n  let toggleSkipMockFlag = false;\n  let isRootModule = true;\n\n  if (ngMocksUniverse.flags.has('hasRootModule')) {\n    isRootModule = false;\n  } else {\n    ngMocksUniverse.flags.add('hasRootModule');\n  }\n\n  const resolution = ngMocksUniverse.getResolution(ngModule);\n  if (flagMock(resolution)) {\n    toggleSkipMockFlag = true;\n    ngMocksUniverse.flags.delete('skipMock');\n  }\n  if (flagNever(ngModule)) {\n    toggleSkipMockFlag = true;\n    ngMocksUniverse.flags.add('skipMock');\n  }\n  if (!isRootModule && (flagKeep(resolution) || flagReplace(resolution))) {\n    toggleSkipMockFlag = true;\n    ngMocksUniverse.flags.add('skipMock');\n  }\n\n  return {\n    isRootModule,\n    toggleSkipMockFlag,\n  };\n};\n\nconst postProcessFlags = ({\n  isRootModule,\n  toggleSkipMockFlag,\n}: {\n  isRootModule: boolean;\n  toggleSkipMockFlag: boolean;\n}): void => {\n  if (toggleSkipMockFlag && ngMocksUniverse.flags.has('skipMock')) {\n    ngMocksUniverse.flags.delete('skipMock');\n  } else if (toggleSkipMockFlag && !ngMocksUniverse.flags.has('skipMock')) {\n    ngMocksUniverse.flags.add('skipMock');\n  }\n  if (isRootModule) {\n    ngMocksUniverse.flags.delete('hasRootModule');\n  }\n};\n\nconst extractModuleAndProviders = (\n  module: any,\n): {\n  ngModule: Type<any>;\n  ngModuleProviders: NgModule['providers'];\n} => {\n  let ngModule: Type<any>;\n  let ngModuleProviders: NgModule['providers'];\n\n  if (isNgModuleDefWithProviders(module)) {\n    ngModule = module.ngModule;\n    if (module.providers) {\n      ngModuleProviders = module.providers;\n    }\n  } else {\n    ngModule = module;\n  }\n\n  return {\n    ngModule,\n    ngModuleProviders,\n  };\n};\n\nconst getExistingMockModule = (ngModule: Type<any>, isRootModule: boolean): Type<any> | undefined => {\n  if (isMockNgDef(ngModule, 'm')) {\n    return ngModule;\n  }\n\n  // Every module should be replaced with its mock copy only once to avoid errors like:\n  // Failed: Type ...Component is part of the declarations of 2 modules: ...Module and ...Module...\n  if (ngMocksUniverse.flags.has('cacheModule') && ngMocksUniverse.cacheDeclarations.has(ngModule)) {\n    return returnCachedMock(ngModule);\n  }\n\n  // Now we check if we need to keep the original module or to replace it with some other.\n  // and there is no override in its resolution.\n  if (isRootModule || ngMocksUniverse.config.get('ngMocksDepsResolution')?.get(ngModule) === 'mock') {\n    return undefined;\n  }\n  if (ngMocksUniverse.hasBuildDeclaration(ngModule)) {\n    const instance = ngMocksUniverse.getBuildDeclaration(ngModule);\n    if (isNgDef(instance, 'm') && instance !== ngModule) {\n      return instance;\n    }\n  }\n\n  return undefined;\n};\n\nconst detectMockModule = (ngModule: Type<any>, mockModule?: Type<any>): Type<any> => {\n  const [changed, ngModuleDef, resolutions] = mockModule\n    ? [false]\n    : mockNgDef(coreReflectModuleResolve(ngModule), ngModule);\n  if (resolutions) {\n    coreDefineProperty(ngModule, '__ngMocksResolutions', resolutions);\n  }\n\n  if (changed) {\n    const parent = ngMocksUniverse.flags.has('skipMock') ? ngModule : Mock;\n    const mock = extendClass(parent);\n\n    // the last thing is to apply decorators.\n    NgModule(ngModuleDef)(mock);\n    decorateMock(mock, ngModule);\n\n    return mock;\n  }\n\n  return mockModule || ngModule;\n};\n\nconst getMockProviders = (ngModuleProviders: NgModule['providers']): NgModule['providers'] => {\n  if (ngModuleProviders) {\n    const [changed, ngModuleDef] = mockNgDef({ providers: ngModuleProviders, skipExports: true });\n\n    return changed ? ngModuleDef.providers : ngModuleProviders;\n  }\n\n  return undefined;\n};\n\nconst generateReturn = (\n  module: any,\n  ngModule: AnyType<any>,\n  ngModuleProviders: NgModule['providers'],\n  mockModule: AnyType<any>,\n  mockModuleProviders: NgModule['providers'],\n): any =>\n  mockModule === ngModule && mockModuleProviders === ngModuleProviders\n    ? module\n    : isNgModuleDefWithProviders(module)\n      ? { ngModule: mockModule, ...(mockModuleProviders ? { providers: mockModuleProviders } : {}) }\n      : mockModule;\n\n/**\n * MockModule creates a mock module class out of an arbitrary module.\n * All declarations, imports, exports and providers will be mocked too.\n *\n * @see https://ng-mocks.sudo.eu/api/MockModule\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   imports: [\n *     MockModule(SharedModule),\n *   ],\n * });\n * ```\n */\nexport function MockModule<T>(ngModule: Type<T>): Type<T>;\n\n/**\n * MockModule creates a mock module class with mock provides out of an arbitrary module with providers.\n * All declarations, imports, exports and providers will be mocked too.\n *\n * @see https://ng-mocks.sudo.eu/api/MockModule\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   imports: [\n *     MockModule(StoreModule.forRoot()),\n *   ],\n * });\n * ```\n */\nexport function MockModule<T>(ngModule: NgModuleWithProviders<T>): NgModuleWithProviders<T>;\n\nexport function MockModule(def: any): any {\n  funcImportExists(def, 'MockModule');\n\n  const { ngModule, ngModuleProviders } = extractModuleAndProviders(def);\n  const flags = preProcessFlags(ngModule);\n  try {\n    const mockModule = detectMockModule(ngModule, getExistingMockModule(ngModule, flags.isRootModule));\n    // istanbul ignore else\n    if (ngMocksUniverse.flags.has('cacheModule')) {\n      ngMocksUniverse.cacheDeclarations.set(ngModule, mockModule);\n    }\n    if (ngMocksUniverse.flags.has('skipMock')) {\n      ngMocksUniverse.config.get('ngMocksDepsSkip')?.add(mockModule);\n    }\n    const mockModuleProviders = getMockProviders(ngModuleProviders);\n\n    return generateReturn(def, ngModule, ngModuleProviders, mockModule, mockModuleProviders);\n  } finally {\n    postProcessFlags(flags);\n  }\n}\n","import { Provider } from '@angular/core';\n\nimport CoreDefStack from '../common/core.def-stack';\nimport funcGetType from '../common/func.get-type';\nimport { isNgDef } from '../common/func.is-ng-def';\nimport { isNgModuleDefWithProviders } from '../common/func.is-ng-module-def-with-providers';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\nimport { MockComponent } from '../mock-component/mock-component';\nimport { MockDirective } from '../mock-directive/mock-directive';\nimport { MockPipe } from '../mock-pipe/mock-pipe';\nimport helperMockService from '../mock-service/helper.mock-service';\n\nimport { MockModule } from './mock-module';\n\nconst processDefMap: Array<[any, any]> = [\n  ['c', MockComponent],\n  ['d', MockDirective],\n  ['p', MockPipe],\n];\n\nconst processDef = (def: any) => {\n  if (isNgDef(def, 'm') || isNgModuleDefWithProviders(def)) {\n    return MockModule(def as any);\n  }\n  if (ngMocksUniverse.hasBuildDeclaration(def)) {\n    return ngMocksUniverse.getBuildDeclaration(def);\n  }\n  if (ngMocksUniverse.flags.has('skipMock') && ngMocksUniverse.getResolution(def) !== 'mock') {\n    return def;\n  }\n  for (const [flag, func] of processDefMap) {\n    if (isNgDef(def, flag)) {\n      return func(def);\n    }\n  }\n};\n\n// resolveProvider is a special case because of the def structure.\nconst createResolveProvider =\n  (resolutions: CoreDefStack<any, any>, change: () => void): ((def: Provider) => any) =>\n  (def: Provider) =>\n    helperMockService.resolveProvider(def, resolutions, change);\n\nconst createResolveWithProviders = (def: any, mockDef: any): boolean =>\n  isNgModuleDefWithProviders(mockDef) && isNgModuleDefWithProviders(def);\n\nconst createResolveExisting = (\n  def: any,\n  resolutions: CoreDefStack<any, any>,\n  change: (flag?: boolean) => void,\n): any => {\n  const mockDef = resolutions.get(def);\n  if (def !== mockDef) {\n    change();\n  }\n\n  return mockDef;\n};\n\nconst createResolveExcluded = (\n  def: any,\n  resolutions: CoreDefStack<any, any>,\n  change: (flag?: boolean) => void,\n): void => {\n  resolutions.set(def, undefined);\n\n  change();\n};\n\nconst createResolve =\n  (resolutions: CoreDefStack<any, any>, change: (flag?: boolean) => void): ((def: any) => any) =>\n  (def: any) => {\n    if (resolutions.has(def)) {\n      return createResolveExisting(def, resolutions, change);\n    }\n\n    const detectedDef = funcGetType(def);\n    if (ngMocksUniverse.isExcludedDef(detectedDef)) {\n      return createResolveExcluded(def, resolutions, change);\n    }\n    ngMocksUniverse.touches.add(detectedDef);\n\n    const mockDef = processDef(def);\n    if (createResolveWithProviders(def, mockDef)) {\n      resolutions.set(def.ngModule, mockDef.ngModule);\n    }\n    if (ngMocksUniverse.flags.has('skipMock')) {\n      ngMocksUniverse.config.get('ngMocksDepsSkip')?.add(mockDef);\n    }\n    resolutions.set(def, mockDef);\n    change(mockDef !== def);\n\n    return mockDef;\n  };\n\nexport default (\n  change: () => void,\n  resolutions: CoreDefStack<any, any>,\n): {\n  resolve: (def: any) => any;\n  resolveProvider: (def: Provider) => any;\n} => {\n  const resolve = createResolve(resolutions, change);\n  const resolveProvider = createResolveProvider(resolutions, change);\n\n  return {\n    resolve,\n    resolveProvider,\n  };\n};\n","import { flatten } from '../common/core.helpers';\nimport funcGetType from '../common/func.get-type';\nimport markExported from '../mock/mark-exported';\n\nexport default (providers?: any[]): void => {\n  for (const provider of flatten(providers ?? [])) {\n    const instance = funcGetType(provider);\n    markExported(instance);\n  }\n};\n","import { NgModule, Provider } from '@angular/core';\n\nimport CoreDefStack from '../common/core.def-stack';\nimport { flatten } from '../common/core.helpers';\nimport { dependencyKeys, Type } from '../common/core.types';\nimport funcGetType from '../common/func.get-type';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\nimport markExported from '../mock/mark-exported';\n\nimport createResolvers from './create-resolvers';\nimport markProviders from './mark-providers';\n\nconst flatToExisting = <T, R>(data: T | T[], callback: (arg: T) => R | undefined): R[] =>\n  flatten(data)\n    .map(callback)\n    .filter((item): item is R => !!item);\n\nconst configureProcessMetaKeys = (\n  resolve: (def: any) => any,\n  resolveProvider: (def: Provider) => any,\n): Array<[dependencyKeys, (def: any) => any]> => [\n  ['declarations', resolve],\n  [\n    'hostDirectives',\n    <T>(data: T) => {\n      const def = funcGetType(data);\n      const directive = resolve(def);\n      return directive === def\n        ? data\n        : data == def\n          ? directive\n          : {\n              ...data,\n              directive,\n            };\n    },\n  ],\n  ['imports', resolve],\n  ['entryComponents', resolve],\n  ['bootstrap', resolve],\n  ['providers', resolveProvider],\n  ['viewProviders', resolveProvider],\n  ['exports', resolve],\n  ['schemas', v => v],\n];\n\nconst processMeta = <\n  T extends Partial<Record<dependencyKeys, any>> & {\n    skipMarkProviders?: boolean;\n  },\n>(\n  ngModule: T,\n  resolve: (def: any) => any,\n  resolveProvider: (def: Provider) => any,\n): Partial<T> => {\n  const mockModuleDef: Partial<T> = {};\n  const keys = configureProcessMetaKeys(resolve, resolveProvider);\n\n  const cachePipe = ngMocksUniverse.flags.has('cachePipe');\n  if (!cachePipe) {\n    ngMocksUniverse.flags.add('cachePipe');\n  }\n  for (const [key, callback] of keys) {\n    if (ngModule[key]?.length) {\n      mockModuleDef[key] = flatToExisting(ngModule[key], callback);\n    }\n  }\n  if (!ngModule.skipMarkProviders) {\n    markProviders(mockModuleDef.providers);\n    markProviders(mockModuleDef.viewProviders);\n  }\n\n  if (!cachePipe) {\n    ngMocksUniverse.flags.delete('cachePipe');\n  }\n\n  return mockModuleDef;\n};\n\nconst resolveDefForExport = (\n  def: any,\n  resolve: (def: any) => any,\n  correctExports: boolean,\n  ngModule?: Type<any>,\n): Type<any> | undefined => {\n  const moduleConfig = ngMocksUniverse.config.get(ngModule) || {};\n  const instance = funcGetType(def);\n  const mockDef = resolve(instance);\n  if (!mockDef) {\n    return undefined;\n  }\n\n  // If we export a declaration, then we have to export its module too.\n  const config = ngMocksUniverse.config.get(instance);\n  if (config?.export && ngModule && !moduleConfig.export) {\n    ngMocksUniverse.config.set(ngModule, {\n      ...moduleConfig,\n      export: true,\n    });\n  }\n\n  if (correctExports && !moduleConfig.exportAll && !config?.export) {\n    return undefined;\n  }\n\n  markExported(instance, ngModule);\n\n  return mockDef;\n};\n\nconst skipAddExports = (mockDef: any, mockModuleDef: NgModule): mockDef is undefined =>\n  !mockDef || (!!mockModuleDef.exports && mockModuleDef.exports.indexOf(mockDef) !== -1);\n\n// if we are in the skipMock mode we need to export only the default exports.\n// if we are in the correctModuleExports mode we need to export only default exports.\nconst addExports = (\n  resolve: (def: any) => any,\n  change: () => void,\n  ngModuleDef: NgModule,\n  mockModuleDef: NgModule,\n  ngModule?: Type<any>,\n): void => {\n  const correctExports = ngMocksUniverse.flags.has('skipMock') || ngMocksUniverse.flags.has('correctModuleExports');\n  for (const def of flatten([ngModuleDef.imports || [], ngModuleDef.declarations || []])) {\n    const mockDef = resolveDefForExport(def, resolve, correctExports, ngModule);\n    if (skipAddExports(mockDef, mockModuleDef)) {\n      continue;\n    }\n\n    change();\n    mockModuleDef.exports = mockModuleDef.exports || [];\n    mockModuleDef.exports.push(mockDef);\n  }\n};\n\nexport default <\n  T extends NgModule & {\n    hostDirectives?: Array<any>;\n    skipMarkProviders?: boolean;\n    skipExports?: boolean;\n  },\n>(\n  ngModuleDef: T,\n  ngModule?: Type<any>,\n): [boolean, Partial<T>, Map<any, any>] => {\n  const hasResolver = ngMocksUniverse.config.has('mockNgDefResolver');\n  if (!hasResolver) {\n    ngMocksUniverse.config.set('mockNgDefResolver', new CoreDefStack());\n  }\n  ngMocksUniverse.config.get('mockNgDefResolver').push();\n\n  let changed = !ngMocksUniverse.flags.has('skipMock');\n  const change = (flag = true) => {\n    changed = changed || flag;\n  };\n  const { resolve, resolveProvider } = createResolvers(change, ngMocksUniverse.config.get('mockNgDefResolver'));\n  const mockModuleDef = processMeta(ngModuleDef, resolve, resolveProvider);\n  if (!ngModuleDef.skipExports) {\n    addExports(resolve, change, ngModuleDef, mockModuleDef, ngModule);\n  }\n  for (const def of ngModule && mockModuleDef.exports ? (flatten(mockModuleDef.exports) as Array<any>) : []) {\n    markExported(def, ngModule);\n  }\n\n  const resolutions = ngMocksUniverse.config.get('mockNgDefResolver').pop();\n  if (!hasResolver) {\n    ngMocksUniverse.config.delete('mockNgDefResolver');\n  }\n\n  return [changed, mockModuleDef, resolutions];\n};\n","import { Directive, NgModule } from '@angular/core';\n\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\nimport mockNgDef from '../../mock-module/mock-ng-def';\n\nexport default (meta?: Directive | NgModule): NgModule | undefined => {\n  if (!meta) {\n    return undefined;\n  }\n\n  const skipMock = ngMocksUniverse.flags.has('skipMock');\n  // istanbul ignore else\n  if (!skipMock) {\n    ngMocksUniverse.flags.add('skipMock');\n  }\n  const [changed, def] = mockNgDef(meta);\n  // istanbul ignore else\n  if (!skipMock) {\n    ngMocksUniverse.flags.delete('skipMock');\n  }\n  if (!changed) {\n    return undefined;\n  }\n\n  return def;\n};\n","import ngMocksUniverse from '../../common/ng-mocks-universe';\n\nimport { BuilderData } from './types';\n\nexport default (\n  replaceDef: BuilderData['replaceDef'],\n  defValue: BuilderData['defValue'],\n  source: any,\n  value: any,\n): boolean => {\n  // no reason to touch mocks\n  if (ngMocksUniverse.cacheDeclarations.has(value)) {\n    return true;\n  }\n\n  // no customizations in replacements\n  if (replaceDef.has(source) && value === defValue.get(source)) {\n    return true;\n  }\n\n  return false;\n};\n","import { ComponentFactoryResolver, NgModule, Optional } from '@angular/core';\n\nimport coreDefineProperty from '../../common/core.define-property';\nimport { extendClass } from '../../common/core.helpers';\nimport { NG_MOCKS } from '../../common/core.tokens';\nimport { isNgDef } from '../../common/func.is-ng-def';\nimport helperCreateClone from '../../mock-service/helper.create-clone';\n\nimport { NgMeta } from './types';\n\nclass EntryComponentsModule {\n  public constructor(map: Map<any, any>, componentFactoryResolver?: ComponentFactoryResolver) {\n    // istanbul ignore if\n    if (!componentFactoryResolver) {\n      return;\n    }\n\n    const originCFR = componentFactoryResolver.resolveComponentFactory;\n    componentFactoryResolver.resolveComponentFactory = helperCreateClone(\n      originCFR,\n      undefined,\n      undefined,\n      (component: any, ...args: any[]) =>\n        originCFR.apply(componentFactoryResolver, [map.get(component) ?? component, ...args] as any),\n    );\n  }\n}\ncoreDefineProperty(EntryComponentsModule, 'parameters', [[NG_MOCKS], [ComponentFactoryResolver, new Optional()]]);\n\nclass IvyModule {}\nNgModule()(IvyModule);\n\nexport default (ngModule: NgMeta): void => {\n  const entryComponents: any[] = [];\n  for (const declaration of ngModule.declarations) {\n    if (isNgDef(declaration, 'c')) {\n      entryComponents.push(declaration);\n    }\n  }\n  // the way to cause entryComponents to do its work\n  const entryModule = extendClass(EntryComponentsModule);\n  NgModule({\n    // Ivy knows how to make any component an entry point,\n    // but we still would like to patch resolveComponentFactory in order to provide mocks.\n    // ɵmod is added only if Ivy has been enabled.\n    entryComponents: (IvyModule as any).ɵmod ? [] : /* istanbul ignore next */ entryComponents,\n  } as never)(entryModule);\n  ngModule.imports.push(entryModule);\n};\n","var x = y => { var x = {}; __webpack_require__.d(x, y); return x; }\nvar y = x => () => x\nconst __WEBPACK_NAMESPACE_OBJECT__ = x({ [\"DOCUMENT\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_common_d12e0fe1__.DOCUMENT });","import { DOCUMENT } from '@angular/common';\n\nimport coreConfig from '../../common/core.config';\nimport coreReflectProvidedIn from '../../common/core.reflect.provided-in';\nimport { isNgInjectionToken } from '../../common/func.is-ng-injection-token';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nconst skipResolution = (provide: any): boolean | undefined => {\n  const resolution = ngMocksUniverse.getResolution(provide);\n  if (resolution === 'keep' || resolution === 'exclude') {\n    return true;\n  }\n  if (resolution === 'mock') {\n    return false;\n  }\n\n  return undefined;\n};\n\nconst skipSystem = (provide: any): boolean => {\n  if (!provide || provide === DOCUMENT || ngMocksUniverse.touches.has(provide)) {\n    return true;\n  }\n  const skipByResolution = skipResolution(provide);\n  if (skipByResolution !== undefined) {\n    return skipByResolution;\n  }\n\n  if (typeof provide === 'function' && coreConfig.neverMockProvidedFunction.indexOf(provide.name) !== -1) {\n    return true;\n  }\n  // istanbul ignore if because we mock BrowserModule\n  if (isNgInjectionToken(provide) && coreConfig.neverMockToken.indexOf(provide.toString()) !== -1) {\n    return true;\n  }\n\n  return false;\n};\n\n// Checks if we should avoid mocking of the provider.\nexport default (provide: any): boolean => {\n  if (skipSystem(provide)) {\n    return true;\n  }\n\n  // Empty providedIn or things for a platform have to be skipped.\n  const providedIn = coreReflectProvidedIn(provide);\n  const skip = !providedIn || providedIn === 'platform';\n  if (typeof provide === 'function' && skip) {\n    return true;\n  }\n\n  return false;\n};\n","import { NG_MOCKS_ROOT_PROVIDERS } from '../../common/core.tokens';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nimport skipDep from './skip-dep';\nimport { BuilderData } from './types';\n\nexport default (parameters: Set<any>, mockDef: BuilderData['mockDef'], def: any): void => {\n  if (\n    !skipDep(def) &&\n    (mockDef.has(NG_MOCKS_ROOT_PROVIDERS) || !ngMocksUniverse.config.get('ngMocksDepsSkip').has(def))\n  ) {\n    parameters.add(def);\n  }\n};\n","export default (provide: any, bucket: any[], touched: any[]): void => {\n  if (typeof provide === 'function' && touched.indexOf(provide) === -1) {\n    touched.push(provide);\n    bucket.push(provide);\n  }\n};\n","import funcExtractForwardRef from '../../common/func.extract-forward-ref';\n\n// Extracts dependency among flags of parameters.\nexport default (decorators?: any[]): any => {\n  if (!decorators) {\n    return;\n  }\n\n  let provide: any;\n  for (const decorator of decorators) {\n    if (decorator && typeof decorator === 'object' && decorator.token) {\n      provide = decorator.token;\n    }\n    if (!provide && decorator && (typeof decorator !== 'object' || !decorator.ngMetadataName)) {\n      provide = decorator;\n    }\n  }\n\n  return funcExtractForwardRef(provide);\n};\n","import coreReflectProvidedIn from '../../common/core.reflect.provided-in';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nexport default (provide: any): void => {\n  if (ngMocksUniverse.touches.has(provide)) {\n    return;\n  }\n\n  const providedIn = coreReflectProvidedIn(provide);\n  if (!providedIn) {\n    return;\n  }\n\n  if (ngMocksUniverse.config.get('ngMocksDepsSkip').has(providedIn)) {\n    ngMocksUniverse.config.get('ngMocksDepsSkip').add(provide);\n  }\n};\n","import ngMocksUniverse from '../../common/ng-mocks-universe';\n\nimport skipDep from './skip-dep';\n\nexport default (provide: any): boolean => {\n  if (skipDep(provide)) {\n    return true;\n  }\n\n  return ngMocksUniverse.config.get('ngMocksDepsSkip').has(provide);\n};\n","import { flatten, mapValues } from '../../common/core.helpers';\nimport coreReflectProvidedIn from '../../common/core.reflect.provided-in';\nimport { AnyDeclaration, Type } from '../../common/core.types';\nimport errorJestMock from '../../common/error.jest-mock';\nimport funcGetName from '../../common/func.get-name';\nimport funcGetType from '../../common/func.get-type';\nimport { isNgDef } from '../../common/func.is-ng-def';\nimport { isNgInjectionToken } from '../../common/func.is-ng-injection-token';\nimport { isStandalone } from '../../common/func.is-standalone';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\nimport markExported from '../../mock/mark-exported';\nimport markProviders from '../../mock-module/mark-providers';\n\nimport initModule from './init-module';\nimport { BuilderData, NgMeta } from './types';\n\nconst skipDef = (def: any): boolean =>\n  ngMocksUniverse.touches.has(def) || isNgDef(def) || isNgInjectionToken(def) || typeof def === 'string';\n\nconst handleDef = ({ imports, declarations, providers }: NgMeta, def: any, defProviders: Map<any, any>): void => {\n  if (!skipDef(def)) {\n    errorJestMock(def);\n  }\n\n  let touched = false;\n\n  if (isNgDef(def, 'm')) {\n    const extendedDef = initModule(def, defProviders);\n    imports.push(extendedDef);\n    touched = true;\n\n    // adding providers to touches\n    if (typeof extendedDef === 'object' && extendedDef.providers) {\n      for (const provider of flatten(extendedDef.providers)) {\n        ngMocksUniverse.touches.add(funcGetType(provider));\n      }\n    }\n  }\n\n  if (isNgDef(def, 'c') || isNgDef(def, 'd') || isNgDef(def, 'p')) {\n    (isStandalone(def) ? imports : declarations).push(ngMocksUniverse.getBuildDeclaration(def));\n    touched = true;\n  }\n\n  if (isNgDef(def, 'i') || !isNgDef(def)) {\n    const mock = ngMocksUniverse.builtProviders.get(def);\n    if (mock && typeof mock !== 'string' && isNgDef(mock, 't') === false) {\n      providers.push(mock);\n      touched = true;\n    }\n  }\n\n  if (touched) {\n    markExported(def);\n    ngMocksUniverse.touches.add(def);\n  }\n};\n\nconst isExportedOnRoot = (\n  def: any,\n  configInstance: Map<any, { exported?: Set<any> }>,\n  configDef: Map<any, any>,\n): undefined | Type<any> => {\n  const cnfInstance = configInstance.get(def);\n  const cnfDef = configDef.get(def) || /* istanbul ignore next */ {};\n\n  if (isNgDef(def, 'm') && cnfDef.onRoot) {\n    return def;\n  }\n\n  if (!cnfInstance?.exported) {\n    return def;\n  }\n\n  for (const parent of mapValues(cnfInstance.exported)) {\n    const returnModule = isExportedOnRoot(parent, configInstance, configDef);\n    // istanbul ignore else\n    if (returnModule) {\n      return returnModule;\n    }\n  }\n\n  return undefined;\n};\n\nconst moveModulesUp = <T>(a: T, b: T) => {\n  const isA = isNgDef(a, 'm');\n  const isB = isNgDef(b, 'm');\n  if (isA && isB) {\n    return 0;\n  }\n  if (isA) {\n    return -1;\n  }\n  if (isB) {\n    return 1;\n  }\n  return 0;\n};\n\nexport default ({ configDefault, keepDef, mockDef, replaceDef }: BuilderData, defProviders: Map<any, any>): NgMeta => {\n  const meta: NgMeta = { imports: [], declarations: [], providers: [] };\n\n  const processed: AnyDeclaration<any>[] = [];\n  const forgotten: AnyDeclaration<any>[] = [];\n\n  const defs = [...mapValues(mockDef), ...mapValues(keepDef), ...mapValues(replaceDef)];\n  defs.sort(moveModulesUp);\n\n  // Adding suitable leftovers.\n  for (const originalDef of defs) {\n    const def =\n      isNgDef(originalDef, 'm') && defProviders.has(originalDef)\n        ? originalDef\n        : isExportedOnRoot(originalDef, ngMocksUniverse.configInstance, ngMocksUniverse.config);\n    if (!def || processed.indexOf(def) !== -1) {\n      continue;\n    }\n    const cnfDef = ngMocksUniverse.config.get(def) || /* istanbul ignore next */ { __set: true };\n    processed.push(def);\n    cnfDef.onRoot = cnfDef.onRoot || !cnfDef.dependency;\n    // istanbul ignore if\n    if (cnfDef.__set) {\n      cnfDef.__set = undefined;\n      ngMocksUniverse.config.set(def, cnfDef);\n    }\n\n    if (isNgDef(def, 'm') && cnfDef.onRoot) {\n      handleDef(meta, def, defProviders);\n    } else if (!cnfDef.dependency && cnfDef.export && (isNgDef(def, 'i') || !isNgDef(def))) {\n      handleDef(meta, def, defProviders);\n      markProviders([def]);\n    } else if (!cnfDef.dependency && cnfDef.export) {\n      handleDef(meta, def, defProviders);\n    } else if (!ngMocksUniverse.touches.has(def) && !cnfDef.dependency) {\n      handleDef(meta, def, defProviders);\n    } else if (\n      cnfDef.dependency &&\n      configDefault.dependency &&\n      coreReflectProvidedIn(def) !== 'root' &&\n      (typeof def !== 'object' || !(def as any).__ngMocksSkip)\n    ) {\n      forgotten.push(def);\n    }\n  }\n\n  // Checking missing dependencies\n  const globalFlags = ngMocksUniverse.global.get('flags');\n  for (const def of forgotten) {\n    if (ngMocksUniverse.touches.has(def)) {\n      continue;\n    }\n\n    const errorMessage = [\n      `MockBuilder has found a missing dependency: ${funcGetName(def)}.`,\n      'It means no module provides it.',\n      'Please, use the \"export\" flag if you want to add it explicitly.',\n      'https://ng-mocks.sudo.eu/api/MockBuilder#export-flag',\n    ].join(' ');\n\n    if (globalFlags.onMockBuilderMissingDependency === 'warn') {\n      console.warn(errorMessage);\n    } else if (globalFlags.onMockBuilderMissingDependency === 'throw') {\n      throw new Error(errorMessage);\n    }\n  }\n\n  return meta;\n};\n","import { ModuleWithProviders } from '@angular/core';\n\nimport { Type } from '../../common/core.types';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nimport { BuilderData } from './types';\n\nexport default (def: Type<any>, defProviders: BuilderData['defProviders']): Type<any> | ModuleWithProviders<any> => {\n  const loModule = ngMocksUniverse.config.get('mockNgDefResolver').get(def) ?? ngMocksUniverse.getBuildDeclaration(def);\n  const loProviders = defProviders.has(def) ? defProviders.get(def) : undefined;\n\n  return loProviders\n    ? {\n        ngModule: loModule,\n        providers: loProviders,\n      }\n    : loModule;\n};\n","import collectDeclarations from '../resolve/collect-declarations';\n\nimport coreConfig from './core.config';\nimport { flatten } from './core.helpers';\nimport { AnyDeclaration } from './core.types';\nimport { getNgType } from './func.get-ng-type';\nimport funcGetType from './func.get-type';\n\nexport const funcExtractDeps = (\n  def: any,\n  result: Set<AnyDeclaration<any>>,\n  recursive = false,\n): Set<AnyDeclaration<any>> => {\n  const meta = collectDeclarations(def);\n  const type = getNgType(def);\n  // istanbul ignore if\n  if (!type || type === 'Injectable') {\n    return result;\n  }\n\n  const decorator = meta[type];\n  for (const field of coreConfig.dependencies) {\n    if (!decorator[field]) {\n      continue;\n    }\n\n    for (const item of flatten(decorator[field])) {\n      // istanbul ignore if: it is here for standalone things, however they don't support modules with providers.\n      const itemType = funcGetType(item);\n      if (!result.has(itemType)) {\n        result.add(itemType);\n        if (recursive) {\n          funcExtractDeps(itemType, result);\n        }\n      }\n    }\n  }\n\n  return result;\n};\n","import { isNgDef } from '../../common/func.is-ng-def';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\nimport mockHelperStub from '../../mock-helper/mock-helper.stub';\nimport helperUseFactory from '../../mock-service/helper.use-factory';\nimport mockProvider from '../../mock-service/mock-provider';\nimport { IMockBuilderConfigMock } from '../types';\n\nconst createInstance = (existing: any, params: any, config: IMockBuilderConfigMock): any => {\n  if (config.precise) {\n    return params;\n  }\n\n  return mockHelperStub(existing, params);\n};\n\nexport default (def: any, defValue: Map<any, any>): void => {\n  if (isNgDef(def, 'i') && defValue.has(def)) {\n    const config: IMockBuilderConfigMock = ngMocksUniverse.config.get(def);\n    const instance = defValue.get(def);\n    ngMocksUniverse.builtProviders.set(\n      def,\n      helperUseFactory(def, undefined, existing => createInstance(existing, instance, config)),\n    );\n  } else if (isNgDef(def, 'i')) {\n    ngMocksUniverse.builtProviders.set(def, mockProvider(def, true));\n  }\n\n  if (!isNgDef(def) && defValue.has(def)) {\n    const instance = defValue.get(def);\n    ngMocksUniverse.builtProviders.set(\n      def,\n      helperUseFactory(def, undefined, () => instance),\n    );\n  } else if (!isNgDef(def)) {\n    ngMocksUniverse.builtProviders.set(def, mockProvider(def, true));\n  }\n};\n","import { isNgDef } from '../../common/func.is-ng-def';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\nimport { MockComponent } from '../../mock-component/mock-component';\nimport { MockDirective } from '../../mock-directive/mock-directive';\nimport { MockPipe } from '../../mock-pipe/mock-pipe';\n\nexport default (def: any): void => {\n  if (ngMocksUniverse.builtDeclarations.get(def) !== undefined) {\n    return;\n  }\n\n  if (isNgDef(def, 'c')) {\n    ngMocksUniverse.builtDeclarations.set(def, MockComponent(def));\n  }\n  if (isNgDef(def, 'd')) {\n    ngMocksUniverse.builtDeclarations.set(def, MockDirective(def));\n  }\n  if (isNgDef(def, 'p')) {\n    ngMocksUniverse.builtDeclarations.set(def, MockPipe(def));\n  }\n};\n","import funcGetType from '../../common/func.get-type';\n\nexport default (\n  provider: any,\n): {\n  multi: boolean;\n  provide: any;\n} => {\n  const provide = funcGetType(provider);\n  const multi = provide !== provider && provider.multi;\n\n  return {\n    multi,\n    provide,\n  };\n};\n","import { NgModule } from '@angular/core';\nimport { TestBed, TestBedStatic, TestModuleMetadata } from '@angular/core/testing';\n\nimport CoreDefStack from '../common/core.def-stack';\nimport { flatten, mapValues } from '../common/core.helpers';\nimport { Type } from '../common/core.types';\nimport funcGetName from '../common/func.get-name';\nimport { isNgDef } from '../common/func.is-ng-def';\nimport { isNgModuleDefWithProviders } from '../common/func.is-ng-module-def-with-providers';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport { MockBuilder } from './mock-builder';\nimport { MockBuilderStash } from './mock-builder-stash';\nimport addRequestedProviders from './promise/add-requested-providers';\nimport applyPlatformModules from './promise/apply-platform-modules';\nimport createNgMocksOverridesToken from './promise/create-ng-mocks-overrides-token';\nimport createNgMocksToken from './promise/create-ng-mocks-token';\nimport createNgMocksTouchesToken from './promise/create-ng-mocks-touches-token';\nimport handleEntryComponents from './promise/handle-entry-components';\nimport handleRootProviders from './promise/handle-root-providers';\nimport initNgModules from './promise/init-ng-modules';\nimport initUniverse from './promise/init-universe';\nimport parseMockArguments from './promise/parse-mock-arguments';\nimport parseProvider from './promise/parse-provider';\nimport { BuilderData } from './promise/types';\nimport {\n  IMockBuilder,\n  IMockBuilderConfig,\n  IMockBuilderConfigAll,\n  IMockBuilderProvider,\n  IMockBuilderResult,\n} from './types';\n\nconst normaliseModule = (\n  module: any,\n): {\n  def: Type<any>;\n  providers?: NgModule['providers'];\n} =>\n  isNgModuleDefWithProviders(module)\n    ? { def: module.ngModule, providers: module.providers }\n    : { def: module, providers: undefined };\n\nconst generateProviderValue = (provider: any, existing: any, multi: boolean): any =>\n  multi ? [...(Array.isArray(existing) ? existing : /* istanbul ignore next */ []), provider] : provider;\n\nconst defaultMock = {}; // simulating Symbol\n\nexport interface MockBuilderPromise {\n  [Symbol.toStringTag]: 'Promise';\n}\n\nexport class MockBuilderPromise implements IMockBuilder {\n  protected beforeCC: Set<(testBed: TestBedStatic) => void> = new Set();\n  protected configDef: BuilderData['configDef'] = new Map();\n  protected defProviders: BuilderData['defProviders'] = new Map();\n  protected defValue: BuilderData['defValue'] = new Map();\n  protected excludeDef: BuilderData['excludeDef'] = new Set();\n  protected keepDef: BuilderData['keepDef'] = new Set();\n  protected mockDef: BuilderData['mockDef'] = new Set();\n  protected providerDef: BuilderData['providerDef'] = new Map();\n  protected replaceDef: BuilderData['replaceDef'] = new Set();\n  protected stash: MockBuilderStash = new MockBuilderStash();\n\n  public constructor(protected configDefault: IMockBuilderConfigAll) {\n    // istanbul ignore else\n    if (typeof Symbol !== 'undefined') {\n      (this as any)[Symbol.toStringTag] = 'Promise';\n    }\n  }\n\n  public beforeCompileComponents(callback: (testBed: TestBedStatic) => void): this {\n    this.beforeCC.add(callback);\n\n    return this;\n  }\n\n  public build(): TestModuleMetadata {\n    this.stash.backup();\n    const defStack = new CoreDefStack();\n    ngMocksUniverse.config.set('mockNgDefResolver', defStack);\n    ngMocksUniverse.flags.add('hasRootModule');\n\n    try {\n      const params = this.combineParams();\n\n      const ngModule = initNgModules(params, initUniverse(params));\n      addRequestedProviders(ngModule, params, defStack);\n      handleRootProviders(ngModule, params, defStack);\n      handleEntryComponents(ngModule);\n      applyPlatformModules();\n\n      ngModule.providers.push(\n        createNgMocksToken(),\n        createNgMocksTouchesToken(),\n        createNgMocksOverridesToken(this.replaceDef, this.defValue),\n        MockBuilder as never,\n      );\n\n      return ngModule;\n    } finally {\n      ngMocksUniverse.flags.delete('hasRootModule');\n      ngMocksUniverse.config.delete('mockNgDefResolver');\n      this.stash.restore();\n    }\n  }\n\n  // istanbul ignore next\n  public async catch(reject?: ((reason: any) => PromiseLike<never>) | undefined | null): Promise<IMockBuilderResult> {\n    return this.then().catch(reject);\n  }\n\n  public exclude(def: any): this {\n    this.wipe(def);\n    this.excludeDef.add(def);\n    this.setConfigDef(def);\n\n    return this;\n  }\n\n  // istanbul ignore next\n  public async finally(callback?: (() => void) | null | undefined): Promise<IMockBuilderResult> {\n    return this.then().finally(callback);\n  }\n\n  public keep(input: any, config?: IMockBuilderConfig): this {\n    const { def, providers } = normaliseModule(input);\n\n    const existing = this.keepDef.has(def) ? this.defProviders.get(def) : [];\n    this.wipe(def);\n    this.keepDef.add(def);\n\n    // a magic to support modules with providers.\n    if (providers) {\n      this.defProviders.set(def, [...(existing || /* istanbul ignore next */ []), ...providers]);\n    }\n\n    this.setConfigDef(def, config);\n\n    return this;\n  }\n\n  public mock(input: any, a1: any = defaultMock, a2?: any): this {\n    const { def, providers } = normaliseModule(input);\n\n    const { config, mock } = parseMockArguments(def, a1, a2, defaultMock);\n    if (isNgDef(mock) && isNgDef(input) && !isNgDef(input, 't')) {\n      throw new Error(\n        [\n          `MockBuilder.mock(${funcGetName(input)}) received a class when its shape is expected.`,\n          'Please try ngMocks.defaultMock instead.',\n        ].join(' '),\n      );\n    }\n\n    const existing = this.mockDef.has(def) ? this.defProviders.get(def) : [];\n    this.wipe(def);\n    this.mockDef.add(def);\n\n    // a magic to support modules with providers.\n    if (providers) {\n      this.defProviders.set(def, [...(existing || /* istanbul ignore next */ []), ...providers]);\n    }\n\n    this.setDefValue(def, mock);\n    this.setConfigDef(def, config);\n\n    return this;\n  }\n\n  public provide(def: IMockBuilderProvider): this {\n    for (const provider of flatten(def)) {\n      const { provide, multi } = parseProvider(provider);\n      const existing = this.providerDef.has(provide) ? this.providerDef.get(provide) : [];\n      this.providerDef.set(provide, generateProviderValue(provider, existing, multi));\n    }\n\n    return this;\n  }\n\n  public replace(source: Type<any>, destination: Type<any>, config?: IMockBuilderConfig): this {\n    if (!isNgDef(destination) || !isNgDef(source) || isNgDef(destination, 'i') || isNgDef(source, 'i')) {\n      throw new Error(\n        'Cannot replace the declaration, both have to be a Module, a Component, a Directive or a Pipe, for Providers use `.mock` or `.provide`',\n      );\n    }\n\n    this.wipe(source);\n    this.replaceDef.add(source);\n    this.defValue.set(source, destination);\n    this.setConfigDef(source, config);\n\n    return this;\n  }\n\n  // eslint-disable-next-line unicorn/no-thenable\n  public async then<TResult1 = IMockBuilderResult>(\n    fulfill?: ((value: IMockBuilderResult) => PromiseLike<TResult1>) | undefined | null,\n    reject?: ((reason: any) => PromiseLike<any>) | undefined | null,\n  ): Promise<TResult1> {\n    const promise = new Promise((resolve: (value: IMockBuilderResult) => void): void => {\n      const testBed: TestBedStatic = TestBed.configureTestingModule(this.build()) as never;\n      for (const callback of mapValues(this.beforeCC)) {\n        callback(testBed);\n      }\n      const testBedPromise = testBed.compileComponents();\n      testBedPromise.then(() => {\n        resolve({ testBed });\n      });\n    });\n\n    return promise.then(fulfill, reject);\n  }\n\n  private combineParams(): BuilderData {\n    return {\n      configDef: this.configDef,\n      configDefault: this.configDefault,\n      defProviders: this.defProviders,\n      defValue: this.defValue,\n      excludeDef: this.excludeDef,\n      keepDef: this.keepDef,\n      mockDef: this.mockDef,\n      providerDef: this.providerDef,\n      replaceDef: this.replaceDef,\n    };\n  }\n\n  private setConfigDef(def: any, config?: any): void {\n    if (config || !this.configDef.has(def)) {\n      this.configDef.set(def, config ?? this.configDefault);\n    }\n  }\n\n  private setDefValue(def: any, mock: any): void {\n    if (mock === defaultMock) {\n      this.defValue.delete(def);\n    } else {\n      this.defValue.set(def, mock);\n    }\n  }\n\n  private wipe(def: Type<any>): void {\n    this.defProviders.delete(def);\n    this.defValue.delete(def);\n    this.excludeDef.delete(def);\n    this.keepDef.delete(def);\n    this.mockDef.delete(def);\n    this.providerDef.delete(def);\n    this.replaceDef.delete(def);\n  }\n}\n","import { mapEntries, mapValues } from '../../common/core.helpers';\nimport { funcExtractDeps } from '../../common/func.extract-deps';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nimport initExcludeDef from './init-exclude-def';\nimport initKeepDef from './init-keep-def';\nimport initMockDeclarations from './init-mock-declarations';\nimport initModules from './init-modules';\nimport initReplaceDef from './init-replace-def';\nimport { BuilderData } from './types';\n\nexport default ({\n  configDef,\n  defProviders,\n  defValue,\n  excludeDef,\n  keepDef,\n  mockDef,\n  replaceDef,\n}: BuilderData): Map<any, any> => {\n  ngMocksUniverse.flags.add('cachePipe');\n\n  // collecting multi flags of providers.\n  ngMocksUniverse.config.set('ngMocksMulti', new Set());\n  // collecting all deps of providers.\n  ngMocksUniverse.config.set('ngMocksDeps', new Set());\n  // collecting all declarations of kept modules.\n  ngMocksUniverse.config.set('ngMocksDepsSkip', new Set());\n  // flags to understand how to mock nested declarations.\n  ngMocksUniverse.config.set('ngMocksDepsResolution', new Map());\n\n  const dependencies = initKeepDef(keepDef, configDef);\n  for (const dependency of mapValues(dependencies)) {\n    ngMocksUniverse.touches.add(dependency);\n  }\n  for (const dependency of mapValues(keepDef)) {\n    dependencies.add(dependency);\n    funcExtractDeps(dependency, dependencies, true);\n  }\n  for (const dependency of mapValues(mockDef)) {\n    dependencies.add(dependency);\n    funcExtractDeps(dependency, dependencies, true);\n  }\n  for (const dependency of mapValues(replaceDef)) {\n    dependencies.add(dependency);\n    funcExtractDeps(dependency, dependencies, true);\n  }\n  for (const dependency of mapValues(dependencies)) {\n    if (configDef.has(dependency)) {\n      continue;\n    }\n\n    // Checking global configuration for the dependency.\n    const resolution = ngMocksUniverse.getResolution(dependency);\n    if (resolution === 'replace') {\n      replaceDef.add(dependency);\n      defValue.set(dependency, ngMocksUniverse.getBuildDeclaration(dependency));\n    } else if (resolution === 'keep') {\n      keepDef.add(dependency);\n    } else if (resolution === 'exclude') {\n      excludeDef.add(dependency);\n    } else if (resolution === 'mock') {\n      mockDef.add(dependency);\n    } else if (ngMocksUniverse.touches.has(dependency)) {\n      mockDef.add(dependency);\n    }\n\n    configDef.set(\n      dependency,\n      ngMocksUniverse.touches.has(dependency)\n        ? {\n            dependency: true,\n            __internal: true,\n          }\n        : {},\n    );\n  }\n\n  for (const [k, v] of mapEntries(configDef)) {\n    ngMocksUniverse.config.set(k, {\n      ...ngMocksUniverse.getConfigMock().get(k),\n      ...v,\n      defValue: defValue.get(k),\n    });\n  }\n\n  initReplaceDef(replaceDef, defValue);\n  initExcludeDef(excludeDef);\n  initMockDeclarations(mockDef, defValue);\n\n  return initModules(keepDef, mockDef, replaceDef, defProviders);\n};\n","import { mapValues } from '../../common/core.helpers';\nimport { funcExtractDeps } from '../../common/func.extract-deps';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nexport default (keepDef: Set<any>, configDef: Map<any, any>): Set<any> => {\n  const dependencies = new Set<any>();\n  const builtDeclarations = ngMocksUniverse.builtDeclarations;\n  const builtProviders = ngMocksUniverse.builtProviders;\n  const resolutions = ngMocksUniverse.config.get('ngMocksDepsResolution');\n  for (const def of mapValues(keepDef)) {\n    builtDeclarations.set(def, def);\n    builtProviders.set(def, def);\n    resolutions.set(def, 'keep');\n\n    const config = configDef.get(def);\n    if (config.shallow) {\n      funcExtractDeps(def, dependencies);\n    }\n  }\n\n  return dependencies;\n};\n","import { mapValues } from '../../common/core.helpers';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nexport default (replaceDef: Set<any>, defValue: Map<any, any>): void => {\n  const builtDeclarations = ngMocksUniverse.builtDeclarations;\n  const resolutions = ngMocksUniverse.config.get('ngMocksDepsResolution');\n  for (const def of mapValues(replaceDef)) {\n    builtDeclarations.set(def, defValue.get(def));\n    resolutions.set(def, 'replace');\n  }\n};\n","import { mapValues } from '../../common/core.helpers';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nexport default (excludeDef: Set<any>): void => {\n  const builtDeclarations = ngMocksUniverse.builtDeclarations;\n  const builtProviders = ngMocksUniverse.builtProviders;\n  const resolutions = ngMocksUniverse.config.get('ngMocksDepsResolution');\n  for (const def of mapValues(excludeDef)) {\n    builtDeclarations.set(def, null);\n    builtProviders.set(def, null);\n    resolutions.set(def, 'exclude');\n  }\n};\n","import { mapValues } from '../../common/core.helpers';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nimport tryMockProvider from './try-mock-provider';\n\nexport default (mockDef: Set<any>, defValue: Map<any, any>): void => {\n  const builtDeclarations = ngMocksUniverse.builtDeclarations;\n  const resolutions: Map<any, string> = ngMocksUniverse.config.get('ngMocksDepsResolution');\n  for (const def of mapValues(mockDef)) {\n    const deleteTouch = !ngMocksUniverse.touches.has(def);\n\n    resolutions.set(def, 'mock');\n    builtDeclarations.set(def, undefined);\n    tryMockProvider(def, defValue);\n\n    if (deleteTouch) {\n      ngMocksUniverse.touches.delete(def);\n    }\n  }\n};\n","import { mapValues } from '../../common/core.helpers';\nimport { isNgDef } from '../../common/func.is-ng-def';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\nimport { MockModule } from '../../mock-module/mock-module';\nimport mockNgDef from '../../mock-module/mock-ng-def';\nimport collectDeclarations from '../../resolve/collect-declarations';\n\nimport tryMockDeclaration from './try-mock-declaration';\n\nexport default (\n  keepDef: Set<any>,\n  mockDef: Set<any>,\n  replaceDef: Set<any>,\n  defProviders: Map<any, any>,\n): Map<any, any> => {\n  const loProviders = new Map();\n\n  for (const def of [...mapValues(keepDef), ...mapValues(mockDef), ...mapValues(replaceDef)]) {\n    const meta = collectDeclarations(def);\n    const providers = [\n      ...(defProviders.get(def) ?? []),\n      ...(meta.Component?.providers ?? []),\n      ...(meta.Directive?.providers ?? []),\n    ];\n\n    const deleteTouch = !ngMocksUniverse.touches.has(def);\n    if (!mockDef.has(def)) {\n      ngMocksUniverse.flags.add('skipMock');\n    }\n\n    const isModule = isNgDef(def, 'm');\n    if (providers.length > 0) {\n      const [, loDef] = mockNgDef({ providers, skipMarkProviders: !isModule, skipExports: true });\n      loProviders.set(def, loDef.providers);\n    }\n    if (isModule) {\n      ngMocksUniverse.builtDeclarations.set(def, MockModule(def));\n    }\n\n    ngMocksUniverse.flags.delete('skipMock');\n    if (deleteTouch) {\n      ngMocksUniverse.touches.delete(def);\n    }\n  }\n  for (const def of mapValues(mockDef)) {\n    tryMockDeclaration(def);\n  }\n\n  return loProviders;\n};\n","import CoreDefStack from '../../common/core.def-stack';\nimport { mapValues } from '../../common/core.helpers';\nimport { NG_MOCKS_ROOT_PROVIDERS } from '../../common/core.tokens';\nimport { isNgInjectionToken } from '../../common/func.is-ng-injection-token';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\nimport helperResolveProvider from '../../mock-service/helper.resolve-provider';\nimport helperUseFactory from '../../mock-service/helper.use-factory';\n\nimport getRootProviderParameters from './get-root-provider-parameters';\nimport { BuilderData, NgMeta } from './types';\n\n// Mocking root providers.\nexport default (ngModule: NgMeta, { keepDef, mockDef }: BuilderData, resolutions: CoreDefStack<any, any>): void => {\n  // Adding missed providers.\n  const parameters = keepDef.has(NG_MOCKS_ROOT_PROVIDERS) ? new Set() : getRootProviderParameters(mockDef);\n  if (parameters.size > 0) {\n    for (const parameter of mapValues(parameters)) {\n      const mock = helperResolveProvider(parameter, resolutions);\n      if (mock) {\n        ngModule.providers.push(mock);\n      } else if (isNgInjectionToken(parameter)) {\n        const multi =\n          ngMocksUniverse.config.has('ngMocksMulti') && ngMocksUniverse.config.get('ngMocksMulti').has(parameter);\n        ngModule.providers.push(helperUseFactory(parameter, () => (multi ? [] : undefined)));\n      }\n    }\n  }\n};\n","import coreReflectParametersResolve from '../../common/core.reflect.parameters-resolve';\nimport { NG_MOCKS_ROOT_PROVIDERS } from '../../common/core.tokens';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nimport addDefToRootProviderParameters from './add-def-to-root-provider-parameters';\nimport checkRootProviderDependency from './check-root-provider-dependency';\nimport extractDep from './extract-dep';\nimport getRootProvidersData from './get-root-providers-data';\nimport handleProvidedInDependency from './handle-provided-in-dependency';\nimport skipRootProviderDependency from './skip-root-provider-dependency';\nimport { BuilderData } from './types';\n\nexport default (mockDef: BuilderData['mockDef']): Set<any> => {\n  const parameters = new Set();\n  const { buckets, touched } = getRootProvidersData();\n\n  for (const bucket of buckets) {\n    for (const def of bucket) {\n      addDefToRootProviderParameters(parameters, mockDef, def);\n\n      for (const decorators of coreReflectParametersResolve(def)) {\n        const provide: any = extractDep(decorators);\n        handleProvidedInDependency(provide);\n        if (skipRootProviderDependency(provide)) {\n          continue;\n        }\n        checkRootProviderDependency(provide, touched, bucket);\n        if (mockDef.has(NG_MOCKS_ROOT_PROVIDERS) || !ngMocksUniverse.config.get('ngMocksDepsSkip').has(def)) {\n          parameters.add(provide);\n        } else {\n          ngMocksUniverse.config.get('ngMocksDepsSkip').add(provide);\n        }\n      }\n    }\n  }\n\n  return parameters;\n};\n","import { mapValues } from '../../common/core.helpers';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nexport default (): {\n  buckets: any[];\n  touched: any[];\n} => {\n  // We need buckets here to process first all depsSkip, then deps and only after that all other defs.\n  const buckets: any[] = [\n    mapValues(ngMocksUniverse.config.get('ngMocksDepsSkip')),\n    mapValues(ngMocksUniverse.config.get('ngMocksDeps')),\n    mapValues(ngMocksUniverse.touches),\n  ];\n\n  // Also, we need to track what has been touched to check params recursively, but avoiding duplicates.\n  const touched: any[] = [].concat(...buckets);\n\n  return {\n    buckets,\n    touched,\n  };\n};\n","import { getTestBed } from '@angular/core/testing';\n\nimport { flatten } from '../../common/core.helpers';\nimport funcGetType from '../../common/func.get-type';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nexport default () => {\n  const testBed = getTestBed();\n  // istanbul ignore else\n  if (testBed.ngModule) {\n    for (const def of flatten<any>(testBed.ngModule)) {\n      ngMocksUniverse.touches.add(funcGetType(def));\n    }\n  }\n};\n","import { ValueProvider } from '@angular/core';\n\nimport { mapEntries } from '../../common/core.helpers';\nimport { NG_MOCKS } from '../../common/core.tokens';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nexport default (): ValueProvider => {\n  const mocks = new Map();\n  for (const [key, value] of [\n    ...mapEntries(ngMocksUniverse.builtProviders),\n    ...mapEntries(ngMocksUniverse.builtDeclarations),\n    ...mapEntries(ngMocksUniverse.cacheDeclarations),\n    ...mapEntries(ngMocksUniverse.cacheProviders),\n  ]) {\n    if (mocks.has(key)) {\n      continue;\n    }\n    mocks.set(key, value);\n  }\n\n  return {\n    provide: NG_MOCKS,\n    useValue: mocks,\n  };\n};\n","import { ValueProvider } from '@angular/core';\n\nimport { mapValues } from '../../common/core.helpers';\nimport { NG_MOCKS_TOUCHES } from '../../common/core.tokens';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nexport default (): ValueProvider => {\n  // Redefining providers for kept declarations.\n  const touches = new Set();\n  for (const proto of mapValues(ngMocksUniverse.touches)) {\n    const source: any = proto;\n    let value = ngMocksUniverse.getBuildDeclaration(source);\n\n    // kept declarations should be based on their source.\n    if (value === undefined) {\n      value = source;\n    }\n\n    touches.add(source);\n    touches.add(value);\n  }\n\n  return {\n    provide: NG_MOCKS_TOUCHES,\n    useValue: touches,\n  };\n};\n","import { ValueProvider } from '@angular/core';\nimport { MetadataOverride } from '@angular/core/testing';\n\nimport { mapValues } from '../../common/core.helpers';\nimport coreReflectMeta from '../../common/core.reflect.meta';\nimport { NG_MOCKS_OVERRIDES } from '../../common/core.tokens';\nimport { Type } from '../../common/core.types';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nimport getOverrideDef from './get-override-def';\nimport skipOverride from './skip-override';\n\nexport default (replaceDef: Set<any>, defValue: Map<any, any>): ValueProvider => {\n  const overrides: Map<Type<any>, [MetadataOverride<any>, MetadataOverride<any>]> = new Map();\n  for (const proto of mapValues(ngMocksUniverse.touches)) {\n    const source: any = proto;\n    const value = ngMocksUniverse.getBuildDeclaration(source) || source;\n    if (skipOverride(replaceDef, defValue, source, value)) {\n      continue;\n    }\n\n    const original = coreReflectMeta(value);\n    const override = getOverrideDef(original);\n    if (!override) {\n      continue;\n    }\n\n    // We need to delete standalone, because Angular was too lazy to check whether it has been really changed.\n    const patchedOriginal: Partial<typeof original> = {};\n    for (const key of Object.keys(override)) {\n      patchedOriginal[key] = original[key];\n    }\n\n    overrides.set(value, [{ set: override }, { set: patchedOriginal }]);\n  }\n\n  return {\n    provide: NG_MOCKS_OVERRIDES,\n    useValue: overrides,\n  };\n};\n","import { isNgDef } from '../../common/func.is-ng-def';\n\nexport default (\n  def: any,\n  a1: any,\n  a2: any,\n  defaultMockValue: any,\n): {\n  config: any;\n  mock: any;\n} => {\n  let mock: any = def === a1 ? defaultMockValue : a1;\n  let config: any = a2 ?? (a1 !== defaultMockValue && typeof a1 === 'object' ? a1 : undefined);\n  if (isNgDef(def, 'p') && typeof a1 === 'function' && a1 !== def && !isNgDef(a1, 'p')) {\n    mock = {\n      transform: a1,\n    };\n    config = a2;\n  } else if (isNgDef(def, 'i') || !isNgDef(def)) {\n    config = a2;\n  }\n  mock = mock === config ? defaultMockValue : mock;\n\n  return {\n    config,\n    mock,\n  };\n};\n","const objectsDiffer = (prototype: any, source: any): boolean => {\n  const prototypeKeys = Object.keys(prototype);\n  const sourceKeys = Object.keys(source);\n  if (prototypeKeys.length !== sourceKeys.length) {\n    return true;\n  }\n  for (const key of prototypeKeys) {\n    if (prototype[key] !== source[key]) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nexport default (prototype: any, source: any): boolean => {\n  if (prototype === source) {\n    return true;\n  }\n  if ((prototype && !source) || (!prototype && source)) {\n    return false;\n  }\n  if (objectsDiffer(prototype, source)) {\n    return false;\n  }\n\n  return true;\n};\n","import equalVariables from './equal-variables';\n\nexport default (prototype: any, source: any): boolean => {\n  if (prototype === source) {\n    return true;\n  }\n  if ((typeof prototype === 'boolean' || typeof source === 'boolean') && prototype !== source) {\n    return false;\n  }\n\n  return prototype.$implicit === source.$implicit && equalVariables(prototype.variables, source.variables);\n};\n","import equalRenderConfigs from './equal-render-configs';\n\nexport default (source: any, destination: any): boolean => {\n  if (destination === source) {\n    return true;\n  }\n  if (destination.dependency !== source.dependency) {\n    return false;\n  }\n  if (destination.export !== source.export) {\n    return false;\n  }\n  if (destination.exportAll !== source.exportAll) {\n    return false;\n  }\n  if (!equalRenderConfigs(source.render, destination.render)) {\n    return false;\n  }\n\n  return true;\n};\n","import equalRenderDefs from './equal-render-defs';\n\nconst objectsDiffer = (destination: any, source: any): boolean => {\n  if (Object.keys(destination).length !== Object.keys(source).length) {\n    return true;\n  }\n  for (const key of Object.keys(destination)) {\n    if (!equalRenderDefs(destination[key], source[key])) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nexport default (source: any, destination: any): boolean => {\n  if (!equalRenderDefs(destination, source)) {\n    return false;\n  }\n  if (typeof destination !== 'object' || typeof source !== 'object') {\n    return true;\n  }\n  if (objectsDiffer(destination, source)) {\n    return false;\n  }\n\n  return true;\n};\n","import { mapKeys } from '../../common/core.helpers';\n\nexport default (source: Map<any, any>, destination: Map<any, any>, compare = (a: any, b: any) => a === b): boolean => {\n  if (!destination || destination.size !== source.size) {\n    return false;\n  }\n  for (const value of mapKeys(source)) {\n    if (!destination.has(value)) {\n      return false;\n    }\n    if (!compare(destination.get(value), source.get(value))) {\n      return false;\n    }\n  }\n\n  return true;\n};\n","import { flatten } from '../../common/core.helpers';\n\nconst areEqualProviderDefs = (thisDef: any, prototypeDef: any, ...keys: string[]) => {\n  for (const key of keys) {\n    if (prototypeDef && thisDef && prototypeDef[key] && thisDef[key] && prototypeDef[key] === thisDef[key]) {\n      return true;\n    }\n  }\n\n  return prototypeDef === thisDef;\n};\n\nexport default (prototype: any, source: any): boolean => {\n  if (Array.isArray(prototype) !== Array.isArray(source)) {\n    return false;\n  }\n\n  const [prototypeDefs, thisDefs] = [flatten(prototype), flatten(source)];\n  if (prototypeDefs.length !== thisDefs.length) {\n    return false;\n  }\n\n  for (let index = 0; index < prototypeDefs.length; index += 1) {\n    const [prototypeDef, thisDef] = [prototypeDefs[index], thisDefs[index]];\n\n    if (prototypeDef && thisDef && prototypeDef.multi !== thisDef.multi) {\n      return false;\n    }\n    if (areEqualProviderDefs(thisDef, prototypeDef, 'useValue', 'useClass', 'useFactory', 'useExisting')) {\n      continue;\n    }\n\n    return false;\n  }\n\n  return true;\n};\n","import { mapValues } from '../../common/core.helpers';\n\nexport default (source: Set<any>, destination: Set<any>): boolean => {\n  if (!destination || destination.size !== source.size) {\n    return false;\n  }\n  for (const value of mapValues(source)) {\n    if (!destination.has(value)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n","import { TestModuleMetadata } from '@angular/core/testing';\n\nexport default (\n  ngModule: TestModuleMetadata,\n): TestModuleMetadata & {\n  declarations: any[];\n  imports: any[];\n  providers: any[];\n} => ({\n  ...ngModule,\n  declarations: [...(ngModule.declarations || /* istanbul ignore next */ [])],\n  imports: [...(ngModule.imports || /* istanbul ignore next */ [])],\n  providers: [...(ngModule.providers || /* istanbul ignore next */ [])],\n});\n","import { TestBed, TestModuleMetadata } from '@angular/core/testing';\n\nimport { mapEntries, mapValues } from '../common/core.helpers';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport { MockBuilderPromise } from './mock-builder.promise';\nimport areEqualConfigParams from './performance/are-equal-config-params';\nimport areEqualMaps from './performance/are-equal-maps';\nimport areEqualProviders from './performance/are-equal-providers';\nimport areEqualSets from './performance/are-equal-sets';\nimport getEmptyConfig from './performance/get-empty-config';\nimport requiredMetadata from './performance/required-metadata';\nimport { IMockBuilderResult } from './types';\n\nexport class MockBuilderPerformance extends MockBuilderPromise {\n  public build(): TestModuleMetadata {\n    const global = ngMocksUniverse.global;\n\n    // avoiding influences on cache when users extend the testing module.\n    if (global.has('builder:module') && global.has('builder:config') && this.equalsTo(global.get('builder:config'))) {\n      return requiredMetadata(global.get('builder:module'));\n    }\n\n    // removal of cached promise in case of mismatch\n    if (global.has('builder:module')) {\n      global.delete(global.get('builder:module'));\n    }\n\n    const clone = this.cloneConfig();\n    const ngModule = super.build();\n    global.set('builder:config', clone);\n    global.set('builder:module', ngModule);\n\n    // avoiding influences on cache when users extend the testing module.\n    return requiredMetadata(ngModule);\n  }\n\n  // eslint-disable-next-line unicorn/no-thenable\n  public async then<TResult1 = IMockBuilderResult>(\n    fulfill?: ((value: IMockBuilderResult) => PromiseLike<TResult1>) | undefined | null,\n    reject?: ((reason: any) => PromiseLike<never>) | undefined | null,\n  ): Promise<TResult1> {\n    const global = ngMocksUniverse.global;\n\n    const flags = global.has('bullet') && global.has('builder:module') && global.has('builder:config');\n    if (flags && this.equalsTo(global.get('builder:config'))) {\n      return global.get(global.get('builder:module')).then(fulfill, reject);\n    }\n\n    // we need to reset testing module in case if we are in bullet mode but current module does not match.\n    if (global.has('bullet') && global.has('bullet:reset')) {\n      console.warn('ngMocks.faster has zero effect due to changes in testing module between runs');\n      global.delete('bullet');\n      TestBed.resetTestingModule();\n      global.set('bullet', true);\n    }\n\n    const promise = super.then(fulfill, reject);\n    global.set(global.get('builder:module'), promise);\n\n    return promise;\n  }\n\n  private cloneConfig() {\n    const config = getEmptyConfig();\n\n    mapValues(this.beforeCC, config.beforeCC);\n    mapValues(this.excludeDef, config.excludeDef);\n    mapValues(this.keepDef, config.keepDef);\n    mapValues(this.mockDef, config.mockDef);\n    mapValues(this.replaceDef, config.replaceDef);\n\n    mapEntries(this.configDef, config.configDef);\n    mapEntries(this.defProviders, config.defProviders);\n    mapEntries(this.defValue, config.defValue);\n    mapEntries(this.providerDef, config.providerDef);\n\n    return config;\n  }\n\n  private equalsTo(prototype: Record<keyof any, any>): boolean {\n    for (const key of ['beforeCC', 'keepDef', 'replaceDef', 'excludeDef', 'mockDef']) {\n      if (!areEqualSets((this as any)[key], prototype[key])) {\n        return false;\n      }\n    }\n    for (const key of ['defValue']) {\n      if (!areEqualMaps((this as any)[key], prototype[key])) {\n        return false;\n      }\n    }\n    for (const key of ['providerDef', 'defProviders']) {\n      if (!areEqualMaps((this as any)[key], prototype[key], areEqualProviders)) {\n        return false;\n      }\n    }\n\n    return areEqualMaps(this.configDef, prototype.configDef, areEqualConfigParams);\n  }\n}\n","export default () => ({\n  beforeCC: new Set(),\n  configDef: new Map(),\n  defProviders: new Map(),\n  defValue: new Map(),\n  excludeDef: new Set(),\n  keepDef: new Set(),\n  mockDef: new Set(),\n  providerDef: new Map(),\n  replaceDef: new Set(),\n});\n","import coreDefineProperty from '../common/core.define-property';\nimport { flatten, mapKeys } from '../common/core.helpers';\nimport { AnyDeclaration } from '../common/core.types';\nimport { NgModuleWithProviders } from '../common/func.is-ng-module-def-with-providers';\nimport { isStandalone } from '../common/func.is-standalone';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\nimport helperExtractPropertyDescriptor from '../mock-service/helper.extract-property-descriptor';\n\nimport { MockBuilderPerformance } from './mock-builder.performance';\nimport { IMockBuilder, IMockBuilderExtended } from './types';\n\nexport type MockBuilderParam = string | AnyDeclaration<any> | NgModuleWithProviders;\n\n/**\n * MockBuilder provides reach and simple interfaces of chain functions\n * to build desired mock environment for tests.\n *\n * @see https://ng-mocks.sudo.eu/api/MockBuilder\n */\nexport function MockBuilder(\n  keepDeclaration?: MockBuilderParam | MockBuilderParam[] | null | undefined,\n  itsModuleToMock?: MockBuilderParam | MockBuilderParam[] | null | undefined,\n): IMockBuilderExtended;\n\nexport function MockBuilder(...args: Array<MockBuilderParam | MockBuilderParam[] | null | undefined>): IMockBuilder {\n  const [keepDeclaration, itsModuleToMock] = args;\n\n  const instance = new MockBuilderPerformance(args.length < 2 ? { export: true } : { dependency: true });\n  const extensions: Map<any, any> = ngMocksUniverse.config.get('MockBuilderExtensions');\n  for (const func of extensions ? mapKeys(extensions) : []) {\n    if (helperExtractPropertyDescriptor(instance, func)) {\n      throw new Error(`MockBuilder.${func} is a base method and cannot be customized, please use a different name.`);\n    }\n    coreDefineProperty(instance, func, (...args: Array<any>) => {\n      extensions.get(func)(instance, args);\n      return instance;\n    });\n  }\n\n  if (keepDeclaration) {\n    for (const declaration of flatten(keepDeclaration)) {\n      instance.keep(declaration, {\n        export: true,\n        shallow: isStandalone(declaration),\n      });\n    }\n  }\n  if (itsModuleToMock) {\n    for (const declaration of flatten(itsModuleToMock)) {\n      instance.mock(declaration, declaration, {\n        export: true,\n        exportAll: true,\n      });\n    }\n  }\n\n  return instance;\n}\n\nfunction mockBuilderExtend<K extends keyof IMockBuilderExtended & string>(\n  func: K,\n  callback?: (builder: IMockBuilderExtended, parameters: never) => void,\n): void {\n  const extensions: Map<string, typeof callback> = ngMocksUniverse.config.get('MockBuilderExtensions') ?? new Map();\n  if (callback) {\n    extensions.set(func, callback);\n    ngMocksUniverse.config.set('MockBuilderExtensions', extensions);\n  } else {\n    extensions.delete(func);\n  }\n}\n\n// istanbul ignore next: issue in istanbul https://github.com/istanbuljs/nyc/issues/1209\nexport namespace MockBuilder {\n  /**\n   * Adds a custom function to MockBuilder\n   */\n  export function extend<K extends keyof IMockBuilderExtended & string>(\n    func: K,\n    callback: (builder: IMockBuilderExtended, parameters: never) => void,\n  ): void;\n\n  /**\n   * Removes a custom function from MockBuilder\n   */\n  export function extend<K extends keyof IMockBuilderExtended & string>(func: K): void;\n\n  export function extend<K extends keyof IMockBuilderExtended & string>(\n    func: K,\n    callback?: (builder: IMockBuilderExtended, parameters: never) => void,\n  ): void {\n    mockBuilderExtend(func, callback);\n  }\n}\n","import { MockedDebugNode } from '../../mock-render/types';\n\nexport default (value: any): value is MockedDebugNode => {\n  return !!value?.nativeElement || !!value?.nativeNode;\n};\n","import { AnyType, DebugNodeSelector } from '../common/core.types';\nimport { isNgDef } from '../common/func.is-ng-def';\n\nexport default (selector: AnyType<any> | DebugNodeSelector): string => {\n  if (typeof selector === 'string') {\n    return selector;\n  }\n  if (typeof selector === 'function') {\n    return selector.name;\n  }\n  if (isNgDef(selector, 't')) {\n    return (selector as any)._desc;\n  }\n  if (Array.isArray(selector)) {\n    return selector[0];\n  }\n  if (!selector) {\n    return '<EMPTY>';\n  }\n\n  return '<UNKNOWN>';\n};\n","import { MockedDebugNode } from '../../mock-render/types';\n\nexport default (value: any): value is { debugElement: MockedDebugNode } => {\n  return !!value && typeof value === 'object' && value.debugElement !== undefined;\n};\n","import { DebugElement } from '@angular/core';\n\nimport isFixture from '../format/is-fixture';\nimport funcGetLastFixture from '../func.get-last-fixture';\n\nconst findDebugElement = (el: any): DebugElement | undefined => {\n  if (isFixture(el)) {\n    return findDebugElement(el.debugElement);\n  }\n  if (el && el.injector && el.query) {\n    return el;\n  }\n\n  return undefined;\n};\n\nexport default (args: any[], defaultNotFoundValue?: any): [any, any, any] => {\n  let el;\n  let sel;\n  let notFoundValue = defaultNotFoundValue;\n  if (args.length === 3) {\n    el = findDebugElement(args[0]);\n    sel = args[1];\n    notFoundValue = args[2];\n  } else if (args.length === 1) {\n    el = findDebugElement(funcGetLastFixture());\n    [sel] = args;\n  } else if (args[0]) {\n    el = findDebugElement(args[0]);\n    if (el) {\n      sel = args[1];\n    } else {\n      el = findDebugElement(funcGetLastFixture());\n      [sel, notFoundValue] = args;\n    }\n  } else {\n    sel = args[1];\n  }\n  sel = findDebugElement(sel) ?? sel;\n\n  return [el, sel, notFoundValue];\n};\n","var x = y => { var x = {}; __webpack_require__.d(x, y); return x; }\nvar y = x => () => x\nconst __WEBPACK_NAMESPACE_OBJECT__ = x({ [\"By\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_platform_browser_bc6fa964__.By });","import { DebugElement, Predicate } from '@angular/core';\nimport { By } from '@angular/platform-browser';\n\nimport { AnyType } from '../../common/core.types';\nimport { getSourceOfMock } from '../../common/func.get-source-of-mock';\n\nexport default (selector: string | AnyType<any> | [string] | [string, any]): Predicate<DebugElement> => {\n  return Array.isArray(selector)\n    ? By.css(selector.length === 1 ? `[${selector[0]}]` : `[${selector[0]}=\"${selector[1]}\"]`)\n    : typeof selector === 'string'\n      ? By.css(selector)\n      : By.directive(getSourceOfMock(selector));\n};\n","import { DebugElement } from '@angular/core';\n\nimport isDebugNode from '../format/is-debug-node';\nimport funcParseFindArgsName from '../func.parse-find-args-name';\n\nimport funcParseFindArgs from './func.parse-find-args';\nimport funcParseFindTerm from './func.parse-find-term';\n\nconst defaultNotFoundValue = {}; // simulating Symbol\n\nexport default (...args: any[]): DebugElement => {\n  const [el, sel, notFoundValue] = funcParseFindArgs(args, defaultNotFoundValue);\n  const result = isDebugNode(sel) ? sel : el?.query(funcParseFindTerm(sel));\n  if (result) {\n    return result;\n  }\n  if (notFoundValue !== defaultNotFoundValue) {\n    return notFoundValue;\n  }\n  throw new Error(`Cannot find an element via ngMocks.find(${funcParseFindArgsName(sel)})`);\n};\n","import { MockedDebugNode } from '../../mock-render/types';\n\nexport default (node: MockedDebugNode): boolean => {\n  return node.nativeNode.nodeName === '#text';\n};\n","export default (a: any, b: any): boolean => {\n  if (!a || !b) {\n    return false;\n  }\n\n  return a === b;\n};\n","import detectTextNode from './detect-text-node';\n\nexport default (node: any) => {\n  return detectTextNode(node)\n    ? undefined\n    : node.injector._tNode || // ivy\n        node.injector.elDef || // classic\n        undefined;\n};\n","import { Injector } from '@angular/core';\n\nimport { getTestBedInjection } from './core.helpers';\n\nconst defaultInjector: any = {};\n\nexport default (declaration: any, injector: Injector = defaultInjector): any => {\n  if (injector === defaultInjector) {\n    return getTestBedInjection(declaration);\n  }\n  try {\n    return injector.get(declaration);\n  } catch {\n    return undefined;\n  }\n};\n","import { DebugElement, ViewContainerRef } from '@angular/core';\n\nimport coreInjector from '../../common/core.injector';\n\nimport elDefGetNode from './el-def-get-node';\n\nconst getVcr = (node: any, child: any): undefined | ViewContainerRef => {\n  if (node === child) {\n    return undefined;\n  }\n  if (child.nativeNode.nodeName !== '#comment') {\n    return undefined;\n  }\n\n  return coreInjector(ViewContainerRef, child.injector);\n};\n\nconst getScanViewRefRootNodes = (node: any, child: any): Array<[number, any]> => {\n  const vcr = getVcr(node, child);\n  if (!vcr) {\n    return [];\n  }\n\n  const result: Array<[number, any]> = [];\n  for (let vrIndex = 0; vrIndex < vcr.length; vrIndex += 1) {\n    const vr = vcr.get(vrIndex);\n    for (let rnIndex = 0; rnIndex < (vr as any).rootNodes.length; rnIndex += 1) {\n      result.push([rnIndex, (vr as any).rootNodes[rnIndex]]);\n    }\n  }\n\n  return result;\n};\n\nconst scanViewRef = (node: DebugElement) => {\n  let result: any;\n  let index: any;\n\n  for (const child of node.parent?.childNodes || []) {\n    for (const [rnIndex, rootNode] of getScanViewRefRootNodes(node, child)) {\n      if (rootNode === node.nativeNode && (index === undefined || rnIndex < index)) {\n        result = elDefGetNode(child);\n        index = rnIndex;\n      }\n    }\n  }\n\n  return result;\n};\n\nexport default (node: any) => {\n  return (\n    node.injector._tNode?.parent || // ivy\n    node.injector.elDef?.parent || // classic\n    scanViewRef(node) ||\n    node.parent?.injector._tNode || // ivy\n    node.parent?.injector.elDef || // classic\n    undefined\n  );\n};\n","import { MockedDebugNode } from '../../mock-render/types';\n\nimport detectTextNode from './detect-text-node';\nimport elDefCompare from './el-def-compare';\nimport elDefGetNode from './el-def-get-node';\nimport elDefGetParent from './el-def-get-parent';\n\nexport default (node: MockedDebugNode): MockedDebugNode[] => {\n  const elDef = elDefGetNode(node);\n  if (!elDef || detectTextNode(node)) {\n    return [];\n  }\n\n  const isDirect = (node as any).childNodes !== undefined;\n  const children: MockedDebugNode[] = [];\n  for (const childNode of (node as any).childNodes || node.parent?.childNodes || []) {\n    const childNodeParent = elDefGetParent(childNode);\n\n    if (!isDirect && !elDefCompare(elDef, childNodeParent)) {\n      continue;\n    }\n    if (childNodeParent && !elDefCompare(elDef, childNodeParent)) {\n      continue;\n    }\n\n    children.push(childNode);\n  }\n\n  if ((node as any).parent?.name === 'BODY') {\n    const childNodes: any[] = (node as any).parent.childNodes;\n    let start = childNodes.length;\n    let end = 0;\n    for (let i = childNodes.length - 1; i >= 0; i -= 1) {\n      const childNode = childNodes[i];\n      if (childNode.nativeNode.nodeName === '#comment') {\n        end = i;\n      } else if (childNode.nativeNode === node.nativeNode) {\n        start = i + 1;\n        break;\n      }\n    }\n    for (let i = start; i < end; i += 1) {\n      children.push(childNodes[i]);\n    }\n  }\n\n  return children;\n};\n","import { MockedDebugNode } from '../../mock-render/types';\n\nimport elDefCompare from './el-def-compare';\nimport elDefGetNode from './el-def-get-node';\nimport elDefGetParent from './el-def-get-parent';\n\nconst detectParent = (node: MockedDebugNode, parent: MockedDebugNode | undefined): MockedDebugNode | undefined => {\n  if (parent) {\n    return parent;\n  }\n\n  const expected = elDefGetParent(node);\n  const currentParent = node.parent ? elDefGetNode(node.parent) : undefined;\n  if (node.parent && elDefCompare(expected, currentParent)) {\n    return node.parent;\n  }\n  for (const childNode of node.parent?.childNodes || []) {\n    const childElDef = elDefGetNode(childNode);\n    if (elDefCompare(expected, childElDef)) {\n      return childNode;\n    }\n  }\n\n  return undefined;\n};\n\nexport default ((): typeof detectParent => detectParent)();\n","import { MockedDebugNode } from '../../mock-render/types';\n\nimport detectTextNode from './detect-text-node';\nimport nestedCheckChildren from './nested-check-children';\nimport nestedCheckParent from './nested-check-parent';\n\nconst nestedCheck = (\n  node: MockedDebugNode | null | undefined,\n  parent: MockedDebugNode | undefined,\n  check: (node: MockedDebugNode, parent?: MockedDebugNode) => void | boolean,\n  includeTextNode = false,\n): boolean => {\n  if (!node) {\n    return false;\n  }\n  if (!includeTextNode && detectTextNode(node)) {\n    return false;\n  }\n  if (check(node, nestedCheckParent(node, parent))) {\n    return true;\n  }\n\n  for (const childNode of nestedCheckChildren(node)) {\n    if (nestedCheck(childNode, node, check, includeTextNode)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nexport default ((): typeof nestedCheck => nestedCheck)();\n","import { DebugNode } from '@angular/core';\n\nimport { DebugNodeSelector } from '../../common/core.types';\nimport mockHelperFind from '../find/mock-helper.find';\nimport funcGetLastFixture from '../func.get-last-fixture';\n\nimport nestedCheck from './nested-check';\n\nexport default (\n  sel: DebugNode | DebugNodeSelector,\n  callback: (node: DebugNode, parent?: DebugNode) => void | boolean,\n  includeTextNode = false,\n): void => {\n  const el = mockHelperFind(funcGetLastFixture(), sel, undefined);\n  nestedCheck(el, undefined, callback, includeTextNode);\n};\n","import isDebugNode from './format/is-debug-node';\nimport isFixture from './format/is-fixture';\nimport funcGetLastFixture from './func.get-last-fixture';\n\nconst isSelector = (value: any): boolean => {\n  if (typeof value === 'string') {\n    return true;\n  }\n  if (Array.isArray(value) && typeof value[0] === 'string') {\n    return true;\n  }\n  if (isFixture(value)) {\n    return true;\n  }\n  if (isDebugNode(value)) {\n    return true;\n  }\n\n  return true;\n};\n\nexport default (args: any[], isValidValue: (value: any) => boolean, defaultNotFoundValue?: any): [any, any, any] => {\n  let el;\n  let sel;\n  let notFoundValue = defaultNotFoundValue;\n  if (args.length === 3) {\n    [el, sel, notFoundValue] = args;\n  } else if (args.length === 1) {\n    el = funcGetLastFixture();\n    [sel] = args;\n  } else if (isValidValue(args[1]) && isSelector(args[0])) {\n    [el, sel] = args;\n  } else {\n    el = funcGetLastFixture();\n    [sel, notFoundValue] = args;\n  }\n\n  return [el, sel, notFoundValue];\n};\n","import { DebugNode, Directive } from '@angular/core';\n\nimport coreInjector from '../common/core.injector';\nimport coreReflectDirectiveResolve from '../common/core.reflect.directive-resolve';\nimport funcGetType from '../common/func.get-type';\n\nconst getMeta = (token: any): Directive | undefined => {\n  try {\n    return coreReflectDirectiveResolve(token);\n  } catch {\n    return undefined;\n  }\n};\n\nexport default (el: DebugNode | null | undefined, token: any): Directive | undefined => {\n  // istanbul ignore if\n  if (!el) {\n    return undefined;\n  }\n\n  try {\n    const provider = funcGetType(token);\n    const instance = coreInjector(provider, el.injector);\n\n    return getMeta(instance.constructor);\n  } catch {\n    return undefined;\n  }\n};\n","import { MockedDebugNode } from '../../mock-render/types';\n\nexport default (node: MockedDebugNode): string[] => {\n  return (node.injector as any).elDef ? Object.keys((node.injector as any).elDef.element.publicProviders) : [];\n};\n","import { DirectiveIo } from '../../common/core.types';\nimport { MockedDebugNode } from '../../mock-render/types';\nimport funcParseProviderTokensDirectives from '../func.parse-provider-tokens-directives';\n\nexport default (node: MockedDebugNode, key: string): [Array<DirectiveIo>, string[], number] => {\n  const config = (node.injector as any).elDef.element.publicProviders[key];\n  const token = config.provider.value;\n  if (!token) {\n    return [[], [], 0];\n  }\n  const meta = funcParseProviderTokensDirectives(node, token);\n\n  const requiredAttributes = config.bindings.map((binding: any) => binding.nonMinifiedName || binding.name);\n\n  return [meta?.inputs || [], requiredAttributes, config.nodeIndex];\n};\n","import funcDirectiveIoParse from '../../common/func.directive-io-parse';\nimport { MockedDebugNode } from '../../mock-render/types';\nimport funcParseProviderTokensDirectives from '../func.parse-provider-tokens-directives';\n\nimport funcGetPublicProviderKeys from './func.get-public-provider-keys';\nimport funcParseInputsAndRequiresAttributes from './func.parse-inputs-and-requires-attributes';\n\nconst collectSelectors = (node: MockedDebugNode): string[] => {\n  const selectors: string[] = [];\n\n  for (const token of node.providerTokens) {\n    const meta = funcParseProviderTokensDirectives(node, token);\n    if (meta?.selector && selectors.indexOf(meta.selector) === -1) {\n      selectors.push(meta.selector);\n    }\n  }\n\n  return selectors;\n};\n\nconst collectAttributesClassic = (node: MockedDebugNode): string[] => {\n  const result: string[] = [];\n\n  for (const key of funcGetPublicProviderKeys(node)) {\n    const [inputs, expectedAttributes] = funcParseInputsAndRequiresAttributes(node, key);\n    for (const input of inputs) {\n      const { name, alias } = funcDirectiveIoParse(input);\n      const attr = alias || name;\n      if (expectedAttributes.indexOf(name) !== -1 && result.indexOf(attr) === -1) {\n        result.push(attr);\n      }\n    }\n  }\n\n  return result;\n};\n\nconst collectAttributesIvy = (node: MockedDebugNode): string[] => {\n  const result: string[] = [];\n\n  const attrs = (node.injector as any)._tNode?.attrs || [];\n  let step = 2;\n  for (let index = 0; index < attrs.length; index += step) {\n    // 3 is a divider between static and dynamic bindings\n    if (typeof attrs[index] === 'number') {\n      step = 1;\n      continue;\n    }\n    const attr = attrs[index];\n    if ((node.injector as any)._tNode.inputs?.[attr] && result.indexOf(attr) === -1) {\n      result.push(attr);\n    }\n  }\n\n  return result;\n};\n\nexport default (node: MockedDebugNode): [string[], string[]] => {\n  const selectors = collectSelectors(node);\n  const attributes = [...collectAttributesClassic(node), ...collectAttributesIvy(node)];\n\n  return [selectors, attributes];\n};\n","import { MockedDebugNode } from '../../mock-render/types';\n\nimport detectAttributeInSelectors from './detect-attribute-in-selectors';\nimport detectSelectorsFromNode from './detect-selectors-from-node';\n\nexport default (attribute: string): ((node: MockedDebugNode) => boolean) =>\n  node => {\n    const [selectors, attributes] = detectSelectorsFromNode(node);\n\n    if (attributes.indexOf(attribute) !== -1) {\n      return true;\n    }\n\n    if (detectAttributeInSelectors(selectors, attribute)) {\n      return true;\n    }\n\n    return false;\n  };\n","export default (selectors: string[], query: string): boolean => {\n  for (const selector of selectors) {\n    const attributes = selector.match(/\\[([^=\\]]+)/g);\n    if (!attributes) {\n      continue;\n    }\n\n    for (const attribute of attributes) {\n      if (attribute === `[${query}`) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n","import funcDirectiveIoParse from '../../common/func.directive-io-parse';\nimport { MockedDebugNode } from '../../mock-render/types';\n\nimport funcGetPublicProviderKeys from './func.get-public-provider-keys';\nimport funcParseInputsAndRequiresAttributes from './func.parse-inputs-and-requires-attributes';\n\nconst detectInClassic = (node: MockedDebugNode, attribute: string, value: any): boolean => {\n  for (const key of funcGetPublicProviderKeys(node)) {\n    const [inputs, expectedAttributes, nodeIndex] = funcParseInputsAndRequiresAttributes(node, key);\n    for (const input of inputs) {\n      const { name, alias } = funcDirectiveIoParse(input);\n      if (attribute !== (alias || name) || expectedAttributes.indexOf(name) === -1) {\n        continue;\n      }\n      if (value === (node.injector as any).view.nodes[nodeIndex].instance[name]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nconst detectInIvy = (node: MockedDebugNode, attribute: string, value: any): boolean => {\n  const attrs = (node.injector as any)._tNode?.attrs || [];\n  let step = 2;\n  for (let index = 0; index < attrs.length; index += step) {\n    // 3 is a divider between static and dynamic bindings\n    if (typeof attrs[index] === 'number') {\n      step = 1;\n      continue;\n    }\n    const attr = attrs[index];\n    if (attr !== attribute || !(node.injector as any)._tNode.inputs?.[attr]) {\n      continue;\n    }\n    const [attrIndex, attrProp] = (node.injector as any)._tNode.inputs[attr];\n\n    if (value === (node.injector as any)._lView?.[attrIndex][attrProp]) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nexport default (attribute: string, value: any): ((node: MockedDebugNode) => boolean) =>\n  node => {\n    if (detectInIvy(node, attribute, value)) {\n      return true;\n    }\n\n    return detectInClassic(node, attribute, value);\n  };\n","import coreInjector from '../../common/core.injector';\nimport { AnyType } from '../../common/core.types';\nimport { getSourceOfMock } from '../../common/func.get-source-of-mock';\nimport { MockedDebugNode } from '../../mock-render/types';\n\nexport default (declaration: AnyType<any>): ((node: MockedDebugNode) => boolean) => {\n  const source = getSourceOfMock(declaration);\n\n  return node =>\n    !!node && node.providerTokens.indexOf(source) !== -1 && coreInjector(source, node.injector) !== undefined;\n};\n","import { MockedDebugNode } from '../../mock-render/types';\n\nexport default (id: string): ((node: MockedDebugNode) => boolean) =>\n  node => {\n    return !!node.references[id];\n  };\n","const regExp = new RegExp('\\\\[.*?\\\\]', 'g');\n\nexport default (selectors: string[], query: string): boolean => {\n  for (const selector of selectors) {\n    const attributes = selector.replace(regExp, '').split(',');\n\n    for (const attribute of attributes) {\n      if (attribute.trim() === query) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n","import { AnyType } from '../../common/core.types';\nimport { MockedDebugNode } from '../../mock-render/types';\n\nimport crawlByAttribute from './crawl-by-attribute';\nimport crawlByAttributeValue from './crawl-by-attribute-value';\nimport crawlByDeclaration from './crawl-by-declaration';\nimport crawlById from './crawl-by-id';\nimport crawlByTagName from './crawl-by-tag-name';\n\ntype SELECTOR = string | AnyType<any> | [any] | [any, any];\n\nconst isCrawlByAttribute = (selector: SELECTOR): selector is [string] => {\n  return Array.isArray(selector) && selector.length === 1 && typeof selector[0] === 'string';\n};\n\nconst isCrawlByAttributeValue = (selector: SELECTOR): selector is [string, any] => {\n  return Array.isArray(selector) && selector.length === 2 && typeof selector[0] === 'string';\n};\n\nconst isCrawlById = (selector: SELECTOR): selector is string => {\n  return typeof selector === 'string' && selector.indexOf('#') === 0 && selector.length > 1;\n};\n\nconst isCrawlByTagName = (selector: SELECTOR): selector is string => {\n  return typeof selector === 'string' && selector.indexOf('#') !== 0 && selector.length > 0;\n};\n\nconst isCrawlByDeclaration = (selector: SELECTOR): selector is AnyType<any> => {\n  return typeof selector === 'function';\n};\n\nexport default (selector: SELECTOR): ((node: MockedDebugNode) => boolean) => {\n  if (isCrawlByAttribute(selector)) {\n    return crawlByAttribute(selector[0]);\n  }\n  if (isCrawlByAttributeValue(selector)) {\n    return crawlByAttributeValue(selector[0], selector[1]);\n  }\n  if (isCrawlById(selector)) {\n    return crawlById(selector.slice(1));\n  }\n  if (isCrawlByTagName(selector)) {\n    return crawlByTagName(selector);\n  }\n  if (isCrawlByDeclaration(selector)) {\n    return crawlByDeclaration(selector);\n  }\n\n  throw new Error('Unknown selector');\n};\n","import { MockedDebugNode } from '../../mock-render/types';\n\nimport detectSelectorsFromNode from './detect-selectors-from-node';\nimport detectTagNameInSelectors from './detect-tag-name-in-selectors';\n\nexport default (attribute: string): ((node: MockedDebugNode) => boolean) =>\n  node => {\n    const [selectors] = detectSelectorsFromNode(node);\n\n    return detectTagNameInSelectors(selectors, attribute);\n  };\n","export default (value: any) => {\n  if (typeof value === 'string') {\n    return true;\n  }\n  if (Array.isArray(value) && typeof value[0] === 'string') {\n    return true;\n  }\n\n  return typeof value === 'function';\n};\n","import mockHelperFind from '../find/mock-helper.find';\nimport funcGetLastFixture from '../func.get-last-fixture';\nimport funcParseFindArgs from '../func.parse-find-args';\nimport funcParseFindArgsName from '../func.parse-find-args-name';\n\nimport detectCrawler from './detect-crawler';\nimport detectTextNode from './detect-text-node';\nimport funcIsValidRevealSelector from './func.is-valid-reveal-selector';\nimport mockHelperCrawl from './mock-helper.crawl';\n\nconst defaultNotFoundValue = {}; // simulating Symbol\n\nexport default (...args: any[]): any => {\n  const [el, sel, notFoundValue] = funcParseFindArgs(args, funcIsValidRevealSelector, defaultNotFoundValue);\n  const root = mockHelperFind(funcGetLastFixture(), el, undefined);\n\n  const detector = detectCrawler(sel);\n\n  let result;\n  mockHelperCrawl(root, node => {\n    if (node !== root && !detectTextNode(node) && detector(node)) {\n      result = node;\n\n      return true;\n    }\n\n    return false;\n  });\n  if (result) {\n    return result;\n  }\n  if (notFoundValue !== defaultNotFoundValue) {\n    return notFoundValue;\n  }\n\n  throw new Error(`Cannot find a DebugElement via ngMocks.reveal(${funcParseFindArgsName(sel)})`);\n};\n","import funcIsMock from './func.is-mock';\nimport { MockControlValueAccessor } from './mock-control-value-accessor';\n\n/**\n * isMockControlValueAccessor helps to assert that an instance is a mock ControlValueAccessor\n * to perform valueChange or touch simulations.\n * Usually, it is used in if statements.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockControlValueAccessor\n * @see https://ng-mocks.sudo.eu/api/ngMocks/change\n * @see https://ng-mocks.sudo.eu/api/ngMocks/touch\n */\nexport const isMockControlValueAccessor = <T>(value: T): value is T & MockControlValueAccessor => {\n  if (!funcIsMock(value)) {\n    return false;\n  }\n\n  return !!value.__ngMocksConfig.isControlValueAccessor;\n};\n","export default (value: any): value is HTMLElement => {\n  return !!value && typeof value === 'object' && value.innerHTML !== undefined;\n};\n","import mockHelperStub from '../mock-helper.stub';\n\n/**\n * @see https://developer.mozilla.org/de/docs/Web/Events\n */\nconst preventBubble = ['focus', 'blur', 'load', 'unload', 'change', 'reset', 'scroll'];\n\n// istanbul ignore next\nconst customEvent = (event: string, params?: EventInit) => {\n  const initParams = {\n    bubbles: false,\n    cancelable: false,\n    ...params,\n  };\n  const eventObj = document.createEvent('CustomEvent');\n  eventObj.initCustomEvent(event, initParams.bubbles, initParams.cancelable, null);\n\n  return eventObj;\n};\n\nconst eventCtor =\n  typeof (Event as any) === 'function'\n    ? (event: string, init?: EventInit): CustomEvent => new CustomEvent(event, init)\n    : /* istanbul ignore next */ customEvent;\n\nconst keyMap: Record<string, object> = {\n  alt: {\n    altKey: true,\n    code: 'AltLeft',\n    key: 'Alt',\n    location: 1,\n    which: 18,\n  },\n  arrowdown: {\n    code: 'ArrowDown',\n    key: 'ArrowDown',\n    location: 0,\n    which: 40,\n  },\n  arrowleft: {\n    code: 'ArrowLeft',\n    key: 'ArrowLeft',\n    location: 0,\n    which: 37,\n  },\n  arrowright: {\n    code: 'ArrowRight',\n    key: 'ArrowRight',\n    location: 0,\n    which: 39,\n  },\n  arrowup: {\n    code: 'ArrowUp',\n    key: 'ArrowUp',\n    location: 0,\n    which: 38,\n  },\n  backspace: {\n    code: 'Backspace',\n    key: 'Backspace',\n    location: 0,\n    which: 8,\n  },\n  control: {\n    code: 'ControlLeft',\n    ctrlKey: true,\n    key: 'Control',\n    location: 1,\n    which: 17,\n  },\n  enter: {\n    code: 'Enter',\n    key: 'Enter',\n    location: 0,\n    which: 13,\n  },\n  esc: {\n    code: 'Escape',\n    key: 'Escape',\n    location: 0,\n    which: 27,\n  },\n  meta: {\n    code: 'MetaLeft',\n    key: 'Meta',\n    location: 1,\n    metaKey: true,\n    which: 91,\n  },\n  shift: {\n    code: 'ShiftLeft',\n    key: 'Shift',\n    location: 1,\n    shiftKey: true,\n    which: 16,\n  },\n  space: {\n    code: 'Space',\n    key: ' ',\n    location: 0,\n    which: 32,\n  },\n  tab: {\n    code: 'Tab',\n    key: 'Tab',\n    location: 0,\n    which: 9,\n  },\n};\nfor (let f = 1; f <= 12; f += 1) {\n  keyMap[`f${f}`] = {\n    code: `F${f}`,\n    key: `F${f}`,\n    location: 0,\n    which: f + 111,\n  };\n}\n\nconst getCode = (char: string): string => {\n  const code = char.codePointAt(0);\n  // a-z\n  if (code && code >= 97 && code <= 122) {\n    return `Key${char.toUpperCase()}`;\n  }\n  // A-Z\n  if (code && code >= 65 && code <= 90) {\n    return `Key${char.toUpperCase()}`;\n  }\n  // A-Z\n  if (code && code >= 48 && code <= 57) {\n    return `Digit${char}`;\n  }\n\n  return 'Unknown';\n};\n\nconst applyPayload = (event: Event, payload?: string): void => {\n  const keyData: object = {};\n  for (const key of payload ? payload.split('.') : []) {\n    let map = keyMap[key];\n    if (!map && key.length === 1) {\n      map = {\n        code: getCode(key),\n        key,\n      };\n    }\n\n    if (!map) {\n      throw new Error(`Unknown event part ${key}`);\n    }\n\n    mockHelperStub(keyData, map);\n  }\n\n  if (payload) {\n    mockHelperStub(event, keyData);\n  }\n};\n\nexport default (\n  event: string,\n  init?: EventInit,\n  overrides?: Partial<UIEvent | KeyboardEvent | MouseEvent | TouchEvent | Event>,\n): CustomEvent => {\n  const dot = event.indexOf('.');\n  const [eventName, eventPayload] = dot === -1 ? [event] : [event.slice(0, Math.max(0, dot)), event.slice(dot + 1)];\n  const eventObj = eventCtor(eventName, {\n    bubbles: preventBubble.indexOf(event) === -1,\n    cancelable: true,\n    ...init,\n  });\n  applyPayload(eventObj, eventPayload);\n\n  if (overrides) {\n    mockHelperStub(eventObj, overrides);\n  }\n\n  return eventObj;\n};\n","import { DebugElement } from '@angular/core';\nimport { ComponentFixture } from '@angular/core/testing';\n\nimport { DebugNodeSelector } from '../../common/core.types';\nimport mockHelperFind from '../find/mock-helper.find';\nimport isDebugNode from '../format/is-debug-node';\nimport isFixture from '../format/is-fixture';\nimport isHtmlElement from '../format/is-html-element';\nimport funcGetLastFixture from '../func.get-last-fixture';\nimport mockHelperStub from '../mock-helper.stub';\n\nimport mockHelperEvent from './mock-helper.event';\n\n/**\n * @see https://developer.mozilla.org/de/docs/Web/Events\n */\nconst preventBubble = ['focus', 'blur', 'load', 'unload', 'change', 'reset', 'scroll'];\n\nconst toEventObj = (event: string | UIEvent | KeyboardEvent | MouseEvent | TouchEvent | Event): Event => {\n  return typeof event === 'string'\n    ? mockHelperEvent(event, {\n        bubbles: preventBubble.indexOf(event) === -1,\n        cancelable: true,\n      })\n    : event;\n};\n\nconst getNativeElement = (\n  debugElement: DebugElement | HTMLElement | ComponentFixture<any> | undefined | null,\n): HTMLElement | undefined => {\n  if (isDebugNode(debugElement) || isFixture(debugElement)) {\n    return debugElement.nativeElement;\n  }\n  if (isHtmlElement(debugElement)) {\n    return debugElement;\n  }\n\n  return undefined;\n};\n\nexport default (\n  selector: DebugElement | HTMLElement | ComponentFixture<any> | DebugNodeSelector,\n  eventName: string | UIEvent | KeyboardEvent | MouseEvent | TouchEvent | Event,\n  payload?: Partial<UIEvent | KeyboardEvent | MouseEvent | TouchEvent | Event>,\n) => {\n  const debugElement = isHtmlElement(selector) ? selector : mockHelperFind(funcGetLastFixture(), selector, undefined);\n  const nativeElement = getNativeElement(debugElement);\n\n  if (!nativeElement) {\n    throw new Error(\n      `Cannot trigger ${typeof eventName === 'string' ? eventName : eventName.type} event undefined element`,\n    );\n  }\n\n  // nothing to emit on disabled elements\n  if ((nativeElement as HTMLInputElement).disabled) {\n    return;\n  }\n\n  const event = toEventObj(eventName);\n  if (!event.target) {\n    mockHelperStub(event, {\n      target: nativeElement,\n    });\n  }\n  if (payload) {\n    mockHelperStub(event, payload);\n  }\n  nativeElement.dispatchEvent(event);\n};\n","import { DebugNode } from '@angular/core';\n\nimport coreForm from '../../common/core.form';\nimport coreInjector from '../../common/core.injector';\n\nconst message = [\n  'Cannot find ControlValueAccessor on the element.',\n  'If it is a mock input with [formControlName],',\n  'you need either to avoid mocking ReactiveFormsModule',\n  'or to avoid accessing the control in such a way,',\n  'because this tests ReactiveFormsModule instead of own implementation.',\n].join(' ');\n\nexport default (el: DebugNode): Record<keyof any, any> => {\n  const ngControl = coreForm && coreInjector(coreForm.NgControl, el.injector);\n  const valueAccessor = ngControl?.valueAccessor;\n  if (valueAccessor) {\n    return valueAccessor;\n  }\n\n  const formControlDirective = coreForm && coreInjector(coreForm.FormControlDirective, el.injector);\n  if (formControlDirective?.form) {\n    return formControlDirective.form;\n  }\n\n  const ngModel = coreForm && coreInjector(coreForm.NgModel, el.injector);\n  if (ngModel) {\n    return ngModel;\n  }\n\n  throw new Error(message);\n};\n","import { DebugElement } from '@angular/core';\n\nimport coreForm from '../../common/core.form';\nimport { DebugNodeSelector } from '../../common/core.types';\nimport { isMockControlValueAccessor } from '../../common/func.is-mock-control-value-accessor';\nimport helperDefinePropertyDescriptor from '../../mock-service/helper.define-property-descriptor';\nimport helperExtractMethodsFromPrototype from '../../mock-service/helper.extract-methods-from-prototype';\nimport mockHelperTrigger from '../events/mock-helper.trigger';\nimport mockHelperFind from '../find/mock-helper.find';\nimport funcGetLastFixture from '../func.get-last-fixture';\nimport funcParseFindArgsName from '../func.parse-find-args-name';\nimport mockHelperStubMember from '../mock-helper.stub-member';\n\nimport funcGetVca from './func.get-vca';\n\n// default html behavior\nconst triggerInput = (el: DebugElement, value: any): void => {\n  mockHelperTrigger(el, 'focus');\n\n  const descriptor = Object.getOwnPropertyDescriptor(el.nativeElement, 'value');\n  mockHelperStubMember(el.nativeElement, 'value', value);\n  mockHelperTrigger(el, 'input');\n  mockHelperTrigger(el, 'change');\n  if (descriptor) {\n    helperDefinePropertyDescriptor(el.nativeElement, 'value', descriptor);\n    el.nativeElement.value = value;\n  }\n\n  mockHelperTrigger(el, 'blur');\n};\n\nconst handleKnown = (valueAccessor: any, value: any): boolean => {\n  if (coreForm && valueAccessor instanceof coreForm.AbstractControl) {\n    valueAccessor.setValue(value);\n\n    return true;\n  }\n\n  if (coreForm && valueAccessor instanceof coreForm.NgModel) {\n    valueAccessor.update.emit(value);\n\n    return true;\n  }\n\n  if (isMockControlValueAccessor(valueAccessor.instance)) {\n    valueAccessor.instance.__simulateChange(value);\n\n    return true;\n  }\n\n  return false;\n};\n\nconst hasListener = (el: DebugElement): boolean =>\n  el.listeners.some(listener => listener.name === 'input' || listener.name === 'change');\n\nconst keys = [\n  'onChange',\n  'onChangeCallback',\n  'onChangeCb',\n  'onChangeClb',\n  'onChangeFn',\n\n  '_onChange',\n  '_onChangeCallback',\n  '_onChangeCb',\n  '_onChangeClb',\n  '_onChangeFn',\n\n  'changeFn',\n  '_changeFn',\n\n  'onModelChange',\n\n  'cvaOnChange',\n  'cvaOnChangeCallback',\n  'cvaOnChangeCb',\n  'cvaOnChangeClb',\n  'cvaOnChangeFn',\n\n  '_cvaOnChange',\n  '_cvaOnChangeCallback',\n  '_cvaOnChangeCb',\n  '_cvaOnChangeClb',\n  '_cvaOnChangeFn',\n];\n\nexport default (selector: DebugNodeSelector, value: any, methodName?: string): void => {\n  const el = mockHelperFind(funcGetLastFixture(), selector, undefined);\n  if (!el) {\n    throw new Error(`Cannot find an element via ngMocks.change(${funcParseFindArgsName(selector)})`);\n  }\n\n  const valueAccessor = funcGetVca(el);\n  if (handleKnown(valueAccessor, value) || hasListener(el)) {\n    triggerInput(el, value);\n\n    return;\n  }\n\n  for (const key of methodName ? [methodName] : keys) {\n    if (typeof valueAccessor[key] === 'function') {\n      valueAccessor.writeValue(value);\n      valueAccessor[key](value);\n\n      return;\n    }\n  }\n\n  const methods = helperExtractMethodsFromPrototype(valueAccessor);\n  throw new Error(\n    [\n      'Unsupported type of ControlValueAccessor,',\n      `please ensure it has '${methodName || 'onChange'}' method.`,\n      `If it is a 3rd-party library, please provide the correct name of the method in the 'methodName' parameter.`,\n      'Possible Names: ' + methods.join(', ') + '.',\n    ].join(' '),\n  );\n};\n","import { DebugElement } from '@angular/core';\n\nimport coreForm from '../../common/core.form';\nimport { DebugNodeSelector } from '../../common/core.types';\nimport { isMockControlValueAccessor } from '../../common/func.is-mock-control-value-accessor';\nimport helperExtractMethodsFromPrototype from '../../mock-service/helper.extract-methods-from-prototype';\nimport mockHelperTrigger from '../events/mock-helper.trigger';\nimport mockHelperFind from '../find/mock-helper.find';\nimport funcGetLastFixture from '../func.get-last-fixture';\nimport funcParseFindArgsName from '../func.parse-find-args-name';\n\nimport funcGetVca from './func.get-vca';\n\n// default html behavior\nconst triggerTouch = (el: DebugElement): void => {\n  mockHelperTrigger(el, 'focus');\n  mockHelperTrigger(el, 'blur');\n};\n\nconst handleKnown = (valueAccessor: any): boolean => {\n  if (coreForm && valueAccessor instanceof coreForm.AbstractControl) {\n    valueAccessor.markAsTouched();\n\n    return true;\n  }\n\n  if (isMockControlValueAccessor(valueAccessor.instance)) {\n    valueAccessor.instance.__simulateTouch();\n\n    return true;\n  }\n\n  return false;\n};\n\nconst hasListener = (el: DebugElement): boolean =>\n  el.listeners.some(listener => listener.name === 'focus' || listener.name === 'blur');\n\nconst keys = [\n  'onTouched',\n  'onTouchedCallback',\n  'onTouchedCb',\n  'onTouchedClb',\n  'onTouchedFn',\n\n  '_onTouched',\n  '_onTouchedCallback',\n  '_onTouchedCb',\n  '_onTouchedClb',\n  '_onTouchedFn',\n\n  'markAsTouched',\n  '_markAsTouched',\n\n  'onModelTouched',\n\n  'cvaOnTouch',\n  'cvaOnTouchCallback',\n  'cvaOnTouchCb',\n  'cvaOnTouchClb',\n  'cvaOnTouchFn',\n\n  '_cvaOnTouch',\n  '_cvaOnTouchCallback',\n  '_cvaOnTouchCb',\n  '_cvaOnTouchClb',\n  '_cvaOnTouchFn',\n];\n\nexport default (sel: DebugElement | DebugNodeSelector, methodName?: string): void => {\n  const el = mockHelperFind(funcGetLastFixture(), sel, undefined);\n  if (!el) {\n    throw new Error(`Cannot find an element via ngMocks.touch(${funcParseFindArgsName(sel)})`);\n  }\n\n  const valueAccessor = funcGetVca(el);\n  if (handleKnown(valueAccessor) || hasListener(el)) {\n    triggerTouch(el);\n\n    return;\n  }\n\n  for (const key of methodName ? [methodName] : keys) {\n    if (typeof valueAccessor[key] === 'function') {\n      valueAccessor[key]();\n\n      return;\n    }\n  }\n\n  const methods = helperExtractMethodsFromPrototype(valueAccessor);\n  throw new Error(\n    [\n      'Unsupported type of ControlValueAccessor,',\n      `please ensure it has '${methodName || 'onTouched'}' method.`,\n      `If it is a 3rd-party library, please provide the correct name of the method in the 'methodName' parameter.`,\n      'Possible Names: ' + methods.join(', ') + '.',\n    ].join(' '),\n  );\n};\n","import { DebugElement } from '@angular/core';\n\nimport isDebugNode from '../format/is-debug-node';\n\nimport funcParseFindArgs from './func.parse-find-args';\nimport funcParseFindTerm from './func.parse-find-term';\n\nexport default (...args: any[]): DebugElement[] => {\n  const [el, sel] = funcParseFindArgs(args);\n  if (isDebugNode(sel)) {\n    return [sel as any];\n  }\n\n  return el?.queryAll(funcParseFindTerm(sel)) || [];\n};\n","import { DebugNode } from '@angular/core';\n\nexport default (node: DebugNode): DebugNode =>\n  node.nativeNode?.nodeName === '#text' && node.parent ? node.parent : node;\n","import { DebugNode } from '@angular/core';\n\nimport { AnyType } from '../common/core.types';\n\nconst detectGatherFlag = (gather: boolean, el: DebugNode | null, node: any): boolean => {\n  // LContainer for structural directives can be a trigger for pipes.\n  if (\n    el &&\n    el.nativeNode &&\n    el.nativeNode.nodeName === '#comment' &&\n    Array.isArray(node) &&\n    node[0] === el.nativeNode\n  ) {\n    return true;\n  }\n\n  // LContainer should stop the scan.\n  if (Array.isArray(node)) {\n    return false;\n  }\n\n  if (!el || !node.nodeName) {\n    return gather;\n  }\n\n  // checking if a commentNode belongs to the current element.\n  // it comes from structural directives.\n  if (node.nodeName === '#comment') {\n    return node === el.nativeNode;\n  }\n\n  // checking if a textNode belongs to the current element.\n  if (node.nodeName === '#text') {\n    return node.parentNode === el.nativeNode;\n  }\n\n  return false;\n};\n\nconst isNotObject = <T>(node: T): boolean => !node || typeof node !== 'object';\n\nconst shouldBeScanned = (scanned: any[], node: any): boolean => scanned.indexOf(node) === -1 && Array.isArray(node);\n\nconst scan = <T>(\n  {\n    result,\n    el,\n    nodes,\n    normalize,\n    proto,\n  }: {\n    el: DebugNode | null;\n    nodes: any[];\n    normalize: (item: T) => T;\n    proto: AnyType<T>;\n    result: T[];\n  },\n  gatherDefault: boolean,\n  scanned: any[] = [],\n): void => {\n  scanned.push(nodes);\n  let gather = gatherDefault;\n\n  let nodesLength = nodes.length;\n  if (nodes.length > 1 && nodes[1] && typeof nodes[1] === 'object' && nodes[1].bindingStartIndex) {\n    nodesLength = nodes[1].bindingStartIndex;\n  }\n\n  for (let index = 0; index < nodesLength; index += 1) {\n    const node = normalize(nodes[index]);\n    if (isNotObject(node)) {\n      continue;\n    }\n\n    if (shouldBeScanned(scanned, node) && Array.isArray(node)) {\n      scan({ result, el, nodes: node, normalize, proto }, gather, scanned);\n    }\n\n    gather = detectGatherFlag(gather, el, node);\n    if (!gather) {\n      continue;\n    }\n\n    if (result.indexOf(node) === -1 && node instanceof proto) {\n      result.push(node);\n    }\n  }\n};\n\nexport default (() => scan)();\n","import { DebugNode } from '@angular/core';\n\nimport { AnyType } from '../common/core.types';\n\nimport { Node } from './func.get-from-node';\nimport funcGetFromNodeElement from './func.get-from-node-element';\nimport funcGetFromNodeScan from './func.get-from-node-scan';\n\nconst detectContextByIndex = (rootView: any, index: number) => {\n  if (typeof rootView[1] === 'object' && rootView[20] === index) {\n    return rootView;\n  }\n\n  for (let i = 21; i < rootView.length; i += 1) {\n    const item = rootView[i];\n    if (Array.isArray(item) && typeof item[1] === 'object' && item[20] === index) {\n      return item;\n    }\n  }\n\n  return undefined;\n};\n\nconst detectContext = (node: DebugNode): any => {\n  let current = node;\n  let context = current.nativeNode?.__ngContext__;\n  while (context === undefined && current.parent) {\n    current = current.parent;\n    context = current.nativeNode.__ngContext__;\n  }\n  if (typeof context !== 'number') {\n    return context;\n  }\n  // welcome to A12 and its optimization\n  // https://github.com/angular/angular/pull/41358\n\n  const rootView = (current.injector as any)._lView;\n  if (Array.isArray(rootView)) {\n    return detectContextByIndex(rootView, context);\n  }\n\n  return undefined;\n};\n\nconst contextToNodes = (context: any): any => (Array.isArray(context) ? context : context?.lView);\n\nexport default <T>(result: T[], node: (DebugNode & Node) | null | undefined, proto: AnyType<T>): void => {\n  if (!node || node._debugContext) {\n    return;\n  }\n\n  const el = funcGetFromNodeElement(node);\n  funcGetFromNodeScan(\n    {\n      el,\n      nodes: contextToNodes(detectContext(node)) || [],\n      normalize: item => item,\n      proto,\n      result,\n    },\n    true,\n  );\n};\n","import { DebugNode } from '@angular/core';\n\nimport { AnyType } from '../common/core.types';\n\nimport { Node } from './func.get-from-node';\nimport funcGetFromNodeElement from './func.get-from-node-element';\nimport funcGetFromNodeScan from './func.get-from-node-scan';\n\nconst normalize = (item: any): any => {\n  if (!item || typeof item !== 'object') {\n    return item;\n  }\n\n  for (const key of ['renderElement', 'renderText', 'instance']) {\n    if (item[key]) {\n      return item[key];\n    }\n  }\n\n  return null;\n};\n\nexport default <T>(result: T[], node: (DebugNode & Node) | null | undefined, proto: AnyType<T>): void => {\n  if (!node || !node._debugContext) {\n    return;\n  }\n\n  const el = funcGetFromNodeElement(node);\n\n  funcGetFromNodeScan(\n    {\n      el,\n      nodes: node._debugContext.view.nodes,\n      normalize,\n      proto,\n      result,\n    },\n    true,\n  );\n};\n","import { DebugNode } from '@angular/core';\n\nimport { AnyDeclaration } from '../common/core.types';\nimport { isNgDef } from '../common/func.is-ng-def';\n\nimport funcGetFromNodeInjector from './func.get-from-node-injector';\nimport funcGetFromNodeIvy from './func.get-from-node-ivy';\nimport funcGetFromNodeStandard from './func.get-from-node-standard';\n\nexport interface Node {\n  _debugContext?: {\n    elDef: {\n      nodeIndex: number;\n    };\n    nodeDef: {\n      nodeIndex: number;\n    };\n    nodeIndex: number;\n    view: {\n      nodes: Array<{\n        instance?: any;\n        renderElement?: any;\n        renderText?: any;\n        value?: any;\n      }>;\n    };\n  };\n  parent?: (DebugNode & Node) | null;\n}\n\nexport default <T>(result: T[], node: DebugNode & Node, proto: AnyDeclaration<T>): T[] => {\n  funcGetFromNodeInjector(result, node, proto);\n  if (!isNgDef(proto, 't') && typeof proto !== 'string') {\n    funcGetFromNodeStandard(result, node, proto);\n    funcGetFromNodeIvy(result, node, proto);\n  }\n\n  return result;\n};\n","import { DebugNode, Injector } from '@angular/core';\n\nimport coreInjector from '../common/core.injector';\nimport { AnyDeclaration } from '../common/core.types';\nimport { isNgDef } from '../common/func.is-ng-def';\n\nimport { Node } from './func.get-from-node';\n\nconst getParentWithInjector = (node: (DebugNode & Node) | null): Injector | undefined => {\n  let parent: DebugNode | null = node;\n  while (parent?.injector.constructor.name === 'NullInjector') {\n    parent = parent.parent;\n  }\n\n  if (parent) {\n    return parent.injector;\n  }\n\n  return undefined;\n};\n\nexport default <T>(result: T[], node: DebugNode & Node, proto: AnyDeclaration<T>): void => {\n  if (!node.injector || node.injector.constructor.name === 'NullInjector') {\n    return;\n  }\n\n  const parentInjector = getParentWithInjector(node.parent);\n  const parentInstance = parentInjector ? coreInjector(proto, parentInjector) : undefined;\n  const instance = coreInjector(proto, node.injector);\n  // a way to avoid inherited injections\n  if (parentInstance === instance) {\n    return;\n  }\n\n  if (isNgDef(proto, 't') && instance !== undefined) {\n    result.push(instance);\n  } else if (instance !== undefined && result.indexOf(instance) === -1) {\n    result.push(instance);\n  }\n};\n","import { isNgDef } from '../../common/func.is-ng-def';\n\nexport default (value: any): boolean => {\n  return typeof value === 'function' || isNgDef(value, 't');\n};\n","import { getInjection } from '../../common/core.helpers';\nimport { Type } from '../../common/core.types';\nimport { getSourceOfMock } from '../../common/func.get-source-of-mock';\nimport { isNgDef } from '../../common/func.is-ng-def';\nimport mockHelperCrawl from '../crawl/mock-helper.crawl';\nimport mockHelperFind from '../find/mock-helper.find';\nimport funcGetFromNode from '../func.get-from-node';\nimport funcGetLastFixture from '../func.get-last-fixture';\nimport funcParseFindArgs from '../func.parse-find-args';\nimport funcParseFindArgsName from '../func.parse-find-args-name';\n\nimport funcIsValidFindInstanceSelector from './func.is-valid-find-instance-selector';\n\nconst defaultNotFoundValue = {}; // simulating Symbol\n\nexport default <T>(...args: any[]): T => {\n  const [el, sel, notFoundValue] = funcParseFindArgs(args, funcIsValidFindInstanceSelector, defaultNotFoundValue);\n  if (typeof sel !== 'function' && !isNgDef(sel, 't') && typeof sel !== 'string') {\n    throw new Error('Only classes or tokens are accepted');\n  }\n\n  const declaration: Type<T> = getSourceOfMock(sel);\n  const result: T[] = [];\n  const fixture = funcGetLastFixture();\n  if (fixture) {\n    mockHelperCrawl(\n      mockHelperFind(fixture, el, undefined),\n      (node, parent) => {\n        funcGetFromNode(result, node, declaration);\n        if (result.length === 0 && parent && parent.nativeNode.nodeName === '#comment') {\n          funcGetFromNode(result, parent, declaration);\n        }\n\n        return result.length > 0;\n      },\n      true,\n    );\n  } else {\n    try {\n      result.push(getInjection(declaration));\n    } catch (error) {\n      // forwarding unexpected errors: https://github.com/help-me-mom/ng-mocks/issues/7041\n      if (!error || typeof error !== 'object' || (error as any).ngTempTokenPath === undefined) {\n        throw error;\n      }\n    }\n  }\n\n  if (result.length > 0) {\n    return result[0];\n  }\n  if (notFoundValue !== defaultNotFoundValue) {\n    return notFoundValue;\n  }\n  throw new Error(`Cannot find an instance via ngMocks.findInstance(${funcParseFindArgsName(sel)})`);\n};\n","import nestedCheckChildren from '../crawl/nested-check-children';\n\nimport handleArray from './handle-array';\nimport isDebugNode from './is-debug-node';\nimport isFixture from './is-fixture';\nimport { FORMAT_SET, FORMAT_SINGLE } from './types';\n\nexport default (handlePrimitives: any) =>\n  (html: any, outer = false) => {\n    const format = (value: Text | Comment | FORMAT_SINGLE | FORMAT_SET, innerOuter = false): any => {\n      if (Array.isArray(value)) {\n        return handleArray(format, value);\n      }\n      if (isFixture(value)) {\n        return format(value.debugElement, outer);\n      }\n      const result = handlePrimitives(format, value, innerOuter);\n      if (result !== undefined) {\n        return result;\n      }\n\n      if (isDebugNode(value) && value.nativeNode.nodeName === '#comment') {\n        return format(nestedCheckChildren(value), true);\n      }\n\n      return isDebugNode(value) ? format(value.nativeNode, innerOuter) : '';\n    };\n\n    return Array.isArray(html) ? html.map((item: any) => format(item, outer)) : format(html, outer);\n  };\n","export default (format: any, html: any) => {\n  return format((html as any[]).map(item => format(item, true)).join(''));\n};\n","export default (html: Text): string => html.nodeValue ?? html.textContent ?? html.wholeText;\n","export default (value: any): value is Text => {\n  return !!value && typeof value === 'object' && value.nodeName === '#text';\n};\n","import formatHandler from './format-handler';\nimport handleText from './handle-text';\nimport isHtmlElement from './is-html-element';\nimport isText from './is-text';\n\nconst normalizeValue = (html: string | undefined): string =>\n  html\n    ? html\n        .replace(new RegExp('\\\\s+', 'mg'), ' ')\n        .replace(new RegExp('<!--(.|\\\\n|\\\\r)*?-->|<!--(.|\\\\n|\\\\r)*', 'mg'), '')\n        .replace(new RegExp('\\\\s+', 'mg'), ' ')\n        .replace(new RegExp('>\\\\s+<', 'mg'), '><')\n        .replace(new RegExp('\"\\\\s+>', 'mg'), '\">')\n    : '';\n\nconst normalizeText = (text: string): string =>\n  text\n    .replace(new RegExp('&', 'mg'), '&amp;')\n    .replace(new RegExp('\"', 'mg'), '&quot;')\n    .replace(new RegExp('<', 'mg'), '&lt;')\n    .replace(new RegExp('>', 'mg'), '&gt;')\n    .replace(new RegExp(\"'\", 'mg'), '&#39;');\n\nconst getElementValue = (element: HTMLElement, outer: boolean): string =>\n  outer ? element.outerHTML : element.innerHTML;\n\nconst handlePrimitives = (format: any, value: any, outer: boolean): string | undefined => {\n  if (typeof value === 'string' || value === undefined) {\n    const result = normalizeValue(value);\n\n    return outer ? result : result.trim();\n  }\n  if (isHtmlElement(value)) {\n    return format(getElementValue(value, outer));\n  }\n  if (isText(value)) {\n    return handlePrimitives(format, normalizeText(handleText(value)), outer);\n  }\n\n  return undefined;\n};\n\nexport default (() => formatHandler(handlePrimitives))();\n","import formatHandler from './format-handler';\nimport handleText from './handle-text';\nimport isHtmlElement from './is-html-element';\nimport isText from './is-text';\n\nconst normalizeValue = (html: string | undefined): string => (html ? html.replace(new RegExp('\\\\s+', 'mg'), ' ') : '');\n\nconst getElementValue = (element: HTMLElement, outer: boolean): string => {\n  const value = element.textContent ?? '';\n\n  return outer ? value : value.trim();\n};\n\nconst handlePrimitives = (format: any, value: any, outer: boolean): string | undefined => {\n  if (typeof value === 'string' || value === undefined) {\n    const result = normalizeValue(value);\n\n    return outer ? result : result.trim();\n  }\n  if (isHtmlElement(value)) {\n    return format(getElementValue(value, outer));\n  }\n  if (isText(value)) {\n    return handlePrimitives(format, handleText(value), outer);\n  }\n\n  return undefined;\n};\n\nexport default (() => formatHandler(handlePrimitives))();\n","import { registerMockFunction } from '../mock-service/helper.mock-service';\nimport { CustomMockFunction } from '../mock-service/types';\n\ntype param = 'jasmine' | 'jest' | 'default' | 'reset' | CustomMockFunction;\n\nconst calls: param[] = [];\n\nexport default (type: param) => {\n  if (type === 'reset') {\n    calls.pop();\n  } else {\n    calls.push(type);\n  }\n  const action: param | undefined = calls[calls.length - 1];\n\n  if (action === 'jasmine') {\n    return registerMockFunction(mockName => jasmine.createSpy(mockName));\n  }\n  // istanbul ignore if: because it is run with jasmine\n  if (action === 'jest') {\n    return registerMockFunction(name => jest.fn().mockName(name));\n  }\n  if (!action || action === 'default' || action === 'reset') {\n    return registerMockFunction();\n  }\n\n  return registerMockFunction(action);\n};\n","/* eslint-disable no-console */\n\nimport coreDefineProperty from '../common/core.define-property';\n\n// Thanks Ivy, it does not throw an error, and we have to use injector.\nexport default (defaultMethods: Array<keyof typeof console>, factory: (name: string) => any) =>\n  (...methods: Array<keyof typeof console>): void => {\n    const backup: Array<keyof typeof console> = [];\n\n    beforeEach(() => {\n      for (const method of defaultMethods) {\n        if (methods.indexOf(method) === -1) {\n          methods.push(method);\n        }\n      }\n\n      for (const method of methods) {\n        coreDefineProperty(console, `__ngMocksBackup_${method}`, (console as any)[`__ngMocksBackup_${method}`] || []);\n        (console as any)[`__ngMocksBackup_${method}`].push(console[method]);\n        backup.push(method);\n        console[method] = factory(method) as never;\n      }\n    });\n\n    afterEach(() => {\n      for (const method of backup) {\n        console[method] = (console as any)[`__ngMocksBackup_${method}`].pop();\n      }\n      backup.splice(0, backup.length);\n    });\n  };\n","import helperMockService from '../mock-service/helper.mock-service';\n\nimport mockHelperConsole from './mock-helper.console';\n\nconst factory = (propName: string) => helperMockService.mockFunction(`console.${propName}`);\n\n// Thanks Ivy, it does not throw an error, and we have to use injector.\nexport default mockHelperConsole(['log'], factory);\n","import coreDefineProperty from '../common/core.define-property';\n\nimport mockHelperConsole from './mock-helper.console';\n\nconst factory =\n  (propName: string) =>\n  (...args: any[]) => {\n    const error = new Error(args.join(' '));\n    coreDefineProperty(error, 'ngMocksConsoleCatch', propName);\n    throw error;\n  };\n\n// Thanks Ivy, it does not throw an error, and we have to use injector.\nexport default mockHelperConsole(['warn', 'error'], factory);\n","import { Injector } from '@angular/core';\n\nimport { flatten } from '../common/core.helpers';\nimport { AnyDeclaration } from '../common/core.types';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nexport default <T>(\n  def: AnyDeclaration<T> | string | Array<AnyDeclaration<T> | string>,\n  callback?: (instance: undefined | T, injector: Injector) => void | Partial<T>,\n): void => {\n  const map = ngMocksUniverse.getOverrides();\n  for (const item of flatten(def)) {\n    if (callback) {\n      const set: Set<any> = map.has(item) ? map.get(item) : new Set();\n      set.add(callback);\n      map.set(item, set);\n    } else {\n      map.delete(item);\n    }\n  }\n};\n","import { getTestBed, TestBed, TestBedStatic, TestModuleMetadata } from '@angular/core/testing';\n\nimport coreDefineProperty from '../common/core.define-property';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nconst hooks: {\n  after: Array<\n    (original: TestBedStatic['resetTestingModule'], instance: TestBedStatic) => TestBedStatic['resetTestingModule']\n  >;\n  before: Array<\n    (\n      original: TestBedStatic['configureTestingModule'],\n      instance: TestBedStatic,\n    ) => TestBedStatic['configureTestingModule']\n  >;\n} = ngMocksUniverse.global.get('faster-hooks') || {\n  after: [],\n  before: [],\n};\nngMocksUniverse.global.set('faster-hooks', hooks);\n\nconst configureTestingModule =\n  (\n    original: TestBedStatic['configureTestingModule'],\n    instance: TestBedStatic,\n  ): TestBedStatic['configureTestingModule'] =>\n  (moduleDef: TestModuleMetadata) => {\n    if ((TestBed as any).ngMocksFasterLock) {\n      return original.call(instance, moduleDef);\n    }\n\n    ngMocksUniverse.global.set('bullet:customized', true);\n\n    let final = original;\n    for (const callback of hooks.before) {\n      final = callback(final, instance);\n    }\n\n    try {\n      coreDefineProperty(TestBed, 'ngMocksFasterLock', true);\n\n      return final.call(instance, moduleDef);\n    } finally {\n      coreDefineProperty(TestBed, 'ngMocksFasterLock', undefined);\n    }\n  };\n\nconst resetTestingModule =\n  (original: TestBedStatic['resetTestingModule'], instance: TestBedStatic): TestBedStatic['resetTestingModule'] =>\n  () => {\n    if ((TestBed as any).ngMocksFasterLock) {\n      return original.call(instance);\n    }\n\n    if (ngMocksUniverse.global.has('bullet')) {\n      if (ngMocksUniverse.global.has('bullet:customized')) {\n        ngMocksUniverse.global.set('bullet:reset', true);\n      }\n\n      return instance;\n    }\n    ngMocksUniverse.global.delete('bullet:customized');\n    ngMocksUniverse.global.delete('bullet:reset');\n\n    let final = original;\n    for (const callback of hooks.after) {\n      final = callback(final, instance);\n    }\n\n    try {\n      coreDefineProperty(TestBed, 'ngMocksFasterLock', true);\n\n      return final.call(instance);\n    } finally {\n      coreDefineProperty(TestBed, 'ngMocksFasterLock', undefined);\n    }\n  };\n\nexport default () => {\n  if (!(TestBed as any).ngMocksFasterInstalled) {\n    TestBed.configureTestingModule = configureTestingModule(TestBed.configureTestingModule as never, TestBed as never);\n    TestBed.resetTestingModule = resetTestingModule(TestBed.resetTestingModule as never, TestBed as never);\n    coreDefineProperty(TestBed, 'ngMocksFasterInstalled', true);\n  }\n\n  const testBed = getTestBed();\n  if (!(testBed as any).ngMocksFasterInstalled) {\n    testBed.configureTestingModule = configureTestingModule(testBed.configureTestingModule as never, testBed as never);\n    testBed.resetTestingModule = resetTestingModule(testBed.resetTestingModule as never, testBed as never);\n    coreDefineProperty(testBed, 'ngMocksFasterInstalled', true);\n  }\n\n  return hooks;\n};\n","import { getTestBed } from '@angular/core/testing';\n\nexport default (): void => {\n  const testBed: any = getTestBed();\n  testBed._instantiated = false;\n  testBed._moduleFactory = undefined;\n  testBed._testModuleRef = null;\n};\n","import { ComponentFixture, getTestBed, TestBed } from '@angular/core/testing';\n\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport mockHelperFasterInstall from './mock-helper.faster-install';\nimport mockHelperFlushTestBed from './mock-helper.flush-test-bed';\n\nconst resetFixtures = (id: never) => {\n  const activeFixtures: Array<ComponentFixture<any> & { ngMocksStackId?: any }> =\n    (getTestBed() as any)._activeFixtures || /* istanbul ignore next */ [];\n\n  let active = 0;\n  for (let i = activeFixtures.length - 1; i >= 0; i -= 1) {\n    if (!activeFixtures[i].ngMocksStackId || activeFixtures[i].ngMocksStackId === id) {\n      activeFixtures[i].ngMocksStackId = undefined;\n      activeFixtures[i].destroy();\n      activeFixtures.splice(i, 1);\n    } else {\n      active += 1;\n    }\n  }\n  if (active === 0) {\n    mockHelperFlushTestBed();\n  }\n};\n\nconst idAdd = (id: any) => {\n  const bulletStack: any[] = ngMocksUniverse.global.get('bullet:stack') ?? [];\n  bulletStack.push(id);\n  ngMocksUniverse.global.set('bullet:stack', bulletStack);\n  ngMocksUniverse.global.set('bullet:stack:id', id);\n};\nconst idRemove = (id: any) => {\n  const bulletStack: any[] = ngMocksUniverse.global.get('bullet:stack');\n  bulletStack.splice(bulletStack.indexOf(id), 1);\n  if (bulletStack.length > 0) {\n    ngMocksUniverse.global.set('bullet:stack:id', bulletStack[bulletStack.length - 1]);\n  } else {\n    ngMocksUniverse.global.delete('bullet:stack:id');\n  }\n\n  resetFixtures(id as never);\n};\n\nexport default () => {\n  mockHelperFasterInstall();\n\n  const idAll = {};\n  const idEach = {};\n\n  beforeAll(() => {\n    if (ngMocksUniverse.global.has('bullet:customized')) {\n      TestBed.resetTestingModule();\n    }\n    ngMocksUniverse.global.set('bullet', true);\n    idAdd(idAll);\n  });\n\n  beforeEach(() => {\n    idAdd(idEach);\n  });\n  afterEach(() => {\n    idRemove(idEach);\n  });\n\n  afterAll(() => {\n    idRemove(idAll);\n    ngMocksUniverse.global.delete('bullet');\n    if (ngMocksUniverse.global.has('bullet:reset')) {\n      TestBed.resetTestingModule();\n    }\n  });\n};\n","import { DebugElement } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\n\nimport { Type } from '../common/core.types';\nimport funcGetName from '../common/func.get-name';\nimport { getSourceOfMock } from '../common/func.get-source-of-mock';\nimport { MockedDebugElement } from '../mock-render/types';\n\nimport nestedCheckParent from './crawl/nested-check-parent';\nimport mockHelperFind from './find/mock-helper.find';\nimport funcGetFromNode from './func.get-from-node';\nimport funcGetLastFixture from './func.get-last-fixture';\nimport funcParseFindArgsName from './func.parse-find-args-name';\n\nconst defaultNotFoundValue = {}; // simulating Symbol\n\nconst parseArgs = <T>(\n  args: any[],\n): {\n  el: MockedDebugElement | null | undefined;\n  notFoundValue: any;\n  sel: Type<T>;\n} => ({\n  el: args[0],\n  notFoundValue: args.length === 3 ? args[2] : defaultNotFoundValue,\n  sel: args[1],\n});\n\nexport default <T>(...args: any[]) => {\n  if (args.length === 1) {\n    try {\n      return TestBed.inject ? TestBed.inject(args[0]) : /* istanbul ignore next */ TestBed.get(args[0]);\n    } catch (error) {\n      // forwarding unexpected errors: https://github.com/help-me-mom/ng-mocks/issues/7041\n      if (!error || typeof error !== 'object' || (error as any).ngTempTokenPath === undefined) {\n        throw error;\n      }\n      throw new Error(`Cannot find an instance via ngMocks.get(${funcParseFindArgsName(args[0])})`);\n    }\n  }\n\n  const { el, sel, notFoundValue } = parseArgs<T>(args);\n  const root: DebugElement | undefined = mockHelperFind(funcGetLastFixture(), el, undefined);\n  const source = getSourceOfMock(sel);\n\n  // Looking in the root.\n  if (root) {\n    const result = funcGetFromNode([], root, source);\n    if (result.length > 0) {\n      return result[0];\n    }\n  }\n\n  // Looking for a related structural directive.\n  if (root) {\n    const parent = nestedCheckParent(root, undefined);\n    if (parent && parent.nativeNode.nodeName === '#comment') {\n      const result = funcGetFromNode([], parent, source);\n      if (result.length > 0) {\n        return result[0];\n      }\n    }\n  }\n\n  if (notFoundValue !== defaultNotFoundValue) {\n    return notFoundValue;\n  }\n  throw new Error(`Cannot find ${funcGetName(sel)} instance via ngMocks.get`);\n};\n","import collectDeclarations from '../resolve/collect-declarations';\n\nimport coreConfig from './core.config';\nimport { flatten } from './core.helpers';\nimport { AnyDeclaration } from './core.types';\nimport funcGetType from './func.get-type';\n\nconst iterator = <T = any>(\n  source: AnyDeclaration<T>,\n  callback: (source: AnyDeclaration<T>) => void,\n  scanned = new Set<any>(),\n): void => {\n  const meta = collectDeclarations(source);\n  for (const decorator of meta.decorators) {\n    for (const key of coreConfig.dependencies) {\n      if (!meta[decorator][key]) {\n        continue;\n      }\n      for (const def of flatten(meta[decorator][key])) {\n        const declaration = funcGetType(def);\n        if (!declaration || scanned.has(declaration)) {\n          continue;\n        }\n        scanned.add(declaration);\n        callback(declaration);\n        iterator(declaration, callback, scanned);\n      }\n    }\n  }\n};\n\nexport default iterator;\n","import ngMocksUniverse from '../common/ng-mocks-universe';\n\nexport default () => {\n  ngMocksUniverse.cacheDeclarations.clear();\n  ngMocksUniverse.config.get('ngMocksDepsSkip')?.clear();\n};\n","import { AnyDeclaration } from '../common/core.types';\nimport funcIterateDeclaration from '../common/func.iterate-declaration';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport funcGlobalPrepare from './func.global-prepare';\n\nconst action = (source: AnyDeclaration<any>): void => {\n  ngMocksUniverse.getDefaults().set(source, ['exclude']);\n};\nexport default (source: AnyDeclaration<any>, recursively = false): void => {\n  funcGlobalPrepare();\n  action(source);\n\n  if (recursively) {\n    funcIterateDeclaration(source, action);\n  }\n};\n","import { AnyDeclaration } from '../common/core.types';\nimport funcIterateDeclaration from '../common/func.iterate-declaration';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport funcGlobalPrepare from './func.global-prepare';\n\nconst action = (source: AnyDeclaration<any>): void => {\n  ngMocksUniverse.getDefaults().set(source, ['keep']);\n};\nexport default (source: AnyDeclaration<any>, recursively = false): void => {\n  funcGlobalPrepare();\n  action(source);\n\n  if (recursively) {\n    funcIterateDeclaration(source, action);\n  }\n};\n","import { AnyDeclaration } from '../common/core.types';\nimport funcIterateDeclaration from '../common/func.iterate-declaration';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport funcGlobalPrepare from './func.global-prepare';\n\nconst action = (source: AnyDeclaration<any>): void => {\n  ngMocksUniverse.getDefaults().set(source, ['mock']);\n};\nexport default (source: AnyDeclaration<any>, recursively = false): void => {\n  funcGlobalPrepare();\n  action(source);\n\n  if (recursively) {\n    funcIterateDeclaration(source, action);\n  }\n};\n","import { AnyDeclaration } from '../common/core.types';\nimport funcIterateDeclaration from '../common/func.iterate-declaration';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport funcGlobalPrepare from './func.global-prepare';\nimport mockHelperDefaultMock from './mock-helper.default-mock';\n\nconst action = (source: AnyDeclaration<any>): void => {\n  ngMocksUniverse.getDefaults().delete(source);\n  mockHelperDefaultMock(source);\n};\n\nexport default (source: AnyDeclaration<any>, recursively = false): void => {\n  funcGlobalPrepare();\n  action(source);\n\n  if (recursively) {\n    funcIterateDeclaration(source, action);\n  }\n};\n","import { TestModuleMetadata } from '@angular/core/testing';\n\nimport CoreDefStack from '../common/core.def-stack';\nimport { flatten, mapKeys, mapValues } from '../common/core.helpers';\nimport coreReflectModuleResolve from '../common/core.reflect.module-resolve';\nimport funcGetType from '../common/func.get-type';\nimport { isNgDef } from '../common/func.is-ng-def';\nimport { isNgInjectionToken } from '../common/func.is-ng-injection-token';\nimport { isNgModuleDefWithProviders } from '../common/func.is-ng-module-def-with-providers';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\nimport { MockComponent } from '../mock-component/mock-component';\nimport { MockDirective } from '../mock-directive/mock-directive';\nimport { MockModule } from '../mock-module/mock-module';\nimport { MockPipe } from '../mock-pipe/mock-pipe';\nimport mockProvider from '../mock-service/mock-provider';\n\ntype Data = {\n  declarations: any[];\n  exclude: Set<any>;\n  imports: any[];\n  keep: Set<any>;\n  mock: Set<any>;\n  optional: Map<any, any>;\n  providers: any[];\n  skip: Set<any>;\n};\n\nconst skipDef = (def: any, skip: Set<any>, exclude: Set<any>): boolean => {\n  if (skip.has(def)) {\n    return true;\n  }\n  skip.add(def);\n\n  return exclude.has(def);\n};\n\nconst createMetaHandler = (\n  optional: Map<any, any>,\n  proto: any,\n  imports: any[],\n  declarations: any[],\n  providers: any[],\n): void => {\n  const def = optional.get(proto) || proto;\n\n  if (isNgDef(def, 'm')) {\n    imports.push(def);\n  } else if (isNgDef(def, 'c') || isNgDef(def, 'd')) {\n    declarations.push(def);\n  } else if (isNgDef(def, 'p')) {\n    declarations.push(def);\n    providers.push(def);\n  } else if (!isNgInjectionToken(def)) {\n    providers.push(def);\n  }\n};\n\nconst createMeta = ({ keep, skip, optional, exclude, imports, declarations, providers }: Data): TestModuleMetadata => {\n  for (const proto of keep) {\n    if (skip.has(proto) || exclude.has(proto) || optional.has(proto)) {\n      continue;\n    }\n    createMetaHandler(optional, proto, imports, declarations, providers);\n  }\n\n  return { declarations, imports, providers };\n};\n\nconst typeMap: Array<[any, string]> = [\n  ['m', 'module'],\n  ['c', 'component'],\n  ['d', 'directive'],\n  ['p', 'pipe'],\n];\n\nconst getType = (def: any, keep: Set<any>): string => {\n  if (isNgModuleDefWithProviders(def)) {\n    return 'module-with-providers';\n  }\n  for (const [flag, value] of typeMap) {\n    if (isNgDef(def, flag)) {\n      return flag === 'm' && keep.has(def) ? `${value}-keep` : value;\n    }\n  }\n\n  return '';\n};\n\nconst handleModuleWithProviders = (data: Data, def: any): void => {\n  if (data.skip.has(def.ngModule)) {\n    return;\n  }\n  data.skip.add(def.ngModule);\n  if (data.exclude.has(def.ngModule)) {\n    return;\n  }\n\n  data.imports.push(data.keep.has(def.ngModule) ? def : MockModule(def));\n};\n\nconst handleDeclaration = (data: Data, def: any, callback: any, bucket: any[]): void => {\n  if (skipDef(def, data.skip, data.exclude)) {\n    return;\n  }\n\n  bucket.push(data.keep.has(def) ? def : callback(def));\n};\n\nconst handleDestructuring = (data: Data, def: any, callback: any): void => {\n  if (skipDef(def, data.skip, data.exclude)) {\n    return;\n  }\n\n  const meta = coreReflectModuleResolve(def);\n  for (const toMock of flatten([meta.declarations, meta.imports])) {\n    callback(data, toMock);\n  }\n  for (const toMock of meta.providers ? flatten(meta.providers) : []) {\n    resolveProvider(data, toMock);\n  }\n};\n\nconst resolveProvider = ({ skip, keep, providers, exclude }: Data, def: any): void => {\n  const provider = funcGetType(def);\n  skip.add(provider);\n  if (exclude.has(provider)) {\n    return;\n  }\n\n  const providerDef = keep.has(provider) ? def : mockProvider(def);\n  if (providerDef) {\n    providers.push(providerDef);\n  }\n};\n\nconst resolveMap: Record<string, any> = {\n  component: MockComponent,\n  directive: MockDirective,\n  pipe: MockPipe,\n};\n\nconst resolveHandler = (data: Data, type: string, def: any, skipDestruction: boolean): void => {\n  if (type === 'module-with-providers') {\n    handleModuleWithProviders(data, def);\n  } else if (type === 'module-keep') {\n    handleDeclaration(data, def, MockModule, data.imports); // MockModule will not be called because the def is kept.\n  } else if (type === 'module' && skipDestruction) {\n    handleDeclaration(data, def, MockModule, data.imports);\n  } else if (type === 'module') {\n    handleDestructuring(data, def, resolve);\n  } else if (resolveMap[type]) {\n    handleDeclaration(data, def, resolveMap[type], data.declarations);\n  } else {\n    resolveProvider(data, def);\n  }\n};\n\nconst resolve = (data: Data, proto: any, skipDestruction = true): void => {\n  if (!proto) {\n    return;\n  }\n\n  const type = getType(proto, data.keep);\n  let def: any;\n\n  // an attempt to replace declarations.\n  if (type !== 'module-with-providers') {\n    const value = data.optional.get(proto);\n    if (value && value !== proto) {\n      def = value;\n      data.keep.add(def);\n    }\n  }\n  if (!def) {\n    def = proto;\n  }\n\n  resolveHandler(data, type, def, skipDestruction);\n};\n\nconst generateDataWithUniverse = (keep: Set<any>, mock: Set<any>, exclude: Set<any>, optional: Map<any, any>): void => {\n  for (const k of mapKeys(ngMocksUniverse.getDefaults())) {\n    const v = ngMocksUniverse.getBuildDeclaration(k);\n    if (keep.has(k) || mock.has(k) || exclude.has(k)) {\n      continue;\n    }\n    optional.set(k, v);\n\n    if (v === null) {\n      exclude.add(k);\n    } else if (v === undefined) {\n      mock.add(k);\n    } else if (k === v) {\n      keep.add(k);\n    }\n  }\n};\n\nconst generateData = (protoKeep: any, protoMock: any, protoExclude: any): Data => {\n  const keep = new Set(flatten(protoKeep || []));\n  const mock = new Set(flatten(protoMock || []));\n  const exclude = new Set(flatten(protoExclude || []));\n  const optional = new Map();\n  generateDataWithUniverse(keep, mock, exclude, optional);\n\n  return {\n    declarations: [],\n    exclude,\n    imports: [],\n    keep,\n    mock,\n    optional,\n    providers: [],\n    skip: new Set(),\n  };\n};\n\nexport default (keep: any, mock: any = null, exclude: any = null): TestModuleMetadata => {\n  const data: Data = generateData(keep, mock, exclude);\n\n  const resolutions = new Map();\n  ngMocksUniverse.config.set('ngMocksDepsResolution', resolutions);\n  for (const mockDef of mapValues(data.keep)) {\n    resolutions.set(mockDef, 'keep');\n  }\n  for (const mockDef of mapValues(data.exclude)) {\n    resolutions.set(mockDef, 'exclude');\n  }\n\n  ngMocksUniverse.config.set('mockNgDefResolver', new CoreDefStack());\n  for (const def of mapValues(data.mock)) {\n    resolutions.set(def, 'mock');\n    if (data.optional.has(def)) {\n      continue;\n    }\n    resolve(data, def, false);\n  }\n  const meta = createMeta(data);\n  ngMocksUniverse.config.delete('mockNgDefResolver');\n  ngMocksUniverse.config.delete('ngMocksDepsResolution');\n\n  return meta;\n};\n","import { DirectiveIo } from '../common/core.types';\nimport funcDirectiveIoParse from '../common/func.directive-io-parse';\nimport { MockedDebugElement } from '../mock-render/types';\n\nimport mockHelperFind from './find/mock-helper.find';\nimport funcGetLastFixture from './func.get-last-fixture';\nimport funcParseProviderTokensDirectives from './func.parse-provider-tokens-directives';\nimport mockHelperGet from './mock-helper.get';\n\nconst defaultNotFoundValue = {}; // simulating Symbol\n\nconst parseArgs = (args: any[]): [MockedDebugElement | null | undefined, string, any] => [\n  args[0],\n  args[1],\n  args.length === 3 ? args[2] : defaultNotFoundValue,\n];\n\nconst attrMatches = (attribute: DirectiveIo, selector: string): string | undefined => {\n  const { name, alias = '' } = funcDirectiveIoParse(attribute);\n\n  if ((!alias && name === selector) || (!!alias && alias === selector)) {\n    return name;\n  }\n\n  return undefined;\n};\n\nconst detectAttribute = (el: MockedDebugElement | null | undefined, attr: 'inputs' | 'outputs', sel: string) => {\n  for (const token of el?.providerTokens || []) {\n    const meta = funcParseProviderTokensDirectives(el, token);\n    if (!meta) {\n      continue;\n    }\n\n    for (const attrDef of meta[attr] || /* istanbul ignore next */ []) {\n      const prop = attrMatches(attrDef, sel);\n      if (prop) {\n        return mockHelperGet(el, token)[prop];\n      }\n    }\n  }\n\n  throw new Error('Not found');\n};\n\nexport default (label: string, attr: 'inputs' | 'outputs', ...args: any[]) => {\n  const [el, sel, notFoundValue] = parseArgs(args);\n\n  try {\n    return detectAttribute(mockHelperFind(funcGetLastFixture(), el, undefined), attr, sel);\n  } catch {\n    // nothing to do\n  }\n  if (notFoundValue !== defaultNotFoundValue) {\n    return notFoundValue;\n  }\n  throw new Error(`Cannot find ${sel} ${label} via ngMocks.${label}`);\n};\n","import { QueryList, TemplateRef, ViewContainerRef } from '@angular/core';\n\nimport funcIsMock from '../../common/func.is-mock';\nimport { MockConfig } from '../../common/mock';\n\nconst getValVcr = (entryPoint: MockConfig): Array<[any, ViewContainerRef]> => {\n  const result: Array<[any, ViewContainerRef]> = [];\n\n  for (const key of entryPoint.__ngMocksConfig.queryScanKeys || /* istanbul ignore next */ []) {\n    const value = (entryPoint as any)[key];\n    const vcr = (entryPoint as any)[`__ngMocksVcr_${key}`];\n\n    const scanValue = value instanceof QueryList ? value.toArray() : [value];\n    const scanVcr = vcr instanceof QueryList ? vcr.toArray() : [vcr];\n\n    for (let index = 0; index < scanValue.length; index += 1) {\n      result.push([scanValue[index], scanVcr[index]]);\n    }\n  }\n\n  return result;\n};\n\nconst handleDirective = (\n  entryPoint: {\n    __template?: TemplateRef<any>;\n    __vcr?: ViewContainerRef;\n  },\n  isExpectedTemplate: (tpl: TemplateRef<any>) => boolean,\n  callback: (vcr: ViewContainerRef, tpl: TemplateRef<any>) => boolean,\n): boolean => {\n  return (\n    !!entryPoint.__template &&\n    !!entryPoint.__vcr &&\n    isExpectedTemplate(entryPoint.__template) &&\n    callback(entryPoint.__vcr, entryPoint.__template)\n  );\n};\n\nconst isRightTemplate = (\n  localVcr: ViewContainerRef | undefined,\n  localValue: any,\n  isExpectedTemplate: (tpl: TemplateRef<any>) => boolean,\n): boolean => {\n  return !!localVcr && localValue instanceof TemplateRef && isExpectedTemplate(localValue);\n};\n\nconst findDeep = (\n  entryPoint: object,\n  isExpectedTemplate: (tpl: TemplateRef<any>) => boolean,\n  callback: (vcr: ViewContainerRef, tpl: TemplateRef<any>) => boolean,\n): boolean => {\n  if (!funcIsMock(entryPoint)) {\n    throw new Error('Only instances of mock declarations are accepted');\n  }\n\n  // structural directive\n  if (handleDirective(entryPoint, isExpectedTemplate, callback)) {\n    return true;\n  }\n\n  for (const [localValue, localVcr] of getValVcr(entryPoint)) {\n    if (funcIsMock(localValue) && findDeep(localValue, isExpectedTemplate, callback)) {\n      return true;\n    }\n    if (isRightTemplate(localVcr, localValue, isExpectedTemplate)) {\n      return callback(localVcr, localValue);\n    }\n  }\n\n  return false;\n};\n\nexport default ((): typeof findDeep => findDeep)();\n","import { TemplateRef } from '@angular/core';\n\nimport coreInjector from '../../common/core.injector';\nimport funcIsMock from '../../common/func.is-mock';\n\nexport default (param: any): TemplateRef<any> => {\n  if (param instanceof TemplateRef) {\n    return param;\n  }\n  if (funcIsMock(param) && param.__template) {\n    return param.__template;\n  }\n\n  const injector = param?.nativeNode && param.injector;\n  if (injector) {\n    const template = coreInjector(TemplateRef, injector);\n\n    if (template) {\n      return template;\n    }\n  }\n\n  const error = new Error(\n    'Unknown template has been passed, only TemplateRef or a mock structural directive are supported',\n  );\n  (error as any).param = param;\n\n  throw error;\n};\n","import { Type } from '../../common/core.types';\nimport crawlByAttribute from '../crawl/crawl-by-attribute';\nimport crawlByAttributeValue from '../crawl/crawl-by-attribute-value';\nimport crawlByDeclaration from '../crawl/crawl-by-declaration';\nimport crawlById from '../crawl/crawl-by-id';\n\nexport default (selector: string | Type<any> | [string] | [string, any] | any) => {\n  if (typeof selector === 'string') {\n    return crawlById(selector);\n  }\n  if (Array.isArray(selector) && selector.length === 1 && typeof selector[0] === 'string') {\n    return crawlByAttribute(selector[0]);\n  }\n  if (Array.isArray(selector) && selector.length === 2 && typeof selector[0] === 'string') {\n    return crawlByAttributeValue(selector[0], selector[1]);\n  }\n  if (typeof selector === 'function') {\n    return crawlByDeclaration(selector);\n  }\n\n  throw new Error('Unknown selector');\n};\n","import { TemplateRef } from '@angular/core';\n\nimport coreInjector from '../../common/core.injector';\nimport { MockedDebugNode } from '../../mock-render/types';\nimport detectTextNode from '../crawl/detect-text-node';\n\nexport default (\n    result: Array<TemplateRef<any>>,\n    detector: (node: MockedDebugNode) => boolean,\n    limit = 0,\n  ): ((node: MockedDebugNode) => boolean) =>\n  node => {\n    try {\n      const instance = !detectTextNode(node) && detector(node) ? coreInjector(TemplateRef, node.injector) : undefined;\n      if (instance) {\n        result.push(instance);\n      }\n    } catch {\n      // nothing to do\n    }\n\n    return !!limit && result.length === limit;\n  };\n","export default (value: any): boolean => {\n  if (typeof value === 'string') {\n    return true;\n  }\n  if (Array.isArray(value) && typeof value[0] === 'string') {\n    return true;\n  }\n  if (typeof value === 'function') {\n    return true;\n  }\n\n  return false;\n};\n","import { TemplateRef } from '@angular/core';\n\nimport nestedCheck from '../crawl/nested-check';\nimport mockHelperFind from '../find/mock-helper.find';\nimport funcGetLastFixture from '../func.get-last-fixture';\nimport funcParseFindArgs from '../func.parse-find-args';\nimport funcParseFindArgsName from '../func.parse-find-args-name';\n\nimport detectCrawler from './detect-crawler';\nimport detectTemplateRef from './detect-template-ref';\nimport funcIsValidTemplateRefSelector from './func.is-valid-template-ref-selector';\n\nconst defaultNotFoundValue = {}; // simulating Symbol\n\nexport default (...args: any[]) => {\n  const [el, sel, notFoundValue] = funcParseFindArgs(args, funcIsValidTemplateRefSelector, defaultNotFoundValue);\n\n  const result: Array<TemplateRef<any>> = [];\n  const detector = detectCrawler(sel);\n  nestedCheck(mockHelperFind(funcGetLastFixture(), el, undefined), undefined, detectTemplateRef(result, detector, 1));\n  if (result.length > 0) {\n    return result[0];\n  }\n  if (notFoundValue !== defaultNotFoundValue) {\n    return notFoundValue;\n  }\n\n  throw new Error(`Cannot find a TemplateRef via ngMocks.findTemplateRef(${funcParseFindArgsName(sel)})`);\n};\n","import coreConfig from '../common/core.config';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport mockHelperCrawl from './crawl/mock-helper.crawl';\nimport mockHelperReveal from './crawl/mock-helper.reveal';\nimport mockHelperRevealAll from './crawl/mock-helper.reveal-all';\nimport mockHelperChange from './cva/mock-helper.change';\nimport mockHelperTouch from './cva/mock-helper.touch';\nimport mockHelperClick from './events/mock-helper.click';\nimport mockHelperEvent from './events/mock-helper.event';\nimport mockHelperTrigger from './events/mock-helper.trigger';\nimport mockHelperFind from './find/mock-helper.find';\nimport mockHelperFindAll from './find/mock-helper.find-all';\nimport mockHelperFindInstance from './find-instance/mock-helper.find-instance';\nimport mockHelperFindInstances from './find-instance/mock-helper.find-instances';\nimport mockHelperFormatHtml from './format/mock-helper.format-html';\nimport mockHelperFormatText from './format/mock-helper.format-text';\nimport mockHelperAutoSpy from './mock-helper.auto-spy';\nimport mockHelperConsoleIgnore from './mock-helper.console-ignore';\nimport mockHelperConsoleThrow from './mock-helper.console-throw';\nimport mockHelperDefaultConfig from './mock-helper.default-config';\nimport mockHelperDefaultMock from './mock-helper.default-mock';\nimport mockHelperFaster from './mock-helper.faster';\nimport mockHelperFlushTestBed from './mock-helper.flush-test-bed';\nimport mockHelperGet from './mock-helper.get';\nimport mockHelperGlobalExclude from './mock-helper.global-exclude';\nimport mockHelperGlobalKeep from './mock-helper.global-keep';\nimport mockHelperGlobalMock from './mock-helper.global-mock';\nimport mockHelperGlobalReplace from './mock-helper.global-replace';\nimport mockHelperGlobalWipe from './mock-helper.global-wipe';\nimport mockHelperGuts from './mock-helper.guts';\nimport mockHelperInput from './mock-helper.input';\nimport mockHelperOutput from './mock-helper.output';\nimport mockHelperReset from './mock-helper.reset';\nimport mockHelperStub from './mock-helper.stub';\nimport mockHelperStubMember from './mock-helper.stub-member';\nimport mockHelperHide from './render/mock-helper.hide';\nimport mockHelperRender from './render/mock-helper.render';\nimport mockHelperFindTemplateRef from './template-ref/mock-helper.find-template-ref';\nimport mockHelperFindTemplateRefs from './template-ref/mock-helper.find-template-refs';\n\nconst flagNames = ['onMockBuilderMissingDependency', 'onMockInstanceRestoreNeed', 'onTestBedFlushNeed'] as const;\n\nexport default {\n  autoSpy: mockHelperAutoSpy,\n  change: mockHelperChange,\n  click: mockHelperClick,\n  config: (config: {\n    mockRenderCacheSize?: number | null;\n    onMockBuilderMissingDependency?: 'throw' | 'warn' | 'i-know-but-disable' | null;\n    onMockInstanceRestoreNeed?: 'throw' | 'warn' | 'i-know-but-disable' | null;\n    onTestBedFlushNeed?: 'throw' | 'warn' | 'i-know-but-disable' | null;\n  }) => {\n    const flags = ngMocksUniverse.global.get('flags');\n    for (const flag of flagNames) {\n      if (config[flag] === null) {\n        flags[flag] = coreConfig[flag];\n      } else if (config[flag] !== undefined) {\n        flags[flag] = config[flag];\n      }\n    }\n    if (config.mockRenderCacheSize === null) {\n      ngMocksUniverse.global.delete('mockRenderCacheSize');\n    } else if (config.mockRenderCacheSize !== undefined) {\n      ngMocksUniverse.global.set('mockRenderCacheSize', config.mockRenderCacheSize);\n    }\n  },\n  crawl: mockHelperCrawl,\n  defaultConfig: mockHelperDefaultConfig,\n  defaultMock: mockHelperDefaultMock,\n  event: mockHelperEvent,\n  faster: mockHelperFaster,\n  find: mockHelperFind,\n  findAll: mockHelperFindAll,\n  findInstance: mockHelperFindInstance,\n  findInstances: mockHelperFindInstances,\n  findTemplateRef: mockHelperFindTemplateRef,\n  findTemplateRefs: mockHelperFindTemplateRefs,\n  flushTestBed: mockHelperFlushTestBed,\n  formatHtml: mockHelperFormatHtml,\n  formatText: mockHelperFormatText,\n  get: mockHelperGet,\n  globalExclude: mockHelperGlobalExclude,\n  globalKeep: mockHelperGlobalKeep,\n  globalMock: mockHelperGlobalMock,\n  globalReplace: mockHelperGlobalReplace,\n  globalWipe: mockHelperGlobalWipe,\n  guts: mockHelperGuts,\n  hide: mockHelperHide,\n  ignoreOnConsole: mockHelperConsoleIgnore,\n  input: mockHelperInput,\n  output: mockHelperOutput,\n  render: mockHelperRender,\n  reset: mockHelperReset,\n  reveal: mockHelperReveal,\n  revealAll: mockHelperRevealAll,\n  stub: mockHelperStub,\n  stubMember: mockHelperStubMember,\n  throwOnConsole: mockHelperConsoleThrow,\n  touch: mockHelperTouch,\n  trigger: mockHelperTrigger,\n};\n","import { DebugNodeSelector } from '../../common/core.types';\n\nimport mockHelperTrigger from './mock-helper.trigger';\n\nexport default (selector: DebugNodeSelector, payload?: object) => {\n  mockHelperTrigger(selector, 'click', payload);\n};\n","import { flatten } from '../common/core.helpers';\nimport { AnyDeclaration } from '../common/core.types';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\nimport { IMockBuilderConfig } from '../mock-builder/types';\n\nexport default <T>(\n  def: AnyDeclaration<T> | string | Array<AnyDeclaration<T> | string>,\n  config?: IMockBuilderConfig,\n): void => {\n  const map = ngMocksUniverse.getConfigMock();\n  for (const item of flatten(def)) {\n    if (config) {\n      map.set(item, config);\n    } else {\n      map.delete(item);\n    }\n  }\n};\n","import { getInjection } from '../../common/core.helpers';\nimport { Type } from '../../common/core.types';\nimport { getSourceOfMock } from '../../common/func.get-source-of-mock';\nimport { isNgDef } from '../../common/func.is-ng-def';\nimport mockHelperCrawl from '../crawl/mock-helper.crawl';\nimport mockHelperFindAll from '../find/mock-helper.find-all';\nimport funcGetFromNode from '../func.get-from-node';\nimport funcGetLastFixture from '../func.get-last-fixture';\nimport funcParseFindArgs from '../func.parse-find-args';\n\nimport funcIsValidFindInstanceSelector from './func.is-valid-find-instance-selector';\n\nexport default <T>(...args: any[]): T[] => {\n  const [el, sel] = funcParseFindArgs(args, funcIsValidFindInstanceSelector);\n  if (typeof sel !== 'function' && !isNgDef(sel, 't') && typeof sel !== 'string') {\n    throw new Error('Only classes or tokens are accepted');\n  }\n\n  const declaration: Type<T> = getSourceOfMock(sel);\n  const result: T[] = [];\n  const scanned: any[] = [];\n  const fixture = funcGetLastFixture();\n  if (fixture) {\n    const elements = mockHelperFindAll(fixture, el, undefined);\n    for (const element of elements) {\n      mockHelperCrawl(\n        element,\n        (node, parent) => {\n          if (scanned.indexOf(node) === -1) {\n            funcGetFromNode(result, node, declaration);\n            scanned.push(node);\n          }\n          if (parent && parent.nativeNode.nodeName === '#comment' && scanned.indexOf(parent) === -1) {\n            funcGetFromNode(result, parent, declaration);\n            scanned.push(parent);\n          }\n        },\n        true,\n      );\n    }\n  } else {\n    try {\n      result.push(getInjection(declaration));\n    } catch {\n      // nothing to do\n    }\n  }\n\n  return result;\n};\n","import { TemplateRef } from '@angular/core';\n\nimport nestedCheck from '../crawl/nested-check';\nimport mockHelperFind from '../find/mock-helper.find';\nimport funcGetLastFixture from '../func.get-last-fixture';\nimport funcParseFindArgs from '../func.parse-find-args';\n\nimport detectCrawler from './detect-crawler';\nimport detectTemplateRef from './detect-template-ref';\nimport funcIsValidTemplateRefSelector from './func.is-valid-template-ref-selector';\n\nexport default (...args: any[]): Array<TemplateRef<any>> => {\n  const [el, sel] = funcParseFindArgs(args, funcIsValidTemplateRefSelector);\n\n  const result: Array<TemplateRef<any>> = [];\n  const detector = detectCrawler(sel);\n  nestedCheck(mockHelperFind(funcGetLastFixture(), el, undefined), undefined, detectTemplateRef(result, detector));\n\n  return result;\n};\n","import { AnyType } from '../common/core.types';\nimport { isNgDef } from '../common/func.is-ng-def';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport funcGlobalPrepare from './func.global-prepare';\n\nexport default (source: AnyType<any>, destination: AnyType<any>): void => {\n  let fail = true;\n  if (isNgDef(source, 'm') && isNgDef(destination, 'm')) {\n    fail = false;\n  } else if (isNgDef(source, 'c') && isNgDef(destination, 'c')) {\n    fail = false;\n  } else if (isNgDef(source, 'd') && isNgDef(destination, 'd')) {\n    fail = false;\n  } else if (isNgDef(source, 'p') && isNgDef(destination, 'p')) {\n    fail = false;\n  }\n\n  if (fail) {\n    throw new Error('Cannot replace the declaration, both have to be a Module, a Component, a Directive or a Pipe');\n  }\n\n  funcGlobalPrepare();\n  ngMocksUniverse.getDefaults().set(source, ['replace', destination]);\n};\n","import funcFindDeep from './func.find-deep';\nimport funcParseTemplate from './func.parse-template';\n\nexport default (instance: object, param?: object) => {\n  const template = param ? funcParseTemplate(param) : undefined;\n\n  let result = false;\n  funcFindDeep(\n    instance,\n    tpl => {\n      if (!template) {\n        return true;\n      }\n\n      return tpl.elementRef.nativeElement === template.elementRef.nativeElement;\n    },\n    vcr => {\n      vcr.clear();\n      result = true;\n\n      return false;\n    },\n  );\n\n  if (!result) {\n    throw new Error('Cannot find path to the TemplateRef');\n  }\n};\n","import mockHelperAttributes from './mock-helper.attributes';\n\nexport default (...args: any[]) => mockHelperAttributes('input', 'inputs', ...args);\n","import mockHelperAttributes from './mock-helper.attributes';\n\nexport default (...args: any[]) => mockHelperAttributes('output', 'outputs', ...args);\n","import funcFindDeep from './func.find-deep';\nimport funcParseTemplate from './func.parse-template';\n\nexport default (instance: object, param: object, $implicit?: any, variables?: Record<keyof any, any>) => {\n  const template = funcParseTemplate(param);\n\n  const result = funcFindDeep(\n    instance,\n    tpl => tpl.elementRef.nativeElement === template.elementRef.nativeElement,\n    (vcr, tpl) => {\n      const context = {\n        ...variables,\n        $implicit,\n      };\n      vcr.clear();\n      vcr.createEmbeddedView(tpl, context).detectChanges();\n\n      return true;\n    },\n  );\n\n  if (!result) {\n    throw new Error('Cannot find path to the TemplateRef');\n  }\n};\n","import coreConfig from '../common/core.config';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nexport default (): void => {\n  ngMocksUniverse.builtDeclarations = new Map();\n  ngMocksUniverse.builtProviders = new Map();\n  ngMocksUniverse.cacheDeclarations = new Map();\n  ngMocksUniverse.cacheProviders = new Map();\n  ngMocksUniverse.config = new Map();\n  ngMocksUniverse.configInstance = new Map();\n  ngMocksUniverse.flags = new Set(coreConfig.flags);\n  ngMocksUniverse.touches = new Set();\n};\n","import mockHelperFind from '../find/mock-helper.find';\nimport funcGetLastFixture from '../func.get-last-fixture';\nimport funcParseFindArgs from '../func.parse-find-args';\n\nimport detectCrawler from './detect-crawler';\nimport detectTextNode from './detect-text-node';\nimport funcIsValidRevealSelector from './func.is-valid-reveal-selector';\nimport mockHelperCrawl from './mock-helper.crawl';\n\nexport default (...args: any[]): any[] => {\n  const [el, sel] = funcParseFindArgs(args, funcIsValidRevealSelector);\n  const root = mockHelperFind(funcGetLastFixture(), el, undefined);\n\n  const detector = detectCrawler(sel);\n\n  const result: any[] = [];\n  mockHelperCrawl(root, node => {\n    if (node !== root && !detectTextNode(node) && detector(node)) {\n      result.push(node);\n    }\n  });\n\n  return result;\n};\n","/* eslint-disable max-lines */\n\nimport { DebugNode, EventEmitter, InjectionToken, Injector, Provider, TemplateRef } from '@angular/core';\nimport { ComponentFixture, TestModuleMetadata } from '@angular/core/testing';\n\nimport { AnyDeclaration, AnyType, DebugNodeSelector, Type } from '../common/core.types';\nimport { NgModuleWithProviders } from '../common/func.is-ng-module-def-with-providers';\nimport { IMockBuilderConfig } from '../mock-builder/types';\nimport { MockedDebugElement, MockedDebugNode } from '../mock-render/types';\nimport { CustomMockFunction, MockedFunction } from '../mock-service/types';\n\nimport { FORMAT_SET, FORMAT_SINGLE } from './format/types';\nimport mockHelperObject from './mock-helper.object';\n\n/**\n * ngMocks provides a lot of tools to simply testing.\n *\n * @see https://ng-mocks.sudo.eu/api/ngMocks\n */\nexport const ngMocks: {\n  /**\n   * ngMocks.autoSpy installs proper spies instead of empty functions.\n   *\n   * @see https://ng-mocks.sudo.eu/extra/auto-spy\n   */\n  autoSpy(type: 'jasmine' | 'jest' | 'default' | 'reset'): void;\n\n  /**\n   * ngMocks.autoSpy installs proper spies instead of empty functions.\n   *\n   * @see https://ng-mocks.sudo.eu/extra/auto-spy\n   */\n  autoSpy(type: CustomMockFunction): void;\n\n  /**\n   * ngMocks.defaultConfig sets the default config of declarations for MockBuilder.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/defaultConfig\n   */\n  defaultConfig<T>(token: string | AnyDeclaration<T>, config?: IMockBuilderConfig): void;\n\n  /**\n   * ngMocks.defaultMock sets default customizations of mock tokens.\n   * It helps to avoid repetitions from test to test.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/defaultMock\n   */\n  defaultMock<T>(\n    token: InjectionToken<T>,\n    handler?: (value: undefined | T, injector: Injector) => undefined | Partial<T>,\n    config?: IMockBuilderConfig,\n  ): void;\n\n  /**\n   * ngMocks.defaultMock sets default customizations of mock string tokens.\n   * It helps to avoid repetitions from test to test.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/defaultMock\n   */\n  defaultMock<T = any>(\n    token: string,\n    handler?: (value: undefined | T, injector: Injector) => undefined | Partial<T>,\n    config?: IMockBuilderConfig,\n  ): void;\n\n  /**\n   * ngMocks.defaultMock sets default customizations of mock declarations.\n   * It helps to avoid repetitions from test to test.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/defaultMock\n   */\n  defaultMock<T>(\n    def: AnyType<T>,\n    handler?: (value: T, injector: Injector) => void | Partial<T>,\n    config?: IMockBuilderConfig,\n  ): void;\n\n  /**\n   * ngMocks.defaultMock sets default customizations of mock declarations and tokens.\n   * It helps to avoid repetitions from test to test.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/defaultMock\n   */\n  defaultMock<T = any>(\n    defs: Array<AnyDeclaration<T>>,\n    handler?: (value: undefined | T, injector: Injector) => undefined | Partial<T>,\n    config?: IMockBuilderConfig,\n  ): void;\n\n  /**\n   * ngMocks.globalExclude configures which declarations, providers and tokens\n   * should be excluded from mocks.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/globalExclude\n   *\n   * ```ts\n   * ngMocks.globalExclude(TranslationModule);\n   * ```\n   */\n  globalExclude(source: AnyDeclaration<any>, recursively?: boolean): void;\n\n  /**\n   * ngMocks.globalKeep configures which declarations, providers and tokens\n   * should not be mocked and will stay as they are in mocks.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/globalKeep\n   *\n   * ```ts\n   * ngMocks.globalKeep(TranslationModule);\n   * ```\n   */\n  globalKeep(source: AnyDeclaration<any>, recursively?: boolean): void;\n\n  /**\n   * ngMocks.globalMock configures which declarations, providers and tokens\n   * should be mocked in kept declarations.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/globalMock\n   *\n   * ```ts\n   * ngMocks.globalMock(TranslationModule);\n   * ```\n   */\n  globalMock(source: AnyDeclaration<any>, recursively?: boolean): void;\n\n  /**\n   * ngMocks.globalReplace configures which declarations, providers and tokens\n   * should be substituted in mocks.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/globalReplace\n   *\n   * ```ts\n   * ngMocks.globalReplace(BrowserAnimationsModule, NoopAnimationsModule);\n   * ```\n   */\n  globalReplace(source: AnyType<any>, destination: AnyType<any>): void;\n\n  /**\n   * ngMocks.globalWipe resets all customizations of ngMocks.global* and mgMocks.default* functions.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/globalWipe\n   *\n   * ```ts\n   * ngMocks.globalWipe(TranslationModule);\n   * ngMocks.globalWipe(BrowserAnimationsModule);\n   * ```\n   */\n  globalWipe(source: AnyDeclaration<any>, recursively?: boolean): void;\n\n  /**\n   * ngMocks.change triggers ControlValueAccessor update.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/change\n   */\n  change(elSelector: DebugNodeSelector, value: any, methodName?: string): void;\n\n  /**\n   * ngMocks.touch triggers ControlValueAccessor touch.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/touch\n   */\n  touch(elSelector: DebugNode | DebugNodeSelector, methodName?: string): void;\n\n  /**\n   * ngMocks.click properly simulates a click on an element.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/click\n   */\n  click(elSelector: HTMLElement | DebugNodeSelector, payload?: Partial<MouseEvent>): void;\n\n  /**\n   * ngMocks.trigger lets trigger custom events on DebugElements.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/trigger\n   *\n   * ```ts\n   * ngMocks.trigger(el, new CustomEvent('my-event'));\n   * ```\n   */\n  trigger(elSelector: DebugNodeSelector, event: Event): void;\n\n  /**\n   * ngMocks.trigger lets trigger custom events on DebugElements.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/trigger\n   *\n   * ```ts\n   * ngMocks.trigger(el, 'click');\n   * ngMocks.trigger(el, 'keydown.control.shift.z');\n   * ```\n   */\n  trigger(\n    elSelector: HTMLElement | DebugNodeSelector,\n    event: string,\n    payload?: Partial<UIEvent | KeyboardEvent | MouseEvent | TouchEvent>,\n  ): void;\n\n  /**\n   * ngMocks.event builds correct event objects.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/event\n   */\n  event(\n    event: string,\n    init?: EventInit,\n    overrides?: Partial<UIEvent | KeyboardEvent | MouseEvent | TouchEvent | Event>,\n  ): Event;\n\n  /**\n   * ngMocks.render renders a templateRef or DebugElement.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/render\n   *\n   * ```ts\n   * ngMocks.header(component, headerEl);\n   * ```\n   */\n  render(\n    instance: object,\n    template: TemplateRef<any> | DebugNode,\n    $implicit?: any,\n    variables?: Record<keyof any, any>,\n  ): void;\n\n  /**\n   * ngMocks.render renders a structural directive.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/render\n   *\n   * ```ts\n   * ngMocks.render(component, directiveInstance);\n   * ```\n   */\n  render(instance: object, directive: object, $implicit?: any, variables?: Record<keyof any, any>): void;\n\n  /**\n   * ngMocks.hide hides a rendered templateRef or DebugElement.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/hide\n   *\n   * ```ts\n   * ngMocks.hide(component, headerEl);\n   * ```\n   */\n  hide(instance: object, tpl?: TemplateRef<any> | DebugNode): void;\n\n  /**\n   * ngMocks.hide hides a rendered structural directive.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/hide\n   *\n   * ```ts\n   * ngMocks.hide(component, directiveInstance);\n   * ```\n   */\n  hide(instance: object, directive: object): void;\n\n  /**\n   * ngMocks.input allows to get an input value without knowing\n   * which component / directive it belongs to.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/input\n   *\n   * ```ts\n   * const input = ngMocks.input('app-component', 'version');\n   * ```\n   */\n  input<T = any>(elSelector: DebugNodeSelector, input: string): T;\n\n  /**\n   * ngMocks.input allows to get an input value without knowing\n   * which component / directive it belongs to, otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/input\n   *\n   * ```ts\n   * const input = ngMocks.input('app-component', 'version', undefined);\n   * ```\n   */\n  input<T = any, D = undefined>(elSelector: DebugNodeSelector, input: string, notFoundValue: D): D | T;\n\n  /**\n   * ngMocks.output allows to get an output emitter without knowing\n   * which component / directive it belongs to.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/output\n   *\n   * ```ts\n   * const outputEmitter = ngMocks.output('app-component', 'update');\n   * ```\n   */\n  output<T = any>(elSelector: DebugNodeSelector, output: string): EventEmitter<T>;\n\n  /**\n   * ngMocks.output allows to get an output emitter without knowing\n   * which component / directive it belongs to, otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/output\n   *\n   * ```ts\n   * const outputEmitter = ngMocks.output('app-component', 'update', undefined);\n   * ```\n   */\n  output<T = any, D = undefined>(elSelector: DebugNodeSelector, output: string, notFoundValue: D): D | EventEmitter<T>;\n\n  /**\n   * ngMocks.find searches for the DebugElement of a particular component,\n   * and returns the first found.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/find\n   *\n   * ```ts\n   * const el = ngMocks.find(MyComponent);\n   * ```\n   */\n  find<T>(component: Type<T>): MockedDebugElement<T>;\n\n  /**\n   * ngMocks.find searches for the DebugElement of a particular component\n   * starting from an element, and returns the first found.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/find\n   *\n   * ```ts\n   * const el = ngMocks.find(fixture.debugElement, MyComponent);\n   * ```\n   */\n  find<T>(\n    debugElement: MockedDebugElement | ComponentFixture<any> | undefined | null,\n    component: Type<T>,\n  ): MockedDebugElement<T>;\n\n  /**\n   * ngMocks.find searches for the DebugElement of a particular component,\n   * and returns the first found, otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/find\n   *\n   * ```ts\n   * const el = ngMocks.find(MyComponent, undefined);\n   * ```\n   */\n  find<T, D>(component: Type<T>, notFoundValue: D): D | MockedDebugElement<T>;\n\n  /**\n   * ngMocks.find searches for the DebugElement of a particular component\n   * starting from an element, and returns the first found, otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/find\n   *\n   * ```ts\n   * const el = ngMocks.find(fixture, MyComponent, undefined);\n   * ```\n   */\n  find<T, D>(\n    debugElement: MockedDebugElement | ComponentFixture<any> | undefined | null,\n    component: Type<T>,\n    notFoundValue: D,\n  ): D | MockedDebugElement<T>;\n\n  /**\n   * ngMocks.find searches for the DebugElement based on css selector,\n   * and returns the first found.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/find\n   *\n   * ```ts\n   * const el = ngMocks.find('.header');\n   * const el = ngMocks.find('[data-key=5]');\n   * const el = ngMocks.find(['data-key', 5]);\n   * ```\n   */\n  find<T = any>(cssSelector: string | [string] | [string, string | number]): MockedDebugElement<T>;\n\n  /**\n   * ngMocks.find searches for the DebugElement based on css selector\n   * starting from an element, and returns the first found.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/find\n   *\n   * ```ts\n   * const el = ngMocks.find(fixture.debugElement, '.header');\n   * const el = ngMocks.find(fixture, '[data-key=5]');\n   * const el = ngMocks.find(debugElement, ['data-key', 5]);\n   * ```\n   */\n  find<T = any>(\n    debugElement: MockedDebugElement | ComponentFixture<any> | undefined | null,\n    cssSelector: string | [string] | [string, string | number],\n  ): MockedDebugElement<T>;\n\n  /**\n   * ngMocks.find searches for the DebugElement based on css selector,\n   * and returns the first found, otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/find\n   *\n   * ```ts\n   * const el = ngMocks.find('.header', undefined);\n   * const el = ngMocks.find('[data-key=5]', null);\n   * const el = ngMocks.find(['data-key', 5], null);\n   * ```\n   */\n  find<T = any, D = undefined>(\n    cssSelector: string | [string] | [string, string | number],\n    notFoundValue: D,\n  ): D | MockedDebugElement<T>;\n\n  /**\n   * ngMocks.find searches for the DebugElement based on css selector\n   * starting from an element, and returns the first found, otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/find\n   *\n   * ```ts\n   * const el = ngMocks.find(fixture.debugElement, '.header', undefined);\n   * const el = ngMocks.find(fixture, '[data-key=5]', null);\n   * const el = ngMocks.find(debugElement, ['data-key', 5], null);\n   * ```\n   */\n  find<T = any, D = undefined>(\n    debugElement: MockedDebugElement | ComponentFixture<any> | undefined | null,\n    cssSelector: string | [string] | [string, string | number],\n    notFoundValue: D,\n  ): D | MockedDebugElement<T>;\n\n  /**\n   * ngMocks.findAll searches for all DebugElements of a particular component,\n   * and returns an array of them.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findAll\n   *\n   * ```ts\n   * const all = ngMocks.findAll(MyComponent);\n   * ```\n   */\n  findAll<T>(component: Type<T>): Array<MockedDebugElement<T>>;\n\n  /**\n   * ngMocks.findAll searches for all DebugElements of a particular component\n   * starting from an element, and returns an array of them.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findAll\n   *\n   * ```ts\n   * const all = ngMocks.findAll(fixture.debugElement, MyComponent);\n   * ```\n   */\n  findAll<T>(\n    debugElement: MockedDebugElement | ComponentFixture<any> | undefined | null,\n    component: Type<T>,\n  ): Array<MockedDebugElement<T>>;\n\n  /**\n   * ngMocks.findAll searches for all DebugElements based on css selector,\n   * and returns an array of them.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findAll\n   *\n   * ```ts\n   * const all = ngMocks.findAll('.header');\n   * const all = ngMocks.findAll('[data-key=5]');\n   * const all = ngMocks.findAll(['data-key', 5]);\n   * ```\n   */\n  findAll<T = any>(cssSelector: string | [string] | [string, string | number]): Array<MockedDebugElement<T>>;\n\n  /**\n   * ngMocks.findAll searches for all DebugElements based on css selector\n   * starting from an element, and returns an array of them.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findAll\n   *\n   * ```ts\n   * const all = ngMocks.findAll(fixture.debugElement, '.header');\n   * const all = ngMocks.findAll(fixture, '[data-key=5]');\n   * const all = ngMocks.findAll(debugElement, ['data-key', 5]);\n   * ```\n   */\n  findAll<T = any>(\n    debugElement: MockedDebugElement | ComponentFixture<any> | undefined | null,\n    cssSelector: string | [string] | [string, string | number],\n  ): Array<MockedDebugElement<T>>;\n\n  /**\n   * ngMocks.reveal allows finding DebugNodes which belong to ng-container or ng-template.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/reveal\n   *\n   * ```ts\n   * const ngContainer = ngMocks.reveal(HeaderComponent);\n   * ```\n   */\n  reveal<T>(selector: AnyType<T>): MockedDebugNode<T> | MockedDebugElement<T>;\n\n  /**\n   * ngMocks.reveal allows finding DebugNodes which belong to ng-container or ng-template\n   * starting from an element.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/reveal\n   *\n   * ```ts\n   * const ngContainer = ngMocks.reveal('header', HeaderComponent);\n   * ```\n   */\n  reveal<T>(elSelector: DebugNodeSelector, selector: AnyType<T>): MockedDebugNode<T> | MockedDebugElement<T>;\n\n  /**\n   * ngMocks.reveal allows finding DebugNodes which belong to ng-container or ng-template.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/reveal\n   *\n   * ```ts\n   * const ngContainer = ngMocks.reveal(['tpl', 'header']);\n   * ```\n   */\n  reveal<T = any>(selector: string | [string] | [string, any]): MockedDebugNode<T> | MockedDebugElement<T>;\n\n  /**\n   * ngMocks.reveal allows finding DebugNodes which belong to ng-container or ng-template\n   * starting from an element.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/reveal\n   *\n   * ```ts\n   * const ngContainer = ngMocks.reveal('header', ['tpl', 'header']);\n   * ```\n   */\n  reveal<T = any>(\n    elSelector: DebugNodeSelector,\n    selector: string | [string] | [string, any],\n  ): MockedDebugNode<T> | MockedDebugElement<T>;\n\n  /**\n   * ngMocks.reveal allows finding DebugNodes which belong to ng-container or ng-template,\n   * otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/reveal\n   *\n   * ```ts\n   * const ngContainer = ngMocks.reveal(HeaderComponent, undefined);\n   * ```\n   */\n  reveal<T, D>(selector: AnyType<T>, notFoundValue: D): D | MockedDebugNode<T> | MockedDebugElement<T>;\n\n  /**\n   * ngMocks.reveal allows finding DebugNodes which belong to ng-container or ng-template\n   * starting from an element, otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/reveal\n   *\n   * ```ts\n   * const ngContainer = ngMocks.reveal('sidebar', HeaderComponent, undefined);\n   * ```\n   */\n  reveal<T, D>(\n    elSelector: DebugNodeSelector,\n    selector: AnyType<T>,\n    notFoundValue: D,\n  ): D | MockedDebugNode<T> | MockedDebugElement<T>;\n\n  /**\n   * ngMocks.reveal allows finding DebugNodes which belong to ng-container or ng-template,\n   * otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/reveal\n   *\n   * ```ts\n   * const ngContainer = ngMocks.reveal(['tpl', 'header'], undefined);\n   * ```\n   */\n  reveal<T = any, D = undefined>(\n    selector: string | [string] | [string, any],\n    notFoundValue: D,\n  ): D | MockedDebugNode<T> | MockedDebugElement<T>;\n\n  /**\n   * ngMocks.reveal allows finding DebugNodes which belong to ng-container or ng-template\n   * starting from an element, otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/reveal\n   *\n   * ```ts\n   * const ngContainer = ngMocks.reveal('sidebar', ['tpl', 'header'], undefined);\n   * ```\n   */\n  reveal<T = any, D = undefined>(\n    elSelector: DebugNodeSelector,\n    selector: string | [string] | [string, any],\n    notFoundValue: D,\n  ): D | MockedDebugNode<T> | MockedDebugElement<T>;\n\n  /**\n   * ngMocks.revealAll allows finding all DebugNodes which belong to ng-container or ng-template.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/revealAll\n   *\n   * ```ts\n   * const ngContainers = ngMocks.revealAll(HeaderComponent);\n   * ```\n   */\n  revealAll<T>(selector: AnyType<T>): Array<MockedDebugNode<T> | MockedDebugElement<T>>;\n\n  /**\n   * ngMocks.reveal allows finding all DebugNodes which belong to ng-container or ng-template.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/revealAll\n   *\n   * ```ts\n   * const ngContainers = ngMocks.revealAll(['tpl', 'header']);\n   * ```\n   */\n  revealAll<T = any>(selector: string | [string] | [string, any]): Array<MockedDebugNode<T> | MockedDebugElement<T>>;\n\n  /**\n   * ngMocks.reveal allows finding all DebugNodes which belong to ng-container or ng-template\n   * starting from an element.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/revealAll\n   *\n   * ```ts\n   * const ngContainers = ngMocks.revealAll('sidebar', HeaderComponent);\n   * ```\n   */\n  revealAll<T>(elSelector: DebugNodeSelector, selector: AnyType<T>): Array<MockedDebugNode<T> | MockedDebugElement<T>>;\n\n  /**\n   * ngMocks.reveal allows finding all DebugNodes which belong to ng-container or ng-template\n   * starting from an element.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/revealAll\n   *\n   * ```ts\n   * const ngContainers = ngMocks.revealAll('sidebar', ['tpl', 'header']);\n   * ```\n   */\n  revealAll<T = any>(\n    elSelector: DebugNodeSelector,\n    selector: string | [string] | [string, any],\n  ): Array<MockedDebugNode<T> | MockedDebugElement<T>>;\n\n  /**\n   * ngMocks.get tries to get an instance of declaration, provider or token\n   * from the element which is matching a selector.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/get\n   *\n   * ```ts\n   * const myComponent = ngMocks.get('my-component', MyComponent);\n   * const myDirective = ngMocks.get('my-component', MyDirective);\n   * ```\n   */\n  get<T>(elSelector: DebugNodeSelector, provider: AnyDeclaration<T>): T;\n\n  /**\n   * ngMocks.get tries to get an instance of declaration, provider or token\n   * from the element which is matching a selector, otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/get\n   *\n   * ```ts\n   * const myComponent = ngMocks.get('my-component', MyComponent, undefined);\n   * const myDirective = ngMocks.get('my-component', MyDirective, null);\n   * ```\n   */\n  get<T, D>(elSelector: DebugNodeSelector, provider: AnyDeclaration<T>, notFoundValue: D): D | T;\n\n  /**\n   * ngMocks.get tries to get an instance of provider or token for TestBed.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/get\n   *\n   * ```ts\n   * const myComponent = ngMocks.get(MyComponent);\n   * const myDirective = ngMocks.get(MyDirective);\n   * ```\n   */\n  get<T>(provider: AnyDeclaration<T>): T;\n\n  /**\n   * ngMocks.findInstance searches for an instance of declaration, provider or token,\n   * and returns the first one.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findInstance\n   *\n   * ```ts\n   * const component = ngMocks.findInstance(SidebarComponent);\n   * const service = ngMocks.findInstance(AuthService);\n   * const config = ngMocks.findInstance(APP_CONFIG);\n   * ```\n   */\n  findInstance<T>(instanceClass: AnyDeclaration<T>): T;\n\n  /**\n   * ngMocks.findInstance searches for an instance of declaration, provider or token\n   * starting from an element, and returns the first one.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findInstance\n   *\n   * ```ts\n   * const component = ngMocks.findInstance(fixture, SidebarComponent);\n   * const service = ngMocks.findInstance('header', AuthService);\n   * const config = ngMocks.findInstance(debugElement, APP_CONFIG);\n   * ```\n   */\n  findInstance<T>(elSelector: DebugNodeSelector, instanceClass: AnyDeclaration<T>): T;\n\n  /**\n   * ngMocks.findInstance searches for an instance of declaration, provider or token,\n   * and returns the first one, otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findInstance\n   *\n   * ```ts\n   * const component = ngMocks.findInstance(SidebarComponent, undefined);\n   * const service = ngMocks.findInstance(AuthService, null);\n   * const config = ngMocks.findInstance(APP_CONFIG, false);\n   */\n  findInstance<T, D>(instanceClass: AnyDeclaration<T>, notFoundValue: D): D | T;\n\n  /**\n   * ngMocks.findInstance searches for an instance of declaration, provider or token\n   * starting from an element, and returns the first one, otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findInstance\n   *\n   * ```ts\n   * const component = ngMocks.findInstance(fixture, SidebarComponent, undefined);\n   * const service = ngMocks.findInstance('header', AuthService, null);\n   * const config = ngMocks.findInstance(debugElement, APP_CONFIG, false);\n   * ```\n   */\n  findInstance<T, D>(elSelector: DebugNodeSelector, instanceClass: AnyDeclaration<T>, notFoundValue: D): D | T;\n\n  /**\n   * ngMocks.findInstances searches for all instances of declaration, provider or token,\n   * and returns an array of them.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findInstances\n   *\n   * ```ts\n   * const components = ngMocks.findInstances(SidebarComponent);\n   * const services = ngMocks.findInstances(AuthService);\n   * const configs = ngMocks.findInstances(APP_CONFIG);\n   * ```\n   */\n  findInstances<T>(instanceClass: AnyDeclaration<T>): T[];\n\n  /**\n   * ngMocks.findInstances searches for all instances of declaration, provider or token\n   * starting from an element, and returns an array of them.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findInstances\n   *\n   * ```ts\n   * const components = ngMocks.findInstances(fixture, SidebarComponent);\n   * const services = ngMocks.findInstances('header', AuthService);\n   * const configs = ngMocks.findInstances(debugElement, APP_CONFIG);\n   * ```\n   */\n  findInstances<T>(elSelector: DebugNodeSelector, instanceClass: AnyDeclaration<T>): T[];\n\n  /**\n   * ngMocks.findTemplateRef searches for a TemplateRef which is matching the selector,\n   * and returns the first found, otherwise the notFoundValue.\n   * The TemplateRef can be rendered later on.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findTemplateRef\n   *\n   * ```ts\n   * const templateRef = ngMocks.findTemplateRef('sidebar', StructuralDirective, undefined);\n   * ```\n   */\n  findTemplateRef<T = any, D = undefined>(\n    elSelector: DebugNodeSelector,\n    selector: string | [string] | [string, any] | AnyType<any>,\n    notFoundValue: D,\n  ): D | TemplateRef<T>;\n\n  /**\n   * ngMocks.findTemplateRef searches for a TemplateRef which is matching the selector,\n   * and returns the first found.\n   * The TemplateRef can be rendered later on.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findTemplateRef\n   *\n   * ```ts\n   * const templateRef = ngMocks.findTemplateRef('sidebar', StructuralDirective);\n   * ```\n   */\n  findTemplateRef<T = any>(\n    elSelector: DebugNodeSelector,\n    selector: string | [string] | [string, any] | AnyType<any>,\n  ): TemplateRef<T>;\n\n  /**\n   * ngMocks.findTemplateRef searches for a TemplateRef which is matching the selector,\n   * and returns the first found, otherwise the notFoundValue.\n   * The TemplateRef can be rendered later on.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findTemplateRef\n   *\n   * ```ts\n   * const templateRef = ngMocks.findTemplateRef(['mat-row'], null);\n   * ```\n   */\n  findTemplateRef<T = any, D = undefined>(\n    selector: string | [string] | [string, any] | AnyType<any>,\n    notFoundValue: D,\n  ): D | TemplateRef<T>;\n\n  /**\n   * ngMocks.findTemplateRef searches for a TemplateRef which is matching the selector,\n   * and returns the first found.\n   * The TemplateRef can be rendered later on.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findTemplateRef\n   *\n   * ```ts\n   * const templateRef = ngMocks.findTemplateRef(['mat-row']);\n   * ```\n   */\n  findTemplateRef<T = any>(selector: string | [string] | [string, any] | AnyType<any>): TemplateRef<T>;\n\n  /**\n   * ngMocks.findTemplateRefs searches for all TemplateRefs which is matching the selector\n   * starting from an element, and returns an array of them.\n   * The TemplateRef can be rendered later on.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findTemplateRefs\n   *\n   * ```ts\n   * const templateRefs = ngMocks.findTemplateRefs('header', StructuralDirective);\n   * ```\n   */\n  findTemplateRefs<T = any>(\n    elSelector: DebugNodeSelector,\n    selector: string | [string] | [string, any] | AnyType<any>,\n  ): Array<TemplateRef<T>>;\n\n  /**\n   * ngMocks.findTemplateRefs searches for all TemplateRefs which is matching the selector,\n   * and returns an array of them.\n   * The TemplateRef can be rendered later on.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findTemplateRefs\n   *\n   * ```ts\n   * const templateRefs = ngMocks.findTemplateRefs(['mat-row']);\n   * ```\n   */\n  findTemplateRefs<T = any>(selector: string | [string] | [string, any] | AnyType<any>): Array<TemplateRef<T>>;\n\n  /**\n   * ngMocks.crawl correctly crawls through Angular DOM with respect of TemplateRefs and ng-containers.\n   * Usually, it's used internally.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/crawl\n   */\n  crawl(\n    elSelector: DebugNodeSelector,\n    callback: (\n      node: MockedDebugNode | MockedDebugElement,\n      parent?: MockedDebugNode | MockedDebugElement,\n    ) => boolean | void,\n    includeTextNodes?: boolean,\n  ): void;\n\n  /**\n   * ngMocks.stub lets replace a method, getter or setter with a dummy callback.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/stub\n   *\n   * ```ts\n   * ngMocks.stub(instance, 'save'); // save is an empty callback now.\n   * ngMocks.stub(instance, 'user', 'get'); // getter is an empty callback now.\n   * ngMocks.stub(instance, 'user', 'set'); // setter is an empty callback now.\n   * ```\n   */\n  stub<T = MockedFunction, I = any>(instance: I, name: keyof I, style?: 'get' | 'set'): T;\n\n  /**\n   * ngMocks.stub lets apply partial customizations to an instance.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/stub\n   *\n   * ```ts\n   * ngMocks.stub(instance, {\n   *   save: () => undefined,\n   *   user: null,\n   * });\n   * ```\n   */\n  stub<I extends object>(instance: I, overrides: Partial<I>): I;\n\n  /**\n   * ngMocks.stubMember lets inject spies it to getters of properties of an instance.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/stubMember\n   *\n   * ```ts\n   * ngMocks.stubMember(instance, 'user', jasmine.createSpy(), 'get')\n   *   .and.returnValue(null);\n   * ```\n   */\n  stubMember<T extends object, K extends keyof T, S extends () => T[K]>(\n    instance: T,\n    name: K,\n    stub: S,\n    encapsulation: 'get',\n  ): S;\n\n  /**\n   * ngMocks.stubMember lets inject spies it to setters of properties of an instance.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/stubMember\n   *\n   * ```ts\n   * ngMocks.stubMember(instance, 'user', jasmine.createSpy(), 'set')\n   *   .and.throwError('setter is forbidden');\n   * ```\n   */\n  stubMember<T extends object, K extends keyof T, S extends (value: T[K]) => void>(\n    instance: T,\n    name: K,\n    stub: S,\n    encapsulation: 'set',\n  ): S;\n\n  /**\n   * ngMocks.stubMember lets inject spies it to an instance.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/stubMember\n   *\n   * ```ts\n   * ngMocks.stubMember(instance, 'save', jasmine.createSpy());\n   * ngMocks.stubMember(instance, 'user', null);\n   * ```\n   */\n  stubMember<T extends object, K extends keyof T, S extends T[K]>(instance: T, name: K, stub: S): S;\n\n  /**\n   * ngMocks.guts provides a simple way to configure complex mocks.\n   * Please check documentation.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/guts\n   */\n  guts(\n    keep: AnyDeclaration<any> | Provider | Array<AnyDeclaration<any> | Provider> | null | undefined,\n    mock?:\n      | AnyDeclaration<any>\n      | NgModuleWithProviders\n      | Provider\n      | Array<AnyDeclaration<any> | NgModuleWithProviders | Provider>\n      | null\n      | undefined,\n    exclude?: AnyDeclaration<any> | Array<AnyDeclaration<any>> | null | undefined,\n  ): TestModuleMetadata;\n\n  /**\n   * ngMocks.faster lets reuse the same TestBed between tests instead of resetting it.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/faster\n   */\n  faster(): void;\n\n  /**\n   * ignoreOnConsole suppresses any log calls, other methods can be suppressed too.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/ignoreOnConsole\n   */\n  ignoreOnConsole(...args: Array<keyof typeof console>): void;\n\n  /**\n   * Thanks Ivy, it does not throw an error, and we have to use injector.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/throwOnConsole\n   */\n  throwOnConsole(...args: Array<keyof typeof console>): void;\n\n  /**\n   * ngMocks.formatHtml normalizes html for a DebugElement, fixture or html string.\n   * It removes redundant spaces, comments etc.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/formatHtml\n   *\n   * ```ts\n   * const html = ngMocks.formatHTML(fixture);\n   * const html = ngMocks.formatHTML(debugElement);\n   * const html = ngMocks.formatHTML('<div>   </div>');\n   * ```\n   */\n  formatHtml(html: FORMAT_SINGLE, outer?: boolean): string;\n\n  /**\n   * ngMocks.formatHtml normalizes html for an array of DebugElements, fixtures or html strings.\n   * It removes redundant spaces, comments etc.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/formatHtml\n   *\n   * const [html1, html2] = ngMocks.formatHTML([fixture1, fixture2]);\n   * const htmlStrings = ngMocks.formatHTML(debugElements);\n   */\n  formatHtml(html: FORMAT_SET, outer?: boolean): string[];\n\n  /**\n   * ngMocks.formatText normalizes text for a DebugElement, fixture or html string.\n   * It removes tags, redundant spaces, comments etc.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/formatText\n   *\n   * ```ts\n   * const txt = ngMocks.formatText(fixture);\n   * const txt = ngMocks.formatText(debugElement);\n   * const txt = ngMocks.formatText('<div>   </div>');\n   * ```\n   */\n  formatText(text: FORMAT_SINGLE, outer?: boolean): string;\n\n  /**\n   * ngMocks.formatText normalizes text for an array of DebugElements, fixtures or html strings.\n   * It removes tags, redundant spaces, comments etc.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/formatText\n   *\n   * const [txt1, txt2] = ngMocks.formatText([fixture1, fixture2]);\n   * const txtStrings = ngMocks.formatText(debugElements);\n   */\n  formatText(text: FORMAT_SET, outer?: boolean): string[];\n\n  /**\n   * ngMocks.flushTestBed resets TestBed.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/flushTestBed\n   */\n  flushTestBed(): void;\n\n  /**\n   * ngMocks.reset resets cache of ng-mocks.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/reset\n   */\n  reset(): void;\n\n  /**\n   * ngMocks.config lets customize default behavior of error reporting.\n   */\n  config(config: {\n    mockRenderCacheSize?: number | null;\n    onMockBuilderMissingDependency?: 'throw' | 'warn' | 'i-know-but-disable' | null;\n    onMockInstanceRestoreNeed?: 'throw' | 'warn' | 'i-know-but-disable' | null;\n    onTestBedFlushNeed?: 'throw' | 'warn' | 'i-know-but-disable' | null;\n  }): void;\n} = mockHelperObject;\n","import {\n  ClassProvider,\n  ExistingProvider,\n  FactoryProvider,\n  InjectionToken,\n  Provider,\n  StaticClassProvider,\n  ValueProvider,\n} from '@angular/core';\n\nimport { AnyDeclaration, AnyType } from '../common/core.types';\nimport funcImportExists from '../common/func.import-exists';\nimport mockHelperStub from '../mock-helper/mock-helper.stub';\nimport helperUseFactory from '../mock-service/helper.use-factory';\nimport { MockService } from '../mock-service/mock-service';\n\nconst defaultValue = {};\n\n/**\n * MockProviders creates an array of mock providers out of passed as parameters.\n *\n * @see https://ng-mocks.sudo.eu/api/MockProvider\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   providers: MockProviders(\n *     Dep1Service,\n *     Dep2Service,\n *   ),\n * });\n * ```\n */\nexport function MockProviders(...providers: Array<AnyDeclaration<any>>): FactoryProvider[] {\n  return providers.map((provider: any) => MockProvider(provider, defaultValue));\n}\n\n/**\n * MockProvider creates a mock provider out of passed an arbitrary service.\n *\n * @see https://ng-mocks.sudo.eu/api/MockProvider\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   providers: [\n *     MockProvider(Dep1Service),\n *     MockProvider(Dep2Service, {\n *       prop: true,\n *       func: () => 'mock',\n *     }),\n *   ],\n * });\n * ```\n */\nexport function MockProvider<I extends object>(instance: AnyType<I>, overrides?: Partial<I>): FactoryProvider;\n\n/**\n * MockProvider creates a mock provider out of passed an arbitrary token.\n *\n * @see https://ng-mocks.sudo.eu/api/MockProvider\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   providers: [\n *     MockProvider(APP_ID),\n *     MockProvider(WEB_SOCKET, {\n *       prop: true,\n *       func: () => 'mock',\n *     }),\n *   ],\n * });\n * ```\n */\nexport function MockProvider<I>(provider: InjectionToken<I>, useValue?: Partial<I>): FactoryProvider;\n\n/**\n * MockProvider creates a mock provider out of passed an arbitrary string token.\n *\n * @see https://ng-mocks.sudo.eu/api/MockProvider\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   providers: [\n *     MockProvider('web_socket', {\n *       prop: true,\n *       func: () => 'mock',\n *     }),\n *   ],\n * });\n * ```\n */\nexport function MockProvider<I = any>(provider: string, useValue?: Partial<I>): FactoryProvider;\n\n/**\n * MockProvider generates useValue based on passed parameters.\n *\n * @see https://ng-mocks.sudo.eu/api/MockProvider#useValue\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   providers: [\n *     MockProvider(AuthService, {isLoggedIn: true}, 'useValue'),\n *     MockProvider(APP_ROUTES, 5, 'useValue', true), // multi flag\n *   ],\n * });\n * ```\n */\nexport function MockProvider<I>(\n  provider: AnyDeclaration<I>,\n  value: ValueProvider['useValue'],\n  style: 'useValue',\n  multi?: ValueProvider['multi'],\n): ValueProvider;\n\n/**\n * MockProvider generates useExisting based on passed parameters.\n *\n * @see https://ng-mocks.sudo.eu/api/MockProvider#useExisting\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   providers: [\n *     MockProvider(AuthService, MockAuthService, 'useExisting', true),\n *     MockProvider(APP_ROUTES, MOCK_ROUTES, 'useExisting', true), // multi flag\n *   ],\n * });\n * ```\n */\nexport function MockProvider<I>(\n  provider: AnyDeclaration<I>,\n  value: ExistingProvider['useExisting'],\n  style: 'useExisting',\n  multi?: ExistingProvider['multi'],\n): ExistingProvider;\n\n/**\n * MockProvider generates useClass based on passed parameters.\n *\n * @see https://ng-mocks.sudo.eu/api/MockProvider#useClass\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   providers: [\n *     MockProvider(AuthService, MockAuthService, 'useClass', [ctorDep1, ctorDep2]),\n *     MockProvider(UserService, MockUserService, 'useClass', {\n *       multi: true, // multi flag\n *       deps: [ctorDep1, ctorDep2],\n *     }),\n *   ],\n * });\n * ```\n */\nexport function MockProvider<I>(\n  provider: AnyDeclaration<I>,\n  value: StaticClassProvider['useClass'],\n  style: 'useClass',\n  multiDeps?:\n    | StaticClassProvider['multi']\n    | StaticClassProvider['deps']\n    | {\n        multi?: StaticClassProvider['multi'];\n        deps?: StaticClassProvider['deps'];\n      },\n): ClassProvider;\n\n/**\n * MockProvider generates useFactory based on passed parameters.\n *\n * @see https://ng-mocks.sudo.eu/api/MockProvider#useFactory\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   providers: [\n *     MockProvider(AuthService, (dep1, dep2) => {\n *       // ...\n *     }, 'useFactory', [ctorDep1, ctorDep2]),\n *     MockProvider(UserService, (dep1, dep2) => {\n *       // ...\n *     }, 'useFactory', {\n *       multi: true, // multi flag\n *       deps: [ctorDep1, ctorDep2],\n *     }),\n *   ],\n * });\n * ```\n */\nexport function MockProvider<I>(\n  provider: AnyDeclaration<I>,\n  value: FactoryProvider['useFactory'],\n  style: 'useFactory',\n  multiDeps?:\n    | FactoryProvider['multi']\n    | FactoryProvider['deps']\n    | {\n        multi?: FactoryProvider['multi'];\n        deps?: FactoryProvider['deps'];\n      },\n): FactoryProvider;\n\nexport function MockProvider(\n  provide: any,\n  overrides: any = defaultValue,\n  style?: 'useValue' | 'useExisting' | 'useClass' | 'useFactory',\n  flags:\n    | boolean\n    | any[]\n    | {\n        deps?: any[];\n        multi?: boolean;\n      } = {},\n): Provider {\n  funcImportExists(provide, 'MockProvider');\n\n  const { deps, multi } =\n    typeof flags === 'boolean'\n      ? { deps: undefined, multi: flags }\n      : Array.isArray(flags)\n        ? {\n            deps: flags,\n            multi: undefined,\n          }\n        : flags;\n\n  if (style) {\n    return {\n      provide,\n      [style]: overrides,\n      deps,\n      multi,\n    };\n  }\n\n  return helperUseFactory(\n    provide,\n    () => MockService(provide),\n    value => {\n      if (overrides === defaultValue) {\n        return value;\n      }\n      if (!value) {\n        return overrides;\n      }\n\n      return mockHelperStub(value, overrides);\n    },\n  );\n}\n","import { Injector, ViewContainerRef } from '@angular/core';\nimport { getTestBed, MetadataOverride, TestBed, TestBedStatic, TestModuleMetadata } from '@angular/core/testing';\n\nimport funcExtractTokens from '../mock-builder/func.extract-tokens';\nimport { MockBuilder } from '../mock-builder/mock-builder';\nimport getOverrideDef from '../mock-builder/promise/get-override-def';\nimport { ngMocks } from '../mock-helper/mock-helper';\nimport mockHelperFasterInstall from '../mock-helper/mock-helper.faster-install';\nimport { MockProvider } from '../mock-provider/mock-provider';\nimport helperCreateClone from '../mock-service/helper.create-clone';\n\nimport coreConfig from './core.config';\nimport coreDefineProperty from './core.define-property';\nimport { flatten, mapEntries, mapValues } from './core.helpers';\nimport coreInjector from './core.injector';\nimport coreReflectMeta from './core.reflect.meta';\nimport coreReflectModuleResolve from './core.reflect.module-resolve';\nimport coreReflectProvidedIn from './core.reflect.provided-in';\nimport { NG_MOCKS, NG_MOCKS_ROOT_PROVIDERS, NG_MOCKS_TOUCHES } from './core.tokens';\nimport { AnyType, dependencyKeys } from './core.types';\nimport { getSourceOfMock } from './func.get-source-of-mock';\nimport funcGetType from './func.get-type';\nimport { isMockNgDef } from './func.is-mock-ng-def';\nimport { isNgDef } from './func.is-ng-def';\nimport { isNgModuleDefWithProviders } from './func.is-ng-module-def-with-providers';\nimport ngMocksUniverse from './ng-mocks-universe';\n\nconst applyOverride = (def: any, override: any) => {\n  if (isNgDef(def, 'c')) {\n    TestBed.overrideComponent(def, override);\n  } else if (isNgDef(def, 'd')) {\n    TestBed.overrideDirective(def, override);\n  } else if (isNgDef(def, 'm')) {\n    TestBed.overrideModule(def, override);\n  }\n  if (isNgDef(def, 't')) {\n    TestBed.overrideProvider(def, override);\n  } else if (isNgDef(def, 'i')) {\n    TestBed.overrideProvider(def, override);\n  }\n};\n\nconst applyOverrides = (overrides: Map<AnyType<any>, [MetadataOverride<any>, MetadataOverride<any>]>): void => {\n  for (const [def, [override, original]] of mapEntries(overrides)) {\n    (TestBed as any).ngMocksOverrides.set(def, {\n      ...original,\n      override,\n    });\n    applyOverride(def, override);\n  }\n};\n\n// Thanks Ivy and its TestBed.override - it does not clean up leftovers.\nconst applyNgMocksOverrides = (testBed: TestBedStatic & { ngMocksOverrides?: Map<any, any> }): void => {\n  if (testBed.ngMocksOverrides?.size) {\n    ngMocks.flushTestBed();\n    for (const [def, original] of mapEntries(testBed.ngMocksOverrides)) {\n      applyOverride(def, original);\n    }\n  }\n  testBed.ngMocksOverrides = undefined;\n};\n\nconst initTestBed = () => {\n  if (!(TestBed as any).ngMocksSelectors) {\n    coreDefineProperty(TestBed, 'ngMocksSelectors', new Map());\n  }\n  // istanbul ignore else\n  if (!(TestBed as any).ngMocksOverrides) {\n    coreDefineProperty(TestBed, 'ngMocksOverrides', new Map());\n  }\n};\n\nconst generateTouches = (moduleDef: Partial<Record<dependencyKeys, any>>, touches: Set<any>): void => {\n  for (const key of coreConfig.dependencies) {\n    for (const item of moduleDef[key] ? flatten(moduleDef[key]) : []) {\n      const def = funcGetType(item);\n      if (isNgModuleDefWithProviders(item)) {\n        generateTouches(item, touches);\n      }\n      if (touches.has(def)) {\n        continue;\n      }\n      touches.add(def);\n      if (typeof def !== 'function') {\n        continue;\n      }\n\n      if (!Object.prototype.hasOwnProperty.call(def, '__ngMocksTouches')) {\n        const local = new Set<any>();\n        const meta = coreReflectMeta(def);\n        coreDefineProperty(def, '__ngMocksTouches', local, false);\n        if (meta) {\n          generateTouches(meta, local);\n        }\n      }\n\n      mapValues(def.__ngMocksTouches, touches);\n    }\n  }\n};\n\nconst defineTouches = (testBed: TestBed, moduleDef: TestModuleMetadata, knownTouches?: Set<any>) => {\n  let touches = knownTouches;\n\n  if (!touches && ngMocksUniverse.getDefaults().size > 0) {\n    touches = funcExtractTokens(\n      (testBed as any)._providers || /* istanbul ignore next Ivy part */ (testBed as any)._compiler?.providers,\n    ).touches;\n    if (!touches) {\n      touches = new Set();\n      moduleDef.providers = moduleDef.providers || [];\n      moduleDef.providers.push({ provide: NG_MOCKS_TOUCHES, useValue: touches });\n    }\n    generateTouches(moduleDef, touches);\n  }\n\n  return touches;\n};\n\nconst applyPlatformOverrideDef = (def: any) => {\n  const ngModule = funcGetType(def);\n  if ((TestBed as any).ngMocksOverrides.has(ngModule)) {\n    return;\n  }\n\n  const original = coreReflectModuleResolve(ngModule);\n  const set = getOverrideDef(original);\n  if (set) {\n    (TestBed as any).ngMocksOverrides.set(ngModule, { set: original });\n    TestBed.overrideModule(ngModule, { set });\n  }\n};\n\nconst applyPlatformOverridesBasedOnProvidedIn = (provide: any, touches: Set<any>) => {\n  const providedIn = coreReflectProvidedIn(provide);\n  if (!providedIn) {\n    return;\n  }\n  // knownTouches present from MockBuilder and we can rely on it,\n  // otherwise we have to override the provider always.\n  if (typeof providedIn !== 'string' && !touches.has(providedIn)) {\n    return;\n  }\n  (TestBed as any).ngMocksOverrides.set(provide, {});\n  TestBed.overrideProvider(provide, MockProvider(provide as never));\n};\n\nconst applyPlatformOverridesBasedOnDefaults = (touches: Set<any>) => {\n  for (const [provide, [config]] of mapEntries(ngMocksUniverse.getDefaults())) {\n    if (config !== 'mock') {\n      continue;\n    }\n    if (!isNgDef(provide, 'i') && !isNgDef(provide, 't')) {\n      continue;\n    }\n    if (touches.has(provide)) {\n      continue;\n    }\n    if ((TestBed as any).ngMocksOverrides.has(provide)) {\n      continue;\n    }\n    applyPlatformOverridesBasedOnProvidedIn(provide, touches);\n  }\n};\n\nconst applyPlatformOverrides = (testBed: TestBed, touches: Set<any>) => {\n  // istanbul ignore else\n  if ((TestBed as any).ngMocksOverrides) {\n    const backup = ngMocksUniverse.touches;\n    ngMocksUniverse.touches = touches;\n    for (const def of flatten(testBed.ngModule || /* istanbul ignore next */ [])) {\n      applyPlatformOverrideDef(def);\n    }\n    applyPlatformOverridesBasedOnDefaults(touches);\n    ngMocksUniverse.touches = backup;\n  }\n};\n\nconst configureTestingModule =\n  (\n    original: TestBedStatic['configureTestingModule'],\n    instance: TestBedStatic,\n  ): TestBedStatic['configureTestingModule'] =>\n  (moduleDef: TestModuleMetadata) => {\n    initTestBed();\n\n    const useMockBuilder =\n      typeof moduleDef === 'object' &&\n      !!moduleDef &&\n      (!moduleDef.providers || moduleDef.providers.indexOf(MockBuilder) === -1);\n    // 0b10 - mock exist\n    // 0b01 - real exist\n    let hasMocks = 0;\n    const mockBuilder: Array<[any, any, boolean]> = [];\n    for (const key of useMockBuilder ? ['imports', 'declarations'] : []) {\n      for (const declaration of flatten(moduleDef[key as never]) as any[]) {\n        if (!declaration) {\n          continue;\n        }\n        mockBuilder.push([\n          isNgModuleDefWithProviders(declaration)\n            ? {\n                ngModule: getSourceOfMock(declaration.ngModule),\n                providers: declaration.providers,\n              }\n            : getSourceOfMock(declaration),\n          isNgModuleDefWithProviders(declaration) ? declaration.ngModule : declaration,\n          isMockNgDef(funcGetType(declaration)),\n        ]);\n        hasMocks |= mockBuilder[mockBuilder.length - 1][2] ? 0b10 : 0b01;\n      }\n    }\n    // We should do magic only then both mock and real exist.\n    let finalModuleDef = hasMocks === 0b11 ? undefined : moduleDef;\n    if (!finalModuleDef) {\n      let builder = MockBuilder(NG_MOCKS_ROOT_PROVIDERS);\n\n      for (const [source, def, isMock] of mockBuilder) {\n        const transform = def.prototype.__ngMocksConfig?.transform;\n        const options = {\n          export: !isNgDef(source, 'm'),\n          exportAll: false,\n          onRoot: true,\n        };\n        builder =\n          isMock && transform\n            ? builder.mock(source, transform, options)\n            : isMock\n              ? builder.mock(source, options)\n              : builder.keep(source, options);\n      }\n\n      finalModuleDef = builder.build();\n      finalModuleDef = {\n        ...moduleDef,\n        ...finalModuleDef,\n        providers: [...(moduleDef.providers ?? []), ...(finalModuleDef.providers as never)],\n      };\n    }\n\n    const testBed = getTestBed();\n\n    const providers = funcExtractTokens(finalModuleDef.providers);\n    const { mocks, overrides } = providers;\n    // touches are important,\n    // therefore we are trying to fetch them from the known providers.\n    const touches = defineTouches(testBed, finalModuleDef, providers.touches);\n\n    if (mocks) {\n      ngMocks.flushTestBed();\n    }\n\n    // istanbul ignore else\n    if (overrides) {\n      applyOverrides(overrides);\n    }\n    // _testModuleRef exists only after the 1st call,\n    // so we shouldn't override platform again.\n    if (touches && !(testBed as any)._instantiated && !(testBed as any)._testModuleRef) {\n      applyPlatformOverrides(testBed, touches);\n    }\n\n    return original.call(instance, finalModuleDef);\n  };\n\nconst resetTestingModule =\n  (original: TestBedStatic['resetTestingModule'], instance: TestBedStatic): TestBedStatic['resetTestingModule'] =>\n  () => {\n    ngMocksUniverse.global.delete('builder:config');\n    ngMocksUniverse.global.delete('builder:module');\n    (TestBed as any).ngMocksSelectors = undefined;\n    applyNgMocksOverrides(TestBed);\n\n    return original.call(instance);\n  };\n\n// Monkey-patching ViewContainerRef.createComponent to replace dynamic imports with mocked declarations.\nconst patchVcrInstance = (vcrInstance: ViewContainerRef) => {\n  if (!(ViewContainerRef as any).ngMocksOverridesPatched) {\n    coreDefineProperty(ViewContainerRef, 'ngMocksOverridesPatched', true);\n\n    // istanbul ignore else\n    if (vcrInstance.createComponent) {\n      const createComponent = vcrInstance.createComponent;\n      const patchedCreateComponent = helperCreateClone(\n        createComponent,\n        undefined,\n        undefined,\n        function (component: any, ...createComponentArgs: any[]) {\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore\n          const thisVrc: ViewContainerRef = this;\n          const map = coreInjector(NG_MOCKS, thisVrc.injector);\n\n          return createComponent.apply(thisVrc, [map?.get(component) ?? component, ...createComponentArgs] as any);\n        },\n      );\n\n      coreDefineProperty(vcrInstance.constructor.prototype, 'createComponent', patchedCreateComponent, true);\n      coreDefineProperty(vcrInstance, 'createComponent', patchedCreateComponent, true);\n    }\n  }\n};\n\nconst createComponent =\n  (original: TestBedStatic['createComponent'], instance: TestBedStatic): TestBedStatic['createComponent'] =>\n  component => {\n    const fixture = original.call(instance, component);\n    try {\n      const vcr = fixture.debugElement.injector.get(ViewContainerRef);\n      patchVcrInstance(vcr);\n    } catch {\n      // nothing to do\n    }\n\n    return fixture as never;\n  };\n\nconst viewContainerInstall = () => {\n  const vcr: any = ViewContainerRef;\n\n  // istanbul ignore else\n  if (!vcr.ngMocksOverridesInstalled) {\n    const ngElementId = vcr.__NG_ELEMENT_ID__;\n\n    // istanbul ignore else\n    if (ngElementId) {\n      coreDefineProperty(\n        vcr,\n        '__NG_ELEMENT_ID__',\n        helperCreateClone(ngElementId, undefined, undefined, (...ngElementIdArgs: any[]) => {\n          const vcrInstance = ngElementId.apply(ngElementId, ngElementIdArgs);\n          patchVcrInstance(vcrInstance);\n\n          return vcrInstance;\n        }),\n        true,\n      );\n    }\n    coreDefineProperty(TestBed, 'createComponent', createComponent(TestBed.createComponent as never, TestBed as never));\n\n    coreDefineProperty(ViewContainerRef, 'ngMocksOverridesInstalled', true);\n  }\n};\n\n// this function monkey-patches Angular injectors.\nconst installInjector = (injector: Injector & { __ngMocksInjector?: any }): Injector => {\n  // skipping the matched injector\n  if (injector.constructor.prototype.__ngMocksInjector || !injector.constructor.prototype.get) {\n    return injector;\n  }\n\n  // marking the injector as patched\n  coreDefineProperty(injector.constructor.prototype, '__ngMocksInjector', true);\n  const injectorGet = injector.constructor.prototype.get;\n\n  // patch\n  injector.constructor.prototype.get = helperCreateClone(\n    injectorGet,\n    undefined,\n    undefined,\n    function (token: any, ...argsGet: any) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      const binding: any = this;\n\n      // Here we can implement custom logic how to inject token,\n      // for example, replace with a provider def we need.\n\n      const result = injectorGet.call(binding, token, ...argsGet);\n      // If the result is an injector, we should patch it too.\n      if (\n        result &&\n        typeof result === 'object' &&\n        typeof result.constructor === 'function' &&\n        typeof result.constructor.name === 'string' &&\n        result.constructor.name.slice(-8) === 'Injector'\n      ) {\n        installInjector(result);\n      }\n\n      return result;\n    },\n  );\n\n  return injector;\n};\n\nconst install = () => {\n  // istanbul ignore else\n  if (!(TestBed as any).ngMocksOverridesInstalled) {\n    const hooks = mockHelperFasterInstall();\n    viewContainerInstall();\n\n    // istanbul ignore else\n    if (hooks.before.indexOf(configureTestingModule) === -1) {\n      hooks.before.push(configureTestingModule);\n    }\n    // istanbul ignore else\n    if (hooks.after.indexOf(resetTestingModule) === -1) {\n      hooks.after.push(resetTestingModule);\n    }\n\n    coreDefineProperty(TestBed, 'ngMocksOverridesInstalled', true);\n    const injectorCreate = Injector.create;\n    Injector.create = helperCreateClone(injectorCreate, undefined, undefined, (...argsCreate: any) =>\n      installInjector(injectorCreate.apply(Injector, argsCreate)),\n    );\n    try {\n      // force install of our injector.\n      Injector.create({ length: 0, providers: [] } as never);\n    } catch {\n      // nothing to do.\n    }\n  }\n};\n\ninstall();\n","import { PipeTransform } from '@angular/core';\n\nimport { MockedComponent } from '../mock-component/types';\nimport { MockedDirective } from '../mock-directive/types';\nimport { MockedModule } from '../mock-module/types';\nimport { MockedPipe } from '../mock-pipe/types';\n\nimport { Type } from './core.types';\nimport { isNgDef } from './func.is-ng-def';\n\n/**\n * Checks whether a declaration is the mock class of a module.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockedNgDefOf\n *\n * ```ts\n * isMockedNgDefOf(MockModule, RealModule, 'm'); // returns true\n * isMockedNgDefOf(MockModule, ArbitraryModule, 'm'); // returns false\n * isMockedNgDefOf(MockModule, ArbitraryClass, 'm'); // returns false\n * ```\n */\nexport function isMockedNgDefOf<T>(declaration: any, type: Type<T>, ngType: 'm'): declaration is Type<MockedModule<T>>;\n\n/**\n * Checks whether a declaration is the mock class of a component.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockedNgDefOf\n *\n * ```ts\n * isMockedNgDefOf(MockComponent, RealComponent, 'c'); // returns true\n * isMockedNgDefOf(MockComponent, ArbitraryComponent, 'c'); // returns false\n * isMockedNgDefOf(MockComponent, ArbitraryClass, 'c'); // returns false\n * ```\n */\nexport function isMockedNgDefOf<T>(\n  declaration: any,\n  type: Type<T>,\n  ngType: 'c',\n): declaration is Type<MockedComponent<T>>;\n\n/**\n * Checks whether a declaration is the mock class of a directive.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockedNgDefOf\n *\n * ```ts\n * isMockedNgDefOf(MockDirective, RealDirective, 'd'); // returns true\n * isMockedNgDefOf(MockDirective, ArbitraryDirective, 'd'); // returns false\n * isMockedNgDefOf(MockDirective, ArbitraryClass, 'd'); // returns false\n * ```\n */\nexport function isMockedNgDefOf<T>(\n  declaration: any,\n  type: Type<T>,\n  ngType: 'd',\n): declaration is Type<MockedDirective<T>>;\n\n/**\n * Checks whether a declaration is the mock class of a pipe.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockedNgDefOf\n *\n * ```ts\n * isMockedNgDefOf(MockPipe, RealPipe, 'p'); // returns true\n * isMockedNgDefOf(MockPipe, ArbitraryPipe, 'p'); // returns false\n * isMockedNgDefOf(MockPipe, ArbitraryClass, 'p'); // returns false\n * ```\n */\nexport function isMockedNgDefOf<T extends PipeTransform>(\n  declaration: any,\n  type: Type<T>,\n  ngType: 'p',\n): declaration is Type<MockedPipe<T>>;\n\n/**\n * Checks whether a declaration is the mock class of a thing.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockedNgDefOf\n *\n * ```ts\n * isMockedNgDefOf(MockPipe, RealPipe); // returns true\n * isMockedNgDefOf(MockComponent, ArbitraryComponent); // returns false\n * isMockedNgDefOf(MockPipe, ArbitraryClass); // returns false\n * ```\n */\nexport function isMockedNgDefOf<T>(declaration: any, type: Type<T>): declaration is Type<T>;\n\nexport function isMockedNgDefOf<T>(declaration: any, type: Type<T>, ngType?: any): declaration is Type<T> {\n  return (\n    typeof declaration === 'function' && declaration.mockOf === type && (ngType ? isNgDef(declaration, ngType) : true)\n  );\n}\n","import { MockedComponent } from '../mock-component/types';\nimport { MockedDirective } from '../mock-directive/types';\nimport { MockedModule } from '../mock-module/types';\nimport { MockedPipe } from '../mock-pipe/types';\n\nimport coreInjector from './core.injector';\nimport { NG_MOCKS } from './core.tokens';\nimport { AnyType, Type } from './core.types';\nimport funcGetName from './func.get-name';\nimport { isMockedNgDefOf } from './func.is-mocked-ng-def-of';\nimport ngMocksUniverse from './ng-mocks-universe';\n\nconst getMock = (declaration: any, source: any, mocks?: Map<any, any>) => {\n  if (mocks && !mocks.has(source)) {\n    throw new Error(`There is no mock for ${funcGetName(source)}`);\n  }\n  let mock = mocks ? mocks.get(source) : undefined;\n  if (mock === source) {\n    mock = undefined;\n  }\n\n  // If we are not in the MockBuilder env we can rely on the current cache.\n  if (!mock && source !== declaration) {\n    mock = declaration;\n  } else if (!mock && ngMocksUniverse.cacheDeclarations.has(source)) {\n    mock = ngMocksUniverse.cacheDeclarations.get(source);\n  }\n\n  return mock;\n};\n\n/**\n * Returns the mock class of a mock module based on a mock module or a source module.\n * It works in runtime if the module has been mocked.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/getMockedNgDefOf\n *\n * ```ts\n * getMockedNgDefOf(RealModule, 'm'); // returns MockModule\n * getMockedNgDefOf(MockModule, 'm'); // returns MockModule\n * getMockedNgDefOf(ArbitraryClass, 'm'); // throws\n * ```\n */\nexport function getMockedNgDefOf<T>(declaration: AnyType<T>, type: 'm'): Type<MockedModule<T>>;\n\n/**\n * Returns the mock class of a mock component based on a mock component or a source component.\n * It works in runtime if the component has been mocked.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/getMockedNgDefOf\n *\n * ```ts\n * getMockedNgDefOf(RealComponent, 'c'); // returns MockComponent\n * getMockedNgDefOf(MockComponent, 'c'); // returns MockComponent\n * getMockedNgDefOf(ArbitraryClass, 'c'); // throws\n * ```\n */\nexport function getMockedNgDefOf<T>(declaration: AnyType<T>, type: 'c'): Type<MockedComponent<T>>;\n\n/**\n * Returns the mock class of a mock directive based on a mock directive or a source directive.\n * It works in runtime if the directive has been mocked.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/getMockedNgDefOf\n *\n * ```ts\n * getMockedNgDefOf(RealDirective, 'd'); // returns MockDirective\n * getMockedNgDefOf(MockDirective, 'd'); // returns MockDirective\n * getMockedNgDefOf(ArbitraryClass, 'd'); // throws\n * ```\n */\nexport function getMockedNgDefOf<T>(declaration: AnyType<T>, type: 'd'): Type<MockedDirective<T>>;\n\n/**\n * Returns the mock class of a mock pipe based on a mock pipe or a source pipe.\n * It works in runtime if the pipe has been mocked.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/getMockedNgDefOf\n *\n * ```ts\n * getMockedNgDefOf(RealPipe, 'p'); // returns MockPipe\n * getMockedNgDefOf(MockPipe, 'p'); // returns MockPipe\n * getMockedNgDefOf(ArbitraryClass, 'p'); // throws\n * ```\n */\nexport function getMockedNgDefOf<T>(declaration: AnyType<T>, type: 'p'): Type<MockedPipe<T>>;\n\n/**\n * Returns the mock class of a thing based on a mock class or a source class.\n * It works in runtime if the thing has been mocked.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/getMockedNgDefOf\n *\n * ```ts\n * getMockedNgDefOf(RealComponent); // returns MockComponent\n * getMockedNgDefOf(MockPipe); // returns MockPipe\n * getMockedNgDefOf(ArbitraryClass); // throws\n * ```\n */\nexport function getMockedNgDefOf<T>(declaration: AnyType<T>): Type<T>;\n\nexport function getMockedNgDefOf(declaration: any, type?: any): any {\n  const source = declaration.mockOf ?? declaration;\n  const mocks = coreInjector(NG_MOCKS);\n\n  const mock = getMock(declaration, source, mocks);\n  if (mock && !type) {\n    return mock;\n  }\n  if (mock && type && isMockedNgDefOf(mock, source, type)) {\n    return mock;\n  }\n\n  throw new Error(`There is no mock for ${funcGetName(source)}`);\n}\n","import { PipeTransform } from '@angular/core';\n\nimport { MockedComponent } from '../mock-component/types';\nimport { MockedDirective } from '../mock-directive/types';\nimport { MockedModule } from '../mock-module/types';\nimport { MockedPipe } from '../mock-pipe/types';\n\nimport { Type } from './core.types';\nimport funcIsMock from './func.is-mock';\nimport { isNgDef } from './func.is-ng-def';\n\n/**\n * Checks whether the instance derives from a mock module.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockOf\n *\n * ```ts\n * isMockOf(moduleInstance, RealModule, 'm'); // returns true\n * isMockOf(moduleInstance, ArbitraryClass, 'm'); // returns false\n * ```\n */\nexport function isMockOf<T>(instance: any, declaration: Type<T>, ngType: 'm'): instance is MockedModule<T>;\n\n/**\n * Checks whether the instance derives from a mock component.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockOf\n *\n * ```ts\n * isMockOf(componentInstance, RealComponent, 'c'); // returns true\n * isMockOf(componentInstance, ArbitraryClass, 'c'); // returns false\n * ```\n */\nexport function isMockOf<T>(instance: any, declaration: Type<T>, ngType: 'c'): instance is MockedComponent<T>;\n\n/**\n * Checks whether the instance derives from a mock directive.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockOf\n *\n * ```ts\n * isMockOf(directiveInstance, RealDirective, 'd'); // returns true\n * isMockOf(directiveInstance, ArbitraryClass, 'd'); // returns false\n * ```\n */\nexport function isMockOf<T>(instance: any, declaration: Type<T>, ngType: 'd'): instance is MockedDirective<T>;\n\n/**\n * Checks whether the instance derives from a mock pipe.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockOf\n *\n * ```ts\n * isMockOf(pipeInstance, RealPipe, 'p'); // returns true\n * isMockOf(pipeInstance, ArbitraryClass, 'p'); // returns false\n * ```\n */\nexport function isMockOf<T extends PipeTransform>(\n  instance: any,\n  declaration: Type<T>,\n  ngType: 'p',\n): instance is MockedPipe<T>;\n\n/**\n * Checks whether the instance derives from a mock type.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockOf\n *\n * ```ts\n * isMockOf(componentInstance, RealComponent); // returns true\n * isMockOf(pipeInstance, RealPipe); // returns true\n * isMockOf(pipeInstance, ArbitraryClass); // returns false\n * ```\n */\nexport function isMockOf<T>(instance: any, declaration: Type<T>): instance is T;\n\nexport function isMockOf<T>(instance: any, declaration: Type<T>, ngType?: any): instance is T {\n  return (\n    funcIsMock(instance) &&\n    instance.constructor === declaration &&\n    (ngType ? isNgDef(instance.constructor, ngType) : isNgDef(instance.constructor))\n  );\n}\n","import funcIsMock from './func.is-mock';\nimport { MockValidator } from './mock-control-value-accessor';\n\n/**\n * isMockValidator helps to assert that an instance is a mock Validator\n * to perform validationChange simulations.\n * Usually, it is used in if statements.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockValidator\n */\nexport const isMockValidator = <T>(value: T): value is T & MockValidator => {\n  if (!funcIsMock(value)) {\n    return false;\n  }\n\n  return !!(value as any).__ngMocksConfig.isValidator;\n};\n","import { InjectionToken, Injector } from '@angular/core';\n\nimport { AnyDeclaration, AnyType } from '../common/core.types';\nimport funcImportExists from '../common/func.import-exists';\nimport ngMocksStack, { NgMocksStack } from '../common/ng-mocks-stack';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport mockInstanceForgotReset from './mock-instance-forgot-reset';\n\nlet currentStack: NgMocksStack;\nngMocksStack.subscribePush(state => {\n  currentStack = state;\n});\nngMocksStack.subscribePop((state, stack) => {\n  for (const declaration of state.mockInstance || /* istanbul ignore next */ []) {\n    if (ngMocksUniverse.configInstance.has(declaration)) {\n      const universeConfig = ngMocksUniverse.configInstance.get(declaration);\n      universeConfig.overloads.pop();\n      ngMocksUniverse.configInstance.set(declaration, {\n        ...universeConfig,\n      });\n    }\n  }\n  currentStack = stack[stack.length - 1];\n});\n\ninterface MockInstanceArgs {\n  accessor?: 'get' | 'set';\n  data?: any;\n  key?: string;\n  value?: any;\n}\n\nconst parseMockInstanceArgs = (args: any[]): MockInstanceArgs => {\n  const set: MockInstanceArgs = {};\n\n  if (typeof args[0] === 'string') {\n    set.key = args[0];\n    set.value = args[1];\n    set.accessor = args[2];\n  } else {\n    set.value = args[0];\n    if (set.value && typeof set.value === 'object') {\n      set.value = set.value.init;\n    }\n  }\n\n  return set;\n};\n\nconst checkReset: Array<[any, any, any?]> = [];\nlet checkCollect = false;\n\n// istanbul ignore else: maybe a different runner is used\nif (typeof beforeEach !== 'undefined') {\n  beforeEach(() => (checkCollect = true));\n  beforeEach(() => mockInstanceForgotReset(checkReset));\n  afterEach(() => (checkCollect = false));\n}\n\nconst mockInstanceConfig = <T>(\n  declaration: AnyDeclaration<T>,\n  name: string | undefined,\n  stub: any,\n  encapsulation?: 'get' | 'set',\n) => {\n  const config = ngMocksUniverse.configInstance.has(declaration) ? ngMocksUniverse.configInstance.get(declaration) : {};\n  const overloads = config.overloads || [];\n  overloads.push([name, stub, encapsulation]);\n  config.overloads = overloads;\n  ngMocksUniverse.configInstance.set(declaration, {\n    ...config,\n  });\n  const mockInstances = currentStack.mockInstance ?? [];\n  mockInstances.push(declaration);\n  currentStack.mockInstance = mockInstances;\n\n  if (checkCollect) {\n    checkReset.push([declaration, ngMocksUniverse.configInstance.get(declaration), currentStack]);\n  }\n\n  return stub;\n};\n\n/**\n * This signature of MockInstance lets customize the getter of a property.\n *\n * @see https://ng-mocks.sudo.eu/api/MockInstance\n *\n * ```ts\n * MockInstance(ArbitraryComponent, 'currentUser$', () => mockUser$, 'get');\n * MockInstance(ArbitraryService, 'enabled', () => false, 'get');\n * ```\n */\nexport function MockInstance<T extends object, K extends keyof T, S extends () => T[K]>(\n  instance: AnyType<T>,\n  name: K,\n  stub: S,\n  encapsulation: 'get',\n): S;\n\n/**\n * This signature of MockInstance lets customize the setters of a property.\n *\n * @see https://ng-mocks.sudo.eu/api/MockInstance\n *\n * ```ts\n * const currentUserSetterSpy = jasmine.createSpy();\n * MockInstance(ArbitraryComponent, 'currentUser', currentUserSetterSpy, 'set');\n *\n * let relServiceEnabled: boolean;\n * MockInstance(ArbitraryService, 'enabled', value => relServiceEnabled = value, 'set');\n * ```\n */\nexport function MockInstance<T extends object, K extends keyof T, S extends (value: T[K]) => void>(\n  instance: AnyType<T>,\n  name: K,\n  stub: S,\n  encapsulation: 'set',\n): S;\n\n/**\n * This signature of MockInstance lets customize the properties and methods.\n *\n * @see https://ng-mocks.sudo.eu/api/MockInstance\n *\n * ```ts\n * MockInstance(ArbitraryComponent, 'onInit', onInitSpy);\n * MockInstance(ArbitraryDirective, 'onDestroy', () => {});\n * MockInstance(ArbitraryService, 'currentDate', new Date());\n * MockInstance(ArbitraryModule, 'currentUser', mockUser);\n * ```\n */\nexport function MockInstance<T extends object, K extends keyof T, S extends T[K]>(\n  instance: AnyType<T>,\n  name: K,\n  stub: S,\n): S;\n\n/**\n * This signature of MockInstance lets customize tokens with a callback.\n *\n * @see https://ng-mocks.sudo.eu/api/MockInstance\n *\n * ```ts\n * MockInstance(webSocketToken, () => mockWebSocket);\n * ```\n */\nexport function MockInstance<T>(\n  declaration: InjectionToken<T>,\n  init?: (instance: T | undefined, injector: Injector | undefined) => Partial<T> | Array<Partial<T>>,\n): void;\n\n/**\n * This signature of MockInstance lets customize tokens with a callback.\n *\n * @deprecated please pass the callback directly instead of config.\n * @see https://ng-mocks.sudo.eu/api/MockInstance\n *\n * ```ts\n * MockInstance(webSocketToken, {\n *   init: () => mockWebSocket,\n * });\n * ```\n */\nexport function MockInstance<T>(\n  declaration: InjectionToken<T>,\n  config?: {\n    init?: (instance: T | undefined, injector: Injector | undefined) => Partial<T> | Array<Partial<T>>;\n  },\n): void;\n\n/**\n * This signature of MockInstance lets customize the instances of mock classes with a callback.\n * You can return a shape or change the instance.\n *\n * @see https://ng-mocks.sudo.eu/api/MockInstance\n *\n * ```ts\n * MockInstance(ArbitraryComponent, (instance, injector) => {\n *   instance.enabled = true;\n *   instance.db = injector.get(DatabaseService);\n * });\n * MockInstance(ArbitraryDirective, () => {\n *   return {\n *     someProperty: true,\n *   };\n * });\n * ```\n */\nexport function MockInstance<T>(\n  declaration: AnyType<T>,\n  init?: (instance: T, injector: Injector | undefined) => void | Partial<T> | Array<Partial<T>>,\n): void;\n\n/**\n * This signature of MockInstance lets customize the instances of mock classes with a callback.\n * You can return a shape or change the instance.\n *\n * @deprecated please pass the callback directly instead of config.\n * @see https://ng-mocks.sudo.eu/api/MockInstance\n *\n * ```ts\n * MockInstance(ArbitraryComponent, {\n *   init: (instance, injector) => {\n *     instance.enabled = true;\n *     instance.db = injector.get(DatabaseService);\n *   },\n * });\n * MockInstance(ArbitraryDirective, {\n *   init: () => {\n *     return {\n *       someProperty: true,\n *     };\n *   },\n * });\n * ```\n */\nexport function MockInstance<T>(\n  declaration: AnyType<T>,\n  config?: {\n    init?: (instance: T, injector: Injector | undefined) => void | Partial<T> | Array<Partial<T>>;\n  },\n): void;\n\nexport function MockInstance<T>(declaration: AnyDeclaration<T>, ...args: any[]) {\n  funcImportExists(declaration, 'MockInstance');\n\n  if (args.length > 0) {\n    const { key, value, accessor } = parseMockInstanceArgs(args);\n\n    return mockInstanceConfig(declaration, key, value, accessor);\n  }\n\n  const config = ngMocksUniverse.configInstance.get(declaration) || /* istanbul ignore next */ {};\n\n  ngMocksUniverse.configInstance.set(declaration, {\n    ...config,\n    overloads: [],\n  });\n\n  // When we are calling MockInstance without a config we need to reset it from the checks too.\n  for (let i = checkReset.length - 1; i >= 0; i -= 1) {\n    if (checkReset[i][0] === declaration && checkReset[i][2] === currentStack) {\n      checkReset.splice(i, 1);\n    }\n  }\n}\n\n/**\n * Interface describes how to configure scopes for MockInstance.\n *\n * @see https://ng-mocks.sudo.eu/api/MockInstance#customization-scopes\n */\n// istanbul ignore next: issue in istanbul https://github.com/istanbuljs/nyc/issues/1209\nexport namespace MockInstance {\n  /**\n   * Creates a scope which remembers all future customizations of MockInstance.\n   * It allows to reset them afterwards.\n   *\n   * @see https://ng-mocks.sudo.eu/api/MockInstance#remember\n   */\n  export function remember() {\n    ngMocksStack.stackPush();\n  }\n\n  /**\n   * Resets all changes in the current scope.\n   *\n   * @see https://ng-mocks.sudo.eu/api/MockInstance#restore\n   */\n  export function restore() {\n    ngMocksStack.stackPop();\n  }\n\n  /**\n   * Creates a local scope in `beforeEach` and `afterEach`.\n   * If `suite` has been passed, then `beforeAll` and `afterAll` are used.\n   *\n   * @see https://ng-mocks.sudo.eu/api/MockInstance#scope\n   */\n  export function scope(scope: 'all' | 'suite' | 'case' = 'case') {\n    if (scope === 'all' || scope === 'suite') {\n      beforeAll(MockInstance.remember);\n      afterAll(MockInstance.restore);\n    }\n    if (scope === 'all' || scope === 'case') {\n      beforeEach(MockInstance.remember);\n      afterEach(MockInstance.restore);\n    }\n  }\n}\n\n/**\n * MockReset resets everything what has been configured in MockInstance.\n * Please consider using MockInstance.scope() instead,\n * which respects customizations between tests.\n *\n * https://ng-mocks.sudo.eu/api/MockInstance#resetting-customization\n * https://ng-mocks.sudo.eu/api/MockInstance#scope\n */\nexport function MockReset() {\n  ngMocksUniverse.configInstance.clear();\n}\n","import funcGetName from '../common/func.get-name';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nexport default (checkReset: Array<[any, any, any?]>) => {\n  const showError: string[] = [];\n\n  // istanbul ignore next: because of the installed global scope switcher we cannot test this part\n  while (checkReset.length > 0) {\n    const [declaration, config] = checkReset.pop() || /* istanbul ignore next */ [];\n    if (config === ngMocksUniverse.configInstance.get(declaration)) {\n      showError.push(typeof declaration === 'function' ? funcGetName(declaration) : declaration);\n    }\n  }\n\n  // istanbul ignore if: because of the installed global scope switcher we cannot test this part\n  if (showError.length > 0) {\n    const globalFlags = ngMocksUniverse.global.get('flags');\n    const errorMessage = [\n      `MockInstance: side effects have been detected (${showError.join(', ')}).`,\n      'Forgot to add MockInstance.scope() or to call MockInstance.restore()?',\n    ].join(' ');\n    if (globalFlags.onMockInstanceRestoreNeed === 'warn') {\n      console.warn(errorMessage);\n    } else if (globalFlags.onMockInstanceRestoreNeed === 'throw') {\n      throw new Error(errorMessage);\n    }\n  }\n};\n","import { Type } from '../common/core.types';\nimport errorJestMock from '../common/error.jest-mock';\nimport funcGetName from '../common/func.get-name';\nimport { isNgDef } from '../common/func.is-ng-def';\nimport { MockComponent } from '../mock-component/mock-component';\nimport { MockedComponent } from '../mock-component/types';\nimport { MockDirective } from '../mock-directive/mock-directive';\nimport { MockedDirective } from '../mock-directive/types';\nimport { MockPipe } from '../mock-pipe/mock-pipe';\nimport { MockedPipe } from '../mock-pipe/types';\n\n/**\n * MockDeclarations creates an array of mock declaration classes out of declarations passed as parameters.\n *\n * @see https://ng-mocks.sudo.eu/api/MockComponent\n * @see https://ng-mocks.sudo.eu/api/MockDirective\n * @see https://ng-mocks.sudo.eu/api/MockPipe\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   declarations: MockDeclarations(\n *     Dep1Component,\n *     Dep2Directive,\n *     Dep3Pipe,\n *   ),\n * });\n * ```\n */\nexport function MockDeclarations(...declarations: Array<Type<any>>): Array<Type<any>> {\n  return declarations.map(MockDeclaration);\n}\n\n/**\n * MockDeclaration creates a mock declaration class out of an arbitrary declaration.\n *\n * @see https://ng-mocks.sudo.eu/api/MockComponent\n * @see https://ng-mocks.sudo.eu/api/MockDirective\n * @see https://ng-mocks.sudo.eu/api/MockPipe\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   declarations: [\n *     MockDeclaration(Dep1Component),\n *     MockDeclaration(Dep2Directive),\n *     MockDeclaration(Dep3Pipe),\n *   ],\n * });\n * ```\n */\nexport function MockDeclaration<T>(declaration: Type<T>): Type<MockedPipe<T> | MockedDirective<T> | MockedComponent<T>>;\n\nexport function MockDeclaration<T>(\n  declaration: Type<T>,\n): Type<MockedPipe<T> | MockedDirective<T> | MockedComponent<T>> {\n  if (isNgDef(declaration, 'p')) {\n    return MockPipe(declaration);\n  }\n  if (isNgDef(declaration, 'c')) {\n    return MockComponent(declaration);\n  }\n  if (isNgDef(declaration, 'd')) {\n    return MockDirective(declaration);\n  }\n\n  errorJestMock(declaration);\n  throw new Error(\n    [\n      'MockDeclaration does not know how to mock',\n      typeof declaration === 'function' ? funcGetName(declaration) : declaration,\n    ].join(' '),\n  );\n}\n","import coreReflectPipeResolve from '../common/core.reflect.pipe-resolve';\nimport { DirectiveIo } from '../common/core.types';\nimport funcDirectiveIoParse from '../common/func.directive-io-parse';\nimport { isNgDef } from '../common/func.is-ng-def';\n\nconst generateTemplateAttrWrap = (prop: string, type: 'i' | 'o') => (type === 'i' ? `[${prop}]` : `(${prop})`);\n\nconst generateTemplateAttrWithParams = (prop: string, type: 'i' | 'o'): string => {\n  let tpl = ` ${generateTemplateAttrWrap(prop, type)}=\"`;\n  tpl += type === 'i' ? prop : `__ngMocksOutput('${prop}', $event)`;\n  tpl += '\"';\n\n  return tpl;\n};\n\nconst generateTemplateAttr = (bindings: null | undefined | any[], attr: Array<DirectiveIo>, type: 'i' | 'o') => {\n  // unprovided params for inputs should render empty placeholders\n  if (!bindings && type === 'o') {\n    return '';\n  }\n\n  let mockTemplate = '';\n  const keys = bindings ?? attr;\n  for (const definition of attr) {\n    const { name, alias } = funcDirectiveIoParse(definition);\n\n    mockTemplate += keys.indexOf(alias || name) === -1 ? '' : generateTemplateAttrWithParams(alias || name, type);\n  }\n\n  return mockTemplate;\n};\n\nexport default (declaration: any, { selector, bindings, inputs, outputs }: any): string => {\n  let mockTemplate = '';\n\n  // istanbul ignore else\n  if (typeof declaration === 'string') {\n    mockTemplate = declaration;\n  } else if (isNgDef(declaration, 'p') && bindings && bindings.indexOf('$implicit') !== -1) {\n    mockTemplate = `{{ $implicit | ${coreReflectPipeResolve(declaration).name} }}`;\n  } else if (selector) {\n    mockTemplate += `<${selector}`;\n    mockTemplate += generateTemplateAttr(bindings, inputs, 'i');\n    mockTemplate += generateTemplateAttr(bindings, outputs, 'o');\n    mockTemplate += `></${selector}>`;\n  }\n\n  return mockTemplate;\n};\n","import { Component, Directive } from '@angular/core';\n\nimport coreConfig from '../common/core.config';\nimport coreDefineProperty from '../common/core.define-property';\nimport { Type } from '../common/core.types';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\nimport helperDefinePropertyDescriptor from '../mock-service/helper.define-property-descriptor';\n\nimport funcGenerateTemplate from './func.generate-template';\n\nconst generateWrapperOutput =\n  (instance: any) =>\n  (prop: keyof any, event: any): void => {\n    if (typeof instance[prop] === 'function') {\n      return instance[prop](event);\n    }\n    if (instance[prop] && typeof instance[prop] === 'object' && typeof instance[prop].emit === 'function') {\n      return instance[prop].emit(event);\n    }\n    if (instance[prop] && typeof instance[prop] === 'object' && typeof instance[prop].next === 'function') {\n      return instance[prop].next(event);\n    }\n\n    instance[prop] = event;\n  };\n\nconst generateWrapperComponent = ({ bindings, options, inputs }: any) => {\n  class MockRenderComponent {\n    public constructor() {\n      coreDefineProperty(this, '__ngMocksOutput', generateWrapperOutput(this));\n\n      // The getter helps to remove the __ngContext__ attribute from <mock-render> tag.\n      // It helps with snapshot assertions.\n      // @see https://github.com/help-me-mom/ng-mocks/issues/3811\n      let ngContext = 0;\n      helperDefinePropertyDescriptor(this, '__ngContext__', {\n        get: () => ngContext,\n        set: (newValue: any) => (ngContext = newValue),\n        enumerable: false,\n      });\n\n      if (!bindings) {\n        for (const input of inputs || []) {\n          let value: any = null;\n          helperDefinePropertyDescriptor(this, input, {\n            get: () => value,\n            set: (newValue: any) => (value = newValue),\n          });\n        }\n      }\n    }\n  }\n\n  // A16: adding unique property.\n  coreDefineProperty(MockRenderComponent.prototype, `__ngMocks_index_${ngMocksUniverse.index()}`, undefined, false);\n  Component(options)(MockRenderComponent);\n\n  return MockRenderComponent;\n};\n\nconst generateWrapperDirective = ({ selector, options }: any) => {\n  class MockRenderDirective {}\n  Directive({\n    selector,\n    providers: options.providers,\n  })(MockRenderDirective);\n\n  return MockRenderDirective;\n};\n\nconst getCache = () => {\n  const caches: Array<Type<any> & Record<'cacheKey', any[]>> = ngMocksUniverse.config.get('MockRenderCaches') ?? [];\n  if (caches.length === 0) {\n    ngMocksUniverse.config.set('MockRenderCaches', caches);\n  }\n\n  return caches;\n};\n\nconst checkCache = (caches: Array<Type<any> & Record<'cacheKey', any[]>>, cacheKey: any[]): undefined | Type<any> => {\n  for (const cache of caches) {\n    if (cache.cacheKey.length !== cacheKey.length) {\n      continue;\n    }\n    let isValid = true;\n    for (let i = 0; i < cacheKey.length; i += 1) {\n      if (cache.cacheKey[i] !== cacheKey[i]) {\n        isValid = false;\n        break;\n      }\n    }\n    if (isValid) {\n      return cache;\n    }\n  }\n\n  return undefined;\n};\n\nexport default (\n  template: any,\n  meta: Directive,\n  bindings: undefined | null | any[],\n  flags: Record<keyof any, any>,\n): Type<any> => {\n  const caches = getCache();\n\n  // nulls help to detect defaults\n  const cacheKey = [\n    template,\n    ...(bindings ?? [null]),\n    ...(flags.providers ?? [null]),\n    ...(flags.viewProviders ?? [null]),\n  ];\n  let ctor = checkCache(caches, cacheKey);\n  if (ctor) {\n    return ctor;\n  }\n\n  const inputs = meta.inputs ? [...meta.inputs] : [];\n  const outputs = meta.outputs ? [...meta.outputs] : [];\n  if (meta.hostDirectives) {\n    for (const hostDirective of meta.hostDirectives) {\n      if (typeof hostDirective !== 'object' || !hostDirective.directive) {\n        continue;\n      }\n\n      if (hostDirective.inputs) {\n        inputs.push(...hostDirective.inputs);\n      }\n      if (hostDirective.outputs) {\n        outputs.push(...hostDirective.outputs);\n      }\n    }\n  }\n\n  const mockTemplate = funcGenerateTemplate(template, { selector: meta.selector, inputs, outputs, bindings });\n  const options: Component = {\n    providers: flags.providers,\n    selector: 'mock-render',\n    template: mockTemplate,\n    viewProviders: flags.viewProviders,\n  };\n\n  ctor = generateWrapperComponent({ ...meta, bindings, options });\n  coreDefineProperty(ctor, 'cacheKey', cacheKey);\n  coreDefineProperty(ctor, 'tpl', mockTemplate);\n\n  if (meta.selector && options.providers) {\n    const dir = generateWrapperDirective({ ...meta, bindings, options });\n    coreDefineProperty(ctor, 'providers', dir);\n  }\n\n  caches.unshift(ctor as any);\n  caches.splice(ngMocksUniverse.global.get('mockRenderCacheSize') ?? coreConfig.mockRenderCacheSize);\n\n  return ctor;\n};\n","import coreDefineProperty from '../common/core.define-property';\nimport helperDefinePropertyDescriptor from '../mock-service/helper.define-property-descriptor';\nimport helperMockService from '../mock-service/helper.mock-service';\n\nconst createPropertyGet = (key: keyof any & string, reader: Record<keyof any, any>, source: Record<keyof any, any>) => {\n  const handler = () => {\n    if (typeof source[key] === 'function') {\n      if (reader[`__ngMocks_${key}__origin`] !== source[key]) {\n        const clone = helperMockService.createClone(source[key], reader, source);\n        coreDefineProperty(reader, `__ngMocks_${key}`, clone);\n        coreDefineProperty(reader, `__ngMocks_${key}__origin`, source[key]);\n      }\n\n      return reader[`__ngMocks_${key}`];\n    }\n\n    return source[key];\n  };\n  coreDefineProperty(handler, '__ngMocksProxy', true);\n\n  return handler;\n};\n\nconst createPropertySet = (key: keyof any & string, reader: Record<keyof any, any>, source: Record<keyof any, any>) => {\n  const handler = (newValue: any) => {\n    if (reader[`__ngMocks_${key}`]) {\n      reader[`__ngMocks_${key}`] = undefined;\n    }\n    if (reader[`__ngMocks_${key}__origin`]) {\n      reader[`__ngMocks_${key}__origin`] = undefined;\n    }\n    source[key] = newValue;\n  };\n  coreDefineProperty(handler, '__ngMocksProxy', true);\n\n  return handler;\n};\n\nconst extractAllKeys = (instance: object) => [\n  ...helperMockService.extractPropertiesFromPrototype(Object.getPrototypeOf(instance)),\n  ...helperMockService.extractMethodsFromPrototype(Object.getPrototypeOf(instance)),\n  ...Object.keys(instance),\n];\n\nconst extractOwnKeys = (instance: object) => [...Object.getOwnPropertyNames(instance), ...Object.keys(instance)];\n\nexport default (\n  reader: Record<keyof any, any>,\n  source: Record<keyof any, any> | undefined,\n  extra: string[],\n  force = false,\n): void => {\n  if (!source) {\n    return;\n  }\n  coreDefineProperty(reader, '__ngMocks__source', source);\n  const exists = extractOwnKeys(reader);\n  const fields = [...extractAllKeys(source), ...extra];\n  for (const key of fields) {\n    if (!force && exists.indexOf(key) !== -1) {\n      continue;\n    }\n    helperDefinePropertyDescriptor(reader, key, {\n      get: createPropertyGet(key, reader, source),\n      set: createPropertySet(key, reader, source),\n    });\n    exists.push(key);\n  }\n};\n","import { Component, Directive } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\n\nimport coreDefineProperty from '../common/core.define-property';\nimport { extendClass } from '../common/core.helpers';\nimport coreReflectDirectiveResolve from '../common/core.reflect.directive-resolve';\nimport { AnyType } from '../common/core.types';\nimport { isNgDef } from '../common/func.is-ng-def';\n\nconst registerTemplateMiddleware = (template: AnyType<any>, meta: Directive): void => {\n  const child = extendClass(template);\n\n  const alias = {\n    provide: template,\n    useExisting: child,\n  };\n  meta.providers = [...(meta.providers || []), alias];\n\n  // https://github.com/help-me-mom/ng-mocks/issues/1876\n  // We need to apply overrides to our cloned declaration.\n  let set: any = {};\n  try {\n    const ngMocksOverrides: Map<any, any> = (TestBed as any).ngMocksOverrides;\n    const { override } = ngMocksOverrides.get(template);\n    set = { ...override.set };\n    set.providers = set.providers ? [...set.providers, alias] : meta.providers;\n  } catch {\n    // nothing to do\n  }\n\n  const standalone = (meta as any).__ngMocksStandalone === true;\n  (isNgDef(template, 'c') ? Component : Directive)({\n    ...meta,\n    ...set,\n    ...(standalone ? { standalone } : {}),\n  })(child);\n  TestBed.configureTestingModule({\n    [standalone ? 'imports' : 'declarations']: [child],\n  });\n};\n\nexport default (template: AnyType<any>): Directive => {\n  if (!isNgDef(template, 'c') && !isNgDef(template, 'd')) {\n    return {};\n  }\n\n  const meta = coreReflectDirectiveResolve(template);\n  const override: Directive = {};\n  for (const key of Object.keys(meta)) {\n    if (key === 'standalone') {\n      coreDefineProperty(override, '__ngMocksStandalone', !!meta[key as never]);\n      continue;\n    }\n\n    override[key as never] = meta[key as never];\n  }\n\n  if (override.selector && /[\\s,[\\]]/.test(override.selector)) {\n    override.selector = '';\n  }\n\n  if (!override.selector) {\n    // istanbul ignore next\n    override.selector = (TestBed as any).ngMocksSelectors?.get(template) || '';\n    if (!override.selector) {\n      override.selector = `ng-mocks-${template.name}`;\n      registerTemplateMiddleware(template, override);\n      // istanbul ignore else\n      if ((TestBed as any).ngMocksSelectors) {\n        (TestBed as any).ngMocksSelectors.set(template, override.selector);\n      }\n    }\n  }\n\n  return override;\n};\n","import { DebugElement, Directive, InjectionToken } from '@angular/core';\nimport { getTestBed, TestBed } from '@angular/core/testing';\n\nimport coreDefineProperty from '../common/core.define-property';\nimport { getInjection } from '../common/core.helpers';\nimport { AnyDeclaration, AnyType, Type } from '../common/core.types';\nimport funcGetName from '../common/func.get-name';\nimport funcImportExists from '../common/func.import-exists';\nimport { isNgDef } from '../common/func.is-ng-def';\nimport ngMocksStack from '../common/ng-mocks-stack';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\nimport { ngMocks } from '../mock-helper/mock-helper';\nimport helperDefinePropertyDescriptor from '../mock-service/helper.define-property-descriptor';\nimport { MockService } from '../mock-service/mock-service';\n\nimport funcCreateWrapper from './func.create-wrapper';\nimport funcInstallPropReader from './func.install-prop-reader';\nimport funcReflectTemplate from './func.reflect-template';\nimport { IMockRenderFactoryOptions, MockedComponentFixture } from './types';\n\nexport interface MockRenderFactory<C = any, F extends keyof any = keyof C> {\n  bindings: keyof F;\n  configureTestBed: () => void;\n  declaration: AnyType<never>;\n  <T extends Record<F, any>>(params?: Partial<T>, detectChanges?: boolean): MockedComponentFixture<C, T>;\n}\n\nconst renderDeclaration = (fixture: any, template: any, params: any): void => {\n  fixture.point =\n    fixture.debugElement.children[0] &&\n    fixture.debugElement.children[0].nativeElement.nodeName !== '#text' &&\n    fixture.debugElement.children[0].nativeElement.nodeName !== '#comment'\n      ? fixture.debugElement.children[0]\n      : fixture.debugElement;\n  if (isNgDef(template, 'd')) {\n    helperDefinePropertyDescriptor(fixture.point, 'componentInstance', {\n      get: () => ngMocks.get(fixture.point, template),\n    });\n  } else if (isNgDef(template, 'p')) {\n    helperDefinePropertyDescriptor(fixture.point, 'componentInstance', {\n      get: () => ngMocks.findInstance(fixture.point, template),\n    });\n  }\n  tryWhen(!params, () => funcInstallPropReader(fixture.componentInstance, fixture.point.componentInstance, []));\n};\n\nconst renderInjection = (fixture: any, template: any, params: any): void => {\n  let instance: any;\n  try {\n    instance = getInjection(template);\n  } catch (error) {\n    if (isNgDef(template, 'p')) {\n      throw new Error(\n        [\n          `Cannot render ${funcGetName(template)}.`,\n          'Did you forget to set $implicit param, or add the pipe to providers?',\n          'https://ng-mocks.sudo.eu/guides/pipe',\n        ].join(' '),\n      );\n    }\n    throw error;\n  }\n  if (params) {\n    ngMocks.stub(instance, params);\n  }\n  fixture.point = MockService(DebugElement, {\n    childNodes: [],\n    children: [],\n    componentInstance: instance,\n    nativeElement: MockService(HTMLElement),\n  });\n  funcInstallPropReader(fixture.componentInstance, fixture.point.componentInstance, [], true);\n};\n\nconst tryWhen = (flag: boolean, callback: () => void) => {\n  if (!flag) {\n    return;\n  }\n  try {\n    // ivy throws Error: Expecting instance of DOM Element\n    callback();\n  } catch {\n    // nothing to do\n  }\n};\n\nconst fixtureMessage = [\n  'Forgot to flush TestBed?',\n  'MockRender cannot be used without a reset after TestBed.get / TestBed.inject / TestBed.createComponent and another MockRender in the same test.',\n  'If you want to mock a service before rendering, consider usage of MockRenderFactory or MockInstance.',\n  'To flush TestBed, add a call of ngMocks.flushTestBed() before the call of MockRender, or pass `reset: true` to MockRender options.',\n].join(' ');\n\nconst handleFixtureError = (e: any) => {\n  const error = new Error(fixtureMessage);\n  coreDefineProperty(error, 'parent', e);\n  throw error;\n};\n\nconst flushTestBed = (flags: Record<string, any>): void => {\n  const globalFlags = ngMocksUniverse.global.get('flags');\n  const testBed: any = getTestBed();\n  if (flags.reset || (!testBed._instantiated && !testBed._testModuleRef)) {\n    ngMocks.flushTestBed();\n  } else if (globalFlags.onTestBedFlushNeed !== 'throw' && (testBed._instantiated || testBed._testModuleRef)) {\n    if (globalFlags.onTestBedFlushNeed === 'warn') {\n      console.warn(fixtureMessage);\n    }\n    ngMocks.flushTestBed();\n  }\n};\n\nconst generateFactoryInstall =\n  (ctor: AnyType<any> & { providers?: AnyType<any> }, options: IMockRenderFactoryOptions) => () => {\n    const testBed: TestBed & {\n      _compiler?: {\n        declarations?: Array<AnyType<any>>;\n      };\n      _declarations?: Array<AnyType<any>>;\n      declarations?: Array<AnyType<any>>;\n    } = getTestBed();\n    // istanbul ignore next\n    const existing = testBed._compiler?.declarations || testBed.declarations || testBed._declarations;\n    if (!existing || existing.indexOf(ctor) === -1) {\n      flushTestBed(options);\n      try {\n        const declarations: Array<AnyType<any>> = [];\n        if (ctor.providers) {\n          declarations.push(ctor.providers);\n        }\n        declarations.push(ctor);\n        TestBed.configureTestingModule({\n          declarations,\n        });\n      } catch (error) {\n        handleFixtureError(error);\n      }\n    }\n  };\n\nconst generateFactory = (\n  componentCtor: Type<any> & { tpl?: string },\n  bindings: undefined | null | string[],\n  template: any,\n  options: IMockRenderFactoryOptions,\n) => {\n  const result = (params: any, detectChanges?: boolean) => {\n    result.configureTestBed();\n    const fixture: any = TestBed.createComponent(componentCtor);\n\n    funcInstallPropReader(fixture.componentInstance, params ?? {}, bindings ?? []);\n    coreDefineProperty(fixture, 'ngMocksStackId', ngMocksUniverse.global.get('bullet:stack:id'));\n\n    if (detectChanges === undefined || detectChanges) {\n      fixture.detectChanges();\n    }\n\n    if (\n      typeof template === 'string' ||\n      isNgDef(template, 'c') ||\n      isNgDef(template, 'd') ||\n      (componentCtor.tpl && isNgDef(template, 'p'))\n    ) {\n      renderDeclaration(fixture, template, params);\n    } else {\n      renderInjection(fixture, template, params);\n    }\n\n    return fixture;\n  };\n  result.declaration = componentCtor;\n  result.bindings = bindings;\n  result.configureTestBed = generateFactoryInstall(componentCtor, options);\n\n  return result;\n};\n\n/**\n * @see https://ng-mocks.sudo.eu/api/MockRender#factory\n */\nexport function MockRenderFactory<MComponent>(\n  template: InjectionToken<MComponent>,\n  bindings?: undefined | null,\n  options?: IMockRenderFactoryOptions,\n): MockRenderFactory<MComponent, never>;\n\n/**\n * MockRenderFactory is a delayed version of MockRender.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender#factory\n */\nexport function MockRenderFactory<MComponent>(\n  template: AnyType<MComponent>,\n  bindings: undefined | null,\n  options?: IMockRenderFactoryOptions,\n): MockRenderFactory<MComponent, keyof MComponent>;\n\n/**\n * MockRenderFactory is a delayed version of MockRender.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender#factory\n */\nexport function MockRenderFactory<MComponent, TKeys extends keyof any>(\n  template: AnyType<MComponent>,\n  bindings: TKeys[],\n  options?: IMockRenderFactoryOptions,\n): MockRenderFactory<MComponent, TKeys>;\n\n/**\n * MockRenderFactory is a delayed version of MockRender.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender#factory\n */\nexport function MockRenderFactory<MComponent, TKeys extends keyof any = keyof any>(\n  template: AnyType<MComponent>,\n  bindings: TKeys[],\n  options?: IMockRenderFactoryOptions,\n): MockRenderFactory<MComponent, TKeys>;\n\n/**\n * Without params we should not autocomplete any keys of any types.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender#factory\n */\nexport function MockRenderFactory<MComponent>(\n  template: AnyType<MComponent>,\n): MockRenderFactory<MComponent, keyof MComponent>;\n\n/**\n * An empty string does not have point.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender#factory\n */\nexport function MockRenderFactory(template: ''): MockRenderFactory<void, never>;\n\n/**\n * Without params we should not autocomplete any keys of any types.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender#factory\n */\nexport function MockRenderFactory<MComponent = void>(template: string): MockRenderFactory<MComponent>;\n\n/**\n * MockRenderFactory is a delayed version of MockRender.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender#factory\n */\nexport function MockRenderFactory<MComponent = void, TKeys extends keyof any = keyof any>(\n  template: string,\n  bindings: TKeys[],\n  options?: IMockRenderFactoryOptions,\n): MockRenderFactory<MComponent, TKeys>;\n\nexport function MockRenderFactory<MComponent, TKeys extends string>(\n  template: string | AnyDeclaration<MComponent>,\n  bindings?: undefined | null | TKeys[],\n  options: IMockRenderFactoryOptions = {},\n): any {\n  funcImportExists(template, 'MockRender');\n\n  const meta: Directive = typeof template === 'string' || isNgDef(template, 't') ? {} : funcReflectTemplate(template);\n  const componentCtor: any = funcCreateWrapper(template, meta, bindings, options);\n  const factory = generateFactory(componentCtor, bindings, template, options);\n  if (ngMocksStack.current().level !== 'root' && options.configureTestBed !== false) {\n    factory.configureTestBed();\n  }\n\n  return factory;\n}\n","import { InjectionToken } from '@angular/core';\n\nimport { AnyDeclaration, AnyType } from '../common/core.types';\n\nimport { MockRenderFactory } from './mock-render-factory';\nimport { IMockRenderOptions, MockedComponentFixture } from './types';\n\n/**\n * This signature of MockRender lets create an empty fixture.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender\n */\nexport function MockRender(): MockedComponentFixture<void, void>;\n\n/**\n * This signature of MockRender lets create a fixture to access a token.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender\n */\nexport function MockRender<MComponent>(\n  template: InjectionToken<MComponent>,\n  params?: undefined | null,\n  detectChangesOrOptions?: boolean | IMockRenderOptions,\n): MockedComponentFixture<MComponent, void>;\n\n/**\n * This signature of MockRender lets create a fixture to access a component without parameters.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender\n */\nexport function MockRender<MComponent>(\n  template: AnyType<MComponent>,\n  params: undefined | null,\n  detectChangesOrOptions?: boolean | IMockRenderOptions,\n): MockedComponentFixture<MComponent, MComponent>;\n\n/**\n * This signature of MockRender lets create a fixture with parameters to access a component.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender\n */\nexport function MockRender<MComponent, TComponent extends object>(\n  template: AnyType<MComponent>,\n  params: TComponent,\n  detectChangesOrOptions?: boolean | IMockRenderOptions,\n): MockedComponentFixture<MComponent, TComponent>;\n\n/**\n * This signature of MockRender lets create a fixture with parameters to access a component.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender\n */\nexport function MockRender<MComponent, TComponent extends object = Record<keyof any, any>>(\n  template: AnyType<MComponent>,\n  params: TComponent,\n  detectChangesOrOptions?: boolean | IMockRenderOptions,\n): MockedComponentFixture<MComponent, TComponent>;\n\n/**\n * This signature of MockRender without params should not autocomplete any keys of any types.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender\n */\nexport function MockRender<MComponent>(template: AnyType<MComponent>): MockedComponentFixture<MComponent, MComponent>;\n\n/**\n * This signature of MockRender without params should not autocomplete any keys of any types.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender\n */\nexport function MockRender<MComponent = void>(template: string): MockedComponentFixture<MComponent>;\n\n/**\n * This signature of MockRender lets create a fixture based on string template.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender\n */\nexport function MockRender<MComponent = void>(\n  template: string,\n  params: undefined | null,\n  detectChangesOrOptions?: boolean | IMockRenderOptions,\n): MockedComponentFixture<MComponent, void>;\n\n/**\n * This signature of MockRender lets create a fixture with parameters to access a string based template.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender\n */\nexport function MockRender<MComponent = void, TComponent extends Record<keyof any, any> = Record<keyof any, any>>(\n  template: string,\n  params: TComponent,\n  detectChangesOrOptions?: boolean | IMockRenderOptions,\n): MockedComponentFixture<MComponent, TComponent>;\n\n/**\n * This signature of MockRender lets create a fixture with parameters to access a string based template.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender\n */\nexport function MockRender<MComponent, TComponent extends Record<keyof any, any> = Record<keyof any, any>>(\n  template: string,\n  params: TComponent,\n  detectChangesOrOptions?: boolean | IMockRenderOptions,\n): MockedComponentFixture<MComponent, TComponent>;\n\nexport function MockRender<MComponent, TComponent extends Record<keyof any, any>>(\n  template?: string | AnyDeclaration<MComponent>,\n  params?: TComponent,\n  flags: boolean | IMockRenderOptions = true,\n): any {\n  const tpl = arguments.length === 0 ? '' : template;\n  const bindings = params && typeof params === 'object' ? Object.keys(params) : params;\n  const options = typeof flags === 'boolean' ? { detectChanges: flags } : { ...flags };\n  const factory = (MockRenderFactory as any)(tpl, bindings, options);\n\n  return factory(params, options.detectChanges);\n}\n"],"names":["flags","mockRenderCacheSize","neverMockModule","neverMockProvidedFunction","neverMockToken","onMockBuilderMissingDependency","onMockInstanceRestoreNeed","onTestBedFlushNeed","dependencies","instance","property","value","enumerable","definePropertyDescriptor","configurable","writable","getTestBedInjection","token","getInjection","testBed","getTestBed","inject","get","flatten","values","result","Array","isArray","push","mapKeys","set","forEach","_","mapValues","destination","add","mapEntries","key","extractDependencyArray","deps","flag","name","ngMetadataName","undefined","extractDependency","dep","extendClassicClass","base","child","index","glb","ngMocksParent","eval","ngMocksResult","MockMiddleware","prototype","extendClass","parameters","length","def","NG_MOCKS","InjectionToken","__ngMocksSkip","NG_MOCKS_TOUCHES","NG_MOCKS_OVERRIDES","NG_MOCKS_GUARDS","NG_MOCKS_RESOLVERS","NG_MOCKS_INTERCEPTORS","NG_MOCKS_ROOT_PROVIDERS","alias","required","skipName","param","split","map","v","trim","provide","__forward_ref__","window","g","badCharacters","RegExp","_desc","constructor","replace","provider","ngModule","directive","isNgType","declaration","type","decorators","offset","indexOf","isModuleCheck","ngType","isComponentCheck","isDirectiveCheck","isPipeCheck","isInjectableCheck","isNgDef","i","isModule","isComponent","isDirective","isPipe","isInjectable","isNgInjectionToken","isNgModuleDefWithProviders","globalMap","ngMocksUniverse","global","has","Map","builtDeclarations","builtProviders","cacheDeclarations","cacheProviders","config","configInstance","Set","touches","getOverrides","getDefaults","getConfigMock","defValue","getResolution","getBuildDeclaration","mode","replacement","hasBuildDeclaration","isExcludedDef","resolution","isProvidedDef","indexValue","encapsulation","__ngMocksProxy","descriptor","Object","defineProperty","override","style","mock","correctInstance","applyOverrides","skipProps","createClone","getOwnPropertyNames","keys","desc","hasOwnProperty","call","callbacks","overloads","stub","service","bindFrom","bindTo","args","apply","this","prop","sourceDesc","sanitizerMethods","extraMethods","DomSanitizer","Sanitizer","method","getPrototypeOf","getOwnPropertyDescriptor","mockFunction","mockName","original","func","customMockFunction","val","setValue","newSetValue","newValue","handleItemKeys","handleItemGetGuards","section","guards","guard","handleSection","replaceWithMocks","cache","updated","callback","valueItem","handleArray","resolve","resolveUpdated","resolver","handleItem","setPrototypeOf","ngMockshelperMockService","registerMockFunction","createMockFromPrototype","methods","extractMethodsFromPrototype","properties","extractPropertiesFromPrototype","extractPropertyDescriptor","accessType","parseArgs","detectedMockName","createName","mockDef","generateMockDef","__ngMocks","__ngMocksSet","__ngMocksGet","clear","resolveProvider","useFactory","areEqualDefs","providerDiffers","defDiffers","a","b","anyDiffers","resolutions","changed","multi","change","parseProvider","toString","isSuitableProvider","useValue","interceptor","useExisting","useClass","excludeInterceptors","isPreconfiguredDependency","mockOf","__internal","isPreconfiguredUseExisting","existingMock","createFromResolution","createPredefinedMockProvider","createMockProvider","applyCallbackToken","init","overrides","Injector","injector","configGlobal","inst","applyCallback","normalizePrimitivesMap","handleProvider","mockProvider","check","normalizePrimitives","createValueProvider","createClassProvider","isNeverMockFunction","isNeverMockToken","existing","applyMissingClassProperties","createFactoryProvider","__annotations__","__parameters__","isAngularClass","proto","match","cls","clsCode","codePointAt","regEx","guessClass","mockVariableMap","prefix","mockService","createMock","mockVariable","MockService","pushDecorator","decorator","deleteIndex","splice","getAllKeys","props","parsePropMetadataParserFactoryProp","bindingPropertyName","normalizedDef","defName","defAlias","defRequired","unshift","parsePropMetadataParserInput","parsePropMetadataParserOutput","parsePropMetadataParserFactoryQueryChild","isViewQuery","queries","selector","read","static","parsePropMetadataParserContentChild","parsePropMetadataParserViewChild","parsePropMetadataParserFactoryQueryChildren","descendants","emitDistinctChangesOnly","parsePropMetadataMap","ContentChild","ContentChildren","HostBinding","hostPropertyName","host","hostBindings","HostListener","eventName","hostListeners","Input","Output","ViewChild","ViewChildren","parsePropDecoratorsParserFactoryProp","parsePropDecoratorsParserInput","parsePropDecoratorsParserOutput","parsePropDecoratorsParserFactoryQuery","parsePropDecoratorsParserContent","parsePropDecoratorsParserView","parsePropDecoratorsMap","buildDeclaration","inputs","input","outputs","output","reflectionCapabilities","parse","__ngMocksDeclarations","parent","parentDeclarations","attributes","propDecorators","createDeclarations","attributeName","parseParameters","annotation","parseAnnotations","parseDecorators","parsePropDecorators","__prop__metadata__","parsePropMetadata","Directive","Component","y","x","module","exports","__WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__","ChangeDetectorRef","ComponentFactoryResolver","DebugElement","ElementRef","EventEmitter","NgModule","Optional","Pipe","QueryList","Self","TemplateRef","ViewContainerRef","__webpack_require__","d","__WEBPACK_EXTERNAL_MODULE__angular_core_testing_89899de6__","TestBed","__webpack_module_cache__","moduleId","cachedModule","__webpack_modules__","definition","o","globalThis","Function","e","obj","r","Symbol","toStringTag","stackRoot","id","level","stack","listenersPush","listenersPop","current","stackPop","state","pop","stackPush","subscribePop","subscribePush","unsubscribePop","unsubscribePush","providers","mocks","getNgType","isStandalone","standalone","merge","MockBuilderStash","data","backup","restore","providedIn","ngInjectableDef","_isMockFunction","Error","join","jest","arg","getSourceOfMock","instanceDef","ngModuleDef","__set","exported","__WEBPACK_EXTERNAL_MODULE__angular_forms_df10eade__","AbstractControl","DefaultValueAccessor","FormControl","FormControlDirective","NG_ASYNC_VALIDATORS","NG_VALIDATORS","NG_VALUE_ACCESSOR","NgControl","NgModel","applyProxy","proxy","storage","MockControlValueAccessorProxy","target","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","writeValue","MockValidatorProxy","registerOnValidatorChange","validate","control","MockAsyncValidatorProxy","Promise","installValidator","validators","validator","__ngMocksCtor","__ngMocksConfig","isValidator","Mock","ngControl","queryScanKeys","valueAccessor","setControlValueAccessor","setValueAccessor","isControlValueAccessor","installValueAccessor","_rawValidators","_rawAsyncValidators","applyNgValueAccessor","mockOutputs","applyOutputs","applyPrototype","applyMethods","applyProps","LegacyControlValueAccessor","__simulateChange","__simulateTouch","__simulateValidatorChange","source","configInput","isInternalKey","cloneVcrQuery","query","processProvider","sourceType","mockType","processTokens","ownUseExisting","processOwnUseExisting","meta","params","hasResolver","options","exportAs","imports","skipExports","hostDirectives","viewProviders","buildConfig","exclude","final","scanKeys","generateFinalQueries","delete","funcName","getType","isMockNgDef","component","fixtures","_activeFixtures","debugElement","__ngMocksResolutions","cacheFlag","hasNgMocksDepsResolution","viewChildArgs","viewChildTemplate","isTemplateRefQuery","parts","contentChildSelector","indices","mixRenderApplyContext","view","context","contextKey","markForCheck","ComponentMockBase","changeDetector","cdr","super","$implicit","variables","vcr","detectChanges","mixRenderPrepareVcr","templates","toArray","views","templateRef","createEmbeddedView","mixRenderHandleViews","viewContainer","destroy","viewIndex","move","mixRenderReorderViews","mixHideHandler","mixHide","ngAfterContentInit","__rendered","render","block","__render","decorateClass","template","MockComponents","components","MockComponent","DirectiveMockBase","element","__ngMocksInstall","ngOnInit","MockDirectives","directives","MockDirective","MockPipes","pipes","pipe","MockPipe","getMockClass","transformValue","transform","preProcessFlags","toggleSkipMockFlag","isRootModule","flagMock","flagNever","flagKeep","flagReplace","postProcessFlags","extractModuleAndProviders","ngModuleProviders","getExistingMockModule","detectMockModule","mockModule","getMockProviders","generateReturn","mockModuleProviders","MockModule","processDefMap","createResolveExisting","detectedDef","createResolveExcluded","processDef","createResolveWithProviders","createResolve","createResolveProvider","flatToExisting","filter","item","resolveDefForExport","correctExports","moduleConfig","export","exportAll","skipAddExports","mockModuleDef","configureProcessMetaKeys","cachePipe","skipMarkProviders","processMeta","declarations","addExports","skipMock","replaceDef","EntryComponentsModule","componentFactoryResolver","originCFR","resolveComponentFactory","IvyModule","__WEBPACK_EXTERNAL_MODULE__angular_common_d12e0fe1__","DOCUMENT","skipByResolution","skipResolution","skipSystem","bucket","touched","handleDef","defProviders","skipDef","extendedDef","loModule","loProviders","isExportedOnRoot","configDef","cnfInstance","cnfDef","onRoot","returnModule","moveModulesUp","isA","isB","funcExtractDeps","recursive","field","itemType","precise","createInstance","normaliseModule","generateProviderValue","defaultMock","MockBuilderPromise","configDefault","beforeCC","excludeDef","keepDef","providerDef","stash","beforeCompileComponents","build","defStack","combineParams","processed","forgotten","defs","sort","originalDef","dependency","globalFlags","errorMessage","console","warn","shallow","k","deleteTouch","loDef","buckets","concat","size","parameter","entryComponents","entryModule","patchedOriginal","MockBuilder","reject","then","catch","wipe","setConfigDef","finally","keep","a1","a2","defaultMockValue","setDefValue","fulfill","promise","configureTestingModule","compileComponents","prototypeKeys","sourceKeys","objectsDiffer","compare","areEqualProviderDefs","thisDef","prototypeDef","prototypeDefs","thisDefs","MockBuilderPerformance","equalsTo","clone","cloneConfig","resetTestingModule","keepDeclaration","itsModuleToMock","extensions","extend","mockBuilderExtend","nativeElement","nativeNode","findDebugElement","el","defaultNotFoundValue","sel","notFoundValue","__WEBPACK_EXTERNAL_MODULE__angular_platform_browser_bc6fa964__","By","css","node","nodeName","_tNode","elDef","defaultInjector","getScanViewRefRootNodes","getVcr","vrIndex","vr","rnIndex","rootNodes","childNodes","rootNode","scanViewRef","isDirect","children","childNode","childNodeParent","start","end","expected","currentParent","childElDef","nestedCheck","includeTextNode","isValidValue","getMeta","publicProviders","requiredAttributes","bindings","binding","nonMinifiedName","nodeIndex","collectAttributesClassic","expectedAttributes","attr","collectAttributesIvy","attrs","step","selectors","providerTokens","collectSelectors","attribute","attrIndex","attrProp","_lView","detectInIvy","nodes","detectInClassic","references","regExp","isCrawlByAttribute","isCrawlByAttributeValue","isCrawlById","slice","isCrawlByTagName","isCrawlByDeclaration","isMockControlValueAccessor","innerHTML","preventBubble","eventCtor","Event","event","CustomEvent","initParams","bubbles","cancelable","eventObj","document","createEvent","initCustomEvent","keyMap","alt","altKey","code","location","which","arrowdown","arrowleft","arrowright","arrowup","backspace","ctrlKey","enter","esc","metaKey","shift","shiftKey","space","tab","f","getCode","char","toUpperCase","dot","eventPayload","Math","max","payload","keyData","applyPayload","disabled","toEventObj","dispatchEvent","message","formControlDirective","form","ngModel","queryAll","detectGatherFlag","gather","parentNode","isNotObject","shouldBeScanned","scanned","scan","normalize","gatherDefault","nodesLength","bindingStartIndex","detectContext","__ngContext__","rootView","detectContextByIndex","parentInjector","getParentWithInjector","parentInstance","_debugContext","lView","handlePrimitives","html","outer","format","innerOuter","nodeValue","textContent","wholeText","outerHTML","getElementValue","calls","defaultMethods","factory","beforeEach","afterEach","propName","error","hooks","after","before","moduleDef","ngMocksFasterLock","ngMocksFasterInstalled","_instantiated","_moduleFactory","_testModuleRef","idAdd","bulletStack","idRemove","activeFixtures","active","ngMocksStackId","resetFixtures","ngTempTokenPath","root","iterator","action","skip","createMetaHandler","optional","typeMap","handleDeclaration","resolveMap","skipDestruction","handleModuleWithProviders","toMock","handleDestructuring","resolveHandler","attrMatches","label","attrDef","detectAttribute","isRightTemplate","localVcr","localValue","isExpectedTemplate","findDeep","entryPoint","__template","__vcr","handleDirective","scanValue","scanVcr","getValVcr","detector","limit","flagNames","autoSpy","jasmine","createSpy","methodName","update","emit","handleKnown","listeners","some","listener","hasListener","triggerInput","click","crawl","defaultConfig","faster","idAll","idEach","beforeAll","afterAll","find","findAll","findInstance","fixture","findInstances","elements","findTemplateRef","findTemplateRefs","flushTestBed","formatHtml","formatText","globalExclude","recursively","globalKeep","globalMock","globalReplace","fail","globalWipe","guts","protoKeep","protoMock","protoExclude","generateDataWithUniverse","generateData","createMeta","hide","tpl","elementRef","ignoreOnConsole","reset","reveal","revealAll","stubMember","throwOnConsole","touch","markAsTouched","triggerTouch","trigger","ngMocks","defaultValue","MockProviders","MockProvider","applyOverride","overrideComponent","overrideDirective","overrideModule","overrideProvider","generateTouches","local","__ngMocksTouches","applyPlatformOverrideDef","ngMocksOverrides","applyPlatformOverridesBasedOnProvidedIn","ngMocksSelectors","useMockBuilder","hasMocks","mockBuilder","finalModuleDef","builder","isMock","knownTouches","_providers","_compiler","defineTouches","applyPlatformOverridesBasedOnDefaults","applyPlatformOverrides","applyNgMocksOverrides","patchVcrInstance","vcrInstance","ngMocksOverridesPatched","createComponent","patchedCreateComponent","createComponentArgs","installInjector","__ngMocksInjector","injectorGet","argsGet","isMockedNgDefOf","ngMocksOverridesInstalled","ngElementId","__NG_ELEMENT_ID__","ngElementIdArgs","viewContainerInstall","injectorCreate","create","argsCreate","install","getMock","getMockedNgDefOf","isMockOf","isMockValidator","currentStack","mockInstance","universeConfig","parseMockInstanceArgs","accessor","checkReset","checkCollect","showError","mockInstanceConfig","mockInstances","MockInstance","MockReset","MockDeclarations","MockDeclaration","remember","scope","generateTemplateAttrWithParams","generateTemplateAttrWrap","generateTemplateAttr","mockTemplate","generateWrapperComponent","MockRenderComponent","next","ngContext","caches","getCache","cacheKey","ctor","isValid","checkCache","hostDirective","dir","MockRenderDirective","generateWrapperDirective","createPropertyGet","reader","handler","createPropertySet","extractAllKeys","extra","force","exists","fields","test","__ngMocksStandalone","registerTemplateMiddleware","fixtureMessage","generateFactory","componentCtor","configureTestBed","componentInstance","point","tryWhen","renderDeclaration","HTMLElement","renderInjection","_declarations","handleFixtureError","generateFactoryInstall","MockRenderFactory","MockRender","arguments"],"sourceRoot":""}