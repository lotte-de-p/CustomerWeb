{"version":3,"file":"MockXhr.cjs","sources":["../../src/MockXhr.ts"],"sourcesContent":["import HeadersContainer from './HeadersContainer';\nimport MockXhrRequest from './MockXhrRequest';\nimport RequestData from './RequestData';\nimport XhrEvent from './XhrEvent';\nimport XhrProgressEvent from './XhrProgressEvent';\nimport * as Utils from './Utils';\nimport XhrEventTarget from './XhrEventTarget';\n\nimport type { MockXhrResponseReceiver } from './MockXhrResponseReceiver';\nimport type { TXhrProgressEventNames } from './XhrProgressEventsNames';\n\ninterface MockXhrResponse {\n  isNetworkError?: boolean,\n  status: number,\n  statusMessage: string,\n  headers: HeadersContainer,\n  body?: any,\n}\n\nexport type OnCreateCallback = (xhr: MockXhr) => void;\n\nexport type OnSendCallback = (this: MockXhrRequest, request: MockXhrRequest, xhr: MockXhr) => void;\n\nconst RESPONSE_TYPES = ['', 'arraybuffer', 'blob', 'document', 'json', 'text'];\n\n/**\n * XMLHttpRequest mock for testing.\n * Based on https://xhr.spec.whatwg.org version '15 August 2022'.\n *\n * Supports:\n *  - Events and states\n *  - open(), setRequestHeader(), send() and abort()\n *  - Upload and download progress events\n *  - Response status, statusText, headers and body\n *  - The timeout attribute (can be disabled)\n *  - Simulating a network error (see setNetworkError())\n *  - Simulating a request timeout (see setRequestTimeout())\n *\n * Partial support:\n *  - overrideMimeType(): throws when required, but has no other effect.\n *  - responseType: '', 'text' and 'json' are fully supported. The responseType values have no\n *    effect on the response body passed to setResponseBody().\n *  - responseXml: the response body is not converted to a document response. To get a document\n *    response, pass it directly as the response body in setResponseBody().\n *  - responseUrl: the final request URL after redirects isn't automatically set. This can be\n *    emulated in a request handler.\n *\n * Not supported:\n * - Synchronous requests (i.e. async set to false in open())\n * - Parsing the request URL in open() and throwing SyntaxError on failure.\n */\nexport default class MockXhr\n  extends XhrEventTarget\n  implements XMLHttpRequest, MockXhrResponseReceiver {\n  private _authorRequestHeaders: HeadersContainer;\n\n  private _requestMethod?: string;\n\n  private _requestUrl?: string;\n\n  private _readyState: number;\n\n  private _timeout: number;\n\n  private _crossOriginCredentials: boolean;\n\n  private _currentRequest?: MockXhrRequest;\n\n  private readonly _uploadObject: XhrEventTarget;\n\n  responseURL: string;\n\n  private _responseType: XMLHttpRequestResponseType;\n\n  private _response: MockXhrResponse;\n\n  private _sendFlag?: boolean;\n\n  private _uploadListenerFlag?: boolean;\n\n  private _uploadCompleteFlag?: boolean;\n\n  private _timedOutFlag?: boolean;\n\n  private _timeoutReference: number;\n\n  private _timeoutTask: any;\n\n  constructor() {\n    super();\n    this._authorRequestHeaders = new HeadersContainer();\n\n    this._readyState = MockXhr.UNSENT;\n    this._timeout = 0;\n    this._crossOriginCredentials = false;\n    this._uploadObject = new XhrEventTarget(this);\n    this.responseURL = '';\n    this._responseType = '';\n    this._response = makeNetworkErrorResponse();\n    this._timeoutReference = 0;\n\n    this.onreadystatechange = null;\n\n    this.timeoutEnabled = true;\n    MockXhr.onCreate?.(this);\n  }\n\n  //-------\n  // States\n  //-------\n\n  static readonly UNSENT = 0;\n\n  static readonly OPENED = 1;\n\n  static readonly HEADERS_RECEIVED = 2;\n\n  static readonly LOADING = 3;\n\n  static readonly DONE = 4;\n\n  readonly UNSENT = MockXhr.UNSENT;\n\n  readonly OPENED = MockXhr.OPENED;\n\n  readonly HEADERS_RECEIVED = MockXhr.HEADERS_RECEIVED;\n\n  readonly LOADING = MockXhr.LOADING;\n\n  readonly DONE = MockXhr.DONE;\n\n  get onreadystatechange() {\n    return this._getEventHandlerProperty('readystatechange') as ((this: XMLHttpRequest, ev: Event) => any);\n  }\n\n  set onreadystatechange(value: ((this: XMLHttpRequest, ev: Event) => any) | null) {\n    this._setEventHandlerProperty('readystatechange', value);\n  }\n\n  //---------\n  // Mock API\n  //---------\n\n  /**\n   * Per-instance flag to enable the effects of the timeout attribute\n   */\n  timeoutEnabled: boolean;\n\n  /**\n   * Global flag to enable the effects of the timeout attribute\n   */\n  static timeoutEnabled = true;\n\n  /**\n   * Hook for creation of MockXhr instances\n   */\n  static onCreate?: OnCreateCallback;\n\n  /**\n   * Per-instance hook for XMLHttpRequest.send(). Executes in an empty callstack.\n   */\n  onSend?: OnSendCallback;\n\n  /**\n   * Global hook for XMLHttpRequest.send(). Executes in an empty callstack.\n   */\n  static onSend?: OnSendCallback;\n\n  /**\n   * @returns The current active request, if any\n   */\n  get currentRequest() { return this._currentRequest; }\n\n  /**\n   * @returns All response headers as an object. The header names are in lower-case.\n   */\n  getResponseHeadersHash() {\n    return this._response.headers.getHash();\n  }\n\n  //------------------------\n  // MockXhrResponseReceiver\n  //------------------------\n\n  /**\n   * Fire a request upload progress event.\n   *\n   * @param request Originating request\n   * @param requestBodyTransmitted Bytes transmitted\n   * @see {@link https://xhr.spec.whatwg.org/#the-send()-method \"processRequestBodyChunkLength\" steps}\n   */\n  uploadProgress(request: RequestData, requestBodyTransmitted: number) {\n    // Only act if the originating request is the current active request\n    if (this._currentRequest?.requestData === request) {\n      if (!this._sendFlag) {\n        throw new Error('Mock usage error detected: call send() first (the \"send() flag\" is not set)');\n      }\n      if (this._uploadCompleteFlag) {\n        throw new Error('Mock usage error detected: upload already completed (the \"upload complete flag\" is set)');\n      }\n      const requestBodyLength = request.getRequestBodySize();\n      if (requestBodyTransmitted > requestBodyLength) {\n        throw new Error(`Mock usage error detected: upload progress \"requestBodyTransmitted\" (${requestBodyTransmitted}) `\n          + `is greater than \"requestBodyLength\" (${requestBodyLength})`);\n      }\n\n      // Don't throttle events based on elapsed time because it would make tests much slower and\n      // harder to write.\n      if (this._uploadListenerFlag) {\n        // If no listeners were registered before send(), no upload events should be fired.\n        this._fireUploadProgressEvent('progress', requestBodyTransmitted, requestBodyLength);\n      }\n    }\n  }\n\n  /**\n   * Set the response headers. Changes the request's readyState to HEADERS_RECEIVED.\n   *\n   * @param request Originating request\n   * @param status Response http status (default 200)\n   * @param headers Name-value headers (optional)\n   * @param statusText Response http status text (optional)\n   */\n  setResponseHeaders(\n    request: RequestData,\n    status?: number,\n    headers?: Record<string, string> | null,\n    statusText?: string\n  ) {\n    // Only act if the originating request is the current active request\n    if (this._currentRequest?.requestData === request) {\n      if (!this._sendFlag) {\n        throw new Error('Mock usage error detected: call send() first (the \"send() flag\" is not set)');\n      }\n      if (this._readyState !== MockXhr.OPENED) {\n        throw new Error(`Mock usage error detected: readyState is ${this._readyState}, but it must be OPENED (${MockXhr.OPENED})`);\n      }\n\n      if (request.body) {\n        this._processRequestEndOfBody(request.getRequestBodySize(), request.getRequestBodySize());\n      }\n      status = typeof status === 'number' ? status : 200;\n      const statusMessage = statusText ?? Utils.getStatusText(status);\n      this._processResponse({\n        status,\n        statusMessage,\n        headers: new HeadersContainer(headers),\n      });\n    }\n  }\n\n  /**\n   * Fire a response progress event. Changes the request's readyState to LOADING.\n   *\n   * @param request Originating request\n   * @param receivedBytesLength Received bytes' length\n   * @param length Body length in bytes\n   * @see {@link https://xhr.spec.whatwg.org/#the-send()-method \"processBodyChunk\" steps}\n   */\n  downloadProgress(request: RequestData, receivedBytesLength: number, length: number) {\n    // Only act if the originating request is the current active request\n    if (this._currentRequest?.requestData === request) {\n      if (this._readyState !== MockXhr.HEADERS_RECEIVED\n        && this._readyState !== MockXhr.LOADING) {\n        throw new Error(`Mock usage error detected: readyState is ${this._readyState}, but it must be `\n          + `HEADERS_RECEIVED (${MockXhr.HEADERS_RECEIVED}) or LOADING (${MockXhr.LOADING})`);\n      }\n\n      if (this._readyState === MockXhr.HEADERS_RECEIVED) {\n        this._readyState = MockXhr.LOADING;\n      }\n\n      // As stated in https://xhr.spec.whatwg.org/#the-send()-method\n      // Web compatibility is the reason readystatechange fires more often than state changes.\n      this._fireReadyStateChangeEvent();\n      this._fireProgressEvent('progress', receivedBytesLength, length);\n    }\n  }\n\n  /**\n   * Set the response body. Changes the request's readyState to DONE.\n   *\n   * @param request Originating request\n   * @param body Response body\n   */\n  setResponseBody(request: RequestData, body: any) {\n    // Only act if the originating request is the current active request\n    if (this._currentRequest?.requestData === request) {\n      if (!this._sendFlag) {\n        throw new Error('Mock usage error detected: call send() first (the \"send() flag\" is not set)');\n      }\n      if (this._readyState !== MockXhr.OPENED\n          && this._readyState !== MockXhr.HEADERS_RECEIVED\n          && this._readyState !== MockXhr.LOADING) {\n        throw new Error(`Mock usage error detected: readyState is ${this._readyState}, but it must be `\n          + `OPENED (${MockXhr.OPENED}), HEADERS_RECEIVED (${MockXhr.HEADERS_RECEIVED}) or LOADING (${MockXhr.LOADING})`);\n      }\n\n      if (this._readyState === MockXhr.OPENED) {\n        // Apply default \"200 - OK\" response headers with a Content-Length if the user didn't call\n        // setResponseHeaders() before this point.\n        const headers = { 'content-length': String(Utils.getBodyByteSize(body)) };\n        this.setResponseHeaders(request, 200, headers);\n      }\n\n      // As stated in https://xhr.spec.whatwg.org/#the-send()-method\n      // Web compatibility is the reason readystatechange fires more often than\n      // state changes.\n      this._readyState = MockXhr.LOADING;\n      this._fireReadyStateChangeEvent();\n\n      this._response.body = body ?? null;\n      this._handleResponseEndOfBody();\n    }\n  }\n\n  /**\n   * Simulate a network error. Changes the request's readyState to DONE.\n   *\n   * @param request Originating request\n   */\n  setNetworkError(request: RequestData) {\n    // Only act if the originating request is the current active request\n    if (this._currentRequest?.requestData === request) {\n      if (!this._sendFlag) {\n        throw new Error('Mock usage error detected: call send() first (the \"send() flag\" is not set)');\n      }\n      this._processResponse(makeNetworkErrorResponse());\n    }\n  }\n\n  /**\n   * Simulate a request timeout. Changes the request's readyState to DONE.\n   *\n   * @param request Originating request\n   */\n  setRequestTimeout(request: RequestData) {\n    // Only act if the originating request is the current active request\n    if (this._currentRequest?.requestData === request) {\n      if (!this._sendFlag) {\n        throw new Error('Mock usage error detected: call send() first (the \"send() flag\" is not set)');\n      }\n      if (this.timeout === 0) {\n        throw new Error('Mock usage error detected: the timeout attribute must be greater than 0 for a timeout to occur');\n      }\n\n      this._timedOutFlag = true;\n      this._terminateFetchController();\n      this._processResponse(makeNetworkErrorResponse());\n    }\n  }\n\n  //-------\n  // States\n  //-------\n\n  /**\n   * @returns Client's state\n   * @see {@link https://xhr.spec.whatwg.org/#dom-xmlhttprequest-readystate}\n   */\n  get readyState() { return this._readyState; }\n\n  //--------\n  // Request\n  //--------\n\n  /**\n   * Set the request method and url.\n   *\n   * @param method Request HTTP method (GET, POST, etc.)\n   * @param url Request url\n   * @param async Async request flag (only true or omitted is supported)\n   * @see {@link https://xhr.spec.whatwg.org/#the-open()-method}\n   */\n  open(method: string, url: string | URL, async?: boolean) {\n    if (!async && arguments.length > 2) {\n      throw new Error('async = false is not supported.');\n    }\n    if (!Utils.isRequestMethod(method)) {\n      throwError('SyntaxError', `Method \"${method}\" is not a method.`);\n    }\n    if (Utils.isRequestMethodForbidden(method)) {\n      throwError('SecurityError', `Method \"${method}\" forbidden.`);\n    }\n    method = Utils.normalizeHTTPMethodName(method);\n    // Skip parsing the url and setting the username and password\n\n    this._terminateFetchController();\n\n    // Set variables\n    this._sendFlag = false;\n    this._uploadListenerFlag = false;\n    this._requestMethod = method;\n    this._requestUrl = url.toString();\n    this._authorRequestHeaders.reset();\n    this._response = makeNetworkErrorResponse();\n    if (this._readyState !== MockXhr.OPENED) {\n      this._readyState = MockXhr.OPENED;\n      this._fireReadyStateChangeEvent();\n    }\n  }\n\n  /**\n   * Add a request header value.\n   *\n   * @param name Header name\n   * @param value Header value\n   * @see {@link https://xhr.spec.whatwg.org/#the-setrequestheader()-method}\n   */\n  setRequestHeader(name: string, value: string) {\n    if (this._readyState !== MockXhr.OPENED || this._sendFlag) {\n      throwError('InvalidStateError');\n    }\n    if (typeof name !== 'string' || typeof value !== 'string') {\n      throw new SyntaxError();\n    }\n\n    // Normalize value\n    value = value.trim();\n\n    if (!Utils.isHeaderName(name)) {\n      throwError('SyntaxError', `Name \"${name}\" is not a header name.`);\n    } else if (!Utils.isHeaderValue(value)) {\n      throwError('SyntaxError', `Value \"${value}\" is not a header value.`);\n    }\n\n    if (Utils.isRequestHeaderForbidden(name)) {\n      return;\n    }\n\n    this._authorRequestHeaders.addHeader(name, value);\n  }\n\n  /**\n   * @returns timeout attribute\n   * @see {@link https://xhr.spec.whatwg.org/#dom-xmlhttprequest-timeout}\n   */\n  get timeout() { return this._timeout; }\n\n  /**\n   * @param value timeout value\n   * @see {@link https://xhr.spec.whatwg.org/#dom-xmlhttprequest-timeout}\n   */\n  set timeout(value: number) {\n    this._timeout = value;\n\n    // Use this._getPrototype() to get the value of timeoutEnabled on the most derived class'\n    // prototype. This allows overriding from a derived class.\n    if (this._sendFlag && this.timeoutEnabled && this._getPrototype().timeoutEnabled) {\n      this._scheduleRequestTimeout();\n    }\n  }\n\n  /**\n   * @returns withCredentials attribute\n   * @see {@link https://xhr.spec.whatwg.org/#dom-xmlhttprequest-withcredentials}\n   */\n  get withCredentials() { return this._crossOriginCredentials; }\n\n  /**\n   * @param value withCredentials value\n   * @see {@link https://xhr.spec.whatwg.org/#dom-xmlhttprequest-withcredentials}\n   */\n  set withCredentials(value: boolean) {\n    if ((this._readyState !== MockXhr.UNSENT && this._readyState !== MockXhr.OPENED)\n      || this._sendFlag) {\n      throwError('InvalidStateError');\n    }\n    this._crossOriginCredentials = !!value;\n  }\n\n  /**\n   * @returns upload attribute\n   * @see {@link https://xhr.spec.whatwg.org/#the-upload-attribute}\n   */\n  get upload() { return this._uploadObject; }\n\n  /**\n   * Initiate the request.\n   *\n   * @param body Request body\n   * @see {@link https://xhr.spec.whatwg.org/#the-send()-method}\n   */\n  send(body: any = null) {\n    if (this._readyState !== MockXhr.OPENED || this._sendFlag) {\n      throwError('InvalidStateError');\n    }\n    if (this._requestMethod === 'GET' || this._requestMethod === 'HEAD') {\n      body = null;\n    }\n\n    if (body !== null) {\n      let extractedContentType = null;\n\n      // Document body type not supported\n\n      // https://fetch.spec.whatwg.org/#bodyinit-safely-extract\n      {\n        let contentType = null;\n        if (typeof body === 'string') {\n          contentType = 'text/plain;charset=UTF-8';\n        } else if (typeof FormData !== 'undefined' && body instanceof FormData) {\n          contentType = 'multipart/form-data; boundary=-----MochXhr1234';\n        } else if (body.type) {\n          // As specified for Blob\n          contentType = body.type;\n        }\n        extractedContentType = contentType;\n      }\n\n      const originalAuthorContentType = this._authorRequestHeaders.getHeader('Content-Type');\n      if (originalAuthorContentType !== null) {\n        // Skipping the steps that parse mime type strings and potentially overrides the charset to\n        // UTF-8. This seems like a lot of work for little gain. If I'm wrong, please open an issue\n        // or better yet a pull request.\n      } else if (extractedContentType !== null) {\n        this._authorRequestHeaders.addHeader('Content-Type', extractedContentType);\n      }\n    }\n\n    this._uploadListenerFlag = this._uploadObject.hasListeners();\n\n    const requestData = new RequestData(\n      new HeadersContainer(this._authorRequestHeaders),\n      this._requestMethod as string,\n      this._requestUrl as string,\n      body,\n      this._crossOriginCredentials\n    );\n    const req = new MockXhrRequest(requestData, this);\n\n    this._uploadCompleteFlag = false;\n    this._timedOutFlag = false;\n    this._uploadCompleteFlag = req.body === null;\n    this._sendFlag = true;\n\n    this._fireProgressEvent('loadstart', 0, 0);\n    if (!this._uploadCompleteFlag && this._uploadListenerFlag) {\n      this._fireUploadProgressEvent('loadstart', 0, req.getRequestBodySize());\n    }\n\n    if (this._readyState !== MockXhr.OPENED || !this._sendFlag) {\n      return;\n    }\n\n    // Other interactions are triggered by the mock's MockXhrResponseReceiver API\n\n    this._currentRequest = req;\n\n    this._timeoutReference = Date.now();\n    this._scheduleRequestTimeout();\n\n    this._callOnSend(MockXhr.onSend);\n    const prototype = this._getPrototype();\n    if (prototype !== MockXhr) {\n      this._callOnSend(prototype.onSend);\n    }\n    this._callOnSend(this.onSend);\n  }\n\n  /**\n   * Abort the request.\n   * @see {@link https://xhr.spec.whatwg.org/#the-abort()-method}\n   */\n  abort() {\n    this._terminateFetchController();\n\n    if ((this._readyState === MockXhr.OPENED && this._sendFlag)\n      || this._readyState === MockXhr.HEADERS_RECEIVED\n      || this._readyState === MockXhr.LOADING) {\n      this._requestErrorSteps('abort');\n    }\n\n    if (this._readyState === MockXhr.DONE) {\n      // No readystatechange event is dispatched.\n      this._readyState = MockXhr.UNSENT;\n      this._response = makeNetworkErrorResponse();\n    }\n  }\n\n  //---------\n  // Response\n  //---------\n\n  /**\n   * @returns status attribute\n   * @see {@link https://xhr.spec.whatwg.org/#dom-xmlhttprequest-status}\n   */\n  get status() { return this._response.status; }\n\n  /**\n   * @returns statusText attribute\n   * @see {@link https://xhr.spec.whatwg.org/#the-statustext-attribute}\n   */\n  get statusText() { return this._response.statusMessage; }\n\n  /**\n   * Get a response header value.\n   *\n   * @param name Header name\n   * @returns Header value\n   * @see {@link https://xhr.spec.whatwg.org/#dom-xmlhttprequest-getresponseheader}\n   */\n  getResponseHeader(name: string): string | null {\n    return this._response.headers.getHeader(name);\n  }\n\n  /**\n   * Get all response headers as a string.\n   *\n   * @returns Concatenated headers\n   * @see {@link https://xhr.spec.whatwg.org/#dom-xmlhttprequest-getallresponseheaders}\n   */\n  getAllResponseHeaders(): string {\n    return this._response.headers.getAll();\n  }\n\n  /**\n   * Throws when required, but has no other effect.\n   *\n   * @param mime MIME type\n   * @see {@link https://xhr.spec.whatwg.org/#dom-xmlhttprequest-overridemimetype}\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  overrideMimeType(mime: string) {\n    if (this._readyState === MockXhr.LOADING || this._readyState === MockXhr.DONE) {\n      throwError('InvalidStateError');\n    }\n\n    // The other steps are not implemented\n  }\n\n  /**\n   * @returns responseType attribute\n   * @see {@link https://xhr.spec.whatwg.org/#dom-xmlhttprequest-responsetype}\n   */\n  get responseType() { return this._responseType; }\n\n  /**\n   * @param value responseType value\n   * @see {@link https://xhr.spec.whatwg.org/#dom-xmlhttprequest-responsetype}\n   */\n  set responseType(value: XMLHttpRequestResponseType) {\n    // Since this library is meant to run on node, skip the steps involving the Window object.\n    if (this._readyState === MockXhr.LOADING || this._readyState === MockXhr.DONE) {\n      throwError('InvalidStateError');\n    }\n\n    // The spec doesn't mandate throwing anything on invalid values since values must be of type\n    // XMLHttpRequestResponseType. Observed browser behavior is to ignore invalid values.\n    if (RESPONSE_TYPES.includes(value)) {\n      this._responseType = value;\n    }\n  }\n\n  /**\n   * @returns response attribute\n   * @see {@link https://xhr.spec.whatwg.org/#the-response-attribute}\n   */\n  get response() {\n    if (this._responseType === '' || this._responseType === 'text') {\n      if (this._readyState !== MockXhr.LOADING && this._readyState !== MockXhr.DONE) {\n        return '';\n      }\n      return this._getTextResponse();\n    }\n\n    if (this._readyState !== MockXhr.DONE) {\n      return null;\n    }\n\n    // No specific handling of 'arraybuffer', 'blob', or 'document' response types\n\n    if (this._responseType === 'json') {\n      if (this._response.body === null) {\n        return null;\n      }\n      try {\n        return JSON.parse(this._response.body);\n      } catch (e) {\n        return null;\n      }\n    }\n\n    // Other responseTypes are sent as-is. They can be given directly by setResponseBody() anyway.\n    return this._response.body;\n  }\n\n  /**\n   * @returns responseText attribute\n   * @see {@link https://xhr.spec.whatwg.org/#the-responsetext-attribute}\n   */\n  get responseText() {\n    if (this._responseType !== '' && this._responseType !== 'text') {\n      throwError('InvalidStateError');\n    }\n    if (this._readyState !== MockXhr.LOADING && this._readyState !== MockXhr.DONE) {\n      return '';\n    }\n    return this._getTextResponse();\n  }\n\n  /**\n   * @returns responseXML attribute\n   * @see {@link https://xhr.spec.whatwg.org/#dom-xmlhttprequest-responsexml}\n   */\n  get responseXML() {\n    if (this._responseType !== '' && this._responseType !== 'document') {\n      throwError('InvalidStateError');\n    }\n\n    if (this._readyState !== MockXhr.DONE) {\n      return null;\n    }\n\n    // The response body is not converted to a document response. To get a document\n    // response, pass it directly as the response body in setResponseBody().\n    return this._response.body ?? '';\n  }\n\n  //------------------------------\n  // Request and response handling\n  //------------------------------\n\n  /**\n   * Steps for when the request upload is complete.\n   *\n   * @param requestBodyTransmitted Bytes transmitted\n   * @param requestBodyLength Request body's length\n   * @see {@link https://xhr.spec.whatwg.org/#the-send()-method \"processRequestEndOfBody\" steps}\n   */\n  private _processRequestEndOfBody(requestBodyTransmitted: number, requestBodyLength: number) {\n    this._uploadCompleteFlag = true;\n\n    // There must be at least one Upload listener registered before send() to emit upload progress\n    // events.\n    if (!this._uploadListenerFlag) {\n      return;\n    }\n\n    this._fireUploadProgressEvent('progress', requestBodyTransmitted, requestBodyLength);\n    this._fireUploadProgressEvent('load', requestBodyTransmitted, requestBodyLength);\n    this._fireUploadProgressEvent('loadend', requestBodyTransmitted, requestBodyLength);\n  }\n\n  /**\n   * Steps for when the response headers are received.\n   *\n   * @param response Response\n   * @see {@link https://xhr.spec.whatwg.org/#the-send()-method \"processResponse\" steps}\n   */\n  private _processResponse(response: MockXhrResponse) {\n    this._response = response;\n    this._handleErrors();\n    if (this._response.isNetworkError) {\n      return;\n    }\n\n    this._readyState = MockXhr.HEADERS_RECEIVED;\n    this._fireReadyStateChangeEvent();\n    if (this._readyState !== MockXhr.HEADERS_RECEIVED) {\n      return;\n    }\n\n    if (this._response.body === null) {\n      this._handleResponseEndOfBody();\n    }\n\n    // Don't do the step that extract a length from the response's header list. The\n    // downloadProgress() method of the mock's MockXhrResponseReceiver API has a length argument\n    // that is used instead.\n\n    // Further steps are triggered by the mock's MockXhrResponseReceiver API\n  }\n\n  /**\n   * Handle response end-of-body for response.\n   *\n   * @see {@link https://xhr.spec.whatwg.org/#handle-response-end-of-body}\n   */\n  private _handleResponseEndOfBody() {\n    this._handleErrors();\n    if (this._response.isNetworkError) {\n      return;\n    }\n    const length = this._response.body?.length ?? 0;\n    this._fireProgressEvent('progress', length, length);\n    this._readyState = MockXhr.DONE;\n    this._sendFlag = false;\n    this._terminateFetchController();\n    this._fireReadyStateChangeEvent();\n    this._fireProgressEvent('load', length, length);\n    this._fireProgressEvent('loadend', length, length);\n  }\n\n  /**\n   * The \"handle errors\" steps.\n   *\n   * @see {@link https://xhr.spec.whatwg.org/#handle-errors}\n   */\n  private _handleErrors() {\n    if (!this._sendFlag) {\n      return;\n    }\n    if (this._timedOutFlag) {\n      // Timeout\n      this._requestErrorSteps('timeout');\n\n      // We don't check the aborted flag because it can't be set in the context of this library.\n      // In a browser, the aborted flag can be set if the user presses Esc, the browser stop button,\n      // or the document the fetch is associated with is unloaded.\n    } else if (this._response.isNetworkError) {\n      // Network error\n      this._requestErrorSteps('error');\n    }\n  }\n\n  /**\n   * The \"request error steps\" for event 'event'.\n   *\n   * @param event Event name\n   * @see {@link https://xhr.spec.whatwg.org/#request-error-steps}\n   */\n  private _requestErrorSteps(event: TXhrProgressEventNames) {\n    this._readyState = MockXhr.DONE;\n    this._sendFlag = false;\n    this._response = makeNetworkErrorResponse();\n    this._fireReadyStateChangeEvent();\n    if (!this._uploadCompleteFlag) {\n      this._uploadCompleteFlag = true;\n\n      if (this._uploadListenerFlag) {\n        // If no listeners were registered before send(), no upload events should be fired.\n        this._fireUploadProgressEvent(event, 0, 0);\n        this._fireUploadProgressEvent('loadend', 0, 0);\n      }\n    }\n    this._fireProgressEvent(event, 0, 0);\n    this._fireProgressEvent('loadend', 0, 0);\n  }\n\n  private _getTextResponse() {\n    // Skip support for charset decoding as outlined in https://xhr.spec.whatwg.org/#text-response\n    // Users of this library should instead directly set a string response body as needed.\n\n    // The spec allows access to a text response while it's being received (i.e. LOADING state).\n    // This library current offers no way to simulate this.\n    return this._response.body?.toString() ?? '';\n  }\n\n  //----------\n  // Internals\n  //----------\n\n  protected _callOnSend(onSend?: OnSendCallback) {\n    // Saves the callback and request data in case they change before then() executes\n    if (onSend) {\n      const request = this._currentRequest as MockXhrRequest;\n      Promise.resolve().then(() => onSend.call(request, request, this));\n    }\n  }\n\n  private _terminateFetchController() {\n    delete this._currentRequest;\n  }\n\n  private _fireProgressEvent(name: TXhrProgressEventNames, transmitted: number, length: number) {\n    this.dispatchEvent(new XhrProgressEvent(name, transmitted, length));\n  }\n\n  private _fireUploadProgressEvent(\n    name: TXhrProgressEventNames,\n    transmitted: number,\n    length: number\n  ) {\n    this._uploadObject.dispatchEvent(new XhrProgressEvent(name, transmitted, length));\n  }\n\n  private _fireReadyStateChangeEvent() {\n    const event = new XhrEvent('readystatechange');\n    this.dispatchEvent(event);\n  }\n\n  private _scheduleRequestTimeout() {\n    // Cancel any previous timeout task\n    if (this._timeoutTask) {\n      clearTimeout(this._timeoutTask);\n    }\n\n    if (this._timeout > 0) {\n      // The timeout delay must be measured relative to the start of fetching\n      // https://xhr.spec.whatwg.org/#the-timeout-attribute\n      const delay = Math.max(0, this._timeout - (Date.now() - this._timeoutReference));\n      this._timeoutTask = setTimeout(() => {\n        if (this._sendFlag) {\n          this._currentRequest!.setRequestTimeout();\n        }\n        delete this._timeoutTask;\n      }, delay);\n    }\n  }\n\n  private _getPrototype() {\n    return this.constructor as typeof MockXhr;\n  }\n}\n\nfunction throwError(type: string, text = '') {\n  const exception = new Error(text);\n  exception.name = type;\n  throw exception;\n}\n\nfunction makeNetworkErrorResponse(): MockXhrResponse {\n  return {\n    isNetworkError: true,\n    status: 0,\n    statusMessage: '',\n    headers: new HeadersContainer(),\n    body: null,\n  };\n}\n"],"names":["Utils.getStatusText","Utils.getBodyByteSize","Utils.isRequestMethod","Utils.isRequestMethodForbidden","Utils.normalizeHTTPMethodName","Utils.isHeaderName","Utils.isHeaderValue","Utils.isRequestHeaderForbidden"],"mappings":"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"}