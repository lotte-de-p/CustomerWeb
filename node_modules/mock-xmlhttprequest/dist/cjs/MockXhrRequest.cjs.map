{"version":3,"file":"MockXhrRequest.cjs","sources":["../../src/MockXhrRequest.ts"],"sourcesContent":["import RequestData from './RequestData';\n\nimport type { MockXhrResponseReceiver } from './MockXhrResponseReceiver';\n\n/**\n * A request produced by MockXhr.send() and methods to respond to it.\n *\n * Each call to MockXhr.send() on an instance creates a new instance of MockXhrRequest. When there\n * are multiple active MockXhrRequest instances for the same MockXhr instance, only the response to\n * the last one is considered. Responses to previous MockXhrRequests are ignored.\n */\nexport default class MockXhrRequest {\n  constructor(\n    private readonly _requestData: RequestData,\n    private readonly _responseReceiver: MockXhrResponseReceiver\n  ) {}\n\n  get requestData() { return this._requestData; }\n\n  /**\n   * @returns Request headers container\n   */\n  get requestHeaders() { return this._requestData.requestHeaders; }\n\n  get method() { return this._requestData.method; }\n\n  get url() { return this._requestData.url; }\n\n  get body() { return this._requestData.body; }\n\n  get withCredentials() { return this._requestData.withCredentials; }\n\n  /**\n   * Note: this isn't completely accurate for a multipart/form-data encoded FormData request body.\n   * MockXhr not consider headers, encoding, and other factors that influence the request body size\n   * of non-mocked XMLHttpRequest. You can consider the value returned by this method as a floor\n   * value for the request body size. This can still be useful to simulate upload progress events.\n   *\n   * @returns Request body's total byte size\n   */\n  getRequestBodySize() { return this._requestData.getRequestBodySize(); }\n\n  /**\n   * Fire a request upload progress event.\n   *\n   * @param transmitted Transmitted bytes\n   */\n  uploadProgress(transmitted: number) {\n    this._responseReceiver.uploadProgress(this._requestData, transmitted);\n  }\n\n  /**\n   * Complete response method that sets the response headers and body. Changes the request's\n   * readyState to DONE.\n   *\n   * @param status Response HTTP status (default 200)\n   * @param headers Name-value headers (optional)\n   * @param body Response body (default null)\n   * @param statusText Response HTTP status text (optional)\n   */\n  respond(\n    status?: number,\n    headers?: Record<string, string> | null,\n    body?: any,\n    statusText?: string\n  ) {\n    this.setResponseHeaders(status, headers, statusText);\n    this.setResponseBody(body);\n  }\n\n  /**\n   * Set the response headers. Changes the request's readyState to HEADERS_RECEIVED.\n   *\n   * @param status Response HTTP status (default 200)\n   * @param headers Name-value headers (optional)\n   * @param statusText Response HTTP status text (optional)\n   */\n  setResponseHeaders(\n    status?: number,\n    headers?: Record<string, string> | null,\n    statusText?: string\n  ) {\n    this._responseReceiver.setResponseHeaders(this._requestData, status, headers, statusText);\n  }\n\n  /**\n   * Fire a response progress event. Changes the request's readyState to LOADING.\n   *\n   * @param transmitted Transmitted bytes\n   * @param length Body length in bytes\n   */\n  downloadProgress(transmitted: number, length: number) {\n    this._responseReceiver.downloadProgress(this._requestData, transmitted, length);\n  }\n\n  /**\n   * Set the response body. Changes the request's readyState to DONE.\n   *\n   * @param body Response body (default null)\n   */\n  setResponseBody(body: any = null) {\n    this._responseReceiver.setResponseBody(this._requestData, body);\n  }\n\n  /**\n   * Simulate a network error. Changes the request's readyState to DONE.\n   */\n  setNetworkError() {\n    this._responseReceiver.setNetworkError(this._requestData);\n  }\n\n  /**\n   * Simulate a request timeout. Changes the request's readyState to DONE.\n   */\n  setRequestTimeout() {\n    this._responseReceiver.setRequestTimeout(this._requestData);\n  }\n}\n"],"names":[],"mappings":";;;;;;;AAIA;;;;;;AAMG;AACW,MAAO,cAAc,CAAA;IACjC,WACmB,CAAA,YAAyB,EACzB,iBAA0C,EAAA;QAD1C,IAAY,CAAA,YAAA,GAAZ,YAAY,CAAa;QACzB,IAAiB,CAAA,iBAAA,GAAjB,iBAAiB,CAAyB;KACzD;IAEJ,IAAI,WAAW,KAAK,OAAO,IAAI,CAAC,YAAY,CAAC,EAAE;AAE/C;;AAEG;IACH,IAAI,cAAc,GAAK,EAAA,OAAO,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,EAAE;IAEjE,IAAI,MAAM,GAAK,EAAA,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE;IAEjD,IAAI,GAAG,GAAK,EAAA,OAAO,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE;IAE3C,IAAI,IAAI,GAAK,EAAA,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE;IAE7C,IAAI,eAAe,GAAK,EAAA,OAAO,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,EAAE;AAEnE;;;;;;;AAOG;IACH,kBAAkB,GAAA,EAAK,OAAO,IAAI,CAAC,YAAY,CAAC,kBAAkB,EAAE,CAAC,EAAE;AAEvE;;;;AAIG;AACH,IAAA,cAAc,CAAC,WAAmB,EAAA;QAChC,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,EAAE,WAAW,CAAC,CAAC;KACvE;AAED;;;;;;;;AAQG;AACH,IAAA,OAAO,CACL,MAAe,EACf,OAAuC,EACvC,IAAU,EACV,UAAmB,EAAA;QAEnB,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;AACrD,QAAA,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;KAC5B;AAED;;;;;;AAMG;AACH,IAAA,kBAAkB,CAChB,MAAe,EACf,OAAuC,EACvC,UAAmB,EAAA;AAEnB,QAAA,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,IAAI,CAAC,YAAY,EAAE,MAAM,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;KAC3F;AAED;;;;;AAKG;IACH,gBAAgB,CAAC,WAAmB,EAAE,MAAc,EAAA;AAClD,QAAA,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,IAAI,CAAC,YAAY,EAAE,WAAW,EAAE,MAAM,CAAC,CAAC;KACjF;AAED;;;;AAIG;IACH,eAAe,CAAC,OAAY,IAAI,EAAA;QAC9B,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;KACjE;AAED;;AAEG;IACH,eAAe,GAAA;QACb,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;KAC3D;AAED;;AAEG;IACH,iBAAiB,GAAA;QACf,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;KAC7D;AACF;;;;"}