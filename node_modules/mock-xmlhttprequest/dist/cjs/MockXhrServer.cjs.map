{"version":3,"file":"MockXhrServer.cjs","sources":["../../src/MockXhrServer.ts"],"sourcesContent":["import type MockXhr from './MockXhr';\nimport { getBodyByteSize, normalizeHTTPMethodName } from './Utils';\n\nimport type MockXhrRequest from './MockXhrRequest';\n\nexport type UrlMatcher = ((url: string) => boolean) | string | RegExp;\n\nexport interface RequestHandlerResponse {\n  status: number;\n  statusText: string;\n  headers: Record<string, string>;\n  body: any;\n}\n\ntype RequestHandlerCallback = (request: MockXhrRequest) => void;\n\ntype SingleRequestHandler =\n  Partial<RequestHandlerResponse>\n  | RequestHandlerCallback\n  | 'error'\n  | 'timeout';\n\nexport type RequestHandler = SingleRequestHandler | SingleRequestHandler[];\n\ninterface Route {\n  urlMatcher: UrlMatcher,\n  handler: RequestHandler,\n  count: number,\n}\n\ninterface RequestLogEntry {\n  method: string;\n  url: string;\n  headers: Record<string, string>;\n  body?: any\n}\n\n/**\n * Mock server for responding to XMLHttpRequest mocks from the class MockXhr. Provides simple route\n * matching and request handlers to make test harness creation easier.\n */\nexport default class MockXhrServer {\n  /**\n   * When this is greater than 0, the server automatically generates request (upload) and response\n   * (download) progress events. The progress events have increments of \"progressRate\" bytes.\n   *\n   * This only applies to request handlers of type \"object\".\n   */\n  public progressRate: number;\n\n  private _MockXhr: typeof MockXhr;\n\n  private _requests: RequestLogEntry[];\n\n  private _routes: Record<string, Route[]>;\n\n  private _xhrFactory: () => MockXhr;\n\n  private _savedContext?: any;\n\n  private _savedContextHadXMLHttpRequest?: boolean;\n\n  private _savedXMLHttpRequest?: any;\n\n  private _defaultRoute?: { handler: RequestHandler; count: number; };\n\n  /**\n   * Constructor\n   *\n   * @param xhrMock XMLHttpRequest mock class\n   * @param routes Routes\n   */\n  constructor(xhrMock: typeof MockXhr, routes?: Record<string, [UrlMatcher, RequestHandler]>) {\n    this.progressRate = 0;\n    this._MockXhr = xhrMock;\n    this._requests = [];\n    this._routes = {};\n    if (routes) {\n      Object.entries(routes).forEach(([method, [urlMatcher, handler]]) => {\n        this.addHandler(method, urlMatcher, handler);\n      });\n    }\n    xhrMock.onSend = (request) => { this._handleRequest(request); };\n\n    // Setup a mock request factory for users\n    this._xhrFactory = () => new this._MockXhr();\n  }\n\n  public get MockXhr() {\n    return this._MockXhr;\n  }\n\n  /**\n   * For backwards compatibility with versions < 4.1.0\n   *\n   * @deprecated Use the MockXhr property instead\n   */\n  public get xhrMock() {\n    return this._MockXhr;\n  }\n\n  public get xhrFactory() {\n    return this._xhrFactory;\n  }\n\n  /**\n   * Install the server's XMLHttpRequest mock in the global context. You can specify a different\n   * context with the optional `context` argument. Revert with remove().\n   *\n   * @param context Context object (e.g. global, window)\n   * @returns this\n   */\n  install(context: any = globalThis) {\n    this._savedContext = context;\n\n    // Distinguish between an undefined and a missing XMLHttpRequest property\n    if ('XMLHttpRequest' in context) {\n      this._savedContextHadXMLHttpRequest = true;\n      this._savedXMLHttpRequest = context.XMLHttpRequest;\n    } else {\n      this._savedContextHadXMLHttpRequest = false;\n    }\n    context.XMLHttpRequest = this._MockXhr;\n    return this;\n  }\n\n  /**\n   * Revert the changes made by install(). Call this after your tests.\n   */\n  remove() {\n    if (!this._savedContext) {\n      throw new Error('remove() called without a matching install(context).');\n    }\n\n    if (this._savedContextHadXMLHttpRequest) {\n      this._savedContext.XMLHttpRequest = this._savedXMLHttpRequest;\n      delete this._savedXMLHttpRequest;\n    } else {\n      delete this._savedContext.XMLHttpRequest;\n    }\n    delete this._savedContext;\n  }\n\n  /**\n   * Disable the effects of the timeout attribute on the XMLHttpRequest mock used by the server.\n   *\n   * @returns this\n   */\n  disableTimeout() {\n    this._MockXhr.timeoutEnabled = false;\n    return this;\n  }\n\n  /**\n   * Enable the effects of the timeout attribute on the XMLHttpRequest mock used by the server.\n   *\n   * @returns this\n   */\n  enableTimeout() {\n    this._MockXhr.timeoutEnabled = true;\n    return this;\n  }\n\n  /**\n   * Add a GET request handler.\n   *\n   * @param urlMatcher Url matcher\n   * @param handler Request handler\n   * @returns this\n   */\n  get(urlMatcher: UrlMatcher, handler: RequestHandler) {\n    return this.addHandler('GET', urlMatcher, handler);\n  }\n\n  /**\n   * Add a POST request handler.\n   *\n   * @param urlMatcher Url matcher\n   * @param handler Request handler\n   * @returns this\n   */\n  post(urlMatcher: UrlMatcher, handler: RequestHandler) {\n    return this.addHandler('POST', urlMatcher, handler);\n  }\n\n  /**\n   * Add a PUT request handler.\n   *\n   * @param urlMatcher Url matcher\n   * @param handler Request handler\n   * @returns this\n   */\n  put(urlMatcher: UrlMatcher, handler: RequestHandler) {\n    return this.addHandler('PUT', urlMatcher, handler);\n  }\n\n  /**\n   * Add a DELETE request handler.\n   *\n   * @param urlMatcher Url matcher\n   * @param handler Request handler\n   * @returns this\n   */\n  delete(urlMatcher: UrlMatcher, handler: RequestHandler) {\n    return this.addHandler('DELETE', urlMatcher, handler);\n  }\n\n  /**\n   * Add a request handler.\n   *\n   * @param method HTTP method\n   * @param urlMatcher Url matcher\n   * @param handler Request handler\n   * @returns this\n   */\n  addHandler(method: string, urlMatcher: UrlMatcher, handler: RequestHandler) {\n    // Match the processing done in MockXHR for the method name\n    method = normalizeHTTPMethodName(method);\n    const routes = this._routes[method] ?? (this._routes[method] = []);\n    routes.push({ urlMatcher, handler, count: 0 });\n    return this;\n  }\n\n  /**\n   * Set the default request handler for requests that don't match any route.\n   *\n   * @param handler Request handler\n   * @returns this\n   */\n  setDefaultHandler(handler: RequestHandler) {\n    this._defaultRoute = { handler, count: 0 };\n    return this;\n  }\n\n  /**\n   * Return 404 responses for requests that don't match any route.\n   *\n   * @returns this\n   */\n  setDefault404() {\n    return this.setDefaultHandler({ status: 404 });\n  }\n\n  /**\n   * @returns Array of requests received by the server. Entries: { method, url, headers, body? }\n   */\n  getRequestLog(): readonly RequestLogEntry[] {\n    return [...this._requests];\n  }\n\n  private _handleRequest(request: MockXhrRequest) {\n    // Record the request for easier debugging\n    this._requests.push({\n      method: request.method,\n      url: request.url,\n      headers: request.requestHeaders.getHash(),\n      body: request.body,\n    });\n\n    const route = this._findFirstMatchingRoute(request) ?? this._defaultRoute;\n    if (route) {\n      // Routes can have arrays of handlers. Each one is used once and the last one is used if out\n      // of elements.\n      const handler = Array.isArray(route.handler)\n        ? route.handler[Math.min(route.handler.length - 1, route.count)]\n        : route.handler;\n      route.count += 1;\n\n      if (typeof handler === 'function') {\n        handler(request);\n      } else if (handler === 'error') {\n        request.setNetworkError();\n      } else if (handler === 'timeout') {\n        request.setRequestTimeout();\n      } else {\n        const responseHeaders = { ...handler.headers };\n        const responseBodySize = getBodyByteSize(handler.body);\n\n        // Add the Content-Length header if it's not present.\n        if (!Object.keys(responseHeaders).some((k) => k.toUpperCase() === 'CONTENT-LENGTH')) {\n          responseHeaders['content-length'] = String(responseBodySize);\n        }\n\n        if (this.progressRate <= 0) {\n          request.respond(handler.status, responseHeaders, handler.body, handler.statusText);\n        } else {\n          let responseTransmitted = 0;\n          const responsePhase = () => {\n            if (responseTransmitted === 0) {\n              request.setResponseHeaders(handler.status, responseHeaders, handler.statusText);\n            }\n            if (this.progressRate <= 0) {\n              // Final operation for this request\n              request.setResponseBody(handler.body);\n            } else {\n              const nextTransmitted = responseTransmitted + this.progressRate;\n              if (nextTransmitted < responseBodySize) {\n                responseTransmitted = nextTransmitted;\n                request.downloadProgress(responseTransmitted, responseBodySize);\n                Promise.resolve().then(() => responsePhase());\n              } else {\n                // Final operation for this request\n                request.setResponseBody(handler.body);\n              }\n            }\n          };\n\n          const requestBodySize = request.getRequestBodySize();\n          if (requestBodySize === 0) {\n            responsePhase();\n          } else {\n            let requestTransmitted = 0;\n            const requestPhase = () => {\n              if (this.progressRate <= 0) {\n                // Final operation for this request\n                request.respond(handler.status, responseHeaders, handler.body, handler.statusText);\n              } else {\n                const nextTransmitted = requestTransmitted + this.progressRate;\n                if (nextTransmitted < requestBodySize) {\n                  requestTransmitted = nextTransmitted;\n                  request.uploadProgress(requestTransmitted);\n                  Promise.resolve().then(() => requestPhase());\n                } else {\n                  responsePhase();\n                }\n              }\n            };\n            requestPhase();\n          }\n        }\n      }\n    }\n  }\n\n  private _findFirstMatchingRoute(request: MockXhrRequest) {\n    const method = normalizeHTTPMethodName(request.method);\n    if (!this._routes[method]) {\n      return undefined;\n    }\n\n    const { url } = request;\n    return this._routes[method].find((route) => {\n      const { urlMatcher } = route;\n      if (typeof urlMatcher === 'function') {\n        return urlMatcher(url);\n      } else if (urlMatcher instanceof RegExp) {\n        return urlMatcher.test(url);\n      }\n      return urlMatcher === url;\n    });\n  }\n}\n"],"names":["normalizeHTTPMethodName","getBodyByteSize"],"mappings":"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"}