{"version":3,"sources":["../src/manager.ts","../src/constants.ts","../src/Panel.tsx","../src/components/PanelContent.tsx","../src/components/SyntaxHighlighter.tsx"],"names":["addons","types","ADDON_ID","PANEL_ID","PARAM_KEY","EVENTS","React","useEffect","useState","useAddonState","useChannel","useParameter","AddonPanel","style","styled","ActionBar","ScrollArea","ReactSyntaxHighlighter","Pre","propName","theme","padded","Code","SyntaxHighlighter","language","copyable","bordered","children","showLineNumbers","wrapLines","renderer","rest","copied","setCopied","onClick","e","PanelContent","code","prettierFormat","prettierHtml","Panel","props","setState","state","parameters","prettier","prettierConfig","formattedCode","setFormattedCode","prettierFormattedCode","viewMode"],"mappings":"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","sourcesContent":["import { addons, types } from \"@storybook/manager-api\";\nimport { ADDON_ID, PANEL_ID, PARAM_KEY } from \"./constants\";\nimport { Panel } from \"./Panel\";\n\n// Register the addon\naddons.register(ADDON_ID, () => {\n  // Register the panel\n  addons.add(PANEL_ID, {\n    type: types.PANEL,\n    title: \"HTML\",\n    match: ({ viewMode }) => viewMode === \"story\",\n    render: Panel,\n    paramKey: PARAM_KEY,\n  });\n});\n","export const ADDON_ID = \"storybook/html\";\nexport const PANEL_ID = `${ADDON_ID}/panel`;\nexport const PARAM_KEY = `html`;\n\nexport const EVENTS = {\n  CODE_UPDATE: `${ADDON_ID}/codeUpdate`,\n};\n","import React, { useEffect, useState } from \"react\";\nimport {\n  useAddonState,\n  useChannel,\n  useParameter,\n} from \"@storybook/manager-api\";\nimport { AddonPanel } from \"@storybook/components\";\nimport { ADDON_ID, EVENTS, PARAM_KEY } from \"./constants\";\nimport { PanelContent } from \"./components/PanelContent\";\nimport { format as prettierFormat } from \"prettier/standalone\";\nimport * as prettierHtml from \"prettier/plugins/html\";\nimport { Options as PrettierOption } from \"prettier\";\n\ninterface PanelProps {\n  active: boolean;\n}\n\nexport const Panel: React.FC<PanelProps> = (props) => {\n  // https://storybook.js.org/docs/react/addons/addons-api#useaddonstate\n  const [{ code }, setState] = useAddonState(ADDON_ID, {\n    code: null,\n  });\n\n  // https://storybook.js.org/docs/react/addons/addons-api#usechannel\n  useChannel({\n    [EVENTS.CODE_UPDATE]: ({ code }) => {\n      setState((state) => ({ ...state, code }));\n    },\n  });\n\n  const parameters = useParameter(PARAM_KEY, {\n    highlighter: { showLineNumbers: false, wrapLines: true },\n    prettier: {},\n  });\n  const {\n    highlighter: { showLineNumbers = false, wrapLines = true } = {},\n    prettier = {},\n  } = parameters;\n\n  const prettierConfig: PrettierOption = {\n    htmlWhitespaceSensitivity: \"ignore\",\n    ...prettier,\n    // Ensure we always pick the html parser\n    parser: \"html\",\n    plugins: [prettierHtml],\n  };\n\n  const [formattedCode, setFormattedCode] = useState(null);\n  useEffect(() => {\n    const formatCode = async () => {\n      const prettierFormattedCode =\n        code && (await prettierFormat(code, prettierConfig));\n      setFormattedCode(prettierFormattedCode);\n    };\n    formatCode().catch((e) => console.error(e));\n  }, [code, prettierConfig]);\n\n  return (\n    <AddonPanel {...props}>\n      <PanelContent\n        code={formattedCode}\n        showLineNumbers={showLineNumbers}\n        wrapLines={wrapLines}\n      />\n    </AddonPanel>\n  );\n};\n","import React from \"react\";\nimport style from \"react-syntax-highlighter/dist/esm/styles/hljs/github\";\nimport SyntaxHighlighter from \"./SyntaxHighlighter\";\n\ninterface PanelContentProps {\n  code: string;\n  showLineNumbers?: boolean;\n  wrapLines?: boolean;\n}\n\nexport const PanelContent: React.FC<PanelContentProps> = ({\n  code,\n  showLineNumbers = false,\n  wrapLines = false,\n}) => (\n  <SyntaxHighlighter\n    language={\"xml\"}\n    copyable={true}\n    padded={true}\n    style={style}\n    showLineNumbers={showLineNumbers}\n    wrapLines={wrapLines}\n  >\n    {code}\n  </SyntaxHighlighter>\n);\n","import React, { useState } from \"react\";\nimport { styled } from \"@storybook/theming\";\n\nimport {\n  ActionBar,\n  ScrollArea,\n  SyntaxHighlighterProps,\n} from \"@storybook/components\";\n\nimport ReactSyntaxHighlighter, {\n  SyntaxHighlighterProps as ReactSyntaxHighlighterProps,\n} from \"react-syntax-highlighter\";\n\ntype PreProps = {\n  padded?: boolean;\n};\n\nconst Pre = styled(\"pre\", {\n  shouldForwardProp: (propName) => propName !== \"padded\",\n})<PreProps>(({ theme, padded }) => ({\n  display: \"flex !important\",\n  justifyContent: \"flex-start\",\n  margin: 0,\n  padding: padded ? `${theme.layoutMargin}px !important` : 0,\n  tabSize: \"2\",\n}));\n\nconst Code = styled.code`\n  flex: 1;\n  padding-right: 0;\n  opacity: 1;\n  counter-reset: line;\n\n  .code-line {\n    counter-increment: line;\n    position: relative;\n    display: block;\n    margin-left: 1.5rem;\n  }\n\n  .code-line:before {\n    content: counter(line);\n    position: absolute;\n    margin-left: -1.5rem;\n    color: #000;\n  }\n`;\n\nexport default function SyntaxHighlighter({\n  language = \"jsx\",\n  copyable = false,\n  bordered = false,\n  padded = false,\n  children,\n  showLineNumbers = false,\n  wrapLines = true,\n  renderer,\n  ...rest\n}: Omit<SyntaxHighlighterProps, \"language\"> & {\n  wrapLines?: boolean;\n  children?: string;\n  language?: ReactSyntaxHighlighterProps[\"language\"];\n}) {\n  const [copied, setCopied] = useState(false);\n\n  const onClick = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.preventDefault();\n    (async () => {\n      await navigator.clipboard.writeText(children);\n      setCopied(true);\n      window.setTimeout(() => setCopied(false), 1500);\n    })();\n  };\n\n  if (!children) {\n    return null;\n  }\n\n  return (\n    <>\n      <ScrollArea vertical>\n        <ReactSyntaxHighlighter\n          padded={padded || bordered}\n          language={language}\n          useInlineStyles={true}\n          PreTag={Pre}\n          CodeTag={Code}\n          showLineNumbers={showLineNumbers}\n          wrapLines={wrapLines}\n          lineProps={{ className: \"code-line\" }}\n          {...rest}\n        >\n          {children.trim()}\n        </ReactSyntaxHighlighter>\n      </ScrollArea>\n      {copyable && (\n        <ActionBar\n          actionItems={[{ title: copied ? \"Copied\" : \"Copy\", onClick }]}\n        />\n      )}\n    </>\n  );\n}\n"]}