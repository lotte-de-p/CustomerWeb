"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createCustomRunner = void 0;
const default_1 = __importDefault(require("nx/tasks-runners/default"));
const create_remote_cache_retrieve_1 = require("./create-remote-cache-retrieve");
const create_remote_cache_store_1 = require("./create-remote-cache-store");
const get_safe_remote_cache_implementation_1 = require("./get-safe-remote-cache-implementation");
const log = __importStar(require("./log"));
const cacheNoop = async () => false;
const createRemoteCache = (implementation, options) => {
    var _a, _b;
    const read = process.env.NXCACHE_READ
        ? process.env.NXCACHE_READ !== "false"
        : (_a = options.read) !== null && _a !== void 0 ? _a : true;
    const write = process.env.NXCACHE_WRITE
        ? process.env.NXCACHE_WRITE !== "false"
        : (_b = options.write) !== null && _b !== void 0 ? _b : true;
    // Do not even create the cache if both read and write are disabled
    if (!read && !write) {
        return {
            retrieve: cacheNoop,
            store: cacheNoop,
        };
    }
    const safeImplementation = (0, get_safe_remote_cache_implementation_1.getSafeRemoteCacheImplementation)(implementation, options);
    if (options.verbose) {
        log.cacheCreated({ read, write });
    }
    return {
        retrieve: read ? (0, create_remote_cache_retrieve_1.createRemoteCacheRetrieve)(safeImplementation) : cacheNoop,
        store: write ? (0, create_remote_cache_store_1.createRemoteCacheStore)(safeImplementation) : cacheNoop,
    };
};
const createCustomRunner = (setup) => (tasks, options, context) => (0, default_1.default)(tasks, {
    ...options,
    remoteCache: createRemoteCache(setup(options, tasks), options),
}, context);
exports.createCustomRunner = createCustomRunner;
