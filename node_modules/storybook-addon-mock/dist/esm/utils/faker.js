function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/* eslint-disable no-restricted-globals */
import { newMockXhr } from 'mock-xmlhttprequest';
import { match } from 'path-to-regexp';
import { Request } from './request';
import { CustomResponse } from './response';
import { setRequestHeaders, getResponseHeaderMap, defaultResponseHeaders } from './headers';
import { arrayEquals } from './array';
import { getNormalizedUrl } from './url';
import { validate, schema } from './validator';
var global =
// eslint-disable-next-line no-undef
typeof globalThis !== 'undefined' && globalThis || typeof self !== 'undefined' && self || typeof global !== 'undefined' && global || {};
export var Faker = /*#__PURE__*/function () {
  function Faker() {
    var _this = this;
    _classCallCheck(this, Faker);
    _defineProperty(this, "getRequests", function () {
      return Object.values(_this.requestMap);
    });
    _defineProperty(this, "getKey", function () {
      var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      var searchParamKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
      return url && method ? [url].concat(_toConsumableArray(searchParamKeys), [method.toLowerCase()]).join('_') : '';
    });
    _defineProperty(this, "makeInitialRequestMap", function (requests) {
      if (!requests || !Array.isArray(requests)) {
        return;
      }
      _this.restore();
      requests.forEach(function (request) {
        _this.add(request);
      });
    });
    _defineProperty(this, "setIgnoreQueryParams", function (value) {
      _this.ignoreQueryParams = value;
    });
    _defineProperty(this, "add", function (request) {
      var _getNormalizedUrl = getNormalizedUrl(request.url),
        path = _getNormalizedUrl.path,
        searchParamKeys = _getNormalizedUrl.searchParamKeys;
      var key = _this.getKey(path, searchParamKeys, request.method);
      var errors = validate(request, schema);
      if (errors && errors.length) {
        _this.requestMap[key] = {
          errors: errors,
          originalRequest: request
        };
        return;
      }
      _this.requestMap[key] = _objectSpread(_objectSpread({}, request), {}, {
        path: path,
        searchParamKeys: searchParamKeys,
        method: request.method || 'GET',
        status: request.status || 200,
        delay: request.delay || 0,
        skip: false,
        errors: []
      });
    });
    _defineProperty(this, "update", function (item, fieldKey, value) {
      var url = item.url,
        method = item.method;
      var _getNormalizedUrl2 = getNormalizedUrl(url),
        path = _getNormalizedUrl2.path,
        searchParamKeys = _getNormalizedUrl2.searchParamKeys;
      var itemKey = _this.getKey(path, searchParamKeys, method);
      if (
      // eslint-disable-next-line no-prototype-builtins
      _this.requestMap.hasOwnProperty(itemKey) &&
      // eslint-disable-next-line no-prototype-builtins
      _this.requestMap[itemKey].hasOwnProperty(fieldKey)) {
        _this.requestMap[itemKey][fieldKey] = value;
      }
    });
    _defineProperty(this, "matchMock", function (url) {
      var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GET';
      var _getNormalizedUrl3 = getNormalizedUrl(url),
        path = _getNormalizedUrl3.path,
        searchParamKeys = _getNormalizedUrl3.searchParamKeys;
      for (var key in _this.requestMap) {
        var _this$requestMap$key = _this.requestMap[key],
          requestUrl = _this$requestMap$key.url,
          requestMethod = _this$requestMap$key.method;
        var _getNormalizedUrl4 = getNormalizedUrl(requestUrl),
          requestPath = _getNormalizedUrl4.path,
          requestSearchKeys = _getNormalizedUrl4.searchParamKeys;
        if (match(requestPath)(path) && method == requestMethod && _this.matchQueryParams(searchParamKeys, requestSearchKeys) && !_this.requestMap[key].skip) {
          return _this.requestMap[key];
        }
      }
      return null;
    });
    _defineProperty(this, "matchQueryParams", function (searchParams, requestSearchParams) {
      return _this.ignoreQueryParams || arrayEquals(searchParams, requestSearchParams);
    });
    _defineProperty(this, "mockFetch", function (input, options) {
      var request = new Request(input, options);
      var url = request.url,
        method = request.method;
      var matched = _this.matchMock(url, method);
      if (!matched) {
        // eslint-disable-next-line no-restricted-globals
        return global.realFetch(input, options);
      }
      var response = matched.response,
        status = matched.status,
        _matched$delay = matched.delay,
        delay = _matched$delay === void 0 ? 0 : _matched$delay;
      var mockResponseSent = false;
      return new Promise(function (resolve, reject) {
        var _request$signal;
        var timeoutId = setTimeout(function () {
          if (typeof response === 'function') {
            resolve(CustomResponse(url, status, response(request)));
          } else {
            resolve(CustomResponse(url, status, response));
          }
          mockResponseSent = true;
        }, +delay);
        (_request$signal = request.signal) === null || _request$signal === void 0 || _request$signal.addEventListener('abort', function () {
          if (mockResponseSent) {
            return;
          }
          timeoutId && clearTimeout(timeoutId);
          var error = new Error(request.signal.reason);
          error.name = 'AbortError';
          reject(error);
        });
      });
    });
    _defineProperty(this, "mockXhrRequest", function (request) {
      var method = request.method,
        url = request.url,
        body = request.body;
      var matched = _this.matchMock(url, method);
      if (matched) {
        var response = matched.response,
          status = matched.status,
          _matched$delay2 = matched.delay,
          delay = _matched$delay2 === void 0 ? 0 : _matched$delay2;
        setTimeout(function () {
          if (typeof response === 'function') {
            var data = response(new Request(url, {
              method: method,
              body: body
            }));
            request.respond(+status, defaultResponseHeaders, JSON.stringify(data));
          } else {
            request.respond(+status, defaultResponseHeaders, JSON.stringify(response));
          }
        }, +delay);
      } else {
        var RealXMLHTTPRequest = global.realXMLHttpRequest;
        var realXhr = new RealXMLHTTPRequest();
        var fakeXhr = request._responseReceiver;
        realXhr.open(method, url);
        realXhr.timeout = fakeXhr.timeout;
        realXhr.withCredentials = fakeXhr.withCredentials;
        _this.transferEventListeners(fakeXhr, realXhr);
        setRequestHeaders(realXhr, new Map(Object.entries(request.requestHeaders.getHash())));
        realXhr.addEventListener('readystatechange', function () {
          if (realXhr.readyState === XMLHttpRequest.DONE) {
            request.respond(realXhr.status, getResponseHeaderMap(realXhr), realXhr.responseText, realXhr.statusText);
          }
        });
        realXhr.addEventListener('abort', function () {
          return request.abort();
        });
        realXhr.addEventListener('error', function () {
          return request.setNetworkError();
        });
        realXhr.addEventListener('timeout', function () {
          return request.setRequestTimeout();
        });
        realXhr.send(body);
      }
    });
    _defineProperty(this, "restore", function () {
      _this.requestMap = {};
      _this.ignoreQueryParams = false;
    });
    this.MockXhr = newMockXhr();
    this.MockXhr.onSend = this.mockXhrRequest;
    global.realFetch = global.fetch;
    global.realXMLHttpRequest = global.XMLHttpRequest;
    global.fetch = this.mockFetch;
    global.XMLHttpRequest = this.MockXhr;
    this.requestMap = {};
    this.ignoreQueryParams = false;
  }
  _createClass(Faker, [{
    key: "transferEventListeners",
    value: function transferEventListeners(fakeXhr, realXhr) {
      fakeXhr._listeners.forEach(function (handlers, eventName) {
        if (eventName === 'loadstart') {
          // We can't transfer loadstart because it fires as soon as the user calls xhr.start() and
          // before this method is called, so to avoid calling it twice, we refrain from transferring it.
          return;
        }
        handlers.forEach(function (_ref) {
          var isEventHandlerProperty = _ref.isEventHandlerProperty,
            listener = _ref.listener,
            useCapture = _ref.useCapture,
            once = _ref.once;
          if (isEventHandlerProperty) {
            realXhr["on".concat(eventName)] = listener;
          } else {
            realXhr.addEventListener(eventName, listener, {
              once: once,
              capture: useCapture
            });
          }
        });
      });
      fakeXhr._listeners.clear();
    }
  }]);
  return Faker;
}();
export default new Faker();