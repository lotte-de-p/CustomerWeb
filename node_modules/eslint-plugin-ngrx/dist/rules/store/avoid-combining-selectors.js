"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.messageId = void 0;
const path_1 = __importDefault(require("path"));
const rule_creator_1 = require("../../rule-creator");
const utils_1 = require("../../utils");
exports.messageId = 'avoidCombiningSelectors';
exports.default = (0, rule_creator_1.createRule)({
    name: path_1.default.parse(__filename).name,
    meta: {
        type: 'suggestion',
        ngrxModule: 'store',
        docs: {
            description: 'Prefer combining selectors at the selector level.',
            recommended: 'warn',
        },
        schema: [],
        messages: {
            [exports.messageId]: 'Combine selectors at the selector level.',
        },
    },
    defaultOptions: [],
    create: (context) => {
        const { identifiers = [] } = (0, utils_1.getNgRxStores)(context);
        const storeNames = identifiers.length > 0 ? (0, utils_1.asPattern)(identifiers) : null;
        if (!storeNames) {
            return {};
        }
        const pipeableOrStoreSelect = `:matches(${(0, utils_1.namedExpression)(storeNames)}[callee.property.name='pipe']:has(CallExpression[callee.name='select']), ${(0, utils_1.selectExpression)(storeNames)})`;
        return {
            [`CallExpression[callee.name='combineLatest'][arguments.length>1] ${pipeableOrStoreSelect} ~ ${pipeableOrStoreSelect}`](node) {
                context.report({
                    node,
                    messageId: exports.messageId,
                });
            },
        };
    },
});
