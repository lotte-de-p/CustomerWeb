"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.noReducerInKeyNamesSuggest = exports.noReducerInKeyNames = void 0;
const path_1 = __importDefault(require("path"));
const rule_creator_1 = require("../../rule-creator");
const utils_1 = require("../../utils");
exports.noReducerInKeyNames = 'noReducerInKeyNames';
exports.noReducerInKeyNamesSuggest = 'noReducerInKeyNamesSuggest';
const reducerKeyword = 'reducer';
exports.default = (0, rule_creator_1.createRule)({
    name: path_1.default.parse(__filename).name,
    meta: {
        type: 'suggestion',
        hasSuggestions: true,
        ngrxModule: 'store',
        docs: {
            description: `Avoid the word "${reducerKeyword}" in the key names.`,
            recommended: 'warn',
            suggestion: true,
        },
        schema: [],
        messages: {
            [exports.noReducerInKeyNames]: `Avoid the word "${reducerKeyword}" in the key names to better represent the state.`,
            [exports.noReducerInKeyNamesSuggest]: `Remove the word "${reducerKeyword}".`,
        },
    },
    defaultOptions: [],
    create: (context) => {
        return {
            [`:matches(${utils_1.storeActionReducerMap}, ${utils_1.actionReducerMap}) > ${(0, utils_1.metadataProperty)(/reducer/i)} > .key`](node) {
                context.report({
                    node,
                    messageId: exports.noReducerInKeyNames,
                    suggest: [
                        {
                            messageId: exports.noReducerInKeyNamesSuggest,
                            fix: (fixer) => {
                                const keyName = (0, utils_1.getRawText)(node);
                                if (!keyName) {
                                    return null;
                                }
                                return fixer.replaceText(node, keyName.replace(new RegExp(reducerKeyword, 'i'), ''));
                            },
                        },
                    ],
                });
            },
        };
    },
});
