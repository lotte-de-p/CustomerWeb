"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.preferInlineActionPropsSuggest = exports.preferInlineActionProps = void 0;
const path_1 = __importDefault(require("path"));
const rule_creator_1 = require("../../rule-creator");
const utils_1 = require("../../utils");
exports.preferInlineActionProps = 'preferInlineActionProps';
exports.preferInlineActionPropsSuggest = 'preferInlineActionPropsSuggest';
exports.default = (0, rule_creator_1.createRule)({
    name: path_1.default.parse(__filename).name,
    meta: {
        type: 'suggestion',
        hasSuggestions: true,
        ngrxModule: 'store',
        docs: {
            description: 'Prefer using inline types instead of interfaces, types or classes.',
            recommended: 'warn',
            suggestion: true,
        },
        schema: [],
        messages: {
            [exports.preferInlineActionProps]: 'Use inline types instead of interfaces, types or classes.',
            [exports.preferInlineActionPropsSuggest]: 'Change to inline types.',
        },
    },
    defaultOptions: [],
    create: (context) => {
        return {
            [utils_1.actionCreatorPropsComputed](node) {
                context.report({
                    node,
                    messageId: exports.preferInlineActionProps,
                    suggest: [
                        {
                            messageId: exports.preferInlineActionPropsSuggest,
                            fix: (fixer) => [
                                fixer.insertTextBefore(node, '{name: '),
                                fixer.insertTextAfter(node, '}'),
                            ],
                        },
                    ],
                });
            },
        };
    },
});
