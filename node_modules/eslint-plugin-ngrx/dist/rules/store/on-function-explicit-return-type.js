"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.onFunctionExplicitReturnTypeSuggest = exports.onFunctionExplicitReturnType = void 0;
const experimental_utils_1 = require("@typescript-eslint/experimental-utils");
const path_1 = __importDefault(require("path"));
const rule_creator_1 = require("../../rule-creator");
const utils_1 = require("../../utils");
exports.onFunctionExplicitReturnType = 'onFunctionExplicitReturnType';
exports.onFunctionExplicitReturnTypeSuggest = 'onFunctionExplicitReturnTypeSuggest';
exports.default = (0, rule_creator_1.createRule)({
    name: path_1.default.parse(__filename).name,
    meta: {
        type: 'suggestion',
        hasSuggestions: true,
        ngrxModule: 'store',
        docs: {
            description: '`On` function should have an explicit return type.',
            recommended: 'warn',
            suggestion: true,
        },
        schema: [],
        messages: {
            [exports.onFunctionExplicitReturnType]: '`On` functions should have an explicit return type when using arrow functions: `on(action, (state): State => {}`.',
            [exports.onFunctionExplicitReturnTypeSuggest]: 'Add the explicit return type `State` (if the interface/type is named differently you need to manually correct the return type).',
        },
    },
    defaultOptions: [],
    create: (context) => {
        const sourceCode = context.getSourceCode();
        return {
            [utils_1.onFunctionWithoutType](node) {
                context.report({
                    node,
                    messageId: exports.onFunctionExplicitReturnType,
                    suggest: [
                        {
                            messageId: exports.onFunctionExplicitReturnTypeSuggest,
                            fix: (fixer) => getFixes(node, sourceCode, fixer),
                        },
                    ],
                });
            },
        };
    },
});
function getFixes(node, sourceCode, fixer) {
    const { params } = node;
    if (params.length === 0) {
        const [, closingParen] = sourceCode.getTokens(node);
        return fixer.insertTextAfter(closingParen, ': State');
    }
    const [firstParam] = params;
    const lastParam = (0, utils_1.getLast)(params);
    const previousToken = sourceCode.getTokenBefore(firstParam);
    const isParenthesized = previousToken && experimental_utils_1.ASTUtils.isOpeningParenToken(previousToken);
    if (isParenthesized) {
        const nextToken = sourceCode.getTokenAfter(lastParam);
        return fixer.insertTextAfter(nextToken !== null && nextToken !== void 0 ? nextToken : lastParam, ': State');
    }
    return [
        fixer.insertTextBefore(firstParam, '('),
        fixer.insertTextAfter(lastParam, '): State'),
    ];
}
