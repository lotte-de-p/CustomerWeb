"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.preferOneGenericInCreateForFeatureSelectorSuggest = exports.preferOneGenericInCreateForFeatureSelector = void 0;
const path_1 = __importDefault(require("path"));
const rule_creator_1 = require("../../rule-creator");
exports.preferOneGenericInCreateForFeatureSelector = 'preferOneGenericInCreateForFeatureSelector';
exports.preferOneGenericInCreateForFeatureSelectorSuggest = 'preferOneGenericInCreateForFeatureSelectorSuggest';
exports.default = (0, rule_creator_1.createRule)({
    name: path_1.default.parse(__filename).name,
    meta: {
        type: 'suggestion',
        hasSuggestions: true,
        ngrxModule: 'store',
        docs: {
            description: 'Prefer using a single generic to define the feature state.',
            recommended: 'warn',
            suggestion: true,
        },
        schema: [],
        messages: {
            [exports.preferOneGenericInCreateForFeatureSelector]: 'Use a single generic to define the feature state.',
            [exports.preferOneGenericInCreateForFeatureSelectorSuggest]: 'Remove the global state generic.',
        },
    },
    defaultOptions: [],
    create: (context) => {
        const sourceCode = context.getSourceCode();
        return {
            [`CallExpression[callee.name='createFeatureSelector'] > TSTypeParameterInstantiation[params.length>1]`](node) {
                context.report({
                    node,
                    messageId: exports.preferOneGenericInCreateForFeatureSelector,
                    suggest: [
                        {
                            messageId: exports.preferOneGenericInCreateForFeatureSelectorSuggest,
                            fix: (fixer) => {
                                var _a;
                                const [globalState] = node.params;
                                const nextToken = sourceCode.getTokenAfter(globalState);
                                return fixer.removeRange([
                                    globalState.range[0],
                                    (_a = nextToken === null || nextToken === void 0 ? void 0 : nextToken.range[1]) !== null && _a !== void 0 ? _a : globalState.range[1] + 1,
                                ]);
                            },
                        },
                    ],
                });
            },
        };
    },
});
