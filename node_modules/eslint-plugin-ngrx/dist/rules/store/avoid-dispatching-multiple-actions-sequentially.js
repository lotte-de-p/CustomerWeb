"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.messageId = void 0;
const path_1 = __importDefault(require("path"));
const rule_creator_1 = require("../../rule-creator");
const utils_1 = require("../../utils");
exports.messageId = 'avoidDispatchingMultipleActionsSequentially';
exports.default = (0, rule_creator_1.createRule)({
    name: path_1.default.parse(__filename).name,
    meta: {
        type: 'suggestion',
        ngrxModule: 'store',
        docs: {
            description: 'It is recommended to only dispatch one `Action` at a time.',
            recommended: 'warn',
        },
        schema: [],
        messages: {
            [exports.messageId]: 'Avoid dispatching many actions in a row to accomplish a larger conceptual "transaction".',
        },
    },
    defaultOptions: [],
    create: (context) => {
        const { identifiers = [] } = (0, utils_1.getNgRxStores)(context);
        const storeNames = identifiers.length > 0 ? (0, utils_1.asPattern)(identifiers) : null;
        if (!storeNames) {
            return {};
        }
        const collectedDispatches = new Set();
        return {
            [`BlockStatement > ExpressionStatement > ${(0, utils_1.dispatchExpression)(storeNames)}`](node) {
                collectedDispatches.add(node);
            },
            'BlockStatement:exit'() {
                if (collectedDispatches.size > 1) {
                    for (const node of collectedDispatches) {
                        context.report({
                            node,
                            messageId: exports.messageId,
                        });
                    }
                }
                collectedDispatches.clear();
            },
        };
    },
});
