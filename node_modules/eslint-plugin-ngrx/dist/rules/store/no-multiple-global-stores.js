"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.noMultipleGlobalStoresSuggest = exports.noMultipleGlobalStores = void 0;
const path_1 = __importDefault(require("path"));
const rule_creator_1 = require("../../rule-creator");
const utils_1 = require("../../utils");
exports.noMultipleGlobalStores = 'noMultipleGlobalStores';
exports.noMultipleGlobalStoresSuggest = 'noMultipleGlobalStoresSuggest';
exports.default = (0, rule_creator_1.createRule)({
    name: path_1.default.parse(__filename).name,
    meta: {
        type: 'suggestion',
        hasSuggestions: true,
        ngrxModule: 'store',
        docs: {
            description: 'There should only be one global store injected.',
            recommended: 'warn',
            suggestion: true,
        },
        schema: [],
        messages: {
            [exports.noMultipleGlobalStores]: 'Global store should be injected only once.',
            [exports.noMultipleGlobalStoresSuggest]: 'Remove this reference.',
        },
    },
    defaultOptions: [],
    create: (context) => {
        return {
            Program() {
                const { identifiers = [], sourceCode } = (0, utils_1.getNgRxStores)(context);
                const flattenedIdentifiers = groupBy(identifiers).values();
                for (const identifiers of flattenedIdentifiers) {
                    if (identifiers.length <= 1) {
                        continue;
                    }
                    for (const node of identifiers) {
                        const nodeToReport = getNodeToReport(node);
                        context.report({
                            node: nodeToReport,
                            messageId: exports.noMultipleGlobalStores,
                            suggest: [
                                {
                                    messageId: exports.noMultipleGlobalStoresSuggest,
                                    fix: (fixer) => getFixes(sourceCode, fixer, nodeToReport),
                                },
                            ],
                        });
                    }
                }
            },
        };
    },
});
function getNodeToReport(node) {
    return node.parent && (0, utils_1.isTSParameterProperty)(node.parent) ? node.parent : node;
}
function getFixes(sourceCode, fixer, node) {
    const { parent } = node;
    const nodeToRemove = parent && (0, utils_1.isTSParameterProperty)(parent) ? parent : node;
    return (0, utils_1.getNodeToCommaRemoveFix)(sourceCode, fixer, nodeToRemove);
}
function groupBy(identifiers) {
    return identifiers.reduce((accumulator, identifier) => {
        const parent = (0, utils_1.isTSParameterProperty)(identifier.parent)
            ? identifier.parent.parent
            : identifier.parent;
        const collectedIdentifiers = accumulator.get(parent);
        return accumulator.set(parent, [
            ...(collectedIdentifiers !== null && collectedIdentifiers !== void 0 ? collectedIdentifiers : []),
            identifier,
        ]);
    }, new Map());
}
