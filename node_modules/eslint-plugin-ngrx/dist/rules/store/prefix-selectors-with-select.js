"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.prefixSelectorsWithSelectSuggest = exports.prefixSelectorsWithSelect = void 0;
const path_1 = __importDefault(require("path"));
const rule_creator_1 = require("../../rule-creator");
const utils_1 = require("../../utils");
exports.prefixSelectorsWithSelect = 'prefixSelectorsWithSelect';
exports.prefixSelectorsWithSelectSuggest = 'prefixSelectorsWithSelectSuggest';
exports.default = (0, rule_creator_1.createRule)({
    name: path_1.default.parse(__filename).name,
    meta: {
        type: 'suggestion',
        hasSuggestions: true,
        ngrxModule: 'store',
        docs: {
            description: 'The selector should start with "select", for example "selectThing".',
            recommended: 'warn',
            suggestion: true,
        },
        schema: [],
        messages: {
            [exports.prefixSelectorsWithSelect]: 'The selector should start with "select".',
            [exports.prefixSelectorsWithSelectSuggest]: 'Prefix the selector with "select": `{{ name }}`.',
        },
    },
    defaultOptions: [],
    create: (context) => {
        return {
            'VariableDeclarator[id.name!=/^select[^a-z].+$/]:matches([id.typeAnnotation.typeAnnotation.typeName.name=/^MemoizedSelector(WithProps)?$/], :has(CallExpression[callee.name=/^(create(Feature)?Selector|createSelectorFactory)$/]))'({ id, }) {
                var _a, _b;
                const suggestedName = getSuggestedName(id.name);
                context.report({
                    loc: Object.assign(Object.assign({}, id.loc), { end: Object.assign(Object.assign({}, id.loc.end), { column: (_b = (_a = id.typeAnnotation) === null || _a === void 0 ? void 0 : _a.range[0]) !== null && _b !== void 0 ? _b : id.range[1] }) }),
                    messageId: exports.prefixSelectorsWithSelect,
                    suggest: [
                        {
                            messageId: exports.prefixSelectorsWithSelectSuggest,
                            data: {
                                name: suggestedName,
                            },
                            fix: (fixer) => {
                                var _a, _b;
                                return fixer.replaceTextRange([id.range[0], (_b = (_a = id.typeAnnotation) === null || _a === void 0 ? void 0 : _a.range[0]) !== null && _b !== void 0 ? _b : id.range[1]], suggestedName);
                            },
                        },
                    ],
                });
            },
        };
    },
});
function getSuggestedName(name) {
    const selectWord = 'select';
    let possibleReplacedName = name.replace(new RegExp(`^${selectWord}(.+)`), (_, word) => {
        return `${selectWord}${(0, utils_1.capitalize)(word)}`;
    });
    if (name !== possibleReplacedName) {
        return possibleReplacedName;
    }
    possibleReplacedName = name.replace(/^get([^a-z].+)/, (_, word) => {
        return `${selectWord}${(0, utils_1.capitalize)(word)}`;
    });
    if (name !== possibleReplacedName) {
        return possibleReplacedName;
    }
    return `${selectWord}${(0, utils_1.capitalize)(name)}`;
}
