"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.messageId = void 0;
const eslint_etc_1 = require("eslint-etc");
const path_1 = __importDefault(require("path"));
const rule_creator_1 = require("../../rule-creator");
const utils_1 = require("../../utils");
exports.messageId = 'avoidMapppingSelectors';
exports.default = (0, rule_creator_1.createRule)({
    name: path_1.default.parse(__filename).name,
    meta: {
        type: 'suggestion',
        ngrxModule: 'store',
        docs: {
            description: 'Avoid mapping logic outside the selector level.',
            recommended: 'warn',
        },
        schema: [],
        messages: {
            [exports.messageId]: 'Map logic at the selector level instead.',
        },
    },
    defaultOptions: [],
    create: (context) => {
        const { identifiers = [] } = (0, utils_1.getNgRxStores)(context);
        const storeNames = identifiers.length > 0 ? (0, utils_1.asPattern)(identifiers) : null;
        if (!storeNames) {
            return {};
        }
        const pipeWithSelectAndMapSelector = `${(0, utils_1.pipeExpression)(storeNames)}:has(CallExpression[callee.name='select'] ~ CallExpression[callee.name='map'])`;
        const selectSelector = `${(0, utils_1.namedCallableExpression)(storeNames)}[callee.object.callee.property.name='select']`;
        function isInCreateEffect(node) {
            let parent = node.parent;
            while (parent) {
                if ((0, eslint_etc_1.isCallExpression)(parent) &&
                    (0, eslint_etc_1.isIdentifier)(parent.callee) &&
                    parent.callee.name === 'createEffect') {
                    return true;
                }
                parent = parent.parent;
            }
            return false;
        }
        return {
            [`:matches(${selectSelector}, ${pipeWithSelectAndMapSelector}) > CallExpression[callee.name='map']:not(:has(ThisExpression))`](node) {
                if (isInCreateEffect(node)) {
                    return;
                }
                context.report({
                    node,
                    messageId: exports.messageId,
                });
            },
        };
    },
});
