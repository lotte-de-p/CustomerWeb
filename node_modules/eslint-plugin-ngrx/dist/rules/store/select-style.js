"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.selectOperator = exports.selectMethod = void 0;
const path_1 = __importDefault(require("path"));
const rule_creator_1 = require("../../rule-creator");
const utils_1 = require("../../utils");
exports.selectMethod = 'selectMethod';
exports.selectOperator = 'selectOperator';
exports.default = (0, rule_creator_1.createRule)({
    name: path_1.default.parse(__filename).name,
    meta: {
        type: 'suggestion',
        ngrxModule: 'store',
        docs: {
            description: 'Selector can be used either with `select` as a pipeable operator or as a method.',
            recommended: 'warn',
        },
        fixable: 'code',
        schema: [
            {
                type: 'string',
                enum: ["method", "operator"],
                additionalProperties: false,
            },
        ],
        messages: {
            ["method"]: 'Selector should be used with select method: `this.store.select(selector)`.',
            ["operator"]: 'Selector should be used with the pipeable operator: `this.store.pipe(select(selector))`.',
        },
    },
    defaultOptions: ["method"],
    create: (context, [mode]) => {
        const { identifiers = [], sourceCode } = (0, utils_1.getNgRxStores)(context);
        const storeNames = identifiers.length > 0 ? (0, utils_1.asPattern)(identifiers) : null;
        if (!storeNames) {
            return {};
        }
        if (mode === "operator") {
            return {
                [(0, utils_1.selectExpression)(storeNames)](node) {
                    context.report({
                        node: node.callee.property,
                        messageId: "operator",
                        fix: (fixer) => getMethodToOperatorFixes(node, fixer),
                    });
                },
            };
        }
        return {
            [`Program:has(${(0, utils_1.pipeableSelect)(storeNames)}) ImportDeclaration[source.value='${utils_1.NGRX_MODULE_PATHS.store}'] > ImportSpecifier[imported.name='select']`](node) {
                context.report({
                    node,
                    messageId: "method",
                    fix: (fixer) => (0, utils_1.getImportRemoveFix)(sourceCode, [node.parent], 'select', fixer),
                });
                const [{ references }] = context.getDeclaredVariables(node);
                for (const { identifier } of references) {
                    context.report({
                        node: identifier,
                        messageId: "method",
                        fix: (fixer) => getOperatorToMethodFixes(identifier, sourceCode, fixer),
                    });
                }
            },
        };
    },
});
function getMethodToOperatorFixes(node, fixer) {
    const classDeclaration = (0, utils_1.getNearestUpperNodeFrom)(node, utils_1.isClassDeclaration);
    if (!classDeclaration) {
        return [];
    }
    return [
        fixer.insertTextBefore(node.callee.property, 'pipe('),
        fixer.insertTextAfter(node, ')'),
    ].concat((0, utils_1.getImportAddFix)({
        fixer,
        importName: 'select',
        moduleName: utils_1.NGRX_MODULE_PATHS.store,
        node: classDeclaration,
    }));
}
function getOperatorToMethodFixes(identifier, sourceCode, fixer) {
    var _a;
    const select = identifier.parent;
    const storePipe = select === null || select === void 0 ? void 0 : select.parent;
    if (!storePipe ||
        !(0, utils_1.isCallExpression)(storePipe) ||
        !(0, utils_1.isMemberExpression)(storePipe.callee)) {
        return [];
    }
    const pipeContainsOnlySelect = storePipe.arguments.length === 1;
    if (!pipeContainsOnlySelect) {
        const selectContent = sourceCode.getText(select);
        const nextTokenAfterSelect = sourceCode.getTokenAfter(select);
        const store = storePipe.callee.object;
        return [
            fixer.remove(select),
            ...(nextTokenAfterSelect ? [fixer.remove(nextTokenAfterSelect)] : []),
            fixer.insertTextAfter(store, `.${selectContent}`),
        ];
    }
    const { property } = storePipe.callee;
    const nextTokenAfterPipe = sourceCode.getTokenAfter(property);
    const [pipeInitialRange, pipeEndRange] = property.range;
    const pipeRange = [
        pipeInitialRange,
        (_a = nextTokenAfterPipe === null || nextTokenAfterPipe === void 0 ? void 0 : nextTokenAfterPipe.range[1]) !== null && _a !== void 0 ? _a : pipeEndRange,
    ];
    const [, selectEndRange] = identifier.range;
    return [
        fixer.removeRange(pipeRange),
        fixer.insertTextAfterRange([selectEndRange, selectEndRange + 1], '('),
    ];
}
