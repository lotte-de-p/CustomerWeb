"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useConsistentGlobalStoreNameSuggest = exports.useConsistentGlobalStoreName = void 0;
const path_1 = __importDefault(require("path"));
const rule_creator_1 = require("../../rule-creator");
const utils_1 = require("../../utils");
exports.useConsistentGlobalStoreName = 'useConsistentGlobalStoreName';
exports.useConsistentGlobalStoreNameSuggest = 'useConsistentGlobalStoreNameSuggest';
exports.default = (0, rule_creator_1.createRule)({
    name: path_1.default.parse(__filename).name,
    meta: {
        type: 'suggestion',
        hasSuggestions: true,
        ngrxModule: 'store',
        docs: {
            description: 'Use a consistent name for the global store.',
            recommended: 'warn',
            suggestion: true,
        },
        schema: [
            {
                type: 'string',
                additionalProperties: false,
            },
        ],
        messages: {
            [exports.useConsistentGlobalStoreName]: 'Global store should be named as `{{ storeName }}`.',
            [exports.useConsistentGlobalStoreNameSuggest]: 'Rename it to `{{ storeName }}`.',
        },
    },
    defaultOptions: ['store'],
    create: (context, [storeName]) => {
        return {
            Program() {
                const { identifiers = [] } = (0, utils_1.getNgRxStores)(context);
                for (const { loc, name, range, typeAnnotation } of identifiers) {
                    if (name === storeName) {
                        return;
                    }
                    const data = { storeName };
                    context.report({
                        loc: Object.assign(Object.assign({}, loc), { end: Object.assign(Object.assign({}, loc.start), { column: loc.start.column + name.length }) }),
                        messageId: exports.useConsistentGlobalStoreName,
                        data,
                        suggest: [
                            {
                                messageId: exports.useConsistentGlobalStoreNameSuggest,
                                data,
                                fix: (fixer) => fixer.replaceTextRange([range[0], typeAnnotation.range[0]], storeName),
                            },
                        ],
                    });
                }
            },
        };
    },
});
