"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.noTypedStoreSuggest = exports.noTypedStore = void 0;
const path_1 = __importDefault(require("path"));
const rule_creator_1 = require("../../rule-creator");
const utils_1 = require("../../utils");
exports.noTypedStore = 'noTypedStore';
exports.noTypedStoreSuggest = 'noTypedStoreSuggest';
exports.default = (0, rule_creator_1.createRule)({
    name: path_1.default.parse(__filename).name,
    meta: {
        type: 'suggestion',
        hasSuggestions: true,
        ngrxModule: 'store',
        docs: {
            description: 'The global store should not be typed.',
            recommended: 'warn',
            suggestion: true,
        },
        schema: [],
        messages: {
            [exports.noTypedStore]: '`Store` should not be typed, use `Store` (without generic) instead.',
            [exports.noTypedStoreSuggest]: 'Remove generic from `Store`.',
        },
    },
    defaultOptions: [],
    create: (context) => {
        return {
            Program() {
                const { identifiers = [] } = (0, utils_1.getNgRxStores)(context);
                for (const { typeAnnotation: { typeAnnotation }, } of identifiers) {
                    if (!(0, utils_1.isTSTypeReference)(typeAnnotation) ||
                        !typeAnnotation.typeParameters) {
                        continue;
                    }
                    const { typeParameters } = typeAnnotation;
                    context.report({
                        node: typeParameters,
                        messageId: exports.noTypedStore,
                        suggest: [
                            {
                                messageId: exports.noTypedStoreSuggest,
                                fix: (fixer) => fixer.remove(typeParameters),
                            },
                        ],
                    });
                }
            },
        };
    },
});
