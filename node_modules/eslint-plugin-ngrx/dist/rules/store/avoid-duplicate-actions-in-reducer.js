"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.avoidDuplicateActionsInReducerSuggest = exports.avoidDuplicateActionsInReducer = void 0;
const path_1 = __importDefault(require("path"));
const rule_creator_1 = require("../../rule-creator");
const utils_1 = require("../../utils");
exports.avoidDuplicateActionsInReducer = 'avoidDuplicateActionsInReducer';
exports.avoidDuplicateActionsInReducerSuggest = 'avoidDuplicateActionsInReducerSuggest';
exports.default = (0, rule_creator_1.createRule)({
    name: path_1.default.parse(__filename).name,
    meta: {
        type: 'suggestion',
        hasSuggestions: true,
        ngrxModule: 'store',
        docs: {
            description: 'A `Reducer` should handle an `Action` once.',
            recommended: 'warn',
            suggestion: true,
        },
        schema: [],
        messages: {
            [exports.avoidDuplicateActionsInReducer]: 'The `Reducer` handles a duplicate `Action` `{{ actionName }}`.',
            [exports.avoidDuplicateActionsInReducerSuggest]: 'Remove this duplication.',
        },
    },
    defaultOptions: [],
    create: (context) => {
        const sourceCode = context.getSourceCode();
        const collectedActions = new Map();
        return {
            [`${utils_1.createReducer} > CallExpression[callee.name='on'][arguments.0.type='Identifier']`]({ arguments: [action], }) {
                var _a;
                const actions = (_a = collectedActions.get(action.name)) !== null && _a !== void 0 ? _a : [];
                collectedActions.set(action.name, [...actions, action]);
            },
            [`${utils_1.createReducer}:exit`]() {
                for (const [actionName, identifiers] of collectedActions) {
                    if (identifiers.length <= 1) {
                        break;
                    }
                    for (const node of identifiers) {
                        context.report({
                            node,
                            messageId: exports.avoidDuplicateActionsInReducer,
                            data: {
                                actionName,
                            },
                            suggest: [
                                {
                                    messageId: exports.avoidDuplicateActionsInReducerSuggest,
                                    fix: (fixer) => (0, utils_1.getNodeToCommaRemoveFix)(sourceCode, fixer, node.parent),
                                },
                            ],
                        });
                    }
                }
                collectedActions.clear();
            },
        };
    },
});
