"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.messageId = void 0;
const path_1 = __importDefault(require("path"));
const rule_creator_1 = require("../../rule-creator");
const utils_1 = require("../../utils");
exports.messageId = 'updaterExplicitReturnType';
exports.default = (0, rule_creator_1.createRule)({
    name: path_1.default.parse(__filename).name,
    meta: {
        type: 'problem',
        ngrxModule: 'component-store',
        docs: {
            description: '`Updater` should have an explicit return type.',
            recommended: 'warn',
        },
        schema: [],
        messages: {
            [exports.messageId]: '`Updater` should have an explicit return type when using arrow functions: `this.store.updater((state, value): State => {}`.',
        },
    },
    defaultOptions: [],
    create: (context) => {
        const { identifiers = [] } = (0, utils_1.getNgRxComponentStores)(context);
        const storeNames = identifiers.length > 0 ? (0, utils_1.asPattern)(identifiers) : null;
        const withoutTypeAnnotation = `ArrowFunctionExpression:not([returnType.typeAnnotation])`;
        const selectors = [
            `ClassDeclaration[superClass.name='ComponentStore'] CallExpression[callee.object.type='ThisExpression'][callee.property.name='updater'] > ${withoutTypeAnnotation}`,
            storeNames &&
                `${(0, utils_1.namedExpression)(storeNames)}[callee.property.name='updater'] > ${withoutTypeAnnotation}`,
        ]
            .filter(Boolean)
            .join(',');
        return {
            [selectors](node) {
                context.report({
                    node,
                    messageId: exports.messageId,
                });
            },
        };
    },
});
