"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.messageId = void 0;
const path_1 = __importDefault(require("path"));
const rule_creator_1 = require("../../rule-creator");
const utils_1 = require("../../utils");
exports.messageId = 'useEffectsLifecycleInterface';
exports.default = (0, rule_creator_1.createRule)({
    name: path_1.default.parse(__filename).name,
    meta: {
        type: 'suggestion',
        ngrxModule: 'effects',
        docs: {
            description: 'Ensures classes implement lifecycle interfaces corresponding to the declared lifecycle methods.',
            recommended: 'warn',
        },
        fixable: 'code',
        schema: [],
        messages: {
            [exports.messageId]: 'Lifecycle interface `{{ interfaceName }}` should be implemented for method `{{ methodName }}`.',
        },
    },
    defaultOptions: [],
    create: (context) => {
        const lifecycleMapper = {
            ngrxOnIdentifyEffects: 'OnIdentifyEffects',
            ngrxOnInitEffects: 'OnInitEffects',
            ngrxOnRunEffects: 'OnRunEffects',
        };
        const lifecyclesPattern = Object.keys(lifecycleMapper).join('|');
        return {
            [`ClassDeclaration > ClassBody > MethodDefinition > Identifier[name=/${lifecyclesPattern}/]`](node) {
                const classDeclaration = node.parent.parent.parent;
                const methodName = node.name;
                const interfaceName = lifecycleMapper[methodName];
                if ((0, utils_1.getInterface)(classDeclaration, interfaceName)) {
                    return;
                }
                context.report({
                    fix: (fixer) => {
                        const { implementsNodeReplace, implementsTextReplace } = (0, utils_1.getImplementsSchemaFixer)(classDeclaration, interfaceName);
                        return [
                            fixer.insertTextAfter(implementsNodeReplace, implementsTextReplace),
                        ].concat((0, utils_1.getImportAddFix)({
                            compatibleWithTypeOnlyImport: true,
                            fixer,
                            importName: interfaceName,
                            moduleName: utils_1.NGRX_MODULE_PATHS.effects,
                            node: classDeclaration,
                        }));
                    },
                    node,
                    messageId: exports.messageId,
                    data: {
                        interfaceName,
                        methodName,
                    },
                });
            },
        };
    },
});
