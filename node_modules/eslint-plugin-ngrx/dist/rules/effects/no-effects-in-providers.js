"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.messageId = void 0;
const path_1 = __importDefault(require("path"));
const rule_creator_1 = require("../../rule-creator");
const utils_1 = require("../../utils");
exports.messageId = 'noEffectsInProviders';
exports.default = (0, rule_creator_1.createRule)({
    name: path_1.default.parse(__filename).name,
    meta: {
        type: 'problem',
        ngrxModule: 'effects',
        docs: {
            description: '`Effect` should not be listed as a provider if it is added to the `EffectsModule`.',
            recommended: 'error',
        },
        fixable: 'code',
        schema: [],
        messages: {
            [exports.messageId]: '`Effect` should not be listed as a provider if it is added to the `EffectsModule`.',
        },
    },
    defaultOptions: [],
    create: (context) => {
        const sourceCode = context.getSourceCode();
        const effectsInProviders = new Set();
        const effectsInImports = new Set();
        return {
            [utils_1.effectsInNgModuleProviders](node) {
                effectsInProviders.add(node);
            },
            [utils_1.effectsInNgModuleImports]({ name }) {
                effectsInImports.add(name);
            },
            [`${utils_1.ngModuleDecorator}:exit`]() {
                for (const effectInProvider of effectsInProviders) {
                    if (!effectsInImports.has(effectInProvider.name)) {
                        continue;
                    }
                    context.report({
                        node: effectInProvider,
                        messageId: exports.messageId,
                        fix: (fixer) => (0, utils_1.getNodeToCommaRemoveFix)(sourceCode, fixer, effectInProvider),
                    });
                }
                effectsInImports.clear();
                effectsInProviders.clear();
            },
        };
    },
});
