"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.messageId = void 0;
const eslint_etc_1 = require("eslint-etc");
const path_1 = __importDefault(require("path"));
const rule_creator_1 = require("../../rule-creator");
const utils_1 = require("../../utils");
exports.messageId = 'preferConcatLatestFrom';
const defaultOptions = { strict: false };
const concatLatestFromKeyword = 'concatLatestFrom';
const withLatestFromKeyword = 'withLatestFrom';
exports.default = (0, rule_creator_1.createRule)({
    name: path_1.default.parse(__filename).name,
    meta: {
        type: 'problem',
        ngrxModule: 'effects',
        version: '>=12.0.0',
        docs: {
            description: `Use \`${concatLatestFromKeyword}\` instead of \`${withLatestFromKeyword}\` to prevent the selector from firing until the correct \`Action\` is dispatched.`,
            recommended: 'warn',
        },
        fixable: 'code',
        schema: [
            {
                type: 'object',
                properties: {
                    strict: {
                        type: 'boolean',
                        default: defaultOptions.strict,
                    },
                },
                additionalProperties: false,
            },
        ],
        messages: {
            [exports.messageId]: `Use \`${concatLatestFromKeyword}\` instead of \`${withLatestFromKeyword}\`.`,
        },
    },
    defaultOptions: [defaultOptions],
    create: (context, [options]) => {
        if (options.strict) {
            return {
                [`${utils_1.createEffectExpression} CallExpression > Identifier[name='withLatestFrom']`](node) {
                    context.report({
                        node,
                        messageId: exports.messageId,
                        fix: (fixer) => getFixes(context.getSourceCode(), fixer, node),
                    });
                },
            };
        }
        const { identifiers = [], sourceCode } = (0, utils_1.getNgRxEffectActions)(context);
        const actionsNames = identifiers.length > 0 ? (0, utils_1.asPattern)(identifiers) : null;
        if (!actionsNames) {
            return {};
        }
        return {
            [`${utils_1.createEffectExpression} ${(0, utils_1.namedExpression)(actionsNames)} > CallExpression[arguments.length=1] > Identifier[name='${withLatestFromKeyword}']`](node) {
                context.report({
                    node,
                    messageId: exports.messageId,
                    fix: (fixer) => getFixes(sourceCode, fixer, node),
                });
            },
            [`${utils_1.createEffectExpression} ${(0, utils_1.namedExpression)(actionsNames)} > CallExpression[arguments.length>1] > Identifier[name='${withLatestFromKeyword}']`](node) {
                context.report({
                    node,
                    messageId: exports.messageId,
                });
            },
        };
    },
});
function getFixes(sourceCode, fixer, node) {
    const { parent } = node;
    const isUsingDeprecatedProjectorArgument = parent.arguments.length > 1;
    const [firstArgument] = parent.arguments;
    const nextToken = isUsingDeprecatedProjectorArgument &&
        sourceCode.getTokenAfter(firstArgument);
    return [
        fixer.replaceText(node, concatLatestFromKeyword),
        ...((0, eslint_etc_1.isArrowFunctionExpression)(firstArgument)
            ? []
            : [fixer.insertTextBefore(firstArgument, '() => ')]),
    ].concat((0, utils_1.getImportAddFix)({
        fixer,
        importName: concatLatestFromKeyword,
        moduleName: utils_1.NGRX_MODULE_PATHS.effects,
        node,
    }), ...(isUsingDeprecatedProjectorArgument && nextToken
        ? [
            (0, utils_1.getImportAddFix)({
                fixer,
                importName: 'map',
                moduleName: 'rxjs/operators',
                node,
            }),
            fixer.insertTextAfterRange(nextToken.range, '), map('),
        ]
        : []));
}
