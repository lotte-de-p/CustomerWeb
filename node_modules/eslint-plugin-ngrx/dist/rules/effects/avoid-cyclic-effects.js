"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.messageId = void 0;
const eslint_etc_1 = require("eslint-etc");
const path_1 = __importDefault(require("path"));
const typescript_1 = __importDefault(require("typescript"));
const rule_creator_1 = require("../../rule-creator");
const utils_1 = require("../../utils");
exports.messageId = 'avoidCyclicEffects';
exports.default = (0, rule_creator_1.createRule)({
    name: path_1.default.parse(__filename).name,
    meta: {
        type: 'problem',
        ngrxModule: 'effects',
        docs: {
            description: 'Avoid `Effect` that re-emit filtered actions.',
            recommended: 'warn',
            requiresTypeChecking: true,
        },
        schema: [],
        messages: {
            [exports.messageId]: '`Effect` that re-emit filtered actions are forbidden.',
        },
    },
    defaultOptions: [],
    create: (context) => {
        const { identifiers = [] } = (0, utils_1.getNgRxEffectActions)(context);
        const actionsNames = identifiers.length > 0 ? (0, utils_1.asPattern)(identifiers) : null;
        if (!actionsNames) {
            return {};
        }
        const { getType, typeChecker } = (0, eslint_etc_1.getTypeServices)(context);
        function checkNode(pipeCallExpression) {
            const operatorCallExpression = pipeCallExpression.arguments.find((arg) => (0, utils_1.isCallExpression)(arg) &&
                (0, utils_1.isIdentifier)(arg.callee) &&
                arg.callee.name === 'ofType');
            if (!operatorCallExpression) {
                return;
            }
            const operatorType = getType(operatorCallExpression);
            const [signature] = typeChecker.getSignaturesOfType(operatorType, typescript_1.default.SignatureKind.Call);
            if (!signature) {
                return;
            }
            const operatorReturnType = typeChecker.getReturnTypeOfSignature(signature);
            if (!(0, utils_1.isTypeReference)(operatorReturnType)) {
                return;
            }
            const [operatorElementType] = typeChecker.getTypeArguments(operatorReturnType);
            if (!operatorElementType) {
                return;
            }
            const pipeType = getType(pipeCallExpression);
            if (!(0, utils_1.isTypeReference)(pipeType)) {
                return;
            }
            const [pipeElementType] = typeChecker.getTypeArguments(pipeType);
            if (!pipeElementType) {
                return;
            }
            const operatorActionTypes = getActionTypes(operatorElementType);
            const pipeActionTypes = getActionTypes(pipeElementType);
            for (const actionType of operatorActionTypes) {
                if (pipeActionTypes.includes(actionType)) {
                    context.report({
                        node: pipeCallExpression.callee,
                        messageId: exports.messageId,
                    });
                    return;
                }
            }
        }
        function getActionType(symbol) {
            const { valueDeclaration } = symbol;
            if (!valueDeclaration) {
                return null;
            }
            if (valueDeclaration.kind === typescript_1.default.SyntaxKind.PropertyDeclaration) {
                const { parent } = symbol;
                return parent.valueDeclaration
                    ? typeChecker.getTypeOfSymbolAtLocation(parent, parent.valueDeclaration)
                    : null;
            }
            return typeChecker.getTypeOfSymbolAtLocation(symbol, valueDeclaration);
        }
        function getActionTypes(type) {
            if (type.isUnion()) {
                const memberActionTypes = [];
                for (const memberType of type.types) {
                    memberActionTypes.push(...getActionTypes(memberType));
                }
                return memberActionTypes;
            }
            const symbol = typeChecker.getPropertyOfType(type, 'type');
            if (!symbol) {
                return [];
            }
            const actionType = getActionType(symbol);
            if (!actionType) {
                return [];
            }
            if (typeChecker.typeToString(actionType) === 'string') {
                return [];
            }
            return [typeChecker.typeToString(actionType)];
        }
        return {
            [`${utils_1.createEffectExpression}:not([arguments.1]:has(Property[key.name='dispatch'][value.value=false])) CallExpression[callee.property.name='pipe'][callee.object.property.name=${actionsNames}]`]: checkNode,
        };
    },
});
