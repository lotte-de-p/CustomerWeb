"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.noDispatchInEffectsSuggest = exports.noDispatchInEffects = void 0;
const path_1 = __importDefault(require("path"));
const rule_creator_1 = require("../../rule-creator");
const utils_1 = require("../../utils");
exports.noDispatchInEffects = 'noDispatchInEffects';
exports.noDispatchInEffectsSuggest = 'noDispatchInEffectsSuggest';
exports.default = (0, rule_creator_1.createRule)({
    name: path_1.default.parse(__filename).name,
    meta: {
        type: 'suggestion',
        ngrxModule: 'effects',
        hasSuggestions: true,
        docs: {
            description: '`Effect` should not call `store.dispatch`.',
            recommended: 'warn',
            suggestion: true,
        },
        schema: [],
        messages: {
            [exports.noDispatchInEffects]: 'Calling `store.dispatch` in `Effect` is forbidden.',
            [exports.noDispatchInEffectsSuggest]: 'Remove `store.dispatch`.',
        },
    },
    defaultOptions: [],
    create: (context) => {
        const { identifiers = [] } = (0, utils_1.getNgRxStores)(context);
        const storeNames = identifiers.length > 0 ? (0, utils_1.asPattern)(identifiers) : null;
        if (!storeNames) {
            return {};
        }
        return {
            [(0, utils_1.dispatchInEffects)(storeNames)](node) {
                const nodeToReport = getNodeToReport(node);
                context.report({
                    node: nodeToReport,
                    messageId: exports.noDispatchInEffects,
                    suggest: [
                        {
                            messageId: exports.noDispatchInEffectsSuggest,
                            fix: (fixer) => fixer.remove(nodeToReport),
                        },
                    ],
                });
            },
        };
    },
});
function getNodeToReport(node) {
    const { parent } = node;
    const { parent: grandParent } = parent;
    return grandParent &&
        ((0, utils_1.isArrowFunctionExpression)(grandParent) || (0, utils_1.isReturnStatement)(grandParent))
        ? node
        : parent;
}
