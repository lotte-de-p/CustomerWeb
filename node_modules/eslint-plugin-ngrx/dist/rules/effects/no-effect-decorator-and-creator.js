"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.noEffectDecoratorAndCreatorSuggest = exports.noEffectDecoratorAndCreator = void 0;
const path_1 = __importDefault(require("path"));
const rule_creator_1 = require("../../rule-creator");
const utils_1 = require("../../utils");
exports.noEffectDecoratorAndCreator = 'noEffectDecoratorAndCreator';
exports.noEffectDecoratorAndCreatorSuggest = 'noEffectDecoratorAndCreatorSuggest';
exports.default = (0, rule_creator_1.createRule)({
    name: path_1.default.parse(__filename).name,
    meta: {
        type: 'suggestion',
        hasSuggestions: true,
        ngrxModule: 'effects',
        docs: {
            description: '`Effect` should use either the `createEffect` or the `@Effect` decorator, but not both.',
            recommended: 'error',
            suggestion: true,
        },
        fixable: 'code',
        schema: [],
        messages: {
            [exports.noEffectDecoratorAndCreator]: 'Using the `createEffect` and the `@Effect` decorator simultaneously is forbidden.',
            [exports.noEffectDecoratorAndCreatorSuggest]: 'Remove the `@Effect` decorator.',
        },
    },
    defaultOptions: [],
    create: (context) => {
        const sourceCode = context.getSourceCode();
        return {
            [`${utils_1.effectCreator}:has(${utils_1.effectDecorator})`](node) {
                const decorator = (0, utils_1.getDecorator)(node, 'Effect');
                if (!decorator) {
                    return;
                }
                const hasDecoratorArgument = Boolean((0, utils_1.getDecoratorArguments)(decorator)[0]);
                const fix = (fixer) => getFixes(node, sourceCode, fixer, decorator);
                if (hasDecoratorArgument) {
                    context.report({
                        node: node.key,
                        messageId: exports.noEffectDecoratorAndCreator,
                        suggest: [
                            {
                                messageId: exports.noEffectDecoratorAndCreatorSuggest,
                                fix,
                            },
                        ],
                    });
                }
                else {
                    context.report({
                        node: node.key,
                        messageId: exports.noEffectDecoratorAndCreator,
                        fix,
                    });
                }
            },
        };
    },
});
function getFixes(node, sourceCode, fixer, decorator) {
    var _a;
    const importDeclarations = (_a = (0, utils_1.getImportDeclarations)(node, utils_1.NGRX_MODULE_PATHS.effects)) !== null && _a !== void 0 ? _a : [];
    const text = sourceCode.getText();
    const totalEffectDecoratorOccurrences = getEffectDecoratorOccurrences(text);
    const importRemoveFix = totalEffectDecoratorOccurrences === 1
        ? (0, utils_1.getImportRemoveFix)(sourceCode, importDeclarations, 'Effect', fixer)
        : [];
    return [fixer.remove(decorator)].concat(importRemoveFix);
}
function getEffectDecoratorOccurrences(text) {
    var _a, _b;
    return (_b = (_a = text.replace(/\s/g, '').match(/@Effect/g)) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0;
}
