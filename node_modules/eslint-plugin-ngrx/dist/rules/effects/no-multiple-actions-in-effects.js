"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.messageId = void 0;
const experimental_utils_1 = require("@typescript-eslint/experimental-utils");
const eslint_etc_1 = require("eslint-etc");
const path_1 = __importDefault(require("path"));
const rule_creator_1 = require("../../rule-creator");
const utils_1 = require("../../utils");
exports.messageId = 'noMultipleActionsInEffects';
exports.default = (0, rule_creator_1.createRule)({
    name: path_1.default.parse(__filename).name,
    meta: {
        type: 'problem',
        ngrxModule: 'effects',
        docs: {
            description: '`Effect` should not return multiple actions.',
            recommended: 'warn',
            requiresTypeChecking: true,
        },
        schema: [],
        messages: {
            [exports.messageId]: '`Effect` should return a single action.',
        },
    },
    defaultOptions: [],
    create: (context) => {
        return {
            [`${utils_1.createEffectExpression} :matches(${utils_1.mapLikeOperatorsImplicitReturn}, ${utils_1.mapLikeOperatorsExplicitReturn})`](node) {
                const nodeToReport = getNodeToReport(node);
                if (!nodeToReport ||
                    !(0, eslint_etc_1.getTypeServices)(context).couldBeType(nodeToReport, 'Array')) {
                    return;
                }
                context.report({
                    node: nodeToReport,
                    messageId: exports.messageId,
                });
            },
        };
    },
});
function getNodeToReport(node) {
    switch (node.type) {
        case experimental_utils_1.AST_NODE_TYPES.ArrowFunctionExpression:
            return node.body;
        case experimental_utils_1.AST_NODE_TYPES.CallExpression:
            return node.arguments[0];
        default:
            return node.argument;
    }
}
