"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.messageId = void 0;
const experimental_utils_1 = require("@typescript-eslint/experimental-utils");
const path_1 = __importDefault(require("path"));
const rule_creator_1 = require("../../rule-creator");
const utils_1 = require("../../utils");
exports.messageId = 'preferEffectCallbackInBlockStatement';
exports.default = (0, rule_creator_1.createRule)({
    name: path_1.default.parse(__filename).name,
    meta: {
        type: 'suggestion',
        ngrxModule: 'effects',
        docs: {
            description: 'A block statement is easier to troubleshoot.',
            recommended: 'warn',
        },
        schema: [],
        messages: {
            [exports.messageId]: 'The callback of `Effect` should be wrapped in a block statement.',
        },
        fixable: 'code',
    },
    defaultOptions: [],
    create: (context) => {
        const sourceCode = context.getSourceCode();
        const nonParametrizedEffect = `${utils_1.createEffectExpression} > ArrowFunctionExpression > .body[type!=/^(ArrowFunctionExpression|BlockStatement)$/]`;
        const parametrizedEffect = `${utils_1.createEffectExpression} > ArrowFunctionExpression > ArrowFunctionExpression > .body[type!='BlockStatement']`;
        const parametrizedEffectWithinBlockStatement = `${utils_1.createEffectExpression} > ArrowFunctionExpression > BlockStatement > ReturnStatement > ArrowFunctionExpression > .body[type!='BlockStatement']`;
        return {
            [`${nonParametrizedEffect}, ${parametrizedEffect}, ${parametrizedEffectWithinBlockStatement}`](node) {
                context.report({
                    node,
                    messageId: exports.messageId,
                    fix: (fixer) => {
                        const [previousNode, nextNode] = getSafeNodesToApplyFix(sourceCode, node);
                        return [
                            fixer.insertTextBefore(previousNode, `{ return `),
                            fixer.insertTextAfter(nextNode, ` }`),
                        ];
                    },
                });
            },
        };
    },
});
function getSafeNodesToApplyFix(sourceCode, node) {
    const previousToken = sourceCode.getTokenBefore(node);
    const nextToken = sourceCode.getTokenAfter(node);
    if (previousToken &&
        experimental_utils_1.ASTUtils.isOpeningParenToken(previousToken) &&
        nextToken &&
        experimental_utils_1.ASTUtils.isClosingParenToken(nextToken)) {
        return [previousToken, nextToken];
    }
    return [node, node];
}
