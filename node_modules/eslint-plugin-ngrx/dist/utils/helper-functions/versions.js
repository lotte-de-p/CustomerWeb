"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ngrxVersionSatisfies = exports.clearCache = exports.setNgrxVersion = void 0;
const semver_1 = __importDefault(require("semver"));
const noopVersion = '0.0.0';
const versionsCache = new Map();
const satisfiesCache = new Map();
function getNgrxVersion(pkg) {
    if (!versionsCache.has(pkg)) {
        const version = readPlatformVersion(pkg);
        versionsCache.set(pkg, version !== null && version !== void 0 ? version : noopVersion);
    }
    return versionsCache.get(pkg);
}
function readPlatformVersion(pkg) {
    var _a;
    try {
        const ngrxVersion = require(`${pkg}/package.json`);
        return (_a = ngrxVersion.version) === null || _a === void 0 ? void 0 : _a.replace(/[^\d\.]/g, '');
    }
    catch (_b) {
        return null;
    }
}
function setNgrxVersion(pkg, version) {
    versionsCache.set(pkg, version);
}
exports.setNgrxVersion = setNgrxVersion;
function clearCache() {
    versionsCache.clear();
    satisfiesCache.clear();
}
exports.clearCache = clearCache;
function versionSatisfies(pkg, version) {
    const key = `${pkg}@${version}`;
    if (!satisfiesCache.has(key)) {
        satisfiesCache.set(key, semver_1.default.satisfies(getNgrxVersion(pkg), version));
    }
    return satisfiesCache.get(key);
}
function ngrxVersionSatisfies(pkg, version) {
    return versionSatisfies(pkg, version);
}
exports.ngrxVersionSatisfies = ngrxVersionSatisfies;
