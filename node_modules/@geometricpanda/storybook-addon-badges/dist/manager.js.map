{"version":3,"sources":["../src/manager.ts","../src/constants.ts","../src/Tool.tsx","../src/components/badges-toolbar.component.tsx","../src/components/badge.component.tsx","../src/config.ts","../src/components/badge-tooltip-wrapper.component.tsx"],"names":["addons","types","ADDON_ID","TOOL_ID","ADDON_TITLE","PARAM_CONFIG_KEY","PARAM_BADGES_KEY","useStorybookApi","React","Separator","styled","defaultBadgesConfig","defaultBadgeConfig","WithTooltip","TooltipMessage","BadgeTooltipWrapper","tooltip","children","tooltipMessage","StyledBadge","styles","Badge","badge","customBadgesConfig","config","Component","BadgesWrapper","theme","BadgesToolbar","badges","Tool"],"mappings":"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","sourcesContent":["import {addons, types} from \"@storybook/manager-api\";\nimport {ADDON_ID, ADDON_TITLE, PARAM_BADGES_KEY, TOOL_ID} from \"./constants\";\nimport {Tool} from \"./Tool\";\n\n// Register the addon\naddons.register(ADDON_ID, () => {\n  // Register the tool\n  addons.add(TOOL_ID, {\n    type: types.TOOL,\n    paramKey: PARAM_BADGES_KEY,\n    title: ADDON_TITLE,\n    match: () => true,\n    render: Tool,\n  });\n});\n","export const ADDON_ID = '@geometricpanda/storybook-addon-badges';\nexport const TOOL_ID = ADDON_ID;\n\nexport const ADDON_TITLE = 'Storybook Addon Badges';\nexport const PARAM_CONFIG_KEY = 'badgesConfig';\nexport const PARAM_BADGES_KEY = 'badges';\n\nexport enum BADGE {\n    DEFAULT = 'default',\n    BETA = 'beta',\n    STABLE = 'stable',\n    NEEDS_REVISION = 'needs-revision',\n    OBSOLETE = 'obsolete',\n    EXPERIMENTAL = 'experimental',\n    DEPRECATED = 'deprecated',\n}\n","//\n// export const Tool = memo(function MyAddonSelector() {\n//   const [globals, updateGlobals] = useGlobals();\n//\n//   const isActive = [true, \"true\"].includes(globals[PARAM_KEY]);\n//\n//   const toggleMyTool = useCallback(() => {\n//     updateGlobals({\n//       [PARAM_KEY]: !isActive,\n//     });\n//   }, [isActive]);\n//\n//   return (\n//     <IconButton\n//       key={TOOL_ID}\n//       active={isActive}\n//       title=\"Enable my addon\"\n//       onClick={toggleMyTool}\n//     >\n//       <Icons icon=\"lightning\" />\n//     </IconButton>\n//   );\n// });\n\nimport {useStorybookApi} from \"@storybook/manager-api\";\nimport React from \"react\";\n\nimport {PARAM_BADGES_KEY} from \"./constants\";\nimport {BadgesToolbar} from \"./components\";\n\nexport const Tool = function AddonBadges() {\n    const api = useStorybookApi();\n    const badges = api.getCurrentParameter<string[]>(PARAM_BADGES_KEY) || [];\n\n    return (\n        <BadgesToolbar badges={badges}/>\n    )\n\n};\n","import React, {FC} from 'react';\nimport {Separator} from '@storybook/components';\nimport {styled} from '@storybook/theming';\nimport {Badge} from './badge.component';\n\nconst BadgesWrapper = styled.div(\n    ({theme}) => ({\n        gap: theme.layoutMargin,\n        paddingInline: theme.layoutMargin / 2,\n        display: 'flex',\n        alignItems: 'center',\n    })\n);\n\ninterface BadgesToolbarProps {\n    badges: Array<string>;\n}\n\nexport const BadgesToolbar: FC<BadgesToolbarProps> = ({badges}) => \n    badges.length > 0 ? <>\n        <Separator/>\n        <BadgesWrapper>\n            {badges.map((badge) => (\n                <Badge key={badge} badge={badge}/>\n            ))}\n        </BadgesWrapper>\n        <Separator/>\n    </> : null; \n\n","import React, {FC} from 'react';\nimport {styled} from '@storybook/theming';\n// import {useParameter} from \"@storybook/api\";\n\nimport {defaultBadgeConfig, defaultBadgesConfig} from \"../config\";\nimport {BadgeTooltipWrapper} from './badge-tooltip-wrapper.component';\nimport type {BadgeConfig} from \"../typings.interface\";\nimport {useStorybookApi} from \"@storybook/manager-api\";\nimport {BadgesConfig} from \"../typings.interface\";\nimport {PARAM_CONFIG_KEY} from \"../constants\";\n\nexport interface StyledBadgeProps {\n    config: BadgeConfig;\n}\n\nexport const StyledBadge = styled.span<StyledBadgeProps>(\n    ({config: {styles}}) => ({\n        borderColor: styles?.borderColor || '#474D66',\n        borderRadius: styles?.borderRadius || '3px',\n        borderStyle: styles?.borderStyle || 'solid',\n        borderWidth: styles?.borderWidth || '1px',\n        color: styles?.color || '#474D66',\n        backgroundColor: styles?.backgroundColor || '#EDEFF5',\n        fontSize: styles?.fontSize || '0.625rem',\n        fontFamily: styles?.fontFamily || 'inherit',\n        fontWeight: styles?.fontWeight || 'bold',\n        lineHeight: styles?.lineHeight || '1',\n        textTransform: styles?.textTransform || 'uppercase',\n        paddingInline: styles?.paddingInline || '5px',\n        paddingBlock: styles?.paddingBlock || '2px',\n        display: 'block'\n    })\n);\n\n\nexport interface BadgeProps {\n    badge: string;\n}\n\nexport const Badge: FC<BadgeProps> = ({badge}) => {\n    const api = useStorybookApi();\n    const customBadgesConfig = api.getCurrentParameter<BadgesConfig>(PARAM_CONFIG_KEY) || {};\n\n\n    const badgesConfig = {\n        ...defaultBadgesConfig,\n        ...customBadgesConfig,\n    };\n\n    const config = badgesConfig[badge] || defaultBadgeConfig;\n\n    const Component = () => (\n        <StyledBadge config={config}>\n            {config.title}\n        </StyledBadge>\n    )\n\n    if (config.tooltip) {\n        return (\n            <BadgeTooltipWrapper tooltip={config.tooltip}>\n                <Component/>\n            </BadgeTooltipWrapper>\n        )\n    }\n\n    return (\n        <Component/>\n    )\n}\n","import {BadgeConfig, BadgesConfig} from \"./typings.interface\";\nimport {BADGE} from \"./constants\";\n\nexport const defaultBadgesConfig: BadgesConfig = {\n    [BADGE.DEFAULT]: {\n        title: 'Badge',\n    },\n    [BADGE.BETA]: {\n        title: 'Beta',\n        styles: {\n            backgroundColor: '#D6E0FF',\n            borderColor: '#2952CC',\n            color: '#2952CC',\n        },\n    },\n    [BADGE.STABLE]: {\n        title: 'Stable',\n        styles: {\n            backgroundColor: '#DCF2EA',\n            borderColor: '#317159',\n            color: '#317159',\n        },\n    },\n    [BADGE.NEEDS_REVISION]: {\n        title: 'Needs Revision',\n        styles: {\n            backgroundColor: '#FFEFD2',\n            borderColor: '#66460D',\n            color: '#66460D',\n        },\n    },\n    [BADGE.OBSOLETE]: {\n        title: 'Obsolete',\n        styles: {\n            backgroundColor: '#F9DADA',\n            borderColor: '#7D2828',\n            color: '#7D2828',\n        },\n    },\n    [BADGE.EXPERIMENTAL]: {\n        title: 'Experimental',\n        styles: {\n            backgroundColor: '#E7E4F9',\n            borderColor: '#6E62B6',\n            color: '#6E62B6',\n        },\n    },\n    [BADGE.DEPRECATED]: {\n        title: 'Deprecated',\n        styles: {\n            backgroundColor: '#F8E3DA',\n            borderColor: '#85462B',\n            color: '#85462B',\n        },\n    },\n};\n\nexport const defaultBadgeConfig: BadgeConfig = defaultBadgesConfig[BADGE.DEFAULT];\n","import React from 'react';\nimport {WithTooltip, TooltipMessage} from '@storybook/components';\n\nimport type {FC, ReactNode} from 'react';\nimport type {TooltipConfig} from \"../typings.interface\";\n\nexport interface BadgeTooltipWrapperProps {\n    children: ReactNode;\n    tooltip: TooltipConfig;\n}\n\nexport const BadgeTooltipWrapper: FC<BadgeTooltipWrapperProps> = ({tooltip, children}) => {\n\n    const tooltipMessageProps = (typeof tooltip === 'string')\n        ? {desc: tooltip}\n        : tooltip;\n\n    const tooltipMessage = <TooltipMessage {...tooltipMessageProps} />;\n\n    return (\n        <WithTooltip tooltip={tooltipMessage}>\n            {children}\n        </WithTooltip>\n    )\n};\n"]}