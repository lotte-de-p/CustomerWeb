"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initGenerator = void 0;
const devkit_1 = require("@nx/devkit");
const config_file_1 = require("../../utils/config-file");
const versions_1 = require("../../utils/versions");
async function initGenerator(tree, options) {
    const installTask = updateDependencies(tree, !!options.scss);
    if (!tree.exists('.stylelintrc.json'))
        createRecommendedStylelintConfiguration(tree, !!options.scss);
    else if (options.scss === true && isCompatibleRootConfig(tree))
        addScssToStylelintConfiguration(tree);
    else {
        devkit_1.logger.info(`Stylelint root configuration found! Skipping creation of root .stylelintrc.json!

Please be aware that your own configuration can lead to problems with nx-stylelint's behavior!
We recommend renaming your custom '.stylelintrc.json' file and running the generator again with 'nx g nx-stylelint:init'.
You can then migrate your custom rule configuration into the created stylelint configuration.`);
    }
    updateNxJson(tree);
    updateVSCodeExtensions(tree);
    if (options.skipFormat !== true)
        await (0, devkit_1.formatFiles)(tree);
    return installTask;
}
exports.initGenerator = initGenerator;
exports.default = initGenerator;
function updateDependencies(tree, scss) {
    const packageJson = (0, devkit_1.readJson)(tree, 'package.json');
    const devDependencies = {};
    if (!packageJson.dependencies?.stylelint)
        devDependencies['stylelint'] = versions_1.stylelintVersion;
    if (!packageJson.dependencies?.['stylelint-config-standard'])
        devDependencies['stylelint-config-standard'] = versions_1.stylelintConfigStandardVersion;
    if (scss && !packageJson.dependencies?.['stylelint-config-standard-scss'])
        devDependencies['stylelint-config-standard-scss'] = versions_1.stylelintConfigStandardScssVersion;
    return (0, devkit_1.addDependenciesToPackageJson)(tree, {}, devDependencies);
}
function updateVSCodeExtensions(tree) {
    if (!tree.exists('.vscode/extensions.json'))
        return;
    (0, devkit_1.updateJson)(tree, '.vscode/extensions.json', (json) => {
        json.recommendations ?? (json.recommendations = []);
        if (Array.isArray(json.recommendations) && !json.recommendations.includes(versions_1.stylelintVSCodeExtension))
            json.recommendations.push(versions_1.stylelintVSCodeExtension);
        return json;
    });
}
function updateNxJson(tree) {
    var _a, _b;
    const nxJson = (0, devkit_1.readNxJson)(tree);
    if (!nxJson) {
        devkit_1.logger.warn((0, devkit_1.stripIndents) `nx.json not found. Create a nx.json file and rerun the generator with 'nx run nx-stylelint:init' to configure nx-stylelint inputs and taskrunner options.`);
        return;
    }
    const stylelintProjectConfigFilePattern = `!${(0, devkit_1.joinPathFragments)('{projectRoot}', config_file_1.stylelintConfigFilePattern)}`;
    if (nxJson.namedInputs?.['production'] &&
        !nxJson.namedInputs?.['production'].includes(stylelintProjectConfigFilePattern)) {
        nxJson.namedInputs?.['production'].push(stylelintProjectConfigFilePattern);
    }
    nxJson.targetDefaults ?? (nxJson.targetDefaults = {});
    (_a = nxJson.targetDefaults)['stylelint'] ?? (_a['stylelint'] = {});
    (_b = nxJson.targetDefaults['stylelint']).inputs ?? (_b.inputs = ['default']);
    nxJson.targetDefaults['stylelint'].cache = true;
    const rootStylelintConfigurationFile = (0, devkit_1.joinPathFragments)('{workspaceRoot}', config_file_1.stylelintConfigFilePattern);
    if (!nxJson.targetDefaults['stylelint'].inputs.includes(rootStylelintConfigurationFile))
        nxJson.targetDefaults['stylelint'].inputs.push(rootStylelintConfigurationFile);
    (0, devkit_1.updateNxJson)(tree, nxJson);
}
function createRecommendedStylelintConfiguration(tree, scss) {
    const config = {
        ignoreFiles: ['**/*'],
        overrides: [
            {
                files: ['**/*.css'],
                extends: ['stylelint-config-standard'],
                rules: {},
            },
        ],
        rules: {},
    };
    if (scss)
        config.overrides.push({
            files: ['**/*.scss'],
            extends: ['stylelint-config-standard-scss'],
            rules: {},
        });
    (0, devkit_1.writeJson)(tree, '.stylelintrc.json', config);
}
function isCompatibleRootConfig(tree) {
    const config = (0, devkit_1.readJson)(tree, '.stylelintrc.json');
    return config.ignoreFiles === '**/*' || (Array.isArray(config.ignoreFiles) && config.ignoreFiles.includes('**/*'));
}
function addScssToStylelintConfiguration(tree) {
    (0, devkit_1.updateJson)(tree, '.stylelintrc.json', (value) => {
        if (value.overrides?.find((item) => (item.files === '**/*.scss' || (Array.isArray(item.files) && item.files.includes('**/*.scss'))) &&
            (item.extends === 'stylelint-config-standard-scss' ||
                (Array.isArray(item.extends) && item.extends.includes('stylelint-config-standard-scss')))))
            return value;
        return {
            ...value,
            overrides: Array.from(new Set([
                ...(value.overrides ?? []),
                {
                    files: ['**/*.scss'],
                    extends: ['stylelint-config-standard-scss'],
                    rules: {},
                },
            ])),
        };
    });
}
//# sourceMappingURL=generator.js.map