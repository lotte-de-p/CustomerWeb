"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.lintExecutor = void 0;
const devkit_1 = require("@nx/devkit");
const node_fs_1 = require("node:fs");
const node_path_1 = require("node:path");
const formatter_1 = require("../../utils/formatter");
async function lintExecutor(options, context) {
    process.chdir(context.cwd);
    let stylelint;
    try {
        stylelint = await Promise.resolve().then(() => require('stylelint'));
    }
    catch (error) {
        devkit_1.logger.error('Unable to find Stylelint. Please ensure Stylelint is installed.');
        return { success: false };
    }
    const projectName = context.projectName || '<???>';
    if (options.configFile && !(0, node_fs_1.existsSync)(options.configFile)) {
        devkit_1.logger.error('The given stylelint config file does not exist.');
        return { success: false };
    }
    if (!options.silent)
        devkit_1.logger.info(`\nLinting Styles "${projectName}"...`);
    let resolvedFormatter;
    try {
        resolvedFormatter = await (0, formatter_1.importFormatter)(options.formatter);
    }
    catch (err) {
        devkit_1.logger.error(`Invalid Formatter. More Details: \n`);
        throw err;
    }
    const result = await stylelint.lint({
        ...options,
        files: options.lintFilePatterns,
        formatter: resolvedFormatter,
        maxWarnings: options.maxWarnings ? options.maxWarnings : undefined,
        quietDeprecationWarnings: true,
    });
    const totalWarnings = result.results
        .map((r) => r.warnings.filter((w) => w.severity === 'warning'))
        .reduce((prev, r) => prev + r.length, 0);
    if (options.outputFile) {
        const outputFilePath = (0, node_path_1.join)(context.root, options.outputFile);
        (0, node_fs_1.mkdirSync)((0, node_path_1.dirname)(outputFilePath), { recursive: true });
        (0, node_fs_1.writeFileSync)(outputFilePath, 'report' in result ? result.report : result.output);
    }
    else if (!options.silent) {
        devkit_1.logger.info('report' in result ? result.report : result.output);
    }
    if (totalWarnings > 0 && !options.silent)
        devkit_1.logger.warn('\nLint warnings found in the listed files.');
    if (result.errored && !options.silent)
        devkit_1.logger.error('\nLint errors found in the listed files.');
    if (totalWarnings === 0 && !result.errored && !options.silent)
        devkit_1.logger.info('\nAll files pass linting.');
    return {
        success: options.force ||
            (result.errored === false &&
                (options.maxWarnings === undefined || options.maxWarnings === -1 || totalWarnings <= options.maxWarnings)),
    };
}
exports.lintExecutor = lintExecutor;
exports.default = lintExecutor;
//# sourceMappingURL=executor.js.map