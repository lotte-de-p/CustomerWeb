import { Inject, Injectable, Injector, Optional, } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { DynamicComponentInjectorToken, } from '../component-injector';
import { IoEventArgumentToken } from './event-argument';
import { IoEventContextProviderToken, IoEventContextToken, } from './event-context';
import * as i0 from "@angular/core";
/**
 * @public
 */
export class IoServiceOptions {
    constructor() {
        this.trackOutputChanges = false;
    }
}
/** @nocollapse */ IoServiceOptions.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.3", ngImport: i0, type: IoServiceOptions, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ IoServiceOptions.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.1.3", ngImport: i0, type: IoServiceOptions, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.3", ngImport: i0, type: IoServiceOptions, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
/**
 * @public
 */
export class IoService {
    constructor(injector, differs, 
    // TODO: Replace ComponentFactoryResolver once new API is created
    // @see https://github.com/angular/angular/issues/44926
    // eslint-disable-next-line deprecation/deprecation
    cfr, options, compInjector, eventArgument, cdr, eventContextProvider) {
        this.injector = injector;
        this.differs = differs;
        this.cfr = cfr;
        this.options = options;
        this.compInjector = compInjector;
        this.eventArgument = eventArgument;
        this.cdr = cdr;
        this.eventContextProvider = eventContextProvider;
        this.lastComponentInst = null;
        this.lastChangedInputs = new Set();
        this.inputsDiffer = this.differs.find({}).create();
        // TODO: Replace ComponentFactory once new API is created
        // @see https://github.com/angular/angular/issues/44926
        // eslint-disable-next-line deprecation/deprecation
        this.compFactory = null;
        this.outputsShouldDisconnect$ = new Subject();
        this.inputs = {};
        this.outputs = {};
        this.outputsChanged = () => false;
        if (this.options.trackOutputChanges) {
            const outputsDiffer = this.differs.find({}).create();
            this.outputsChanged = (outputs) => !!outputsDiffer.diff(outputs);
        }
    }
    get compRef() {
        return this.compInjector.componentRef;
    }
    get componentInst() {
        return this.compRef ? this.compRef.instance : null;
    }
    get componentInstChanged() {
        if (this.lastComponentInst !== this.componentInst) {
            this.lastComponentInst = this.componentInst;
            return true;
        }
        else {
            return false;
        }
    }
    ngOnDestroy() {
        this.disconnectOutputs();
    }
    /**
     * Call update whenever inputs/outputs may or did change.
     *
     * It will detect both new and mutated changes.
     */
    update(inputs, outputs) {
        if (!this.compRef) {
            this.disconnectOutputs();
            return;
        }
        const changes = this.updateIO(inputs, outputs);
        const compChanged = this.componentInstChanged;
        const inputsChanges = this.getInputsChanges(compChanged);
        const outputsChanged = this.outputsChanged(this.outputs);
        if (inputsChanges) {
            this.updateChangedInputs(inputsChanges);
        }
        if (compChanged || inputsChanges) {
            this.updateInputs(compChanged || !this.lastChangedInputs.size);
        }
        if (compChanged || outputsChanged || changes.outputsChanged) {
            this.bindOutputs();
        }
    }
    updateIO(inputs, outputs) {
        if (!inputs) {
            inputs = {};
        }
        if (!outputs) {
            outputs = {};
        }
        const inputsChanged = this.inputs !== inputs;
        const outputsChanged = this.outputs !== outputs;
        this.inputs = inputs;
        this.outputs = outputs;
        return { inputsChanged, outputsChanged };
    }
    updateInputs(isFirstChange = false) {
        if (isFirstChange) {
            this.updateCompFactory();
        }
        const compRef = this.compRef;
        const inputs = this.inputs;
        if (!inputs || !compRef) {
            return;
        }
        const ifInputChanged = this.lastChangedInputs.size
            ? (name) => this.lastChangedInputs.has(name)
            : () => true;
        Object.keys(inputs)
            .filter(ifInputChanged)
            .forEach((name) => compRef.setInput(name, inputs[name]));
    }
    bindOutputs() {
        this.disconnectOutputs();
        const compInst = this.componentInst;
        let outputs = this.outputs;
        if (!outputs || !compInst) {
            return;
        }
        outputs = this.resolveOutputs(outputs);
        Object.keys(outputs)
            .filter((p) => compInst[p])
            .forEach((p) => compInst[p]
            .pipe(takeUntil(this.outputsShouldDisconnect$))
            .subscribe((event) => {
            this.cdr.markForCheck();
            return outputs[p](event);
        }));
    }
    disconnectOutputs() {
        this.outputsShouldDisconnect$.next();
    }
    getInputsChanges(isCompChanged) {
        if (isCompChanged) {
            this.inputsDiffer.diff({});
        }
        return this.inputsDiffer.diff(this.inputs);
    }
    updateChangedInputs(differ) {
        this.lastChangedInputs.clear();
        const addRecordKeyToSet = (record) => this.lastChangedInputs.add(record.key);
        differ.forEachAddedItem(addRecordKeyToSet);
        differ.forEachChangedItem(addRecordKeyToSet);
        differ.forEachRemovedItem(addRecordKeyToSet);
    }
    // TODO: Replace ComponentFactory once new API is created
    // @see https://github.com/angular/angular/issues/44926
    // eslint-disable-next-line deprecation/deprecation
    resolveCompFactory() {
        if (!this.compRef) {
            return null;
        }
        try {
            try {
                return this.cfr.resolveComponentFactory(this.compRef.componentType);
            }
            catch (e) {
                // Fallback if componentType does not exist (happens on NgComponentOutlet)
                return this.cfr.resolveComponentFactory(this.compRef.instance.constructor);
            }
        }
        catch (e) {
            // Factory not available - bailout
            return null;
        }
    }
    updateCompFactory() {
        this.compFactory = this.resolveCompFactory();
    }
    resolveOutputs(outputs) {
        this.updateOutputsEventContext();
        outputs = this.processOutputs(outputs);
        if (!this.compFactory) {
            return outputs;
        }
        return this.remapIO(outputs, this.compFactory.outputs);
    }
    updateOutputsEventContext() {
        if (this.eventContextProvider) {
            // Resolve custom context from local provider
            const eventContextInjector = Injector.create({
                name: 'EventContext',
                parent: this.injector,
                providers: [this.eventContextProvider],
            });
            this.outputsEventContext = eventContextInjector.get(IoEventContextToken);
        }
        else {
            // Try to get global context
            this.outputsEventContext = this.injector.get(IoEventContextToken, null);
        }
    }
    processOutputs(outputs) {
        const processedOutputs = {};
        Object.keys(outputs).forEach((key) => {
            const outputExpr = outputs[key];
            let outputHandler;
            if (typeof outputExpr === 'function') {
                outputHandler = outputExpr;
            }
            else {
                outputHandler = outputExpr && this.processOutputArgs(outputExpr);
            }
            if (this.outputsEventContext && outputHandler) {
                outputHandler = outputHandler.bind(this.outputsEventContext);
            }
            processedOutputs[key] = outputHandler;
        });
        return processedOutputs;
    }
    processOutputArgs(output) {
        const eventArgument = this.eventArgument;
        const args = 'args' in output ? output.args || [] : [eventArgument];
        const eventIdx = args.indexOf(eventArgument);
        const handler = output.handler;
        // When there is no event argument - use just arguments
        if (eventIdx === -1) {
            return function () {
                return handler.apply(this, args);
            };
        }
        return function (event) {
            const argsWithEvent = [...args];
            argsWithEvent[eventIdx] = event;
            return handler.apply(this, argsWithEvent);
        };
    }
    remapIO(io, mapping) {
        const newIO = {};
        Object.keys(io).forEach((key) => {
            const newKey = this.findPropByTplInMapping(key, mapping) || key;
            newIO[newKey] = io[key];
        });
        return newIO;
    }
    findPropByTplInMapping(tplName, mapping) {
        for (const map of mapping) {
            if (map.templateName === tplName) {
                return map.propName;
            }
        }
        return null;
    }
}
/** @nocollapse */ IoService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.3", ngImport: i0, type: IoService, deps: [{ token: i0.Injector }, { token: i0.KeyValueDiffers }, { token: i0.ComponentFactoryResolver }, { token: IoServiceOptions }, { token: DynamicComponentInjectorToken }, { token: IoEventArgumentToken }, { token: i0.ChangeDetectorRef }, { token: IoEventContextProviderToken, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ IoService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.1.3", ngImport: i0, type: IoService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.3", ngImport: i0, type: IoService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i0.KeyValueDiffers }, { type: i0.ComponentFactoryResolver }, { type: IoServiceOptions }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DynamicComponentInjectorToken]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [IoEventArgumentToken]
                }] }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [IoEventContextProviderToken]
                }, {
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,